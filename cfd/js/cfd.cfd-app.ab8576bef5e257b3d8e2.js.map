{"version":3,"file":"cfd/js/cfd.cfd-app.ab8576bef5e257b3d8e2.js","mappings":"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","sources":["webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/index.tsx","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-derived.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-financial.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-cfds.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-derivez.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-swap-free.svg","webpack://@deriv/cfd/./src/Components/cfd-account-copy.tsx","webpack://@deriv/cfd/./src/Components/success-dialog.jsx","webpack://@deriv/cfd/./src/Containers/cfd-change-password-confirmation.tsx","webpack://@deriv/cfd/./src/Containers/cfd-dbvi-onboarding.tsx","webpack://@deriv/cfd/./src/Components/cfd-personal-details-form.tsx","webpack://@deriv/cfd/./src/Components/cfd-poa.tsx","webpack://@deriv/cfd/./src/Components/cfd-poi.tsx","webpack://@deriv/cfd/./src/Containers/cfd-personal-details-container.tsx","webpack://@deriv/cfd/./src/Containers/cfd-financial-stp-real-account-signup.tsx","webpack://@deriv/cfd/./src/Containers/trading-password-manager.tsx","webpack://@deriv/cfd/./src/Containers/investor-password-manager.tsx","webpack://@deriv/cfd/./src/Containers/cfd-password-manager-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-password-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-reset-password-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-server-error-dialog.tsx","webpack://@deriv/cfd/./src/Containers/cfd-top-up-demo-modal.tsx","webpack://@deriv/cfd/./src/Containers/compare-accounts-content.tsx","webpack://@deriv/cfd/./src/Constants/cfd_compare_account_content.ts","webpack://@deriv/cfd/./src/Containers/mt5-compare-table-content.tsx","webpack://@deriv/cfd/./src/Components/cfd-dxtrade-compare-content.tsx","webpack://@deriv/cfd/./src/Containers/compare-accounts-modal.tsx","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-verification-contents.ts","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-back.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-clickable-description.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-title-indicator.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-section.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-front.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card.tsx","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-svg-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-bvi-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-vanuatu-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-labuan-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction_maltainvest_contents.ts","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-content.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-checkbox.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-foot-note.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-content-wrapper.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal.tsx","webpack://@deriv/cfd/./src/Containers/dmt5-trade-modal.tsx","webpack://@deriv/cfd/./src/Containers/mt5-trade-modal.tsx","webpack://@deriv/cfd/./src/Helpers/config.tsx","webpack://@deriv/cfd/./src/Components/specbox.tsx","webpack://@deriv/cfd/./src/Components/passwordbox.tsx","webpack://@deriv/cfd/./src/Containers/trade-modal.tsx","webpack://@deriv/cfd/./src/Helpers/constants.ts","webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/cfd-config.ts","webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/useCfdStores.tsx","webpack://@deriv/cfd/./src/Utils/Validator/errors.js","webpack://@deriv/cfd/./src/Utils/Validator/validator.js","webpack://@deriv/cfd/./src/Utils/Validator/index.js","webpack://@deriv/cfd/./src/Stores/base-store.js","webpack://@deriv/cfd/./src/Stores/Modules/CFD/cfd-store.js","webpack://@deriv/cfd/./src/_common/utility.js","webpack://@deriv/cfd/./src/Containers/missing-real-account.tsx","webpack://@deriv/cfd/./src/templates/_common/components/loading.tsx","webpack://@deriv/cfd/./src/Containers/loading-cfd-real-account-display.tsx","webpack://@deriv/cfd/./src/Constants/cfd-shared-strings.js","webpack://@deriv/cfd/./src/Components/cfd-download-container.tsx","webpack://@deriv/cfd/./src/Containers/switch-to-real-account.tsx","webpack://@deriv/cfd/./src/Components/cfd-account-card.tsx","webpack://@deriv/cfd/./src/Constants/cfd-specifications.ts","webpack://@deriv/cfd/./src/Components/cfd-dxtrade-demo-account-display.tsx","webpack://@deriv/cfd/./src/Components/cfd-mt5-demo-account-display.tsx","webpack://@deriv/cfd/./src/Components/cfd-real-account-display.tsx","webpack://@deriv/cfd/./src/Containers/cfd-dashboard.tsx","webpack://@deriv/cfd/./src/Containers/index.js","webpack://@deriv/cfd/./src/Constants/routes-config.js","webpack://@deriv/cfd/./src/Components/Routes/helpers.js","webpack://@deriv/cfd/./src/Components/Routes/binary-link.jsx","webpack://@deriv/cfd/./src/Components/Routes/route-with-sub-routes.jsx","webpack://@deriv/cfd/./src/Components/Routes/binary-routes.jsx","webpack://@deriv/cfd/./src/Components/Routes/index.js","webpack://@deriv/cfd/./src/Components/Errors/error-component.jsx","webpack://@deriv/cfd/./src/Containers/routes.jsx","webpack://@deriv/cfd/./src/Stores/Modules/index.js","webpack://@deriv/cfd/./src/Stores/index.js","webpack://@deriv/cfd/./src/_common/base/server_time.js","webpack://@deriv/cfd/./src/init-store.js","webpack://@deriv/cfd/./src/cfd-providers.tsx","webpack://@deriv/cfd/./src/app.tsx","webpack://@deriv/cfd/../stores/src/storeContext.ts","webpack://@deriv/cfd/../api/src/APIProvider.tsx","webpack://@deriv/cfd/../api/src/useSubscription.ts","webpack://@deriv/cfd/../stores/src/useStore.ts","webpack://@deriv/cfd/../stores/src/providers/ExchangeRatesProvider.tsx","webpack://@deriv/cfd/../stores/src/stores/BaseStore.ts","webpack://@deriv/cfd/../stores/src/stores/ExchangeRatesStore.ts","webpack://@deriv/cfd/../stores/src/stores/FeatureFlagsStore.ts","webpack://@deriv/cfd/../stores/src/storeProvider.tsx"],"sourcesContent":["import React from 'react';\nimport Derived from './ic-appstore-derived.svg';\nimport Financial from './ic-appstore-financial.svg';\nimport CFDs from './ic-appstore-cfds.svg';\nimport DerivEz from './ic-appstore-derivez.svg';\nimport SwapFree from './ic-appstore-swap-free.svg';\n\nexport interface IconProps<T> {\n    icon: T;\n    className?: string;\n    size?: number;\n    onClick?: () => void;\n}\n\nexport const PlatformIcons = {\n    Derived,\n    Financial,\n    CFDs,\n    DerivEz,\n    SwapFree,\n};\n\nconst TradingPlatformIcon = ({ icon, className, size, onClick }: IconProps<keyof typeof PlatformIcons>) => {\n    const PlatformIcon = PlatformIcons[icon] as React.ElementType;\n\n    return PlatformIcon ? (\n        <PlatformIcon className={className} style={{ width: size, height: size }} onClick={onClick} />\n    ) : null;\n};\n\nexport default TradingPlatformIcon;\n","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#2A3052\" /><path d=\"M26.7 23H0V6.18l29.91-4.73c.22.2.43.4.62.62L26.7 23z\" fill=\"#0364B9\" /><path d=\"M0 6a6 6 0 016-6h20c1.5 0 2.86.55 3.92 1.45L0 6.17V6zm26.7 17l3.83-20.93A5.97 5.97 0 0132 6v17h-5.3z\" fill=\"#0A559E\" /><path d=\"M7.34 9.68c.15.27.31.6.5.99.19.38.38.8.58 1.26.21.45.41.9.61 1.38l.57 1.33.56-1.33a78.87 78.87 0 011.19-2.64l.5-.99h1.7a52.27 52.27 0 01.4 4l.15 2.22.12 2.1h-1.83c-.02-.8-.05-1.69-.1-2.64-.03-.95-.1-1.91-.17-2.88a517.56 517.56 0 01-1.01 2.34 108.94 108.94 0 01-.9 2.12h-1.3a118.46 118.46 0 00-.92-2.12l-.52-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.71 18H4.9L5 15.9l.15-2.22a47.67 47.67 0 01.4-4h1.8zm14.02 0v1.6h-2.51V18h-1.88v-6.72h-2.5v-1.6h6.89zm3.96 5.87a1.18 1.18 0 00-.16-.61c-.1-.18-.28-.34-.54-.46a3.8 3.8 0 00-1.03-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.13.15 6.41 6.41 0 01-.68-.1 7.3 7.3 0 01-.59-.14 2.3 2.3 0 01-.4-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32.24-.22.37-.48.37-.78zM10.87 28.81l.15.02h.21c.47 0 .82-.12 1.04-.36.23-.23.34-.56.34-.98 0-.43-.1-.76-.32-.99-.22-.22-.56-.33-1.03-.33a3.37 3.37 0 00-.39.02v2.62zm2.7-1.32c0 .36-.05.68-.16.95a1.73 1.73 0 01-.48.66 2 2 0 01-.75.4 3.5 3.5 0 01-1 .13c-.16 0-.36 0-.58-.02a4.51 4.51 0 01-.66-.09v-4.05a9.16 9.16 0 011.28-.1c.35 0 .67.04.96.12.3.08.54.2.75.38.2.17.37.39.48.66.11.27.17.59.17.96zm2-2.12c.63 0 1.1.11 1.44.34.33.22.5.56.5 1.03 0 .29-.07.53-.2.71-.14.18-.33.32-.58.43a5.31 5.31 0 01.53.78 10.05 10.05 0 01.5.92h-1.05a49.79 49.79 0 00-.23-.42 6.82 6.82 0 00-.24-.4 7.53 7.53 0 00-.24-.38 3.8 3.8 0 00-.24-.32h-.47v1.52h-.93v-4.1a5.31 5.31 0 01.63-.09 8.2 8.2 0 01.59-.02zm.06.8a2.63 2.63 0 00-.34.02v1.12h.27c.35 0 .6-.04.75-.13.16-.09.23-.24.23-.45 0-.2-.07-.35-.23-.43a1.38 1.38 0 00-.68-.13zm3.88 3.4a31.27 31.27 0 01-.94-2.2 58.21 58.21 0 01-.72-1.95h1.03l.26.78.3.83.28.79.26.65a17.1 17.1 0 00.54-1.44 96.8 96.8 0 00.55-1.61h1l-.32.9a37.71 37.71 0 01-.86 2.17l-.48 1.09h-.9z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#71BD0E\" /><path d=\"M26.7 23H0V6.18l29.91-4.73c.22.2.43.4.62.62L26.7 23z\" fill=\"#0364B9\" /><path d=\"M0 6a6 6 0 016-6h20c1.5 0 2.86.55 3.92 1.45L0 6.17V6zm26.7 17l3.83-20.93A5.97 5.97 0 0132 6v17h-5.3z\" fill=\"#0A559E\" /><path d=\"M7.34 9.68c.15.27.31.6.5.99.19.38.38.8.58 1.26.21.45.41.9.61 1.38l.57 1.33.56-1.33a78.87 78.87 0 011.19-2.64l.5-.99h1.7a52.27 52.27 0 01.4 4l.15 2.22.12 2.1h-1.83c-.02-.8-.05-1.69-.1-2.64-.03-.95-.1-1.91-.17-2.88a517.56 517.56 0 01-1.01 2.34 108.94 108.94 0 01-.9 2.12h-1.3a118.46 118.46 0 00-.92-2.12l-.52-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.71 18H4.9L5 15.9l.15-2.22a47.67 47.67 0 01.4-4h1.8zm14.02 0v1.6h-2.51V18h-1.88v-6.72h-2.5v-1.6h6.89zm3.96 5.87a1.18 1.18 0 00-.16-.61c-.1-.18-.28-.34-.54-.46a3.8 3.8 0 00-1.03-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.13.15 6.41 6.41 0 01-.68-.1 7.3 7.3 0 01-.59-.14 2.3 2.3 0 01-.4-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32.24-.22.37-.48.37-.78zM11.54 29.58v-4.16h2.78v.79h-1.84v.87h1.64v.78h-1.64v1.72h-.94zm3.45-4.16h.93v4.16H15v-4.16zm4.68 4.16a20.92 20.92 0 00-.87-1.41 14.33 14.33 0 00-1-1.32v2.73h-.92v-4.16h.77a7.33 7.33 0 01.92 1.1 15.66 15.66 0 01.96 1.35v-2.45h.93v4.16h-.79z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#FF8C00\" /><path d=\"M26.7 23H0V6.18l29.91-4.73c.22.2.43.4.62.62L26.7 23z\" fill=\"#0364B9\" /><path d=\"M0 6a6 6 0 016-6h20c1.5 0 2.86.55 3.92 1.45L0 6.17V6zm26.7 17l3.83-20.93A5.97 5.97 0 0132 6v17h-5.3z\" fill=\"#0A559E\" /><path d=\"M7.35 9.68l.49.99a44.57 44.57 0 011.2 2.64l.56 1.33.57-1.33a78.87 78.87 0 011.18-2.64l.5-.99h1.71a52.27 52.27 0 01.4 4l.14 2.22.12 2.1H12.4l-.1-2.64c-.04-.95-.1-1.91-.18-2.88a517.56 517.56 0 01-1 2.34 108.94 108.94 0 01-.9 2.12H8.9a118.46 118.46 0 00-.92-2.12l-.51-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.72 18H4.9l.1-2.1.15-2.22.18-2.14c.07-.68.15-1.3.23-1.86h1.79zm14 0v1.6h-2.5V18h-1.87v-6.72h-2.51v-1.6h6.89zm3.97 5.87a1.18 1.18 0 00-.15-.61c-.1-.18-.29-.34-.54-.46a3.8 3.8 0 00-1.04-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.12.15 6.41 6.41 0 01-.69-.1 7.3 7.3 0 01-.58-.14 2.3 2.3 0 01-.41-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32s.37-.48.37-.78zm-14.3 14.12c-.68 0-1.2-.19-1.55-.57-.36-.37-.53-.9-.53-1.6 0-.34.05-.65.16-.91a1.84 1.84 0 011.12-1.11 2.42 2.42 0 011.32-.1c.15.02.27.05.38.08a1.68 1.68 0 01.43.19l-.27.76a2.25 2.25 0 00-.45-.18 2.1 2.1 0 00-.58-.07c-.14 0-.29.02-.43.07a.97.97 0 00-.36.24c-.1.1-.19.24-.25.4a1.72 1.72 0 00-.1.62c0 .19.02.37.06.54.04.16.11.3.2.42.1.12.22.22.38.29.15.07.33.1.55.1a2.52 2.52 0 00.65-.08 1.77 1.77 0 00.22-.07l.18-.08.26.75a2.2 2.2 0 01-.56.21c-.24.07-.52.1-.84.1zm1.99-.09v-4.15h2.78v.78h-1.84v.87h1.64v.79h-1.65v1.72h-.93zm4.38-.76l.15.02h.21c.47 0 .81-.12 1.04-.36.23-.23.34-.56.34-.98 0-.43-.1-.76-.32-.99-.22-.22-.56-.33-1.03-.33a3.37 3.37 0 00-.39.02v2.62zm2.7-1.32c0 .36-.05.68-.16.95a1.73 1.73 0 01-.48.66 2 2 0 01-.75.4 3.5 3.5 0 01-1 .13c-.17 0-.36 0-.59-.02a4.51 4.51 0 01-.66-.09v-4.05a9.16 9.16 0 011.28-.1c.36 0 .68.04.97.12.29.08.54.2.75.38.2.17.37.39.48.66.11.27.17.59.17.96zm1.63 1.44a.9.9 0 00.35-.04c.07-.04.1-.1.1-.2 0-.06-.04-.12-.13-.18a2.31 2.31 0 00-.4-.18 4.45 4.45 0 01-.38-.16 1.18 1.18 0 01-.3-.2.84.84 0 01-.18-.28 1.03 1.03 0 01-.06-.4c0-.3.1-.52.33-.7.22-.17.52-.25.9-.25a2.75 2.75 0 01.97.16l-.15.7a3.2 3.2 0 00-.34-.1 1.8 1.8 0 00-.41-.04c-.28 0-.42.07-.42.23 0 .04 0 .07.02.1a.23.23 0 00.07.08 1.77 1.77 0 00.38.18c.2.07.36.14.49.22.13.06.23.14.3.22.07.08.13.17.15.27.04.1.05.22.05.35a.8.8 0 01-.35.7c-.23.17-.56.25-1 .25a2.9 2.9 0 01-.7-.07 2.85 2.85 0 01-.38-.12l.15-.73a2.41 2.41 0 00.94.2z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 32 32\" {...props}><path fill=\"#FF444F\" d=\"M0 6a6 6 0 016-6h20a6 6 0 016 6v20a6 6 0 01-6 6H6a6 6 0 01-6-6V6z\" /><path fill=\"#E12E3A\" d=\"M6 0a6 6 0 00-6 6v.17l29.91-4.72A5.98 5.98 0 0026 0H6zm24.53 2.07L25.04 32H26a6 6 0 006-6V6c0-1.5-.55-2.88-1.47-3.93z\" /><path fill=\"#fff\" d=\"M8.53 20.85v-9.7h6.55v1.83h-4.37v1.9h3.88v1.8h-3.88v2.34h4.7v1.83H8.52zm14.79-8.19a21.5 21.5 0 00-1.07 1.2 38.6 38.6 0 00-1.27 1.6 55.39 55.39 0 00-1.3 1.8c-.43.6-.82 1.2-1.15 1.76h4.94v1.83h-7.63v-1.3c.26-.48.58-1 .95-1.58.39-.6.78-1.18 1.2-1.77a43.21 43.21 0 011.24-1.72c.43-.56.82-1.06 1.19-1.5h-4.36v-1.83h7.26v1.51z\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M26 0H6a6 6 0 00-6 6v17.5h32V6a6 6 0 00-6-6z\" fill=\"#0364B9\" /><path d=\"M6 0a6 6 0 00-6 6v.17l29.91-4.72A5.98 5.98 0 0026 0H6zm26 6c0-1.5-.55-2.88-1.47-3.93L26.6 23.5H32V6z\" fill=\"#0A559E\" /><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#0CC\" /><path d=\"M7.35 9.68l.49.99a44.57 44.57 0 011.2 2.64l.56 1.33.57-1.33a78.87 78.87 0 011.18-2.64l.5-.99h1.71a52.27 52.27 0 01.4 4l.14 2.22.12 2.1H12.4l-.1-2.64c-.04-.95-.1-1.91-.18-2.88a517.56 517.56 0 01-1 2.34 108.94 108.94 0 01-.9 2.12H8.9a118.46 118.46 0 00-.92-2.12l-.51-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.72 18H4.9l.1-2.1.15-2.22.18-2.14c.07-.68.15-1.3.23-1.86h1.79zm14 0v1.6h-2.5V18h-1.87v-6.72h-2.51v-1.6h6.89zm3.97 5.87a1.18 1.18 0 00-.15-.61c-.1-.18-.29-.34-.54-.46a3.8 3.8 0 00-1.04-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.12.15 6.41 6.41 0 01-.69-.1 7.3 7.3 0 01-.58-.14 2.3 2.3 0 01-.41-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32s.37-.48.37-.78zM11.31 28.87c.13 0 .24 0 .32-.03a.69.69 0 00.21-.09.32.32 0 00.11-.14.48.48 0 00.03-.17c0-.14-.06-.25-.19-.34-.13-.09-.35-.19-.66-.3a5.76 5.76 0 01-.4-.15 1.63 1.63 0 01-.38-.24 1.17 1.17 0 01-.26-.34 1.09 1.09 0 01-.1-.5 1.11 1.11 0 01.41-.91c.14-.1.3-.18.48-.24.2-.06.4-.09.64-.09a2.59 2.59 0 011.23.29l-.27.74a2.33 2.33 0 00-.39-.16 1.58 1.58 0 00-.51-.07.93.93 0 00-.49.1c-.1.05-.14.15-.14.28 0 .07.02.14.05.19.04.05.09.1.15.14l.23.12.29.1c.22.08.4.16.56.24.16.07.3.16.4.27a.97.97 0 01.24.36c.05.14.08.31.08.51 0 .4-.14.7-.41.91-.27.21-.68.32-1.23.32-.18 0-.35-.01-.5-.04a2.48 2.48 0 01-.69-.18 2.41 2.41 0 01-.2-.1l.26-.74c.13.06.28.13.46.18a2.5 2.5 0 00.67.08zm5.09-3l.15.56.2.63.2.66c.06.22.13.43.2.62a18.97 18.97 0 00.3-1.41 62.02 62.02 0 00.28-1.5h.97a40.98 40.98 0 01-.49 2.11c-.18.72-.37 1.4-.59 2.04h-.85a28.26 28.26 0 01-.41-1.2l-.4-1.27-.38 1.27c-.13.42-.26.82-.4 1.2h-.86a32 32 0 01-.6-2.04c-.17-.71-.33-1.42-.47-2.11h1.01a43.02 43.02 0 00.28 1.5 58.65 58.65 0 00.33 1.4 12.62 12.62 0 00.4-1.28l.18-.63.15-.55h.8zm2.9 3.71v-4.15h2.78v.78h-1.84v.87h1.64v.79h-1.64v1.72h-.94z\" fill=\"#fff\" /></svg>);","import React from 'react';\nimport { Clipboard } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { TCFDAccountCopy } from './props.types';\n\nconst CFDAccountCopy = ({ text, className }: TCFDAccountCopy) => {\n    return (\n        <div className={className} data-testid='cfd_account_copy_main_div'>\n            <Clipboard\n                text_copy={text}\n                info_message={isMobile() ? '' : localize('copy')}\n                success_message={localize('copied!')}\n                popoverAlignment={isMobile() ? 'left' : 'bottom'}\n            />\n        </div>\n    );\n};\n\nexport { CFDAccountCopy };\n","import PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Button, Icon, Modal, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\n\nconst Checkmark = ({ className }) => (\n    <Icon className={className} icon='IcCheckmarkCircle' custom_color='var(--status-success)' size={24} />\n);\n\nconst SuccessDialog = ({\n    classNameMessage = '',\n    has_cancel,\n    has_submit,\n    icon,\n    message,\n    onCancel,\n    onSubmit,\n    heading,\n    icon_size,\n    text_submit,\n    text_cancel,\n    is_open,\n    toggleModal,\n    title,\n    has_close_icon,\n    width = '',\n    is_medium_button,\n}) => {\n    return (\n        <Modal\n            className='cfd-success-dialog'\n            is_open={is_open}\n            toggleModal={toggleModal}\n            has_close_icon={has_close_icon}\n            small={!title}\n            title={title}\n            width={width}\n        >\n            <Modal.Body>\n                <div\n                    className={classNames('success-change__icon-area', {\n                        'success-change__icon-area--large': icon_size === 'large',\n                        'success-change__icon-area--xlarge': icon_size === 'xlarge',\n                    })}\n                >\n                    {icon}\n                    <Checkmark className='bottom-right-overlay' />\n                </div>\n                {!heading && (\n                    <Text as='h2' weight='bold' size='s' className='dc-modal-header__title'>\n                        <Localize i18n_default_text='Success!' />\n                    </Text>\n                )}\n                {heading && heading}\n                {React.isValidElement(message) && message}\n                {!React.isValidElement(message) && <p className={classNameMessage}>{message}</p>}\n            </Modal.Body>\n            <Modal.Footer>\n                {has_cancel && (\n                    <Button\n                        onClick={onCancel}\n                        has_effect\n                        text={text_cancel || localize('Maybe later')}\n                        secondary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n                {has_submit && (\n                    <Button\n                        has_effect\n                        onClick={onSubmit}\n                        text={text_submit}\n                        primary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nSuccessDialog.defaultProps = {\n    icon_size: 'large',\n    has_cancel: false,\n    has_submit: true,\n};\n\nSuccessDialog.propTypes = {\n    classNameMessage: PropTypes.string,\n    has_cancel: PropTypes.bool,\n    has_close_icon: PropTypes.bool,\n    has_submit: PropTypes.bool,\n    heading: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    icon: PropTypes.object,\n    icon_size: PropTypes.string,\n    icon_type: PropTypes.string,\n    is_medium_button: PropTypes.bool,\n    is_open: PropTypes.bool,\n    message: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    onCancel: PropTypes.func,\n    onSubmit: PropTypes.func,\n    text_cancel: PropTypes.string,\n    text_submit: PropTypes.string,\n    title: PropTypes.string,\n    toggleModal: PropTypes.func,\n    width: PropTypes.string,\n};\n\nexport default SuccessDialog;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Formik } from 'formik';\nimport { Text, Icon, FormSubmitButton } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { CFD_PLATFORMS, getCFDPlatformLabel } from '@deriv/shared';\nimport { TCFDChangePasswordConfirmationProps } from './props.types';\n\nconst ChangePasswordConfirmation = ({\n    confirm_label,\n    className,\n    platform,\n    onConfirm,\n    onCancel,\n    context,\n}: TCFDChangePasswordConfirmationProps) => (\n    <Formik\n        initialValues={{\n            password: '',\n        }}\n        onSubmit={onConfirm}\n    >\n        {({ isSubmitting, handleSubmit }) => (\n            <form onSubmit={handleSubmit} data-testid='dt_cfd_change_password_form'>\n                <div\n                    className={classNames('cfd-change-password-confirmation__wrapper', {\n                        [`${className}-wrapper`]: className,\n                    })}\n                >\n                    <div className={classNames('cfd-change-password-confirmation', className)}>\n                        <Icon\n                            className='cfd-change-password__icon'\n                            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n                            width='122'\n                            height='108'\n                        />\n                        <Text as='p' align='center' size='s' weight='bold'>\n                            <Localize\n                                i18n_default_text='Confirm to change your {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text\n                            className='cfd-change-password-confirmation__description'\n                            as='p'\n                            align='center'\n                            color='loss-danger'\n                            size='xs'\n                        >\n                            <Localize\n                                i18n_default_text='This will change the password to all of your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <FormSubmitButton\n                            is_center={true}\n                            label={confirm_label || localize('Create')}\n                            cancel_label={localize('Cancel')}\n                            is_loading={isSubmitting}\n                            has_cancel={true}\n                            onCancel={onCancel}\n                            context={context}\n                        />\n                    </div>\n                </div>\n            </form>\n        )}\n    </Formik>\n);\n\nexport default ChangePasswordConfirmation;\n","import React from 'react';\nimport {\n    Button,\n    DesktopWrapper,\n    Icon,\n    Loading,\n    MobileDialog,\n    MobileWrapper,\n    Modal,\n    Text,\n    UILoader,\n} from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { PoiPoaDocsSubmitted } from '@deriv/account';\nimport { getAuthenticationStatusInfo, isMobile, WS, Jurisdiction } from '@deriv/shared';\nimport { AccountStatusResponse } from '@deriv/api-types';\nimport CFDFinancialStpRealAccountSignup from './cfd-financial-stp-real-account-signup';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst SwitchToRealAccountMessage = ({ onClickOk }: { onClickOk: () => void }) => (\n    <div className='da-icon-with-message'>\n        <Icon icon={'IcPoaLock'} size={128} />\n        <Text className='da-icon-with-message__text' as='p' size={isMobile() ? 'xs' : 's'} weight='bold'>\n            {localize('Switch to your real account to submit your documents')}\n        </Text>\n        <Button\n            has_effect\n            text={localize('Ok')}\n            onClick={() => {\n                onClickOk();\n            }}\n            className='da-icon-with-message__button'\n            primary\n        />\n    </div>\n);\n\nconst CFDDbviOnboarding = observer(() => {\n    const { client, ui } = useStore();\n\n    const { account_status, fetchAccountSettings, is_virtual, updateAccountStatus, updateMT5Status } = client;\n    const { disableApp, enableApp } = ui;\n\n    const {\n        has_created_account_for_selected_jurisdiction,\n        has_submitted_cfd_personal_details,\n        is_cfd_verification_modal_visible,\n        jurisdiction_selected_shortcode,\n        enableCFDPasswordModal,\n        toggleCFDVerificationModal,\n    } = useCfdStore();\n\n    const [showSubmittedModal, setShowSubmittedModal] = React.useState(true);\n    const [is_loading, setIsLoading] = React.useState(false);\n\n    const getAccountStatusFromAPI = () => {\n        WS.authorized.getAccountStatus().then((response: AccountStatusResponse) => {\n            const { get_account_status } = response;\n\n            if (get_account_status?.authentication) {\n                const { poi_acknowledged_for_vanuatu_maltainvest, poi_acknowledged_for_bvi_labuan, poa_acknowledged } =\n                    getAuthenticationStatusInfo(get_account_status);\n                if (jurisdiction_selected_shortcode === Jurisdiction.VANUATU) {\n                    setShowSubmittedModal(\n                        poi_acknowledged_for_vanuatu_maltainvest &&\n                            poa_acknowledged &&\n                            has_submitted_cfd_personal_details\n                    );\n                } else if (jurisdiction_selected_shortcode === Jurisdiction.MALTA_INVEST) {\n                    setShowSubmittedModal(poi_acknowledged_for_vanuatu_maltainvest && poa_acknowledged);\n                } else\n                    setShowSubmittedModal(\n                        poi_acknowledged_for_bvi_labuan && poa_acknowledged && has_submitted_cfd_personal_details\n                    );\n            }\n\n            setIsLoading(false);\n        });\n        setIsLoading(false);\n    };\n\n    React.useEffect(() => {\n        if (is_cfd_verification_modal_visible) {\n            setIsLoading(true);\n            getAccountStatusFromAPI();\n            fetchAccountSettings();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [is_cfd_verification_modal_visible]);\n\n    const getModalContent = () => {\n        if (is_loading) {\n            return <Loading is_fullscreen={false} />;\n        } else if (is_virtual) {\n            return <SwitchToRealAccountMessage onClickOk={toggleCFDVerificationModal} />;\n        }\n        return showSubmittedModal ? (\n            <PoiPoaDocsSubmitted\n                onClickOK={toggleCFDVerificationModal}\n                updateAccountStatus={updateAccountStatus}\n                account_status={account_status}\n                jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                has_created_account_for_selected_jurisdiction={has_created_account_for_selected_jurisdiction}\n                openPasswordModal={enableCFDPasswordModal}\n            />\n        ) : (\n            <CFDFinancialStpRealAccountSignup\n                onFinish={() => {\n                    updateMT5Status();\n                    if (has_created_account_for_selected_jurisdiction) {\n                        setShowSubmittedModal(true);\n                    } else {\n                        toggleCFDVerificationModal();\n                        enableCFDPasswordModal();\n                    }\n                }}\n            />\n        );\n    };\n\n    const getModalTitle = () =>\n        has_created_account_for_selected_jurisdiction\n            ? localize('Submit your proof of identity and address')\n            : localize('Add a real MT5 account');\n\n    return (\n        <React.Suspense fallback={<UILoader />}>\n            <DesktopWrapper>\n                <Modal\n                    className='cfd-financial-stp-modal'\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    is_open={is_cfd_verification_modal_visible}\n                    title={getModalTitle()}\n                    toggleModal={toggleCFDVerificationModal}\n                    height='700px'\n                    width='996px'\n                    onMount={() => getAccountStatusFromAPI()}\n                    exit_classname='cfd-modal--custom-exit'\n                >\n                    {getModalContent()}\n                </Modal>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <MobileDialog\n                    portal_element_id='deriv_app'\n                    title={getModalTitle()}\n                    wrapper_classname='cfd-financial-stp-modal'\n                    visible={is_cfd_verification_modal_visible}\n                    onClose={toggleCFDVerificationModal}\n                >\n                    {getModalContent()}\n                </MobileDialog>\n            </MobileWrapper>\n        </React.Suspense>\n    );\n});\n\nexport default CFDDbviOnboarding;\n","import { Field, FieldProps, Formik, FormikHelpers as FormikActions, FormikProps } from 'formik';\nimport React from 'react';\nimport { LandingCompany, ResidenceList } from '@deriv/api-types';\nimport {\n    Autocomplete,\n    AutoHeightWrapper,\n    DesktopWrapper,\n    Div100vhContainer,\n    Dropdown,\n    FormSubmitButton,\n    FormSubmitErrorMessage,\n    Input,\n    Loading,\n    MobileWrapper,\n    Modal,\n    SelectNative,\n    Text,\n    ThemedScrollbars,\n} from '@deriv/components';\nimport { isDeepEqual, isDesktop, isMobile } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\ntype TCFDPersonalDetailsFormProps = {\n    changeable_fields?: string[];\n    form_error?: string;\n    index: number;\n    is_loading: boolean;\n    landing_company: LandingCompany;\n    onSubmit: TOnSubmit;\n    residence_list: ResidenceList;\n    value: TFormValues;\n};\n\ntype TValidatePersonalDetailsParams = {\n    values: TFormValues;\n    residence_list: ResidenceList;\n    account_opening_reason: TAccountOpeningReasonList;\n    is_tin_required: boolean;\n};\n\ntype TFindDefaultValuesInResidenceList = (params: {\n    residence_list: ResidenceList;\n    citizen_text: string;\n    tax_residence_text: string;\n    place_of_birth_text?: string;\n}) => {\n    citizen?: ResidenceList[0];\n    place_of_birth?: ResidenceList[0];\n    tax_residence?: ResidenceList[0];\n};\n\ntype TCFDInputFieldProps = {\n    id?: string;\n    value?: string;\n    name: string;\n    maxLength?: number;\n    label: string;\n    optional?: boolean;\n    required?: boolean;\n    placeholder: string;\n    disabled?: boolean;\n    onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\n};\n\ntype TFormValues = { [key: string]: string };\n\ntype TOnSubmit = (\n    index: number,\n    value: TFormValues,\n    setSubmitting: (isSubmitting: boolean) => void,\n    is_dirty?: boolean\n) => void;\n\ntype TSubmitForm = (\n    values: TFormValues,\n    actions: FormikActions<TFormValues>,\n    idx: number,\n    onSubmitFn: TOnSubmit,\n    is_dirty: boolean,\n    residence_list: ResidenceList\n) => void;\n\ntype TAccountOpeningReasonList = {\n    text: string;\n    value: string;\n}[];\n\nconst getAccountOpeningReasonList = (): TAccountOpeningReasonList => [\n    {\n        text: localize('Hedging'),\n        value: 'Hedging',\n    },\n    {\n        text: localize('Income Earning'),\n        value: 'Income Earning',\n    },\n    {\n        text: localize('Speculative'),\n        value: 'Speculative',\n    },\n    {\n        text: localize('Peer-to-peer exchange'),\n        value: 'Peer-to-peer exchange',\n    },\n];\n\nexport const InputField = ({ maxLength, name, optional = false, ...props }: TCFDInputFieldProps) => (\n    <Field name={name}>\n        {({ field, form: { errors, touched } }: FieldProps<string, TFormValues>) => (\n            <Input\n                {...field}\n                type='text'\n                required={!optional}\n                name={name}\n                autoComplete='off'\n                maxLength={maxLength || 30}\n                error={touched[field.name as keyof TFormValues] && errors[field.name as keyof TFormValues]}\n                {...props}\n            />\n        )}\n    </Field>\n);\n\nconst validatePersonalDetails = ({\n    values,\n    residence_list,\n    account_opening_reason,\n    is_tin_required,\n}: TValidatePersonalDetailsParams) => {\n    const [tax_residence_obj] = residence_list.filter(res => res.text === values.tax_residence && res.tin_format);\n\n    const tin_format = tax_residence_obj?.tin_format;\n\n    const tin_regex = tin_format || ['^[A-Za-z0-9./s-]{0,25}$']; // fallback to API's default rule check\n\n    const validations: { [key: string]: ((v: string) => boolean | RegExpMatchArray | null)[] } = {\n        citizen: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n        tax_residence: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n        tax_identification_number: [\n            (v: string) => ((!values.tax_residence && is_tin_required) || tin_format ? !!v : true),\n            (v: string) => (tin_regex ? tin_regex?.some(regex => v.match(regex)) : true),\n        ],\n        account_opening_reason: [\n            (v: string) => !!v,\n            (v: string) => account_opening_reason.map(i => i.value).includes(v),\n        ],\n        place_of_birth: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n    };\n    const mappedKey: { [key: string]: string } = {\n        citizen: localize('Citizenship'),\n        tax_residence: localize('Tax residence'),\n        tax_identification_number: localize('Tax identification number'),\n        account_opening_reason: localize('Account opening reason'),\n        place_of_birth: localize('Place of birth'),\n    };\n\n    const field_error_messages = (field_name: string): string[] => [\n        localize('{{field_name}} is required', { field_name }),\n        localize('{{field_name}} is not properly formatted.', { field_name }),\n    ];\n\n    const errors: { [key: string]: React.ReactNode } = {};\n\n    Object.entries(validations).forEach(([key, rules]) => {\n        const error_index = rules.findIndex(v => !v(values[key as 'citizen']));\n        if (error_index !== -1) {\n            errors[key] = field_error_messages(mappedKey[key])[error_index];\n        }\n    });\n\n    return errors;\n};\n\nconst findDefaultValuesInResidenceList: TFindDefaultValuesInResidenceList = ({\n    residence_list,\n    citizen_text,\n    tax_residence_text,\n    place_of_birth_text,\n}) => {\n    let citizen, tax_residence, place_of_birth;\n    residence_list?.forEach((item: ResidenceList[0]) => {\n        if (item.text === citizen_text) {\n            citizen = item;\n        }\n        if (item.text === place_of_birth_text) {\n            place_of_birth = item;\n        }\n        if (item.text === tax_residence_text) {\n            tax_residence = item;\n        }\n    });\n    return { citizen, place_of_birth, tax_residence };\n};\n\nconst submitForm: TSubmitForm = (values, actions, idx, onSubmit, is_dirty, residence_list) => {\n    const { citizen, place_of_birth, tax_residence } = findDefaultValuesInResidenceList({\n        residence_list,\n        citizen_text: values.citizen,\n        tax_residence_text: values.tax_residence,\n        place_of_birth_text: values.place_of_birth,\n    });\n\n    const payload = {\n        ...values,\n        citizen: citizen?.value || '',\n        place_of_birth: place_of_birth?.value || '',\n        tax_residence: tax_residence?.value || '',\n    };\n    onSubmit(idx, payload, actions.setSubmitting, is_dirty);\n};\n\nconst CFDPersonalDetailsForm = ({\n    changeable_fields,\n    is_loading,\n    landing_company,\n    residence_list,\n    onSubmit,\n    value,\n    index,\n    form_error,\n}: TCFDPersonalDetailsFormProps) => {\n    const account_opening_reason = getAccountOpeningReasonList();\n    const is_tin_required = !!(landing_company?.config?.tax_details_required ?? false);\n\n    const onSubmitForm = (values: TFormValues, actions: FormikActions<TFormValues>) =>\n        submitForm(values, actions, index, onSubmit, !isDeepEqual(value, values), residence_list);\n\n    if (residence_list.length === 0) return <Loading is_fullscreen={false} />;\n    if (is_loading) return <Loading is_fullscreen={false} />;\n\n    return (\n        <Formik\n            initialValues={{ ...value }}\n            validateOnChange\n            validateOnBlur\n            validate={values =>\n                validatePersonalDetails({\n                    values,\n                    residence_list,\n                    account_opening_reason,\n                    is_tin_required,\n                })\n            }\n            onSubmit={onSubmitForm}\n            validateOnMount\n        >\n            {({\n                handleSubmit,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                errors,\n                touched,\n                values,\n                setFieldValue,\n                isValid,\n            }: FormikProps<TFormValues>) => {\n                const citizenship_error = touched.citizen && errors.citizen;\n                const place_of_birth_error = touched.place_of_birth && errors.place_of_birth;\n                const tax_residence_error = touched.tax_residence && errors.tax_residence;\n                const account_opening_reason_error = touched.account_opening_reason && errors.account_opening_reason;\n\n                const is_citizenship_disabled = !!value.citizen && !changeable_fields?.includes('citizen');\n                const is_place_of_birth_disabled =\n                    !!value.place_of_birth && !changeable_fields?.includes('place_of_birth');\n                const is_tax_residence_disabled =\n                    !!value.tax_residence && !changeable_fields?.includes('tax_residence');\n                const is_account_opening_reason_disabled =\n                    !!value.account_opening_reason && !changeable_fields?.includes('account_opening_reason');\n                const handleItemSelection = (item: ResidenceList[0], _field: string) => {\n                    const item_value = item.value ? item.text : '';\n                    setFieldValue(_field, item_value, true);\n                };\n                const tin_field_label = residence_list.find(res => res.text === values.tax_residence && res.tin_format)\n                    ?.tin_format\n                    ? localize('Tax identification number*')\n                    : localize('Tax identification number');\n\n                return (\n                    <AutoHeightWrapper default_height={200} height_offset={isDesktop() ? 148 : null}>\n                        {({ setRef }: { setRef: (instance: HTMLFormElement | null) => void }) => (\n                            <form\n                                className='cfd-personal-details-modal__form'\n                                ref={setRef}\n                                onSubmit={handleSubmit}\n                                autoComplete='off'\n                                noValidate\n                            >\n                                <Div100vhContainer\n                                    className='details-form'\n                                    max_autoheight_offset='179px'\n                                    is_disabled={isDesktop()}\n                                >\n                                    <Text\n                                        as='p'\n                                        size='xxs'\n                                        align='center'\n                                        className='details-form__description'\n                                        data-testid='dt_cfd_details_form_description'\n                                    >\n                                        <Localize\n                                            i18n_default_text={\n                                                'Any information you provide is confidential and will be used for verification purposes only.'\n                                            }\n                                        />\n                                    </Text>\n                                    <ThemedScrollbars height='512px' is_bypassed={isMobile()}>\n                                        <div className='details-form__elements'>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='citizen'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                {...field}\n                                                                id='real_mt5_citizenship'\n                                                                data-lpignore='true'\n                                                                autoComplete='off'\n                                                                type='text'\n                                                                label={localize('Citizenship*')}\n                                                                error={citizenship_error}\n                                                                disabled={is_citizenship_disabled}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'citizen')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                required\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Citizenship*')}\n                                                        value={values.citizen}\n                                                        list_items={residence_list}\n                                                        error={citizenship_error}\n                                                        disabled={is_citizenship_disabled}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('citizen', e.target.value, true)\n                                                        }\n                                                        required\n                                                        should_hide_disabled_options={false}\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='place_of_birth'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                {...field}\n                                                                id='real_mt5_place_of_birth'\n                                                                data-lpignore='true'\n                                                                autoComplete='off'\n                                                                type='text'\n                                                                label={localize('Place of birth*')}\n                                                                error={place_of_birth_error}\n                                                                disabled={is_place_of_birth_disabled}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'place_of_birth')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                required\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Place of birth*')}\n                                                        value={values.place_of_birth}\n                                                        list_items={residence_list}\n                                                        error={place_of_birth_error}\n                                                        disabled={is_place_of_birth_disabled}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('place_of_birth', e.target.value, true)\n                                                        }\n                                                        required\n                                                        should_hide_disabled_options={false}\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='tax_residence'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                id='real_mt5_tax_residence'\n                                                                data-lpignore='true'\n                                                                type='text'\n                                                                autoComplete='off'\n                                                                label={localize('Tax residence*')}\n                                                                error={tax_residence_error}\n                                                                disabled={is_tax_residence_disabled}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'tax_residence')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                {...field}\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Tax residence*')}\n                                                        value={values.tax_residence}\n                                                        error={tax_residence_error}\n                                                        disabled={is_tax_residence_disabled}\n                                                        list_items={residence_list}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('tax_residence', e.target.value, true)\n                                                        }\n                                                        required\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <InputField\n                                                    id='real_mt5_tax_identification_number'\n                                                    name='tax_identification_number'\n                                                    label={tin_field_label}\n                                                    placeholder={tin_field_label}\n                                                    value={values.tax_identification_number}\n                                                    onBlur={handleBlur}\n                                                    disabled={\n                                                        !!value.tax_identification_number &&\n                                                        !changeable_fields?.includes('tax_identification_number')\n                                                    }\n                                                    optional\n                                                />\n                                            </fieldset>\n                                            <Field name='account_opening_reason'>\n                                                {({ field }: FieldProps<string, TFormValues>) => (\n                                                    <React.Fragment>\n                                                        <DesktopWrapper>\n                                                            <Dropdown\n                                                                {...field}\n                                                                placeholder={localize('Account opening reason*')}\n                                                                is_align_text_left\n                                                                name={field.name}\n                                                                list={account_opening_reason}\n                                                                value={values.account_opening_reason}\n                                                                disabled={is_account_opening_reason_disabled}\n                                                                onChange={handleChange}\n                                                                handleBlur={handleBlur}\n                                                                error={account_opening_reason_error}\n                                                                list_portal_id='modal_root'\n                                                            />\n                                                        </DesktopWrapper>\n                                                        <MobileWrapper>\n                                                            <SelectNative\n                                                                {...field}\n                                                                placeholder={localize('Please select')}\n                                                                name={field.name}\n                                                                label={localize('Account opening reason*')}\n                                                                list_items={account_opening_reason}\n                                                                value={values.account_opening_reason}\n                                                                disabled={is_account_opening_reason_disabled}\n                                                                error={account_opening_reason_error}\n                                                                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                                                    handleChange(e);\n                                                                    setFieldValue(\n                                                                        'account_opening_reason',\n                                                                        e.target.value,\n                                                                        true\n                                                                    );\n                                                                }}\n                                                                data_testid='account_opening_reason_mobile'\n                                                            />\n                                                        </MobileWrapper>\n                                                    </React.Fragment>\n                                                )}\n                                            </Field>\n                                        </div>\n                                    </ThemedScrollbars>\n                                </Div100vhContainer>\n                                <Modal.Footer is_bypassed={isMobile()} has_separator>\n                                    {form_error && <FormSubmitErrorMessage message={form_error} />}\n                                    <FormSubmitButton\n                                        is_disabled={isSubmitting || !isValid || Object.keys(errors).length > 0}\n                                        is_absolute={isMobile()}\n                                        label={localize('Next')}\n                                    />\n                                </Modal.Footer>\n                            </form>\n                        )}\n                    </AutoHeightWrapper>\n                );\n            }}\n        </Formik>\n    );\n};\n\nexport default CFDPersonalDetailsForm;\n","import { Field, Formik, FieldProps, FormikHelpers, FormikProps, FormikErrors } from 'formik';\nimport React from 'react';\nimport {\n    AutoHeightWrapper,\n    FormSubmitButton,\n    ThemedScrollbars,\n    Dropdown,\n    Loading,\n    Div100vhContainer,\n    Modal,\n    SelectNative,\n    DesktopWrapper,\n    MobileWrapper,\n    useStateCallback,\n    Text,\n} from '@deriv/components';\nimport { FileUploaderContainer, FormSubHeader, PoaStatusCodes } from '@deriv/account';\nimport { localize } from '@deriv/translations';\nimport { isDesktop, isMobile, validAddress, validLength, validLetterSymbol, validPostCode, WS } from '@deriv/shared';\nimport { InputField } from './cfd-personal-details-form';\nimport { GetSettings, StatesList, AccountStatusResponse } from '@deriv/api-types';\n\ntype TErrors = {\n    code: string;\n    message: string;\n};\n\ntype TFile = {\n    path: string;\n    lastModified: number;\n    lastModifiedDate: Date;\n    name: string;\n    size: number;\n    type: string;\n    webkitRelativePath: string;\n};\n\ntype TObjDocumentFile = {\n    errors: TErrors[];\n    file: TFile;\n};\n\ntype TFormValuesInputs = {\n    address_city?: string;\n    address_line_1?: string;\n    address_line_2?: string;\n    address_postcode?: string;\n    address_state?: string;\n};\n\ntype TDocumentFile = {\n    document_file?: Array<TObjDocumentFile>;\n    files?: Array<TObjDocumentFile>;\n};\n\ntype TFormValues = TFormValuesInputs & TDocumentFile;\n\ntype TFormValue = GetSettings;\n\ntype TApiResponse = {\n    document_upload: {\n        call_type: number;\n        checksum: string;\n        size: number;\n        status: string;\n        upload_id: number;\n    };\n    passthrough: {\n        document_upload: boolean;\n    };\n    warning?: string;\n};\n\ntype TStoreProofOfAddress = (file_uploader_ref: React.RefObject<(HTMLElement | null) & TUpload>) => void;\n\nexport type TCFDPOAProps = {\n    onSave: (index: number, values: TFormValues) => void;\n    index: number;\n    onSubmit: (index: number, value: TFormValues) => void;\n    refreshNotifications: () => void;\n    form_error: string;\n    get_settings: GetSettings;\n    height: string;\n    states_list: StatesList;\n    storeProofOfAddress: TStoreProofOfAddress;\n    value: TFormValue;\n};\ntype TUpload = {\n    upload: () => void;\n};\n\nlet file_uploader_ref: React.RefObject<HTMLElement & TUpload>;\n\nconst CFDPOA = ({ onSave, index, onSubmit, refreshNotifications, ...props }: TCFDPOAProps) => {\n    const form = React.useRef<FormikProps<TFormValues> | null>(null);\n\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [form_state, setFormState] = useStateCallback({\n        poa_status: 'none',\n        has_poi: false,\n        form_error: '',\n    });\n    const [document_upload, setDocumentUpload] = useStateCallback({ files: [], error_message: null });\n    const [hasPOAFailed, sethasPOAfailed] = React.useState(false);\n\n    const validateForm = (values: TFormValuesInputs) => {\n        // No need to validate if we are waiting for confirmation.\n        if ([PoaStatusCodes.verified, PoaStatusCodes.pending].includes(form_state.poa_status)) {\n            return {};\n        }\n\n        const validations: Record<string, Array<(value: string) => boolean>> = {\n            address_line_1: [\n                (v: string) => !!v && !v.match(/^\\s*$/),\n                (v: string) => validLength(v, { max: 70 }),\n                (v: string) => validAddress(v).is_ok,\n            ],\n            address_line_2: [(v: string) => validLength(v, { max: 70 }), (v: string) => validAddress(v).is_ok],\n            address_city: [\n                (v: string) => !!v && !v.match(/^\\s*$/),\n                (v: string) => validLength(v, { min: 1, max: 35 }),\n                (v: string) => validLetterSymbol(v),\n            ],\n            address_state: [(v: string) => validLength(v, { max: 35 })],\n            address_postcode: [(v: string) => validLength(v, { max: 20 }), (v: string) => !v || validPostCode(v)],\n        };\n\n        const validation_errors: Record<string, Array<string>> = {\n            address_line_1: [\n                localize('First line of address is required'),\n                localize('This should not exceed {{max}} characters.', { max: 70 }),\n                localize('First line of address is not in a proper format.'),\n            ],\n            address_line_2: [\n                localize('This should not exceed {{max}} characters.', { max: 70 }),\n                localize('Second line of address is not in a proper format.'),\n            ],\n            address_city: [\n                localize('Town/City is required.'),\n                localize('This should not exceed {{max_number}} characters.', {\n                    max_number: 35,\n                }),\n                localize('Town/City is not in a proper format.'),\n            ],\n            address_state: [localize('State/Province is not in a proper format.')],\n            address_postcode: [\n                localize('This should not exceed {{max_number}} characters.', {\n                    max_number: 20,\n                }),\n                localize('Only letters, numbers, space, and hyphen are allowed.'),\n            ],\n        };\n\n        const errors: Record<string, string> = {};\n\n        Object.entries(validations).forEach(([key, rules]) => {\n            const error_index = rules.findIndex(v => !v(values[key as keyof TFormValuesInputs] as string));\n            if (error_index !== -1) {\n                errors[key] = validation_errors[key][error_index];\n            }\n        });\n\n        return errors;\n    };\n\n    const onFileDrop = (\n        files: TObjDocumentFile,\n        error_message: string,\n        setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void,\n        setFieldValue: (field: string, files_array: TObjDocumentFile) => void,\n        values: TFormValues\n    ) => {\n        setFieldTouched('document_file', true);\n        setFieldValue('document_file', files);\n        setDocumentUpload({ files, error_message }, () => {\n            // To resolve sync issues with value states (form_values in container component and formik values)\n            // This ensures container values are updated before being validated in runtime  (mt5-financial-stp-real-account-signup.jsx)\n            if (typeof onSave === 'function') {\n                onSave(index, { ...values, ...({ document_file: files } as unknown as TDocumentFile) });\n            }\n        });\n    };\n\n    const onSubmitValues = async (values: TFormValues, actions: FormikHelpers<TFormValues>) => {\n        const uploadables = { ...values };\n        delete uploadables.document_file;\n\n        actions.setSubmitting(true);\n        const data = await WS.setSettings(uploadables);\n        if (data.error) {\n            setFormState({ ...form_state, ...{ form_error: data.error.message } });\n            actions.setSubmitting(false);\n            return;\n        }\n        const { error } = await WS.authorized.storage.getSettings();\n        if (error) {\n            setFormState({ ...form_state, ...{ form_error: error.message } });\n            return;\n        }\n\n        setFormState({ ...form_state, ...{ form_error: '' } });\n\n        try {\n            const api_response = await file_uploader_ref.current?.upload();\n\n            if (api_response && (api_response as TApiResponse)?.warning) {\n                setFormState({ ...form_state, ...{ form_error: (api_response as TApiResponse).warning } });\n                actions.setSubmitting(false);\n                return;\n            }\n            const { error: e } = await WS.authorized.storage.getAccountStatus();\n            if (e) {\n                setFormState({ ...form_state, ...{ form_error: error.message } });\n                actions.setSubmitting(false);\n                return;\n            }\n        } catch (e: unknown) {\n            setFormState({ ...form_state, ...{ form_error: (e as Error).message } });\n        }\n\n        actions.setSubmitting(false);\n        onSave(index, values);\n        onSubmit(index, values);\n    };\n\n    // didMount hook\n    React.useEffect(() => {\n        WS.authorized.getAccountStatus().then((response: AccountStatusResponse) => {\n            WS.wait('states_list').then(() => {\n                const poa_status = response.get_account_status?.authentication?.document?.status;\n                const poi_status = response.get_account_status?.authentication?.identity?.status;\n                const poa_failed_status = ['rejected', 'expired', 'suspected'];\n                if (poa_status && poi_status) {\n                    const needs_poi = poi_status === 'none';\n                    setFormState({ ...form_state, ...{ poa_status, needs_poi, identity_status: poi_status } }, () => {\n                        setIsLoading(false);\n                        refreshNotifications();\n                    });\n                }\n\n                if (poa_status && poa_failed_status.includes(poa_status)) {\n                    sethasPOAfailed(true);\n                }\n            });\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [refreshNotifications, setFormState]);\n\n    const isFormDisabled = (dirty: boolean, errors: FormikErrors<TFormValues>) => {\n        if (form_state.poa_status === PoaStatusCodes.verified) {\n            return false;\n        }\n        return Object.keys(errors).length !== 0;\n    };\n\n    const {\n        states_list,\n        value: { address_line_1, address_line_2, address_city, address_state, address_postcode },\n    } = props;\n    const { form_error, poa_status } = form_state;\n\n    const is_form_visible = !is_loading && poa_status !== PoaStatusCodes.verified;\n\n    return (\n        <Formik\n            initialValues={{\n                address_line_1,\n                address_line_2,\n                address_city,\n                address_state,\n                address_postcode,\n                document_file: document_upload.files,\n            }}\n            validateOnMount\n            validate={validateForm}\n            enableReinitialize\n            onSubmit={onSubmitValues}\n            innerRef={form}\n        >\n            {({\n                dirty,\n                errors,\n                handleSubmit,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                setFieldTouched,\n                setFieldValue,\n                values,\n                touched,\n            }: FormikProps<TFormValues>) => {\n                return (\n                    <AutoHeightWrapper default_height={200}>\n                        {({\n                            setRef,\n                            height,\n                        }: {\n                            setRef: (instance: HTMLFormElement | null) => void;\n                            height: number;\n                        }) => (\n                            <form ref={setRef} onSubmit={handleSubmit} className='cfd-proof-of-address'>\n                                <Div100vhContainer\n                                    className='details-form'\n                                    height_offset='100px'\n                                    is_disabled={isDesktop()}\n                                >\n                                    {is_loading && <Loading is_fullscreen={false} />}\n                                    {is_form_visible && (\n                                        <ThemedScrollbars\n                                            autohide={false}\n                                            height={`${height - 77}px`}\n                                            is_bypassed={isMobile()}\n                                        >\n                                            <div className='cfd-proof-of-address__field-area'>\n                                                {hasPOAFailed && (\n                                                    <Text size='xs' align='center' color='loss-danger'>\n                                                        {localize(\n                                                            'We were unable to verify your address with the details you provided. Please check and resubmit or choose a different document type.'\n                                                        )}\n                                                    </Text>\n                                                )}\n                                                <FormSubHeader title={localize('Address information')} />\n                                                <InputField\n                                                    name='address_line_1'\n                                                    maxLength={255}\n                                                    required\n                                                    label={localize('First line of address*')}\n                                                    placeholder={localize('First line of address*')}\n                                                    onBlur={handleBlur}\n                                                />\n                                                <InputField\n                                                    name='address_line_2'\n                                                    maxLength={255}\n                                                    label={localize('Second line of address (optional)')}\n                                                    optional\n                                                    placeholder={localize('Second line of address')}\n                                                    onBlur={handleBlur}\n                                                />\n                                                <div className='cfd-proof-of-address__inline-fields'>\n                                                    <InputField\n                                                        maxLength={255}\n                                                        name='address_city'\n                                                        required\n                                                        label={localize('Town/City*')}\n                                                        placeholder={localize('Town/City*')}\n                                                        onBlur={handleBlur}\n                                                    />\n                                                    <fieldset className='address-state__fieldset'>\n                                                        {states_list?.length > 0 ? (\n                                                            <React.Fragment>\n                                                                <DesktopWrapper>\n                                                                    <Field name='address_state'>\n                                                                        {({\n                                                                            field,\n                                                                        }: FieldProps<string, TFormValues>) => (\n                                                                            <Dropdown\n                                                                                id='address_state'\n                                                                                className='address_state-dropdown'\n                                                                                is_align_text_left\n                                                                                list={states_list}\n                                                                                error={\n                                                                                    touched[\n                                                                                        field.name as keyof TFormValues\n                                                                                    ] &&\n                                                                                    errors[\n                                                                                        field.name as keyof TFormValues\n                                                                                    ]\n                                                                                }\n                                                                                name='address_state'\n                                                                                value={values.address_state}\n                                                                                onChange={handleChange}\n                                                                                placeholder={localize('State/Province')}\n                                                                                list_portal_id='modal_root'\n                                                                            />\n                                                                        )}\n                                                                    </Field>\n                                                                </DesktopWrapper>\n                                                                <MobileWrapper>\n                                                                    <SelectNative\n                                                                        label={localize('State/Province')}\n                                                                        value={values.address_state}\n                                                                        list_items={states_list}\n                                                                        error={\n                                                                            touched.address_state &&\n                                                                            errors.address_state\n                                                                        }\n                                                                        onChange={(\n                                                                            e: React.ChangeEvent<HTMLSelectElement>\n                                                                        ) => {\n                                                                            handleChange(e);\n                                                                            setFieldValue(\n                                                                                'address_state',\n                                                                                e.target.value,\n                                                                                true\n                                                                            );\n                                                                        }}\n                                                                    />\n                                                                </MobileWrapper>\n                                                            </React.Fragment>\n                                                        ) : (\n                                                            // Fallback to input field when states list is empty / unavailable for country\n                                                            <InputField\n                                                                name='address_state'\n                                                                label={localize('State/Province')}\n                                                                placeholder={localize('State/Province')}\n                                                                value={values.address_state}\n                                                                onBlur={handleBlur}\n                                                            />\n                                                        )}\n                                                    </fieldset>\n                                                    <InputField\n                                                        maxLength={255}\n                                                        name='address_postcode'\n                                                        label={localize('Postal/ZIP code')}\n                                                        placeholder={localize('Postal/ZIP code')}\n                                                        onBlur={handleBlur}\n                                                        optional\n                                                    />\n                                                </div>\n                                                <div className='cfd-proof-of-address__file-upload'>\n                                                    <FileUploaderContainer\n                                                        onRef={(ref: React.RefObject<(HTMLElement | null) & TUpload>) =>\n                                                            (file_uploader_ref = ref)\n                                                        }\n                                                        getSocket={WS.getSocket}\n                                                        onFileDrop={(df: {\n                                                            files: TObjDocumentFile;\n                                                            error_message: string;\n                                                        }) =>\n                                                            onFileDrop(\n                                                                df.files,\n                                                                df.error_message,\n                                                                setFieldTouched,\n                                                                setFieldValue,\n                                                                values as TFormValues\n                                                            )\n                                                        }\n                                                    />\n                                                </div>\n                                            </div>\n                                        </ThemedScrollbars>\n                                    )}\n\n                                    <Modal.Footer is_bypassed={isMobile()}>\n                                        {(poa_status === PoaStatusCodes.none || is_form_visible) && (\n                                            <FormSubmitButton\n                                                is_disabled={\n                                                    isFormDisabled(dirty, errors) ||\n                                                    (poa_status !== PoaStatusCodes.verified &&\n                                                        document_upload.files &&\n                                                        document_upload.files.length < 1) ||\n                                                    !!document_upload.error_message\n                                                }\n                                                label={\n                                                    poa_status === PoaStatusCodes.verified\n                                                        ? localize('Submit')\n                                                        : localize('Next')\n                                                }\n                                                is_absolute={isMobile()}\n                                                is_loading={isSubmitting}\n                                                form_error={form_error}\n                                            />\n                                        )}\n                                    </Modal.Footer>\n                                </Div100vhContainer>\n                            </form>\n                        )}\n                    </AutoHeightWrapper>\n                );\n            }}\n        </Formik>\n    );\n};\n\nexport default CFDPOA;\n","import { ProofOfIdentityContainerForMt5 } from '@deriv/account';\nimport React from 'react';\nimport { useStore, observer } from '@deriv/stores';\n\ntype TCFDValue = {\n    poi_state: string;\n};\n\ntype TFormValues = {\n    poi_state?: string;\n};\n\ntype TCFDNotificationByKey = {\n    key: string;\n};\ntype TCFDNotificationMessage = {\n    key: string;\n    should_show_again: string;\n};\n\nexport type TCFDPOIProps = {\n    index: number;\n    onSubmit: (index: number, value: TCFDValue) => void;\n    value: TCFDValue;\n    addNotificationMessageByKey: (key: string) => void;\n    height: string;\n    onSave: (index: number, values: TFormValues) => void;\n    removeNotificationByKey: (key: TCFDNotificationByKey) => void;\n    removeNotificationMessage: (key: TCFDNotificationMessage) => void;\n    jurisdiction_selected_shortcode: string;\n};\n\nconst CFDPOI = observer(({ index, onSave, onSubmit, height, ...props }: TCFDPOIProps) => {\n    const { client, common, notifications } = useStore();\n\n    const {\n        account_status,\n        fetchResidenceList,\n        is_switching,\n        is_virtual,\n        is_high_risk,\n        is_withdrawal_lock,\n        should_allow_authentication,\n        account_settings,\n        residence_list,\n        getChangeableFields,\n        updateAccountStatus,\n    } = client;\n    const { routeBackInApp, app_routing_history } = common;\n    const { refreshNotifications } = notifications;\n\n    const poi_props = {\n        account_status,\n        fetchResidenceList,\n        is_switching,\n        is_virtual,\n        is_high_risk,\n        is_withdrawal_lock,\n        should_allow_authentication,\n        account_settings,\n        residence_list,\n        routeBackInApp,\n        app_routing_history,\n        refreshNotifications,\n        getChangeableFields,\n        updateAccountStatus,\n        ...props,\n    };\n\n    const [poi_state, setPOIState] = React.useState<string>('none');\n    const citizen = account_settings?.citizen || account_settings?.country_code;\n    const citizen_data = residence_list?.find(item => item.value === citizen);\n\n    const onStateChange = (status: string) => {\n        setPOIState(status);\n        onSave(index, { poi_state: status });\n        onSubmit(index, { poi_state });\n    };\n    return (\n        <ProofOfIdentityContainerForMt5\n            {...poi_props}\n            height={height}\n            is_from_external={true}\n            onStateChange={(status: string) => onStateChange(status)}\n            citizen_data={citizen_data}\n        />\n    );\n});\n\nexport default CFDPOI;\n","import React from 'react';\nimport { DesktopWrapper, Div100vhContainer, MobileWrapper, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { TCFDPersonalDetailsContainerProps } from './props.types';\nimport CFDPersonalDetailsForm from '../Components/cfd-personal-details-form';\nimport { getPropertyValue, isDesktop, WS } from '@deriv/shared';\nimport { GetSettings } from '@deriv/api-types';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TFormValues = { [key: string]: string };\ntype TSetSubmitting = (isSubmitting: boolean) => void;\n\nconst CFDPersonalDetailsContainer = observer(({ onSubmit }: TCFDPersonalDetailsContainerProps) => {\n    const { client } = useStore();\n\n    const { account_settings, getChangeableFields, landing_company, residence_list, setAccountSettings } = client;\n\n    const [form_error, setFormError] = React.useState('');\n    const [is_loading, setIsLoading] = React.useState(false);\n    const [form_values, setFormValues] = React.useState<TFormValues>({\n        citizen: '',\n        place_of_birth: '',\n        tax_residence: '',\n        tax_identification_number: '',\n        account_opening_reason: '',\n    });\n\n    const initiatePersonalDetails = async (setSubmitting?: TSetSubmitting) => {\n        // force request to update settings cache since settings have been updated\n        let get_settings_response: GetSettings;\n        if (!account_settings) {\n            const response = await WS.authorized.storage.getSettings();\n\n            if (response.error) {\n                setFormError(response.error.message);\n                if (typeof setSubmitting === 'function') {\n                    setSubmitting(false);\n                }\n                return;\n            }\n            get_settings_response = response.get_settings;\n        } else {\n            get_settings_response = account_settings;\n        }\n\n        const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n            get_settings_response;\n\n        setFormValues({\n            ...form_values,\n            citizen: transform(citizen) || '',\n            place_of_birth: transform(place_of_birth) || '',\n            tax_residence: transform(tax_residence) || '',\n            tax_identification_number: tax_identification_number || '',\n            account_opening_reason: account_opening_reason || '',\n        });\n    };\n\n    React.useEffect(() => {\n        setIsLoading(true);\n        initiatePersonalDetails().then(() => {\n            setIsLoading(false);\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const transform = (value: unknown) => {\n        const [result] = residence_list?.filter(item => item.value === value);\n        return getPropertyValue(result, ['text']) || value;\n    };\n\n    const saveFormData = (_index: number, value: TFormValues) => {\n        setFormValues({\n            ...value,\n            citizen: transform(value.citizen),\n            place_of_birth: transform(value.place_of_birth),\n            tax_residence: transform(value.tax_residence),\n        });\n    };\n\n    const updateValue = async (index: number, value: TFormValues, setSubmitting: TSetSubmitting, is_dirty = true) => {\n        if (is_dirty) {\n            // Set account settings\n            const data = await WS.setSettings(value);\n            if (data.error) {\n                setFormError(data.error.message);\n                setSubmitting(false);\n                return;\n            }\n            initiatePersonalDetails(setSubmitting);\n        }\n        saveFormData(index, value);\n        setAccountSettings({ ...account_settings, ...value });\n        onSubmit(index, value);\n    };\n\n    const getPersonalDetailsForm = () => (\n        <Div100vhContainer\n            className='cfd-personal-details-modal'\n            id='cfd-personal-details-modal'\n            is_disabled={isDesktop()}\n            height_offset='40px'\n        >\n            <div className='cfd-personal-details-modal__heading-container'>\n                <Text as='p' weight='bold' align='center' size='s'>\n                    {localize('Complete your personal details')}\n                </Text>\n            </div>\n            <div className='cfd-personal-details-modal__body'>\n                <CFDPersonalDetailsForm\n                    form_error={form_error}\n                    index={2}\n                    is_loading={is_loading}\n                    landing_company={landing_company}\n                    onSubmit={updateValue}\n                    residence_list={residence_list}\n                    changeable_fields={getChangeableFields()}\n                    value={form_values}\n                />\n            </div>\n        </Div100vhContainer>\n    );\n\n    return (\n        <React.Fragment>\n            <DesktopWrapper>{getPersonalDetailsForm()}</DesktopWrapper>\n            <MobileWrapper>{getPersonalDetailsForm()}</MobileWrapper>\n        </React.Fragment>\n    );\n});\n\nexport default CFDPersonalDetailsContainer;\n","import React from 'react';\nimport { Div100vhContainer } from '@deriv/components';\nimport { isDesktop, getAuthenticationStatusInfo, Jurisdiction } from '@deriv/shared';\nimport CFDPOA from '../Components/cfd-poa';\nimport CFDPOI from '../Components/cfd-poi';\nimport CFDPersonalDetailsContainer from './cfd-personal-details-container';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { TCoreStores } from '@deriv/stores/types';\n\ntype TCFDFinancialStpRealAccountSignupProps = {\n    onFinish: () => void;\n};\n\ntype TNextStep = (index: number, value: { [key: string]: string | undefined }) => void;\n\ntype TItem = {\n    refreshNotifications: TCoreStores['notifications']['refreshNotifications'];\n    removeNotificationMessage: TCoreStores['notifications']['removeNotificationMessage'];\n    removeNotificationByKey: TCoreStores['notifications']['removeNotificationByKey'];\n    addNotificationMessageByKey: TCoreStores['notifications']['addNotificationMessageByKey'];\n    authentication_status: TCoreStores['client']['authentication_status'];\n    account_settings: TCoreStores['client']['account_settings'];\n    email: TCoreStores['client']['email'];\n    is_fully_authenticated: TCoreStores['client']['is_fully_authenticated'];\n    landing_company: TCoreStores['client']['landing_company'];\n    residence_list: TCoreStores['client']['residence_list'];\n    states_list: TCoreStores['client']['states_list'];\n    fetchStatesList: TCoreStores['client']['fetchStatesList'];\n    account_status: TCoreStores['client']['account_status'];\n    storeProofOfAddress: TCoreStores['modules']['cfd']['storeProofOfAddress'];\n    jurisdiction_selected_shortcode: TCoreStores['modules']['cfd']['jurisdiction_selected_shortcode'];\n    has_submitted_cfd_personal_details: TCoreStores['modules']['cfd']['has_submitted_cfd_personal_details'];\n    onFinish: TCFDFinancialStpRealAccountSignupProps['onFinish'];\n};\n\ntype TItemsState<T extends TItem> = {\n    body: typeof CFDPOI | typeof CFDPOA | typeof CFDPersonalDetailsContainer;\n    form_value: { [key: string]: string | undefined };\n    forwarded_props: Array<Partial<keyof T>>;\n};\n\nconst CFDFinancialStpRealAccountSignup = observer(({ onFinish }: TCFDFinancialStpRealAccountSignupProps) => {\n    const { notifications, client } = useStore();\n\n    const { refreshNotifications, removeNotificationMessage, removeNotificationByKey, addNotificationMessageByKey } =\n        notifications;\n\n    const {\n        authentication_status,\n        account_settings,\n        email,\n        is_fully_authenticated,\n        landing_company,\n        residence_list,\n        states_list,\n        fetchStatesList,\n        account_status,\n    } = client;\n\n    const { storeProofOfAddress, jurisdiction_selected_shortcode, has_submitted_cfd_personal_details } = useCfdStore();\n\n    const passthroughProps = {\n        refreshNotifications,\n        removeNotificationMessage,\n        removeNotificationByKey,\n        addNotificationMessageByKey,\n        authentication_status,\n        account_settings,\n        email,\n        is_fully_authenticated,\n        landing_company,\n        residence_list,\n        states_list,\n        fetchStatesList,\n        account_status,\n        storeProofOfAddress,\n        jurisdiction_selected_shortcode,\n        has_submitted_cfd_personal_details,\n        onFinish,\n    } as const;\n\n    const [step, setStep] = React.useState(0);\n    const [form_error, setFormError] = React.useState('');\n    const state_index = step;\n    let is_mounted = React.useRef(true).current;\n\n    const { need_poi_for_vanuatu_maltainvest, need_poi_for_bvi_labuan } = getAuthenticationStatusInfo(account_status);\n\n    const poi_config: TItemsState<typeof passthroughProps> = {\n        body: CFDPOI,\n        form_value: {\n            poi_state: 'unknown',\n        },\n        forwarded_props: [\n            'addNotificationMessageByKey',\n            'authentication_status',\n            'refreshNotifications',\n            'removeNotificationMessage',\n            'removeNotificationByKey',\n            'jurisdiction_selected_shortcode',\n        ],\n    };\n\n    const poa_config: TItemsState<typeof passthroughProps> = {\n        body: CFDPOA,\n        form_value: {\n            address_line_1: account_settings.address_line_1,\n            address_line_2: account_settings.address_line_2,\n            address_city: account_settings.address_city,\n            address_state: account_settings.address_state,\n            address_postcode: account_settings.address_postcode,\n            upload_file: '',\n        },\n        forwarded_props: ['states_list', 'account_settings', 'storeProofOfAddress', 'refreshNotifications'],\n    };\n\n    const personal_details_config: TItemsState<typeof passthroughProps> = {\n        body: CFDPersonalDetailsContainer,\n        form_value: {\n            citizen: '',\n            place_of_birth: '',\n            tax_residence: '',\n            tax_identification_number: '',\n            account_opening_reason: '',\n        },\n        forwarded_props: ['residence_list', 'landing_company'],\n    };\n\n    const should_show_poi = () => {\n        if ([Jurisdiction.VANUATU, Jurisdiction.MALTA_INVEST].includes(jurisdiction_selected_shortcode)) {\n            return need_poi_for_vanuatu_maltainvest;\n        }\n        return need_poi_for_bvi_labuan;\n    };\n    const should_show_poa = !['pending', 'verified'].includes(authentication_status.document_status);\n\n    const should_show_personal_details =\n        !has_submitted_cfd_personal_details && jurisdiction_selected_shortcode !== Jurisdiction.MALTA_INVEST;\n\n    const verification_configs = [\n        ...(should_show_poi() ? [poi_config] : []),\n        ...(should_show_poa ? [poa_config] : []),\n        ...(should_show_personal_details ? [personal_details_config] : []),\n    ];\n\n    const [items, setItems] = React.useState<TItemsState<typeof passthroughProps>[]>(verification_configs);\n\n    const clearError = () => {\n        setFormError('');\n    };\n\n    React.useEffect(() => {\n        refreshNotifications();\n    }, [items, refreshNotifications]);\n\n    React.useEffect(() => {\n        fetchStatesList();\n    }, [fetchStatesList]);\n\n    const unmount = () => {\n        is_mounted = false;\n        onFinish();\n    };\n\n    const saveFormData = (index: number, value: { [key: string]: string | undefined }) => {\n        if (!is_mounted) return; // avoiding state update on unmounted component\n        const cloned_items: TItemsState<typeof passthroughProps>[] = [...items];\n        cloned_items[index].form_value = value;\n        setItems(cloned_items);\n    };\n\n    const nextStep: TNextStep = (index, value) => {\n        clearError();\n        if (step + 1 < items.length) {\n            saveFormData(index, value);\n            setStep(step + 1);\n        } else unmount();\n    };\n\n    const prevStep = () => {\n        if (step - 1 >= 0) {\n            setStep(step - 1);\n            setFormError('');\n        } else unmount();\n    };\n\n    const getCurrent = (key?: keyof TItemsState<typeof passthroughProps>) => {\n        return key ? items[state_index][key] : items[state_index];\n    };\n\n    const BodyComponent = getCurrent('body') as typeof CFDPOI & typeof CFDPOA & typeof CFDPersonalDetailsContainer;\n\n    const form_value = getCurrent('form_value');\n\n    const passthrough = (\n        (getCurrent('forwarded_props') || []) as TItemsState<typeof passthroughProps>['forwarded_props']\n    ).reduce((forwarded_prop, item) => {\n        return Object.assign(forwarded_prop, {\n            [item]: passthroughProps[item],\n        });\n    }, {});\n\n    return (\n        <Div100vhContainer\n            className='cfd-financial-stp-modal'\n            id='real_mt5_financial_stp_account_opening'\n            is_disabled={isDesktop()}\n            height_offset='40px'\n        >\n            <div className='cfd-financial-stp-modal__body' data-testid='dt_cfd_financial_stp_modal_body'>\n                <BodyComponent\n                    /** TODO: Body component is 3 different component in which one of them does not have prop `value`\n                     * it needs a refactor\n                     */\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    value={form_value}\n                    index={state_index}\n                    onSubmit={nextStep}\n                    height='auto'\n                    onCancel={prevStep}\n                    onSave={saveFormData}\n                    form_error={form_error}\n                    {...passthrough}\n                />\n            </div>\n        </Div100vhContainer>\n    );\n});\n\nexport default CFDFinancialStpRealAccountSignup;\n","import React from 'react';\nimport { Text, Button, Icon, MultiStep, SendEmailTemplate } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { getCFDPlatformLabel, CFD_PLATFORMS, WS } from '@deriv/shared';\nimport ChangePasswordConfirmation from './cfd-change-password-confirmation';\nimport { TChangePassword, TPasswordResetAndTradingPasswordManager } from './props.types';\n\nconst ChangePassword = ({ platform, onConfirm }: TChangePassword) => (\n    <div className='cfd-change-password'>\n        <Icon\n            className='cfd-change-password__icon'\n            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n            width='122'\n            height='108'\n        />\n        <Text as='p' align='center' size='s' weight='bold'>\n            <Localize\n                i18n_default_text='{{platform}} password'\n                values={{\n                    platform: getCFDPlatformLabel(platform),\n                }}\n            />\n        </Text>\n        <Text as='p' align='center' className='cfd-change-password__description' size='xs'>\n            {platform === CFD_PLATFORMS.MT5 ? (\n                <Localize i18n_default_text='Use this password to log in to your Deriv MT5 accounts on the desktop, web, and mobile apps.' />\n            ) : (\n                <Localize i18n_default_text='Use this password to log in to your Deriv X accounts on the web and mobile apps.' />\n            )}\n        </Text>\n        <Button\n            className='dc-btn dc-btn--primary dc-btn__large dc-modal__container_cfd-reset-password-modal__button'\n            onClick={onConfirm}\n        >\n            <Text size='xs' weight='bold' color='colored-background'>\n                <Localize i18n_default_text='Change password' />\n            </Text>\n        </Button>\n    </div>\n);\n\nconst PasswordReset = ({ email, platform, account_group }: TPasswordResetAndTradingPasswordManager) => {\n    const onClickSendEmail = React.useCallback(() => {\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_group === 'real') {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_group === 'demo') {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n    }, [email, platform, account_group]);\n\n    React.useEffect(() => {\n        onClickSendEmail();\n    }, [onClickSendEmail]);\n\n    return (\n        <SendEmailTemplate\n            title={localize(\"We've sent you an email\")}\n            subtitle={localize('Please click on the link in the email to change your {{platform}} password.', {\n                platform: getCFDPlatformLabel(platform),\n            })}\n            lbl_no_receive={localize(\"Didn't receive the email?\")}\n            txt_resend={localize('Resend email')}\n            txt_resend_in={localize('Resend email in')}\n            onClickSendEmail={onClickSendEmail}\n        />\n    );\n};\n\nconst TradingPasswordManager = ({ platform, email, account_group }: TPasswordResetAndTradingPasswordManager) => {\n    const multi_step_ref = React.useRef<{ goNextStep: () => void; goPrevStep: () => void }>();\n\n    const steps = [\n        {\n            component: <ChangePassword platform={platform} onConfirm={() => multi_step_ref.current?.goNextStep()} />,\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    confirm_label={localize('Confirm')}\n                    platform={platform}\n                    onConfirm={() => multi_step_ref.current?.goNextStep()}\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                />\n            ),\n        },\n        {\n            component: <PasswordReset platform={platform} email={email} account_group={account_group} />,\n        },\n    ];\n\n    return (\n        <div className='cfd-trading-password'>\n            <MultiStep ref={multi_step_ref} steps={steps} />\n        </div>\n    );\n};\n\nexport default TradingPasswordManager;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Field, Form, Formik, FieldProps } from 'formik';\nimport { PasswordInput, PasswordMeter, Text, Button, Icon } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { getErrorMessages } from '@deriv/shared';\nimport { TCFDPasswordSuccessMessage, TInvestorPasswordManager, TPasswordManagerModalFormValues } from './props.types';\n\nconst CFDPasswordSuccessMessage = ({ toggleModal, is_investor }: TCFDPasswordSuccessMessage) => (\n    <div className='cfd-password-manager__success'>\n        <Icon icon='IcPasswordUpdated' size={128} />\n        <Text as='p' size='xxs' align='center'>\n            {is_investor ? (\n                <Localize i18n_default_text='Your investor password has been changed.' />\n            ) : (\n                <Localize i18n_default_text='Your password has been changed.' />\n            )}\n        </Text>\n        <Button onClick={toggleModal} className='cfd-password-manager__success-btn' primary large>\n            <p className='dc-btn__text'>{localize('OK')}</p>\n        </Button>\n    </div>\n);\n\nconst InvestorPasswordManager = ({\n    error_message_investor,\n    is_submit_success_investor,\n    multi_step_ref,\n    onSubmit,\n    setPasswordType,\n    toggleModal,\n    validatePassword,\n}: TInvestorPasswordManager) => {\n    if (is_submit_success_investor) {\n        return <CFDPasswordSuccessMessage toggleModal={toggleModal} is_investor />;\n    }\n\n    const type_investor = 'investor';\n\n    const initial_values = { old_password: '', new_password: '', password_type: `${type_investor}` };\n\n    return (\n        <div className='cfd-password-manager__investor-wrapper'>\n            <Text as='p' size='xs' className='cfd-password-manager--paragraph'>\n                <Localize i18n_default_text='Use this password to grant viewing access to another user. While they may view your trading account, they will not be able to trade or take any other actions.' />\n            </Text>\n            <Text as='p' size='xs' className='cfd-password-manager--paragraph'>\n                <Localize i18n_default_text='If this is the first time you try to create a password, or you have forgotten your password, please reset it.' />\n            </Text>\n            {error_message_investor && (\n                <Text\n                    as='p'\n                    color='loss-danger'\n                    size='xs'\n                    className='cfd-password-manager--error-message'\n                    data-testid='dt_error_message_investor'\n                >\n                    {error_message_investor}\n                </Text>\n            )}\n            <Formik initialValues={initial_values} validate={validatePassword} onSubmit={onSubmit}>\n                {({ isSubmitting, errors, setFieldTouched, values, touched }) => (\n                    <Form className='cfd-password-manager__investor-form' noValidate>\n                        <Field name='old_password'>\n                            {({ field }: FieldProps<string, TPasswordManagerModalFormValues>) => (\n                                <PasswordInput\n                                    {...field}\n                                    autoComplete='current-password'\n                                    label={localize('Current investor password')}\n                                    error={touched.old_password && errors.old_password}\n                                    required\n                                />\n                            )}\n                        </Field>\n                        <Field name='new_password'>\n                            {({ field }: FieldProps<string, TPasswordManagerModalFormValues>) => (\n                                <PasswordMeter\n                                    input={field.value}\n                                    has_error={!!(touched.new_password && errors.new_password)}\n                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                >\n                                    {({ has_warning }: { has_warning: boolean }) => (\n                                        <PasswordInput\n                                            {...field}\n                                            autoComplete='new-password'\n                                            label={localize('New investor password')}\n                                            hint={\n                                                !has_warning &&\n                                                localize(\n                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters and numbers.'\n                                                )\n                                            }\n                                            error={touched.new_password && errors.new_password}\n                                            onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                                                setFieldTouched('new_password', true, true);\n                                                field.onChange(e);\n                                            }}\n                                            className='cfd-password-manager__new-password'\n                                            required\n                                        />\n                                    )}\n                                </PasswordMeter>\n                            )}\n                        </Field>\n                        <div className='cfd-password-manager__actions'>\n                            <Button\n                                className='cfd-password-manager--button'\n                                is_disabled={\n                                    isSubmitting ||\n                                    !values.old_password ||\n                                    !values.new_password ||\n                                    Object.keys(errors).length > 0\n                                }\n                                is_loading={isSubmitting}\n                                text={localize('Change investor password')}\n                                primary\n                                large\n                            />\n                            <Button\n                                className='cfd-password-manager--button'\n                                type='button'\n                                onClick={() => {\n                                    setPasswordType('investor');\n                                    multi_step_ref.current?.goNextStep();\n                                }}\n                                text={localize('Create or reset investor password')}\n                                tertiary\n                                large\n                            />\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nInvestorPasswordManager.propTypes = {\n    error_message_investor: PropTypes.string,\n    is_submit_success_investor: PropTypes.bool,\n    multi_step_ref: PropTypes.object,\n    onSubmit: PropTypes.func,\n    setPasswordType: PropTypes.func,\n    toggleModal: PropTypes.func,\n    validatePassword: PropTypes.func,\n};\n\nexport default InvestorPasswordManager;\n","import React from 'react';\nimport {\n    Icon,\n    Modal,\n    Tabs,\n    Button,\n    DesktopWrapper,\n    Div100vhContainer,\n    MobileWrapper,\n    MultiStep,\n    PageOverlay,\n    ThemedScrollbars,\n    UILoader,\n    Text,\n} from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport {\n    isMobile,\n    validLength,\n    validPassword,\n    getErrorMessages,\n    getCFDPlatformLabel,\n    CFD_PLATFORMS,\n} from '@deriv/shared';\nimport { FormikErrors } from 'formik';\nimport CFDStore from '../Stores/Modules/CFD/cfd-store';\nimport TradingPasswordManager from './trading-password-manager';\nimport InvestorPasswordManager from './investor-password-manager';\nimport {\n    TCountdownComponent,\n    TCFDPasswordReset,\n    TCFDPasswordManagerTabContentWrapper,\n    TCFDPasswordManagerTabContent,\n    TCFDPasswordManagerModal,\n    TFormValues,\n    TPasswordManagerModalFormValues,\n} from './props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst CountdownComponent = ({ count_from = 60, onTimeout }: TCountdownComponent) => {\n    const [count, setCount] = React.useState<number>(count_from);\n\n    React.useEffect(() => {\n        let interval: ReturnType<typeof setTimeout>;\n\n        if (count !== 0) {\n            interval = setTimeout(() => {\n                setCount(count - 1);\n            }, 1000);\n        } else {\n            onTimeout();\n        }\n\n        return () => {\n            clearTimeout(interval);\n        };\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [count]);\n    return <span className='countdown'>{count}</span>;\n};\n\nconst CFDPasswordReset = ({\n    sendVerifyEmail,\n    account_type,\n    account_group,\n    server,\n    password_type,\n}: TCFDPasswordReset) => {\n    const [is_resend_verification_requested, setResendVerification] = React.useState<boolean>(false);\n    const [is_resend_verification_sent, setResendVerificationSent] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        localStorage.setItem('cfd_reset_password_intent', [server, account_group, account_type].join('.'));\n        localStorage.setItem('cfd_reset_password_type', password_type);\n        sendVerifyEmail();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onClickVerification = () => {\n        setResendVerification(true);\n    };\n\n    const resendVerification = () => {\n        sendVerifyEmail();\n        setResendVerificationSent(true);\n    };\n\n    return (\n        <div className='cfd-verification-email-sent'>\n            <Icon icon='IcEmailSent' size={128} />\n            <h2 className='cfd-verification-email-sent__title'>\n                <Localize i18n_default_text=\"We've sent you an email\" />\n            </h2>\n            <Text as='p' size='xs' align='center'>\n                <Localize i18n_default_text='Please click on the link in the email to reset your password.' />\n            </Text>\n            {!is_resend_verification_requested && (\n                <Button className='cfd-verification-email-sent__resend-button' primary onClick={onClickVerification}>\n                    <Localize i18n_default_text=\"Didn't receive the email?\" />\n                </Button>\n            )}\n            {is_resend_verification_requested && (\n                <>\n                    <Text\n                        as='p'\n                        size='xs'\n                        align='center'\n                        weight='bold'\n                        className='cfd-verification-email-sent__title--sub'\n                    >\n                        <Localize i18n_default_text={\"Didn't receive the email?\"} />\n                    </Text>\n                    <Text as='p' size='xs' align='center'>\n                        <Localize i18n_default_text=\"Check your spam or junk folder. If it's not there, try resending the email.\" />\n                    </Text>\n                    <Button\n                        className='cfd-verification-email-sent__resend-button'\n                        large\n                        primary\n                        disabled={is_resend_verification_sent}\n                        onClick={resendVerification}\n                    >\n                        {!is_resend_verification_sent && <Localize i18n_default_text='Resend email' />}\n                        {is_resend_verification_sent && (\n                            <>\n                                <Localize\n                                    i18n_default_text='Resend in <0 /> seconds'\n                                    components={[\n                                        <CountdownComponent\n                                            key={0}\n                                            onTimeout={() => setResendVerificationSent(false)}\n                                            count_from={60}\n                                        />,\n                                    ]}\n                                />\n                            </>\n                        )}\n                    </Button>\n                </>\n            )}\n        </div>\n    );\n};\n\nconst CFDPasswordManagerTabContentWrapper = ({ multi_step_ref, steps }: TCFDPasswordManagerTabContentWrapper) => (\n    <MultiStep ref={multi_step_ref} steps={steps} className='cfd-password-manager' lbl_previous={localize('Back')} />\n);\n\nconst CFDPasswordManagerTabContent = ({\n    toggleModal,\n    selected_login,\n    email,\n    setPasswordType,\n    multi_step_ref,\n    platform,\n    onChangeActiveTabIndex,\n    account_group,\n}: TCFDPasswordManagerTabContent) => {\n    const [active_tab_index, setActiveTabIndex] = React.useState<number>(0);\n    const [error_message_investor, setErrorMessageInvestor] = React.useState<string>('');\n    const [is_submit_success_investor, setSubmitSuccessInvestor] = React.useState<boolean>(false);\n\n    // view height - margin top and bottom of modal - modal title - modal content margin top and bottom - table title\n    const container_height = 'calc(100vh - 84px - 5.6rem - 8.8rem - 4rem)';\n    const validatePassword = (values: TFormValues) => {\n        const errors: FormikErrors<TFormValues> = {};\n\n        if (\n            !validLength(values.new_password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.new_password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.new_password)) {\n            errors.new_password = getErrorMessages().password();\n        } else if (values.new_password.toLowerCase() === email.toLowerCase()) {\n            errors.new_password = localize('Your password cannot be the same as your email address.');\n        }\n\n        if (!values.old_password && values.old_password !== undefined) {\n            errors.old_password = localize('This field is required');\n        }\n\n        return errors;\n    };\n    const showError = (error_message: string) => {\n        setErrorMessageInvestor(error_message);\n    };\n\n    const hideError = () => {\n        setErrorMessageInvestor('');\n        setSubmitSuccessInvestor(true);\n    };\n\n    const onSubmit = React.useCallback(\n        async (values: TPasswordManagerModalFormValues) => {\n            if (!selected_login) {\n                return;\n            }\n\n            const error = await CFDStore.changePassword({ login: selected_login, ...values });\n            if (error) {\n                showError(error);\n            } else {\n                hideError();\n            }\n        },\n        [selected_login]\n    );\n\n    const updateAccountTabIndex = (index: number) => {\n        setActiveTabIndex(index);\n        onChangeActiveTabIndex(index);\n        setErrorMessageInvestor('');\n        setSubmitSuccessInvestor(false);\n    };\n\n    const trading_password_manager = (\n        <React.Fragment>\n            <DesktopWrapper>\n                <ThemedScrollbars height={container_height} is_bypassed={isMobile()} autohide={false}>\n                    <TradingPasswordManager\n                        toggleModal={toggleModal}\n                        platform={platform}\n                        email={email}\n                        account_group={account_group}\n                    />\n                </ThemedScrollbars>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <Div100vhContainer className='cfd-password-manager__scroll-wrapper' height_offset='120px'>\n                    <TradingPasswordManager\n                        toggleModal={toggleModal}\n                        platform={platform}\n                        email={email}\n                        account_group={account_group}\n                    />\n                </Div100vhContainer>\n            </MobileWrapper>\n        </React.Fragment>\n    );\n\n    if (platform === CFD_PLATFORMS.DXTRADE) return trading_password_manager;\n\n    return (\n        <Tabs active_index={active_tab_index} onTabItemClick={updateAccountTabIndex} top>\n            <div\n                label={localize('{{platform}} password', {\n                    platform: getCFDPlatformLabel(platform),\n                })}\n            >\n                {trading_password_manager}\n            </div>\n            <div label={localize('Investor password')}>\n                <DesktopWrapper>\n                    <ThemedScrollbars height={container_height}>\n                        <InvestorPasswordManager\n                            is_submit_success_investor={is_submit_success_investor}\n                            toggleModal={toggleModal}\n                            error_message_investor={error_message_investor}\n                            validatePassword={validatePassword}\n                            onSubmit={onSubmit}\n                            setPasswordType={setPasswordType}\n                            multi_step_ref={multi_step_ref}\n                        />\n                    </ThemedScrollbars>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <Div100vhContainer className='cfd-password-manager__scroll-wrapper' height_offset='120px'>\n                        <InvestorPasswordManager\n                            is_submit_success_investor={is_submit_success_investor}\n                            toggleModal={toggleModal}\n                            error_message_investor={error_message_investor}\n                            validatePassword={validatePassword}\n                            onSubmit={onSubmit}\n                            setPasswordType={setPasswordType}\n                            multi_step_ref={multi_step_ref}\n                        />\n                    </Div100vhContainer>\n                </MobileWrapper>\n            </div>\n        </Tabs>\n    );\n};\n\nconst CFDPasswordManagerModal = observer(\n    ({\n        is_visible,\n        platform,\n        selected_login,\n        toggleModal,\n        selected_account_type,\n        selected_account_group,\n        selected_server,\n    }: TCFDPasswordManagerModal) => {\n        const { client, ui } = useStore();\n\n        const { email } = client;\n        const { enableApp, disableApp } = ui;\n\n        const { sendVerifyEmail } = useCfdStore();\n\n        const multi_step_ref: React.MutableRefObject<undefined> = React.useRef();\n        const [index, setIndex] = React.useState<number>(0);\n\n        const [password_type, setPasswordType] = React.useState('main');\n\n        if (!selected_login) return null;\n\n        const getTitle = () => {\n            return localize('Manage {{platform}} password', {\n                platform: getCFDPlatformLabel(platform),\n            });\n        };\n\n        const getHeader = (i: number) => {\n            if (i === 0) {\n                return localize('Manage {{platform}} password', {\n                    platform: getCFDPlatformLabel(platform),\n                });\n            }\n            return localize('Manage password');\n        };\n\n        const onChangeActiveTabIndex = (i: number) => {\n            setIndex(i);\n        };\n\n        const steps = [\n            {\n                component: (\n                    <CFDPasswordManagerTabContent\n                        email={email}\n                        selected_login={selected_login}\n                        toggleModal={toggleModal}\n                        setPasswordType={setPasswordType}\n                        multi_step_ref={multi_step_ref}\n                        platform={platform}\n                        onChangeActiveTabIndex={onChangeActiveTabIndex}\n                        account_group={selected_account_group}\n                    />\n                ),\n            },\n            {\n                component: (\n                    <CFDPasswordReset\n                        server={selected_server}\n                        sendVerifyEmail={sendVerifyEmail}\n                        account_type={selected_account_type}\n                        account_group={selected_account_group}\n                        password_type={password_type}\n                    />\n                ),\n            },\n        ];\n\n        return (\n            <React.Suspense fallback={<UILoader />}>\n                <DesktopWrapper>\n                    <Modal\n                        className='cfd-password-manager__modal'\n                        disableApp={disableApp}\n                        enableApp={enableApp}\n                        is_open={is_visible}\n                        title={getTitle()}\n                        toggleModal={toggleModal}\n                        height='688px'\n                        width='904px'\n                        should_header_stick_body={false}\n                    >\n                        <CFDPasswordManagerTabContentWrapper steps={steps} multi_step_ref={multi_step_ref} />\n                    </Modal>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <PageOverlay\n                        is_open={is_visible}\n                        portal_id='deriv_app'\n                        header={getHeader(index)}\n                        onClickClose={toggleModal}\n                    >\n                        <CFDPasswordManagerTabContentWrapper steps={steps} multi_step_ref={multi_step_ref} />\n                    </PageOverlay>\n                </MobileWrapper>\n            </React.Suspense>\n        );\n    }\n);\n\nexport default CFDPasswordManagerModal;\n","import { Formik, FormikErrors, FormikHelpers } from 'formik';\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport { SentEmailModal } from '@deriv/account';\nimport {\n    getDxCompanies,\n    getMtCompanies,\n    getDerivezCompanies,\n    getFormattedJurisdictionCode,\n    TMtCompanies,\n    TDxCompanies,\n    TDerivezCompanies,\n} from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport {\n    FormSubmitButton,\n    Icon,\n    MobileDialog,\n    Modal,\n    PasswordInput,\n    PasswordMeter,\n    Text,\n    MultiStep,\n} from '@deriv/components';\nimport {\n    CFD_PLATFORMS,\n    getAuthenticationStatusInfo,\n    getCFDPlatformLabel,\n    getErrorMessages,\n    getLegalEntityName,\n    isDesktop,\n    isMobile,\n    Jurisdiction,\n    routes,\n    validLength,\n    validPassword,\n    WS,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport SuccessDialog from '../Components/success-dialog.jsx';\nimport '../sass/cfd.scss';\nimport ChangePasswordConfirmation from './cfd-change-password-confirmation';\nimport TradingPlatformIcon from '../Assets/svgs/trading-platform';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nexport type TCFDPasswordFormValues = { password: string };\n\ntype TOnSubmitPassword = (values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) => void;\n\ntype TPasswordModalHeaderProps = {\n    should_set_trading_password: boolean;\n    is_password_reset_error: boolean;\n    platform: string;\n    has_mt5_account?: boolean;\n};\n\ntype TIconTypeProps = {\n    platform: string;\n    type?: string;\n    show_eu_related_content: boolean;\n};\n\ntype TCFDPasswordFormReusedProps = {\n    platform: string;\n    error_message: string;\n    validatePassword: (values: TCFDPasswordFormValues) => FormikErrors<TCFDPasswordFormValues>;\n};\n\ntype TCFDCreatePasswordProps = TCFDPasswordFormReusedProps & {\n    password: string;\n    onSubmit: TOnSubmitPassword;\n    is_real_financial_stp: boolean;\n};\n\ntype TCFDCreatePasswordFormProps = TCFDPasswordFormReusedProps & {\n    has_mt5_account: boolean;\n    submitPassword: TOnSubmitPassword;\n    is_real_financial_stp: boolean;\n};\n\ntype TMultiStepRefProps = {\n    goNextStep: () => void;\n    goPrevStep: () => void;\n};\ntype TReviewMsgForMT5 = {\n    is_selected_mt5_verified: boolean;\n    jurisdiction_selected_shortcode: string;\n    manual_status: string;\n};\n\ntype TCFDPasswordFormProps = TCFDPasswordFormReusedProps & {\n    account_title: string;\n    account_type: {\n        category?: string;\n        type?: string;\n    };\n    closeModal: () => void;\n    error_type?: string;\n    form_error?: string;\n    has_mt5_account: boolean;\n    is_bvi: boolean;\n    is_dxtrade_allowed: boolean;\n    is_real_financial_stp: boolean;\n    jurisdiction_selected_shortcode: string;\n    onCancel: () => void;\n    onForgotPassword: () => void;\n    should_set_trading_password: boolean;\n    show_eu_related_content: boolean;\n    submitPassword: TOnSubmitPassword;\n};\n\ntype TCFDPasswordModalProps = {\n    error_type?: string;\n    form_error?: string;\n    platform: string;\n};\n\nconst getAccountTitle = (\n    platform: string,\n    account_type: {\n        category?: string;\n        type?: string;\n    },\n    account_title: string\n) => {\n    if (platform === CFD_PLATFORMS.DXTRADE) {\n        return getDxCompanies()[account_type.category as keyof TDxCompanies][\n            account_type.type as keyof TDxCompanies['demo' | 'real']\n        ].short_title;\n    }\n\n    return account_title;\n};\n\nconst PasswordModalHeader = ({\n    should_set_trading_password,\n    is_password_reset_error,\n    platform,\n}: TPasswordModalHeaderProps) => {\n    const element = isMobile() ? 'p' : 'span';\n    const alignment = 'center';\n    const font_size = 's';\n    const style = isMobile()\n        ? {\n              padding: '2rem',\n          }\n        : {};\n\n    return (\n        <Text styles={style} as={element} line_height='m' weight='bold' size={font_size} align={alignment}>\n            {!should_set_trading_password && !is_password_reset_error && (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                    }}\n                />\n            )}\n            {is_password_reset_error && <Localize i18n_default_text='Too many attempts' />}\n        </Text>\n    );\n};\nconst ReviewMessageForMT5 = ({\n    is_selected_mt5_verified,\n    jurisdiction_selected_shortcode,\n    manual_status,\n}: TReviewMsgForMT5) => {\n    if (is_selected_mt5_verified) {\n        return (\n            <Localize i18n_default_text='To start trading, top-up funds from your Deriv account into this account.' />\n        );\n    } else if ([Jurisdiction.BVI, Jurisdiction.VANUATU].includes(jurisdiction_selected_shortcode)) {\n        if (manual_status === 'pending') {\n            return <Localize i18n_default_text='We’re reviewing your documents. This should take about 1 to 3 days.' />;\n        }\n        return <Localize i18n_default_text='We’re reviewing your documents. This should take about 5 minutes.' />;\n    } else if ([Jurisdiction.LABUAN, Jurisdiction.MALTA_INVEST].includes(jurisdiction_selected_shortcode)) {\n        return <Localize i18n_default_text='We’re reviewing your documents. This should take about 1 to 3 days.' />;\n    }\n    return null;\n};\n\nconst IconType = React.memo(({ platform, type, show_eu_related_content }: TIconTypeProps) => {\n    const traders_hub = window.location.pathname === routes.traders_hub;\n    if (platform === CFD_PLATFORMS.DXTRADE) {\n        return <Icon icon='IcRebrandingDxtradeDashboard' size={128} />;\n    } else if (platform === CFD_PLATFORMS.DERIVEZ) {\n        return <Icon icon='IcBrandDerivEz' size={128} />;\n    } else if (traders_hub) {\n        switch (type) {\n            case 'synthetic':\n                return <TradingPlatformIcon icon='Derived' size={128} />;\n            case 'all':\n                return <TradingPlatformIcon icon='SwapFree' size={128} />;\n            case 'financial':\n                if (show_eu_related_content) {\n                    return <TradingPlatformIcon icon='CFDs' size={128} />;\n                }\n                return <TradingPlatformIcon icon='Financial' size={128} />;\n            default:\n                return <TradingPlatformIcon icon='Financial' size={128} />;\n        }\n    } else {\n        switch (type) {\n            case 'synthetic':\n                return <Icon icon='IcMt5SyntheticPlatform' size={128} />;\n            case 'all':\n                return <Icon icon='IcMt5SwapFreePlatform' size={128} />;\n            case 'financial':\n                if (show_eu_related_content) {\n                    return <Icon icon='IcMt5CfdPlatform' size={128} />;\n                }\n                return <Icon icon='IcMt5FinancialPlatform' size={128} />;\n            default:\n                return <Icon icon='IcMt5FinancialStpPlatform' size={128} />;\n        }\n    }\n});\nIconType.displayName = 'IconType';\n\nconst getCancelButtonLabel = ({\n    should_set_trading_password,\n    error_type,\n}: Pick<TCFDPasswordFormProps, 'should_set_trading_password' | 'error_type'>) => {\n    if (should_set_trading_password && error_type !== 'PasswordReset') {\n        return isDesktop() ? null : localize('Cancel');\n    }\n\n    return localize('Forgot password?');\n};\n\nconst handlePasswordInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    handleChange: (el: React.ChangeEvent<HTMLInputElement>) => void,\n    validateForm: (values?: TCFDPasswordFormValues) => Promise<FormikErrors<TCFDPasswordFormValues>>,\n    setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void\n) => {\n    handleChange(e);\n    validateForm().then(() => {\n        setFieldTouched('password', true);\n    });\n};\n\nconst CreatePassword = ({\n    password,\n    platform,\n    validatePassword,\n    onSubmit,\n    error_message,\n    is_real_financial_stp,\n}: TCFDCreatePasswordProps) => {\n    return (\n        <Formik\n            initialValues={{\n                password,\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={onSubmit}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <div\n                        className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body cfd-password-modal__create-password-content'\n                        data-testid='dt_create_password'\n                    >\n                        <Icon\n                            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n                            width='122'\n                            height='108'\n                        />\n                        <Text size='s' weight='bold' className='cfd-password-modal__create-password-title'>\n                            <Localize\n                                i18n_default_text='Create a {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text size='xs' align='center' className='cfd-password-modal__create-password-description'>\n                            <Localize\n                                i18n_default_text='You can use this password for all your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <div className='input-element'>\n                            <PasswordMeter\n                                input={values.password}\n                                has_error={!!(touched.password && errors.password)}\n                                custom_feedback_messages={getErrorMessages().password_warnings}\n                            >\n                                {() => (\n                                    <PasswordInput\n                                        autoComplete='new-password'\n                                        label={localize('{{platform}} password', {\n                                            platform: getCFDPlatformLabel(platform),\n                                        })}\n                                        error={\n                                            (touched.password && errors.password) ||\n                                            (values.password.length === 0 ? error_message : '')\n                                        }\n                                        name='password'\n                                        value={values.password}\n                                        onBlur={handleBlur}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                            handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                        }}\n                                        data_testId={`dt_${platform}_password`}\n                                    />\n                                )}\n                            </PasswordMeter>\n                        </div>\n                        {is_real_financial_stp && (\n                            <div className='dc-modal__container_cfd-password-modal__description'>\n                                <Localize i18n_default_text='Your MT5 Financial STP account will be opened through Deriv (FX) Ltd. All trading in this account is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA). None of your other accounts, including your Deriv account, is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA).' />\n                            </div>\n                        )}\n                        <FormSubmitButton\n                            is_disabled={!values.password || Object.keys(errors).length > 0}\n                            is_loading={isSubmitting}\n                            label={localize('Create {{platform}} password', {\n                                platform: getCFDPlatformLabel(platform),\n                            })}\n                            is_center={true}\n                        />\n                    </div>\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nconst CFDCreatePasswordForm = ({\n    has_mt5_account,\n    platform,\n    error_message,\n    validatePassword,\n    submitPassword,\n    is_real_financial_stp,\n}: TCFDCreatePasswordFormProps) => {\n    const multi_step_ref = React.useRef<TMultiStepRefProps>();\n    const [password, setPassword] = React.useState('');\n\n    const onSubmit: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5 && has_mt5_account) {\n            setPassword(values.password);\n            multi_step_ref.current?.goNextStep();\n        } else {\n            submitPassword(values, actions);\n        }\n    };\n\n    const steps = [\n        {\n            component: (\n                <CreatePassword\n                    password={password}\n                    platform={platform}\n                    error_message={error_message}\n                    validatePassword={validatePassword}\n                    onSubmit={onSubmit}\n                    is_real_financial_stp={is_real_financial_stp}\n                />\n            ),\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    className='cfd-password-modal__change-password-confirmation'\n                    platform={platform}\n                    onConfirm={(_values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) =>\n                        submitPassword({ password }, actions)\n                    }\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                />\n            ),\n        },\n    ];\n\n    return <MultiStep ref={multi_step_ref} steps={steps} />;\n};\n\nconst CFDPasswordForm = ({\n    account_title,\n    account_type,\n    closeModal,\n    error_message,\n    error_type,\n    form_error,\n    has_mt5_account,\n    is_real_financial_stp,\n    jurisdiction_selected_shortcode,\n    onCancel,\n    onForgotPassword,\n    platform,\n    should_set_trading_password,\n    show_eu_related_content,\n    submitPassword,\n    validatePassword,\n}: TCFDPasswordFormProps) => {\n    const button_label = React.useMemo(() => {\n        if (error_type === 'PasswordReset') {\n            return localize('Try later');\n        }\n        return localize('Add account');\n    }, [error_type]);\n\n    const has_cancel_button = (isDesktop() ? !should_set_trading_password : true) || error_type === 'PasswordReset';\n\n    const cancel_button_label = getCancelButtonLabel({ should_set_trading_password, error_type });\n\n    const handleCancel = () => {\n        if (!has_cancel_button) {\n            return undefined;\n        }\n        if (should_set_trading_password) {\n            return onCancel();\n        }\n\n        return onForgotPassword();\n    };\n\n    if (error_type === 'PasswordReset') {\n        return (\n            <React.Fragment>\n                <div className='cfd-password-reset'>\n                    <div className='cfd-password-modal__content cfd-password-modal__content--password-reset'>\n                        <Text as='p' line_height='24' size='xs'>\n                            <Localize i18n_default_text='Please try again in a minute.' />\n                        </Text>\n                    </div>\n                    <Formik onSubmit={closeModal} initialValues={{}}>\n                        {({ handleSubmit }) => (\n                            <form onSubmit={handleSubmit}>\n                                <FormSubmitButton\n                                    has_cancel={has_cancel_button}\n                                    cancel_label={cancel_button_label}\n                                    onCancel={handleCancel}\n                                    is_absolute={isMobile()}\n                                    label={button_label}\n                                />\n                            </form>\n                        )}\n                    </Formik>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    if (should_set_trading_password) {\n        return (\n            <CFDCreatePasswordForm\n                platform={platform}\n                error_message={error_message}\n                validatePassword={validatePassword}\n                submitPassword={submitPassword}\n                has_mt5_account={has_mt5_account}\n                is_real_financial_stp={is_real_financial_stp}\n            />\n        );\n    }\n\n    const showJuristiction = () => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            return '';\n        } else if (!show_eu_related_content) {\n            return getFormattedJurisdictionCode(jurisdiction_selected_shortcode);\n        }\n        return 'CFDs';\n    };\n\n    return (\n        <Formik\n            initialValues={{\n                password: '',\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={submitPassword}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <div className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body'>\n                        {!should_set_trading_password && (\n                            <Text size='xs' className='dc-modal__container_cfd-password-modal__account-title'>\n                                {account_type.category === 'real' && (\n                                    <Localize\n                                        i18n_default_text='Enter your {{platform}} password to add a {{platform_name}} {{account}} {{jurisdiction_shortcode}} account.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                            // account: !show_eu_related_content ? account_title : '',\n                                            platform_name:\n                                                platform === CFD_PLATFORMS.MT5 ? 'MT5' : getCFDPlatformLabel(platform),\n                                            account: !show_eu_related_content\n                                                ? getAccountTitle(platform, account_type, account_title)\n                                                : '',\n                                            jurisdiction_shortcode: showJuristiction(),\n                                        }}\n                                    />\n                                )}\n                                {account_type.category === 'demo' && (\n                                    <Localize\n                                        i18n_default_text='Enter your {{platform}} password to add a {{platform_name}} {{account}} account.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                            // account: account_title,\n                                            platform_name:\n                                                platform === CFD_PLATFORMS.MT5 ? 'MT5' : getCFDPlatformLabel(platform),\n                                            account: getAccountTitle(platform, account_type, account_title),\n                                        }}\n                                    />\n                                )}\n                            </Text>\n                        )}\n                        <div className='input-element'>\n                            <PasswordInput\n                                autoComplete='new-password'\n                                label={localize('{{platform}} password', {\n                                    platform: getCFDPlatformLabel(platform),\n                                })}\n                                error={\n                                    (touched.password && errors.password) ||\n                                    (values.password.length === 0 ? error_message : '')\n                                }\n                                name='password'\n                                value={values.password}\n                                onBlur={handleBlur}\n                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                    handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                }}\n                                data_testId={`dt_${platform}_password`}\n                            />\n                        </div>\n\n                        {is_real_financial_stp && (\n                            <div className='dc-modal__container_cfd-password-modal__description'>\n                                <Localize\n                                    i18n_default_text='Your MT5 Financial STP account will be opened through {{legal_entity_name}}. All trading in this account is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA). None of your other accounts, including your Deriv account, is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA).'\n                                    values={{\n                                        legal_entity_name: getLegalEntityName('fx'),\n                                    }}\n                                />\n                            </div>\n                        )}\n                        {error_type === 'PasswordError' && (\n                            <Text size='xs' as='p' className='dc-modal__container_mt5-password-modal__hint'>\n                                <Localize\n                                    i18n_default_text='Hint: You may have entered your Deriv password, which is different from your {{platform}} password.'\n                                    values={{\n                                        platform: getCFDPlatformLabel(platform),\n                                    }}\n                                />\n                            </Text>\n                        )}\n                    </div>\n                    <FormSubmitButton\n                        is_disabled={!values.password}\n                        has_cancel={has_cancel_button}\n                        cancel_label={cancel_button_label}\n                        onCancel={handleCancel}\n                        is_absolute={isMobile()}\n                        is_loading={isSubmitting}\n                        label={button_label}\n                        is_center={should_set_trading_password}\n                        form_error={form_error}\n                    />\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nconst CFDPasswordModal = observer(({ form_error, platform }: TCFDPasswordModalProps) => {\n    const { client, traders_hub } = useStore();\n\n    const {\n        email,\n        account_status,\n        landing_companies,\n        is_logged_in,\n        is_dxtrade_allowed,\n        mt5_login_list,\n        updateAccountStatus,\n    } = client;\n    const { show_eu_related_content } = traders_hub;\n\n    const {\n        account_title,\n        account_type,\n        disableCFDPasswordModal,\n        error_message,\n        error_type,\n        getAccountStatus,\n        has_cfd_error,\n        is_cfd_success_dialog_enabled,\n        is_cfd_password_modal_enabled,\n        jurisdiction_selected_shortcode,\n        setError,\n        setCFDSuccessDialog,\n        submitMt5Password,\n        submitCFDPassword,\n        new_account_response,\n    } = useCfdStore();\n\n    const history = useHistory();\n\n    const [is_password_modal_exited, setPasswordModalExited] = React.useState(true);\n    const is_bvi = landing_companies?.mt_financial_company?.financial_stp?.shortcode === 'bvi';\n    const has_mt5_account = Boolean(mt5_login_list?.length);\n    const should_set_trading_password =\n        Array.isArray(account_status?.status) &&\n        account_status.status.includes(\n            platform === CFD_PLATFORMS.MT5 ? 'mt5_password_not_set' : 'dxtrade_password_not_set'\n        );\n    const is_password_error = error_type === 'PasswordError';\n    const is_password_reset = error_type === 'PasswordReset';\n    const [is_sent_email_modal_open, setIsSentEmailModalOpen] = React.useState(false);\n\n    const { poi_verified_for_bvi_labuan, poi_verified_for_vanuatu_maltainvest, poa_verified, manual_status } =\n        getAuthenticationStatusInfo(account_status);\n\n    const [is_selected_mt5_verified, setIsSelectedMT5Verified] = React.useState(false);\n\n    const getVerificationStatus = () => {\n        switch (jurisdiction_selected_shortcode) {\n            case Jurisdiction.SVG:\n                setIsSelectedMT5Verified(true);\n                break;\n            case Jurisdiction.BVI:\n                setIsSelectedMT5Verified(poi_verified_for_bvi_labuan);\n                break;\n            case Jurisdiction.VANUATU:\n                setIsSelectedMT5Verified(poi_verified_for_vanuatu_maltainvest);\n                break;\n            case Jurisdiction.LABUAN:\n                setIsSelectedMT5Verified(poi_verified_for_bvi_labuan && poa_verified);\n                break;\n            case Jurisdiction.MALTA_INVEST:\n                setIsSelectedMT5Verified(poi_verified_for_vanuatu_maltainvest && poa_verified);\n                break;\n            default:\n        }\n    };\n\n    React.useEffect(() => {\n        if (is_logged_in) {\n            updateAccountStatus();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        getVerificationStatus();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [jurisdiction_selected_shortcode, account_status]);\n\n    const validatePassword = (values: TCFDPasswordFormValues) => {\n        const errors: FormikErrors<TCFDPasswordFormValues> = {};\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n        if (values.password?.toLowerCase() === email.toLowerCase()) {\n            errors.password = localize('Your password cannot be the same as your email address.');\n        }\n        return errors;\n    };\n\n    const closeDialogs = () => {\n        setCFDSuccessDialog(false);\n        setError(false);\n    };\n\n    const closeModal = () => {\n        closeDialogs();\n        disableCFDPasswordModal();\n    };\n\n    const closeOpenSuccess = () => {\n        disableCFDPasswordModal();\n        closeDialogs();\n        if (account_type.category === 'real') {\n            sessionStorage.setItem('cfd_transfer_to_login_id', new_account_response.login || '');\n            history.push(routes.cashier_acc_transfer);\n        }\n    };\n\n    const handleForgotPassword = () => {\n        closeModal();\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_type.category === 'real') {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_type.category === 'demo') {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n        setIsSentEmailModalOpen(true);\n    };\n\n    const submitPassword: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5) {\n            submitMt5Password(\n                {\n                    ...values,\n                },\n                actions\n            );\n        } else {\n            (values as TCFDPasswordFormValues & { platform: string }).platform = platform;\n            submitCFDPassword(values, actions);\n        }\n    };\n\n    const should_show_password =\n        is_cfd_password_modal_enabled &&\n        !is_cfd_success_dialog_enabled &&\n        (!has_cfd_error || is_password_error || is_password_reset);\n\n    const should_show_success =\n        !has_cfd_error && is_cfd_success_dialog_enabled && is_cfd_password_modal_enabled && is_password_modal_exited;\n\n    const should_show_sent_email_modal = is_sent_email_modal_open && is_password_modal_exited;\n\n    const is_real_financial_stp = [account_type.category, account_type.type].join('_') === 'real_financial_stp';\n\n    const should_show_password_modal = React.useMemo(() => {\n        if (should_show_password) {\n            return should_set_trading_password ? true : isDesktop();\n        }\n        return false;\n    }, [should_set_trading_password, should_show_password]);\n\n    const should_show_password_dialog = React.useMemo(() => {\n        if (should_show_password) {\n            if (!should_set_trading_password) return isMobile();\n        }\n        return false;\n    }, [should_set_trading_password, should_show_password]);\n\n    const success_modal_submit_label = React.useMemo(() => {\n        if (account_type.category === 'real') {\n            if (platform === CFD_PLATFORMS.MT5) {\n                return is_selected_mt5_verified ? localize('Transfer now') : localize('OK');\n            }\n            return localize('Transfer now');\n        }\n        return localize('Continue');\n    }, [platform, account_type, is_selected_mt5_verified]);\n\n    const getSubmitText = () => {\n        const { category, type } = account_type;\n        if (!category && !type) return '';\n\n        const category_label = category === 'real' ? localize('real') : localize('demo');\n        let type_label = '';\n        switch (platform) {\n            case CFD_PLATFORMS.MT5:\n                type_label =\n                    getMtCompanies(show_eu_related_content)[category as keyof TMtCompanies][\n                        type as keyof TMtCompanies['demo' | 'real']\n                    ].short_title;\n                break;\n            case CFD_PLATFORMS.DXTRADE:\n                type_label =\n                    getDxCompanies()[category as keyof TDxCompanies][type as keyof TDxCompanies['demo' | 'real']]\n                        .short_title;\n                break;\n            case CFD_PLATFORMS.DERIVEZ:\n                type_label =\n                    getDerivezCompanies()[category as keyof TDerivezCompanies][\n                        type as keyof TDerivezCompanies['demo' | 'real']\n                    ].short_title;\n                break;\n            default:\n                type_label = '';\n                break;\n        }\n\n        const jurisdiction_label =\n            jurisdiction_selected_shortcode && getFormattedJurisdictionCode(jurisdiction_selected_shortcode);\n        const mt5_platform_label = jurisdiction_selected_shortcode !== Jurisdiction.MALTA_INVEST ? 'Deriv MT5' : '';\n\n        if (category === 'real') {\n            let platformName = '';\n            switch (platform) {\n                case CFD_PLATFORMS.MT5:\n                    platformName = mt5_platform_label;\n                    break;\n                case CFD_PLATFORMS.DERIVEZ:\n                    platformName = 'Deriv Ez';\n                    break;\n                default:\n                    platformName = 'Deriv X';\n                    break;\n            }\n\n            return (\n                <React.Fragment>\n                    <Localize\n                        i18n_default_text='Congratulations, you have successfully created your {{category}} <0>{{platform}}</0> <1>{{type}} {{jurisdiction_selected_shortcode}}</1> account. '\n                        values={{\n                            type: type_label,\n                            platform:\n                                platform === CFD_PLATFORMS.MT5 ? mt5_platform_label : getCFDPlatformLabel(platform),\n                            category: category_label,\n                            jurisdiction_selected_shortcode:\n                                platform === CFD_PLATFORMS.MT5 && !show_eu_related_content ? jurisdiction_label : '',\n                        }}\n                        components={[<span key={0} className='cfd-account__platform' />, <strong key={1} />]}\n                    />\n                    {platform === CFD_PLATFORMS.DXTRADE ? (\n                        <Localize i18n_default_text='To start trading, transfer funds from your Deriv account into this account.' />\n                    ) : (\n                        <ReviewMessageForMT5\n                            is_selected_mt5_verified={is_selected_mt5_verified}\n                            jurisdiction_selected_shortcode={jurisdiction_label}\n                            manual_status={manual_status}\n                        />\n                    )}\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <Localize\n                i18n_default_text='Congratulations, you have successfully created your {{category}} <0>{{platform}}</0> <1>{{type}}</1> account. '\n                values={{\n                    type: type_label,\n                    platform: getCFDPlatformLabel(platform),\n                    category: category_label,\n                }}\n                components={[<span key={0} className='cfd-account__platform' />, <strong key={1} />]}\n            />\n        );\n    };\n\n    const cfd_password_form = (\n        <CFDPasswordForm\n            is_bvi={is_bvi}\n            account_title={account_title}\n            account_type={account_type}\n            closeModal={closeModal}\n            error_type={error_type}\n            error_message={error_message}\n            has_mt5_account={has_mt5_account}\n            form_error={form_error}\n            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n            should_set_trading_password={should_set_trading_password}\n            is_real_financial_stp={is_real_financial_stp}\n            validatePassword={validatePassword}\n            onForgotPassword={handleForgotPassword}\n            submitPassword={submitPassword}\n            platform={platform}\n            is_dxtrade_allowed={is_dxtrade_allowed}\n            onCancel={closeModal}\n            show_eu_related_content={show_eu_related_content}\n        />\n    );\n\n    const password_modal = (\n        <Modal\n            className='cfd-password-modal'\n            has_close_icon\n            is_open={should_show_password_modal}\n            toggleModal={closeModal}\n            should_header_stick_body\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                />\n            )}\n            onUnmount={() => getAccountStatus(platform)}\n            onExited={() => setPasswordModalExited(true)}\n            onEntered={() => setPasswordModalExited(false)}\n            width={isMobile() ? '32.8rem' : 'auto'}\n        >\n            {cfd_password_form}\n        </Modal>\n    );\n\n    const password_dialog = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={should_show_password_dialog}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal'\n        >\n            <PasswordModalHeader\n                should_set_trading_password={should_set_trading_password}\n                has_mt5_account={has_mt5_account}\n                is_password_reset_error={is_password_reset}\n                platform={platform}\n            />\n\n            {cfd_password_form}\n        </MobileDialog>\n    );\n\n    return (\n        <React.Fragment>\n            {password_modal}\n            {password_dialog}\n            <SuccessDialog\n                is_open={should_show_success}\n                toggleModal={closeModal}\n                onCancel={closeModal}\n                onSubmit={platform === CFD_PLATFORMS.MT5 && !is_selected_mt5_verified ? closeModal : closeOpenSuccess}\n                classNameMessage='cfd-password-modal__message'\n                message={getSubmitText()}\n                icon={\n                    <IconType\n                        platform={platform}\n                        type={account_type.type}\n                        show_eu_related_content={show_eu_related_content}\n                    />\n                }\n                icon_size='xlarge'\n                text_submit={success_modal_submit_label}\n                has_cancel={\n                    platform === CFD_PLATFORMS.MT5\n                        ? is_selected_mt5_verified && account_type.category === 'real'\n                        : account_type.category === 'real'\n                }\n                has_close_icon={false}\n                width={isMobile() ? '32.8rem' : 'auto'}\n                is_medium_button={isMobile()}\n            />\n            <SentEmailModal\n                is_open={should_show_sent_email_modal}\n                identifier_title='trading_password'\n                onClose={() => setIsSentEmailModalOpen(false)}\n                onClickSendEmail={handleForgotPassword}\n            />\n        </React.Fragment>\n    );\n});\n\nexport default CFDPasswordModal;\n","import { Formik, FormikHelpers } from 'formik';\nimport React from 'react';\nimport { Button, Icon, PasswordMeter, PasswordInput, FormSubmitButton, Loading, Modal, Text } from '@deriv/components';\nimport { validLength, validPassword, getErrorMessages, CFD_PLATFORMS, WS, redirectToLogin } from '@deriv/shared';\nimport { localize, Localize, getLanguage } from '@deriv/translations';\nimport { getMtCompanies, TMtCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { TResetPasswordIntent, TCFDResetPasswordModal, TError } from './props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst ResetPasswordIntent = ({ current_list, children, is_eu, ...props }: TResetPasswordIntent) => {\n    const reset_password_intent = localStorage.getItem('cfd_reset_password_intent');\n    const reset_password_type = localStorage.getItem('cfd_reset_password_type') || 'main'; // Default to main\n    const has_intent =\n        reset_password_intent &&\n        /(real|demo)\\.(financial_stp|financial|synthetic|synthetic_svg|synthetic_bvi|financial_svg|financial_bvi|financial_fx|financial_v)/.test(\n            reset_password_intent\n        );\n\n    let group, type, login, title, server;\n    if (has_intent && current_list) {\n        [server, group, type] = reset_password_intent.split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`].login;\n        title = getMtCompanies(is_eu)[group as keyof TMtCompanies][type as keyof TMtCompanies['demo' | 'real']].title;\n    } else if (current_list) {\n        [server, group, type] = (Object.keys(current_list).pop() as string).split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`]?.login ?? '';\n        title =\n            getMtCompanies(is_eu)?.[group as keyof TMtCompanies]?.[type as keyof TMtCompanies['demo' | 'real']]\n                ?.title ?? '';\n    } else {\n        // Set a default intent\n        login = '';\n        title = '';\n    }\n\n    return children({\n        login,\n        title,\n        type: reset_password_type,\n        ...props,\n    });\n};\n\nconst CFDResetPasswordModal = observer(({ platform }: TCFDResetPasswordModal) => {\n    const { client, ui } = useStore();\n\n    const { email, is_eu, is_logged_in } = client;\n    const { is_cfd_reset_password_modal_enabled, setCFDPasswordResetModal } = ui;\n\n    const { current_list } = useCfdStore();\n\n    const [state, setState] = React.useState<{\n        error_code: string | number | undefined;\n        has_error: boolean;\n        error_message: string | undefined;\n        is_finished: boolean;\n        changed_password_type: string;\n    }>({\n        error_code: undefined,\n        has_error: false,\n        error_message: undefined,\n        is_finished: false,\n        changed_password_type: '',\n    });\n\n    const renderErrorBox = (error: TError) => {\n        setState({\n            ...state,\n            error_code: error.code,\n            has_error: true,\n            error_message: error.message,\n        });\n    };\n    const clearAddressBar = () => {\n        localStorage.removeItem('cfd_reset_password_intent');\n        localStorage.removeItem('cfd_reset_password_type');\n        localStorage.removeItem('cfd_reset_password_code');\n    };\n    const validatePassword = (values: { new_password: string }) => {\n        const errors: { new_password?: string } = {};\n\n        if (\n            !validLength(values.new_password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.new_password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.new_password)) {\n            errors.new_password = getErrorMessages().password();\n        }\n        if (values.new_password.toLowerCase() === email.toLowerCase()) {\n            errors.new_password = localize('Your password cannot be the same as your email address.');\n        }\n\n        return errors;\n    };\n\n    const resetPassword = (\n        values: { new_password: string },\n        password_type: string,\n        login: string,\n        actions: FormikHelpers<{ new_password: string }>\n    ) => {\n        const { setSubmitting } = actions;\n        setSubmitting(true);\n        const request = {\n            account_id: login,\n            platform: CFD_PLATFORMS.MT5,\n            new_password: values.new_password,\n            verification_code: localStorage.getItem('cfd_reset_password_code'),\n        };\n\n        WS.tradingPlatformInvestorPasswordReset(request).then((response: { error: TError; password_type: string }) => {\n            if (response?.error?.code) {\n                renderErrorBox(response.error);\n            } else {\n                setState({\n                    ...state,\n                    is_finished: true,\n                    changed_password_type: password_type,\n                });\n                clearAddressBar();\n            }\n            setSubmitting(false);\n        });\n    };\n    const getIsListFetched = () => {\n        return Object.keys(current_list).length !== 0;\n    };\n\n    const is_invalid_investor_token = !getIsListFetched() && localStorage.getItem('cfd_reset_password_code');\n\n    return (\n        <Modal\n            className='cfd-reset-password-modal'\n            is_open={is_cfd_reset_password_modal_enabled && !is_invalid_investor_token}\n            toggleModal={() => setCFDPasswordResetModal(false)}\n            title={\n                platform === CFD_PLATFORMS.DXTRADE\n                    ? localize('Reset Deriv X investor password')\n                    : localize('Reset Deriv MT5 investor password')\n            }\n            onMount={() => redirectToLogin(is_logged_in, getLanguage(), true)}\n            should_header_stick_body={false}\n        >\n            {!getIsListFetched() && !state.has_error && <Loading is_fullscreen={false} />}\n            {getIsListFetched() && !state.has_error && !state.is_finished && (\n                <ResetPasswordIntent current_list={current_list} is_eu={is_eu}>\n                    {({ type, login }) => (\n                        <Formik\n                            initialValues={{ new_password: '' }}\n                            validate={validatePassword}\n                            onSubmit={(values, actions) => resetPassword(values, type, login, actions)}\n                        >\n                            {({ handleSubmit, errors, values, isSubmitting, handleChange, handleBlur, touched }) => (\n                                <form autoComplete='off' onSubmit={handleSubmit}>\n                                    <div className='cfd-reset-password'>\n                                        <div className='cfd-reset-password__container'>\n                                            <div className='cfd-reset-password__password-area'>\n                                                <PasswordMeter\n                                                    input={values.new_password}\n                                                    has_error={!!(touched.new_password && errors.new_password)}\n                                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                                >\n                                                    {({ has_warning }: { has_warning: boolean }) => (\n                                                        <PasswordInput\n                                                            autoComplete='new-password'\n                                                            className='cfd-reset-password__password-field'\n                                                            name='new_password'\n                                                            label={localize('New {{type}} password', { type })}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            error={touched.new_password && errors.new_password}\n                                                            value={values.new_password}\n                                                            data-lpignore='true'\n                                                            required\n                                                            hint={\n                                                                !has_warning &&\n                                                                localize(\n                                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.'\n                                                                )\n                                                            }\n                                                        />\n                                                    )}\n                                                </PasswordMeter>\n                                            </div>\n                                            {isSubmitting && <Loading is_fullscreen={false} />}\n                                            {!isSubmitting && (\n                                                <FormSubmitButton\n                                                    is_disabled={\n                                                        isSubmitting ||\n                                                        !values.new_password ||\n                                                        Object.keys(errors).length > 0\n                                                    }\n                                                    errors={errors}\n                                                    is_center={true}\n                                                    large\n                                                    label={localize('Create {{type}} password', { type })}\n                                                />\n                                            )}\n                                        </div>\n                                    </div>\n                                </form>\n                            )}\n                        </Formik>\n                    )}\n                </ResetPasswordIntent>\n            )}\n            {state.has_error && (\n                <div className='cfd-reset-password__error'>\n                    <Icon icon='IcMt5Expired' size={128} />\n                    <Text as='p' size='xs' weight='bold' align='center' className='cfd-reset-password__heading'>\n                        {state.error_message}\n                    </Text>\n                    {state.error_code === 'InvalidToken' && (\n                        <Text\n                            as='p'\n                            color='prominent'\n                            size='xs'\n                            align='center'\n                            className='cfd-reset-password__description--is-centered'\n                        >\n                            <Localize i18n_default_text='Please request a new password and check your email for the new token.' />\n                        </Text>\n                    )}\n                    <Button\n                        primary\n                        large\n                        className='cfd-reset-password__confirm-button'\n                        onClick={() => {\n                            clearAddressBar();\n                            setCFDPasswordResetModal(false);\n                        }}\n                    >\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n            {state.is_finished && (\n                <div className='cfd-reset-password__success'>\n                    <Icon icon='IcMt5PasswordUpdated' size={128} />\n                    <div className='cfd-reset-password__description'>\n                        <Text as='p' size='xs' align='center' weight='bold' line_height='xxl'>\n                            <Localize i18n_default_text='Password saved' />\n                        </Text>\n                        <Localize\n                            i18n_default_text='Your {{account_type}} password has been changed.'\n                            values={{\n                                account_type:\n                                    state.changed_password_type === 'main' ? localize('main') : localize('investor'),\n                            }}\n                        />\n                    </div>\n                    <Button primary large onClick={() => setCFDPasswordResetModal(false)}>\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n        </Modal>\n    );\n});\n\nexport default React.memo(CFDResetPasswordModal);\n","import React from 'react';\nimport { Dialog, UnhandledErrorModal } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst CFDServerErrorDialog = observer(() => {\n    const { ui } = useStore();\n    const { enableApp, disableApp } = ui;\n    const { clearCFDError, error_message, error_type, has_cfd_error, is_cfd_success_dialog_enabled } = useCfdStore();\n\n    const should_show_error =\n        has_cfd_error &&\n        !is_cfd_success_dialog_enabled &&\n        error_type &&\n        error_type !== 'PasswordReset' &&\n        error_type !== 'PasswordError';\n\n    if (should_show_error) {\n        return error_message ? (\n            <Dialog\n                title={localize('Something’s not right')}\n                confirm_button_text={localize('OK')}\n                onConfirm={clearCFDError}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_visible={should_show_error}\n            >\n                {error_message}\n            </Dialog>\n        ) : (\n            <UnhandledErrorModal />\n        );\n    }\n    return null;\n});\n\nexport default CFDServerErrorDialog;\n","import React from 'react';\nimport SuccessDialog from '../Components/success-dialog.jsx';\nimport { Icon, Modal, Button, Money, Text } from '@deriv/components';\nimport { getCFDPlatformLabel, CFD_PLATFORMS } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { TDxCompanies, TMtCompanies, TDerivezCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { getTopUpConfig } from '../Helpers/constants';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\ntype TCFDTopUpDemoModalProps = {\n    platform: string;\n};\n\nconst CFDTopUpDemoModal = observer(({ platform }: TCFDTopUpDemoModalProps) => {\n    const { ui } = useStore();\n\n    const {\n        is_top_up_virtual_open,\n        is_top_up_virtual_in_progress,\n        is_top_up_virtual_success,\n        closeTopUpModal,\n        closeSuccessTopUpModal,\n    } = ui;\n\n    const { current_account, dxtrade_companies, derivez_companies, mt5_companies, topUpVirtual } = useCfdStore();\n\n    const getAccountTitle = React.useCallback(() => {\n        let title = '';\n        if ((!mt5_companies && !dxtrade_companies && !derivez_companies) || !current_account) return '';\n\n        switch (platform) {\n            case CFD_PLATFORMS.MT5:\n                title =\n                    mt5_companies[current_account.category as keyof TMtCompanies][\n                        current_account.type as keyof TMtCompanies['demo' | 'real']\n                    ].title;\n                break;\n            case CFD_PLATFORMS.DERIVEZ:\n                title =\n                    derivez_companies[current_account.category as keyof TDerivezCompanies][\n                        current_account.type as keyof TDerivezCompanies['demo' | 'real']\n                    ].title;\n                break;\n            case CFD_PLATFORMS.DXTRADE:\n                title =\n                    dxtrade_companies[current_account.category as keyof TDxCompanies][\n                        current_account.type as keyof TDxCompanies['demo' | 'real']\n                    ].title;\n                break;\n            default:\n                break;\n        }\n\n        return title;\n    }, [mt5_companies, dxtrade_companies, current_account, derivez_companies]);\n\n    const onCloseSuccess = () => {\n        closeSuccessTopUpModal();\n    };\n\n    const platform_title = getCFDPlatformLabel(platform);\n\n    if ((!mt5_companies && !dxtrade_companies && !derivez_companies) || !current_account) return null;\n    const { minimum_amount, additional_amount } = getTopUpConfig();\n\n    return (\n        <React.Fragment>\n            <Modal\n                toggleModal={closeTopUpModal}\n                is_open={is_top_up_virtual_open}\n                className='top-up-virtual'\n                title={localize('Fund top up')}\n                width='384px'\n            >\n                <div className='dc-modal__container_top-up-virtual__body'>\n                    <Text\n                        as='p'\n                        align='center'\n                        size='xxs'\n                        line_height='xs'\n                        className='dc-modal__container_top-up-virtual__description'\n                        data-testid='dt_top_up_virtual_description'\n                    >\n                        <Localize\n                            i18n_default_text='You can top up your demo account with an additional <0></0> if your balance is <1></1> or less.'\n                            components={[\n                                <Money\n                                    key={0}\n                                    amount={additional_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                                <Money\n                                    key={1}\n                                    amount={minimum_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                            ]}\n                        />\n                    </Text>\n                    <h4 className='dc-modal__container_top-up-virtual--h4'>\n                        <Localize\n                            i18n_default_text='{{ platform }} {{ account_title }} account'\n                            values={{\n                                platform: platform_title,\n                                account_title: getAccountTitle(),\n                            }}\n                        />\n                    </h4>\n                    <div>\n                        <Text as='p' align='center' size='xxs'>\n                            <Localize i18n_default_text='Current balance' />\n                        </Text>\n                        <div className='dc-modal__container_top-up-virtual--balance'>\n                            <Money\n                                amount={current_account.display_balance}\n                                currency={current_account.currency}\n                                has_sign={(current_account.balance as number) < 0}\n                            />\n                        </div>\n                    </div>\n                    <div className='dc-modal__container_top-up-virtual--button'>\n                        <Button\n                            is_disabled={(current_account.balance as number) > 1000 || is_top_up_virtual_in_progress}\n                            type='button'\n                            is_loading={is_top_up_virtual_in_progress}\n                            onClick={() => topUpVirtual(platform)}\n                            primary\n                            large\n                        >\n                            {!is_top_up_virtual_in_progress && (\n                                <Localize\n                                    i18n_default_text='Top up &nbsp;<0></0>'\n                                    components={[\n                                        <Money\n                                            key={0}\n                                            amount={additional_amount}\n                                            currency={current_account.currency}\n                                            show_currency\n                                        />,\n                                    ]}\n                                />\n                            )}\n                        </Button>\n                    </div>\n                </div>\n            </Modal>\n            <SuccessDialog\n                is_open={is_top_up_virtual_success}\n                toggleModal={onCloseSuccess}\n                has_close_icon\n                title={localize('Fund top up')}\n                icon={<Icon icon='IcCashierWallet' size={128} />}\n                heading={\n                    <h3 className='cfd-success-topup__heading'>\n                        <Localize\n                            i18n_default_text='<0></0> has been credited into your {{platform}} {{title}} account.'\n                            values={{ platform: platform_title, title: getAccountTitle() }}\n                            components={[\n                                <Money\n                                    key={0}\n                                    amount={additional_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                            ]}\n                        />\n                    </h3>\n                }\n                message={\n                    <div className='cfd-success-topup__description'>\n                        <p>\n                            <Localize i18n_default_text='New current balance' />\n                        </p>\n                        <div className='dc-modal__container_top-up-virtual--balance'>\n                            <Money amount={current_account.balance} currency={current_account.currency} />\n                        </div>\n                    </div>\n                }\n                icon_size='large'\n                has_cancel={false}\n                has_submit={false}\n                width='384px'\n            />\n        </React.Fragment>\n    );\n});\n\nexport default CFDTopUpDemoModal;\n","import React from 'react';\nimport { Table, Text, ThemedScrollbars, Div100vhContainer } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { isDesktop, CFD_PLATFORMS, isLandingCompanyEnabled } from '@deriv/shared';\nimport { LandingCompany } from '@deriv/api-types';\n\ntype TCFDAttributeDescriberProps = {\n    name: string;\n    counter: number | null;\n};\n\ntype TFilterAvailableAccounts = (\n    landing_companies: LandingCompany,\n    table: TAccountsDescription[],\n    is_logged_in: boolean,\n    is_eu_client: boolean,\n    platform: string,\n    is_australian: boolean\n) => Array<{ [key: string]: string | React.ReactNode | undefined }>;\n\ntype TAccountsDescription = {\n    attribute: string;\n    mt5: TDxTradeAccountsDescription & { financial_stp: string };\n    dxtrade: TDxTradeAccountsDescription;\n};\n\ntype TDxTradeAccountsDescription = {\n    synthetic: string;\n    synthetic_eu: string;\n    financial: string;\n    financial_au: string;\n    financial_eu: string | React.ReactNode;\n    footnote: string | null;\n};\n\ntype TCompareAccountsReusedProps = {\n    landing_companies: LandingCompany;\n    platform: string;\n    is_logged_in: boolean;\n    is_uk: boolean;\n};\n\ntype TCompareAccountsDataParams = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n};\n\ntype TCFDCompareAccountHintProps = TCompareAccountsReusedProps & {\n    show_risk_message: boolean;\n};\n\ntype TModalContentProps = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n    is_eu: boolean;\n};\n\ntype TGetAccounts = (params: TCompareAccountsReusedProps) => TAccountsDescription[];\n\ntype TAccountTypesToFilter = (\n    | NonNullable<LandingCompany['mt_gaming_company']>['financial']\n    | NonNullable<LandingCompany['mt_financial_company']>['financial']\n    | NonNullable<LandingCompany['mt_financial_company']>['financial_stp']\n    | LandingCompany['dxtrade_gaming_company']\n    | LandingCompany['dxtrade_financial_company']\n    | boolean\n    | undefined\n)[];\n\nconst getAccounts: TGetAccounts = ({ landing_companies, platform, is_logged_in, is_uk }) => {\n    const getLoggedOutTypesCount = () => (platform === CFD_PLATFORMS.MT5 ? 3 : 2);\n    const getLoggedInTypesCount = () =>\n        (\n            (platform === CFD_PLATFORMS.MT5\n                ? [\n                      landing_companies?.mt_gaming_company?.financial,\n                      landing_companies?.mt_financial_company?.financial,\n                      landing_companies?.mt_financial_company?.financial_stp && platform === CFD_PLATFORMS.MT5,\n                  ]\n                : [\n                      landing_companies?.dxtrade_gaming_company,\n                      landing_companies?.dxtrade_financial_company,\n                  ]) as TAccountTypesToFilter\n        ).filter(Boolean).length;\n\n    const account_types_count = is_logged_in ? getLoggedInTypesCount() : getLoggedOutTypesCount();\n    const financial_eu_trading_instruments = is_uk ? (\n        <div>\n            {localize('Forex, stocks, stock indices, cryptocurrencies')}\n            <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                **\n            </Text>\n            {localize(', synthetic indices')}\n        </div>\n    ) : (\n        localize('Forex, stocks, stock indices, cryptocurrencies, synthetic indices')\n    );\n\n    return [\n        {\n            attribute: localize('Account currency'),\n            mt5: {\n                synthetic: localize('USD'),\n                synthetic_eu: localize('EUR'),\n                financial: localize('USD'),\n                financial_au: localize('USD'),\n                financial_eu: localize('EUR/GBP/USD'),\n                financial_stp: localize('USD'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('USD'),\n                synthetic_eu: localize('EUR'),\n                financial: localize('USD'),\n                financial_au: localize('USD'),\n                financial_eu: localize('EUR/GBP'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Maximum leverage'),\n            mt5: {\n                synthetic: localize('Up to 1:1000'),\n                synthetic_eu: localize('Up to 1:1000'),\n                financial: localize('Up to 1:1000'),\n                financial_au: localize('Up to 1:30'),\n                financial_eu: localize('Up to 1:30'),\n                financial_stp: localize('Up to 1:100'),\n                footnote: localize(\n                    'Leverage gives you the ability to trade a larger position using your existing capital. Leverage varies across different symbols.'\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('Up to 1:1000'),\n                synthetic_eu: localize('Up to 1:1000'),\n                financial: localize('Up to 1:1000'),\n                financial_au: localize('Up to 1:30'),\n                financial_eu: localize('Up to 1:30'),\n                footnote: localize(\n                    'Leverage gives you the ability to trade a larger position using your existing capital. Leverage varies across different symbols.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Order execution'),\n            mt5: {\n                synthetic: localize('Market'),\n                synthetic_eu: localize('Market'),\n                financial: localize('Market'),\n                financial_au: localize('Market'),\n                financial_eu: localize('Market'),\n                financial_stp: localize('Market'),\n                footnote: localize(\n                    \"All {{count}} account types use market execution. This means you agree with the broker's price in advance and will place orders at the broker's price.\",\n                    {\n                        count: account_types_count,\n                    }\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('Market'),\n                synthetic_eu: localize('Market'),\n                financial: localize('Market'),\n                financial_au: localize('Market'),\n                financial_eu: localize('Market'),\n                footnote: localize(\n                    \"All {{count}} account types use market execution. This means you agree with the broker's price in advance and will place orders at the broker's price.\",\n                    {\n                        count: account_types_count,\n                    }\n                ),\n            },\n        },\n        {\n            attribute: localize('Spread'),\n            mt5: {\n                synthetic: localize('Fixed/Variable'),\n                synthetic_eu: localize('Fixed/Variable'),\n                financial: localize('Variable'),\n                financial_au: localize('Variable'),\n                financial_eu: localize('Fixed/Variable'),\n                financial_stp: localize('Variable'),\n                footnote: localize(\n                    \"The spread is the difference between the buy price and sell price. A variable spread means that the spread is constantly changing, depending on market conditions. A fixed spread remains constant but is subject to alteration, at the Broker's absolute discretion.\"\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('Fixed/Variable'),\n                synthetic_eu: localize('Fixed/Variable'),\n                financial: localize('Variable'),\n                financial_au: localize('Variable'),\n                financial_eu: localize('Variable'),\n                footnote: localize(\n                    \"The spread is the difference between the buy price and sell price. A variable spread means that the spread is constantly changing, depending on market conditions. A fixed spread remains constant but is subject to alteration, at the Broker's absolute discretion.\"\n                ),\n            },\n        },\n        {\n            attribute: localize('Commission'),\n            mt5: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                financial_stp: localize('No'),\n                footnote: localize('Deriv charges no commission across all account types.'),\n            },\n            dxtrade: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                footnote: localize('Deriv charges no commission across all account types.'),\n            },\n        },\n        {\n            attribute: localize('Minimum deposit'),\n            mt5: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                financial_stp: localize('No'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Margin call'),\n            mt5: {\n                synthetic: localize('100%'),\n                synthetic_eu: localize('100%'),\n                financial: localize('100%'),\n                financial_au: localize('100%'),\n                financial_eu: localize('100%'),\n                financial_stp: localize('100%'),\n                footnote: localize(\n                    'You’ll get a warning, known as margin call, if your account balance drops down close to the stop out level.'\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('100%'),\n                synthetic_eu: localize('100%'),\n                financial: localize('100%'),\n                financial_au: localize('100%'),\n                financial_eu: localize('100%'),\n                footnote: localize(\n                    'You’ll get a warning, known as margin call, if your account balance drops down close to the stop out level.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Stop out level'),\n            mt5: {\n                synthetic: localize('50%'),\n                synthetic_eu: localize('50%'),\n                financial: localize('50%'),\n                financial_au: localize('50%'),\n                financial_eu: localize('50%'),\n                financial_stp: localize('50%'),\n                footnote: localize(\n                    \"To understand stop out, first you need to learn about margin level, which is  the ratio of your equity (the total balance you would have if you close all your positions at that point) to the margin you're using at the moment. If your margin level drops below our stop out level, your positions may be closed automatically to protect you from further losses.\"\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('50%'),\n                synthetic_eu: localize('50%'),\n                financial: localize('50%'),\n                financial_au: localize('50%'),\n                financial_eu: localize('50%'),\n                footnote: localize(\n                    \"To understand stop out, first you need to learn about margin level, which is  the ratio of your equity (the total balance you would have if you close all your positions at that point) to the margin you're using at the moment. If your margin level drops below our stop out level, your positions may be closed automatically to protect you from further losses.\"\n                ),\n            },\n        },\n        {\n            attribute: localize('Number of assets'),\n            mt5: {\n                synthetic: localize('20+'),\n                synthetic_eu: localize('20+'),\n                financial: localize('150+'),\n                financial_au: localize('100+'),\n                financial_eu: localize('50+'),\n                financial_stp: localize('70+'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('20+'),\n                synthetic_eu: localize('20+'),\n                financial: localize('90+'),\n                financial_au: localize('90+'),\n                financial_eu: localize('90+'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Cryptocurrency trading'),\n            mt5: {\n                synthetic: localize('N/A'),\n                synthetic_eu: localize('N/A'),\n                financial: localize('24/7'),\n                financial_au: localize('24/7'),\n                financial_eu: localize('24/7'),\n                financial_stp: localize('24/7'),\n                footnote: localize('Indicates the availability of cryptocurrency trading on a particular account.'),\n            },\n            dxtrade: {\n                synthetic: localize('N/A'),\n                synthetic_eu: localize('N/A'),\n                financial: localize('24/7'),\n                financial_au: localize('24/7'),\n                financial_eu: localize('24/7'),\n                footnote: localize('Indicates the availability of cryptocurrency trading on a particular account.'),\n            },\n        },\n        {\n            attribute: localize('Trading instruments'),\n            mt5: {\n                synthetic: localize('Synthetics'),\n                synthetic_eu: localize('Synthetics'),\n                financial: localize(\n                    'FX-majors (standard/micro lots), FX-minors, basket indices, commodities, cryptocurrencies, and stocks and stock indices'\n                ),\n                financial_au: localize(\n                    'FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies, Stocks, and Stock Indices'\n                ),\n                financial_eu: financial_eu_trading_instruments,\n                financial_stp: localize('FX-majors, FX-minors, FX-exotics, and cryptocurrencies'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('Synthetics'),\n                synthetic_eu: localize('Synthetics'),\n                financial: localize(\n                    'FX majors (standard/micro lots), FX minors, basket indices, commodities, and cryptocurrencies'\n                ),\n                financial_au: localize('FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies'),\n                financial_eu: localize(\n                    'FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies (except UK)'\n                ),\n                footnote: null,\n            },\n        },\n    ];\n};\n\nconst CFDAttributeDescriber = ({ name, counter }: TCFDAttributeDescriberProps) => {\n    const [is_visible, setIsVisible] = React.useState(false);\n    const toggleModal = () => setIsVisible(!is_visible);\n\n    return counter ? (\n        <React.Fragment>\n            <Text\n                as='p'\n                weight='bold'\n                size='xs'\n                line_height='s'\n                className='cfd-attribute-describer'\n                onClick={toggleModal}\n            >\n                {name}\n                <Text weight='bold' as='span' line_height='x' size='xxxs' className='counter'>\n                    {counter}\n                </Text>\n            </Text>\n        </React.Fragment>\n    ) : (\n        <Text as='p' weight='bold' size='xs' line_height='s' className='cfd-attribute-describer'>\n            {name}\n        </Text>\n    );\n};\n\nconst filterAvailableAccounts: TFilterAvailableAccounts = (\n    landing_companies,\n    table,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    is_australian\n) => {\n    const getFinancialObject = (financial?: string, financial_au?: string, financial_eu?: string | React.ReactNode) => {\n        if (is_australian) {\n            return financial_au;\n        }\n        if (is_eu_client) {\n            return financial_eu;\n        }\n        return financial;\n    };\n\n    let footnote_number = 0;\n    return table\n        .filter(row => row[platform as keyof TAccountsDescription])\n        .map(({ attribute, mt5 = {}, dxtrade = {} }) => {\n            const { synthetic, synthetic_eu, financial, financial_au, financial_eu, footnote } =\n                platform === CFD_PLATFORMS.MT5 ? mt5 : dxtrade;\n            const synthetic_object = { synthetic: is_eu_client ? synthetic_eu : synthetic };\n            const financial_object = { financial: getFinancialObject(financial, financial_au, financial_eu) };\n            const footnote_counter = footnote ? ++footnote_number : null;\n\n            if (is_logged_in) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    ...(landing_companies?.mt_gaming_company?.financial ? synthetic_object : {}),\n                    ...(landing_companies?.mt_financial_company?.financial ? financial_object : {}),\n                    ...(landing_companies?.mt_financial_company?.financial_stp && platform === CFD_PLATFORMS.MT5\n                        ? { financial_stp: mt5?.financial_stp }\n                        : {}),\n                };\n            }\n            if (platform === CFD_PLATFORMS.DXTRADE) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    ...synthetic_object,\n                    ...financial_object,\n                };\n            }\n            return {\n                attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                ...synthetic_object,\n                ...financial_object,\n                ...{ financial_stp: mt5?.financial_stp },\n            };\n        });\n};\n\nconst compareAccountsData = ({\n    landing_companies,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    residence,\n    is_uk,\n}: TCompareAccountsDataParams) => {\n    const is_australian = residence === 'au';\n    return filterAvailableAccounts(\n        landing_companies,\n        getAccounts({ landing_companies, platform, is_logged_in, is_uk }),\n        is_logged_in,\n        is_eu_client,\n        platform,\n        is_australian\n    );\n};\n\nconst CFDCompareAccountHint = ({\n    platform,\n    show_risk_message,\n    landing_companies,\n    is_logged_in,\n    is_uk,\n}: TCFDCompareAccountHintProps) => {\n    return (\n        <div className='cfd-compare-account--hint'>\n            <div className='cfd-compare-accounts__bullet-wrapper'>\n                <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                <Localize i18n_default_text='At bank rollover, liquidity in the forex markets is reduced and may increase the spread and processing time for client orders. This happens around 21:00 GMT during daylight saving time, and 22:00 GMT non-daylight saving time.' />\n            </div>\n            {show_risk_message && (\n                <React.Fragment>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                        <Localize i18n_default_text='Margin call and stop out level will change from time to time based on market condition.' />\n                    </div>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <Text\n                            size='xs'\n                            line_height='x'\n                            weight='bold'\n                            className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                        >\n                            *\n                        </Text>\n                        <Localize\n                            i18n_default_text='To protect your portfolio from adverse market movements due to the market opening gap, we reserve the right to decrease leverage on all offered symbols for financial accounts before market close and increase it again after market open. Please make sure that you have enough funds available in your {{platform}} account to support your positions at all times.'\n                            values={{\n                                platform: platform === CFD_PLATFORMS.MT5 ? localize('MT5') : localize('Deriv X'),\n                            }}\n                        />\n                    </div>\n                    {is_uk && (\n                        <div className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                **\n                            </Text>\n                            <Localize\n                                i18n_default_text='Cryptocurrency trading is not available for clients residing in the United Kingdom.'\n                                values={{\n                                    platform: platform === CFD_PLATFORMS.MT5 ? localize('MT5') : localize('Deriv X'),\n                                }}\n                            />\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n            {getAccounts({ landing_companies, platform, is_logged_in, is_uk })\n                .filter(\n                    item =>\n                        !!(item[platform as keyof TAccountsDescription] as TAccountsDescription['mt5' | 'dxtrade'])\n                            ?.footnote\n                )\n                .map((account, index) => {\n                    return (\n                        <div key={index} className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                {index + 1}\n                            </Text>\n                            <div className='cfd-compare-accounts__footnote'>\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className='cfd-compare-accounts__footnote-title'\n                                >\n                                    {account.attribute}\n                                </Text>\n                                <Text size='xs' color='prominent'>\n                                    {\n                                        (\n                                            account[platform as keyof TAccountsDescription] as TAccountsDescription[\n                                                | 'mt5'\n                                                | 'dxtrade']\n                                        ).footnote\n                                    }\n                                </Text>\n                            </div>\n                        </div>\n                    );\n                })}\n        </div>\n    );\n};\n\nconst ModalContent = ({\n    landing_companies,\n    is_logged_in,\n    platform,\n    is_eu_client,\n    residence,\n    is_eu,\n    is_uk,\n}: TModalContentProps) => {\n    const [cols, setCols] = React.useState<Array<Record<string, string | React.ReactNode | undefined>>>([]);\n    const [template_columns, updateColumnsStyle] = React.useState(\n        platform === CFD_PLATFORMS.DXTRADE ? '1.5fr 1fr 2fr' : '1.5fr 1fr 2fr 1fr'\n    );\n\n    React.useEffect(() => {\n        setCols(compareAccountsData({ landing_companies, is_logged_in, platform, is_eu_client, residence, is_uk }));\n\n        if (is_logged_in && platform === CFD_PLATFORMS.MT5) {\n            updateColumnsStyle(\n                `1.5fr ${landing_companies?.mt_gaming_company?.financial ? '1fr' : ''} ${\n                    landing_companies?.mt_financial_company?.financial ? '2fr' : ''\n                } ${landing_companies?.mt_financial_company?.financial_stp ? ' 1fr ' : ''}`\n            );\n        } else if (is_logged_in && platform === CFD_PLATFORMS.DXTRADE) {\n            updateColumnsStyle(\n                `1.5fr ${landing_companies?.dxtrade_gaming_company ? '1fr' : ''} ${\n                    landing_companies?.dxtrade_financial_company ? '2fr' : ''\n                }`\n            );\n        }\n    }, [\n        landing_companies?.mt_financial_company,\n        landing_companies?.mt_gaming_company,\n        is_logged_in,\n        is_uk,\n        landing_companies,\n        platform,\n        is_eu_client,\n        residence,\n    ]);\n\n    const show_risk_message = platform === CFD_PLATFORMS.MT5 || !is_eu_client;\n    const financial_account_table_head_text = is_eu ? localize('CFDs') : localize('Financial');\n\n    return (\n        <Div100vhContainer height_offset='40px' is_bypassed={isDesktop()}>\n            <ThemedScrollbars\n                className='cfd-compare-accounts'\n                style={{\n                    '--cfd-compare-accounts-template-columns': template_columns,\n                }}\n            >\n                <div className='cfd-compare-accounts__table-wrapper'>\n                    <Table className='cfd-compare-accounts__table'>\n                        <Table.Header>\n                            <Table.Row className='cfd-compare-accounts__table-row'>\n                                <Table.Head fixed />\n                                {is_logged_in ? (\n                                    <React.Fragment>\n                                        {isLandingCompanyEnabled({ landing_companies, platform, type: 'gaming' }) && (\n                                            <Table.Head>{localize('Derived')}</Table.Head>\n                                        )}\n                                        {isLandingCompanyEnabled({\n                                            landing_companies,\n                                            platform,\n                                            type: 'financial',\n                                        }) && (\n                                            <Table.Head>\n                                                {financial_account_table_head_text}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                        {isLandingCompanyEnabled({\n                                            landing_companies,\n                                            platform,\n                                            type: 'financial_stp',\n                                        }) && (\n                                            <Table.Head>\n                                                {localize('Financial STP')}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                    </React.Fragment>\n                                ) : (\n                                    <React.Fragment>\n                                        <Table.Head>{localize('Derived')}</Table.Head>\n                                        <Table.Head>\n                                            {localize('Financial')}\n                                            <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                *\n                                            </Text>\n                                        </Table.Head>\n                                        {platform === CFD_PLATFORMS.MT5 && (\n                                            <Table.Head>\n                                                {localize('Financial STP')}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {cols.map((row, i) => (\n                                <Table.Row key={i} className='cfd-compare-accounts__table-row'>\n                                    {Object.keys(row).map((col, j) => (\n                                        <Table.Cell key={j} fixed={j === 0}>\n                                            {row[col]}\n                                        </Table.Cell>\n                                    ))}\n                                </Table.Row>\n                            ))}\n                        </Table.Body>\n                    </Table>\n                </div>\n                <CFDCompareAccountHint\n                    platform={platform}\n                    show_risk_message={show_risk_message}\n                    landing_companies={landing_companies}\n                    is_logged_in={is_logged_in}\n                    is_uk={is_uk}\n                />\n            </ThemedScrollbars>\n        </Div100vhContainer>\n    );\n};\n\nexport default ModalContent;\n","import { localize } from '@deriv/translations';\nimport { TCompareAccountContentProps, TCompareAccountFooterButtonData } from '../Containers/props.types';\n\nexport const getEuRealContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            financial_maltainvest: { text: localize('MT5'), options: { size: 'xxs' } },\n        },\n    },\n    {\n        id: 'jurisdiction',\n        attribute: localize('Jurisdiction'),\n        values: {\n            financial_maltainvest: { text: localize('Malta'), options: { weight: 'bold' } },\n        },\n    },\n    {\n        id: 'counterparty',\n        attribute: localize('Counterparty company'),\n        values: {\n            financial_maltainvest: { text: localize('Deriv Investments (Europe) Limited') },\n        },\n    },\n    {\n        id: 'regulator',\n        attribute: localize('Regulator'),\n        values: {\n            financial_maltainvest: {\n                text: localize('Regulated by the Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n                options: { styles: { padding: '1.8rem 0.8rem' } },\n            },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            financial_maltainvest: { text: localize('Up to 1:30'), options: { size: 'xxxs' } },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            financial_maltainvest: [\n                { text: localize('Synthetics'), options: { should_show_asterick_at_end: true } },\n                { text: localize('Forex: standard') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n                {\n                    text: localize('*Boom 300 and Crash 300 Index'),\n                    options: { color: 'loss-danger', weight: 'bold', styles: { paddingTop: '2rem' } },\n                },\n            ],\n        },\n    },\n];\nexport const getCrRealContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            synthetic_svg: { text: localize('MT5') },\n            derivx: { text: localize('Deriv X') },\n        },\n    },\n    {\n        id: 'jurisdiction',\n        attribute: localize('Jurisdiction'),\n        values: {\n            synthetic_svg: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n            synthetic_bvi: { text: localize('British Virgin Islands'), options: { weight: 'bold' } },\n            synthetic_vanuatu: { text: localize('Vanuatu'), options: { weight: 'bold' } },\n            financial_svg: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n            financial_bvi: { text: localize('British Virgin Islands'), options: { weight: 'bold' } },\n            financial_vanuatu: { text: localize('Vanuatu'), options: { weight: 'bold' } },\n            financial_labuan: {\n                text: localize('Labuan'),\n                options: { weight: 'bold' },\n                tooltip_msg: localize(\n                    'Choosing this jurisdiction will give you a Financial STP account. Your trades will go directly to the market and have tighter spreads.'\n                ),\n            },\n            derivx: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n        },\n    },\n    {\n        id: 'counterparty',\n        attribute: localize('Counterparty company'),\n        values: {\n            synthetic_svg: { text: localize('Deriv (SVG) LLC') },\n            synthetic_bvi: { text: localize('Deriv (BVI) Ltd') },\n            synthetic_vanuatu: { text: localize('Deriv (V) Ltd') },\n            financial_svg: { text: localize('Deriv (SVG) LLC') },\n            financial_bvi: { text: localize('Deriv (BVI) Ltd') },\n            financial_vanuatu: { text: localize('Deriv (V) Ltd') },\n            financial_labuan: { text: localize('Deriv (FX) Ltd') },\n            derivx: { text: localize('Deriv (SVG) LLC') },\n        },\n    },\n    {\n        id: 'regulator',\n        attribute: localize('Regulator/External dispute resolution'),\n        values: {\n            synthetic_svg: { text: localize('Financial Commission') },\n            synthetic_bvi: {\n                text: localize('British Virgin Islands Financial Services Commission (licence no. SIBA/L/18/1114)'),\n            },\n            synthetic_vanuatu: {\n                text: localize('Vanuatu Financial Services Commission'),\n            },\n            financial_svg: { text: localize('Financial Commission') },\n            financial_bvi: {\n                text: localize('British Virgin Islands Financial Services Commission (licence no. SIBA/L/18/1114)'),\n            },\n            financial_vanuatu: {\n                text: localize('Vanuatu Financial Services Commission'),\n            },\n            financial_labuan: { text: localize('Labuan Financial Services Authority (Licence no. MB/18/0024)') },\n            derivx: { text: 'Financial Commission' },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            synthetic_svg: { text: localize('Up to 1:1000') },\n            financial_vanuatu: { text: localize('Up to 1:1000') },\n            financial_labuan: { text: localize('Up to 1:100') },\n            derivx: { text: localize('Up to 1:1000') },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            synthetic_svg: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n            ],\n            financial_svg: [\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            financial_vanuatu: [\n                { text: localize('Forex') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            financial_labuan: [{ text: localize('Forex') }, { text: localize('Cryptocurrencies') }],\n            derivx: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n        },\n    },\n];\n\nexport const getCrRealFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'synthetic_svg' },\n    { label: localize('Add'), action: 'synthetic_bvi' },\n    { label: localize('Add'), action: 'synthetic_vanuatu' },\n    { label: localize('Add'), action: 'financial_svg' },\n    { label: localize('Add'), action: 'financial_bvi' },\n    { label: localize('Add'), action: 'financial_vanuatu' },\n    { label: localize('Add'), action: 'financial_labuan' },\n    { label: localize('Add'), action: 'derivx' },\n];\nexport const getEuFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'financial_maltainvest' },\n];\n\nexport const getPreappstoreCrDemoContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            synthetic_svg: { text: localize('MT5') },\n            financial_svg: { text: localize('MT5') },\n            derivx: { text: localize('Deriv X') },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            synthetic_svg: { text: localize('Up to 1:1000') },\n            financial_svg: { text: localize('Up to 1:1000') },\n            derivx: { text: localize('Up to 1:1000') },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            synthetic_svg: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n            ],\n            financial_svg: [\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            derivx: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n        },\n    },\n];\n\nexport const getPreappstoreCrDemoFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'synthetic_svg' },\n    { label: localize('Add'), action: 'financial_svg' },\n    { label: localize('Add'), action: 'derivx' },\n];\n\nexport const getPreappstoreEuDemoContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            financial_maltainvest: { text: localize('Up to 1:30'), options: { size: 'xxxs' } },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            financial_maltainvest: [\n                { text: localize('Synthetics'), options: { should_show_asterick_at_end: true } },\n                { text: localize('Forex: standard') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n                {\n                    text: localize('*Boom 300 and Crash 300 Index'),\n                    options: { color: 'loss-danger', weight: 'bold', styles: { paddingTop: '2rem' } },\n                },\n            ],\n        },\n    },\n];\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Table, Button, Text, Popover } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isDesktop, WS, getAuthenticationStatusInfo, CFD_PLATFORMS, ContentFlag, Jurisdiction } from '@deriv/shared';\nimport {\n    TDMT5CompareModalContentProps,\n    TCompareAccountContentProps,\n    TCompareAccountFooterButtonData,\n    TCompareAccountContentValues,\n    TCompareAccountRowProps,\n    TCompareAccountRowItem,\n} from './props.types';\nimport {\n    getEuRealContent,\n    getCrRealContent,\n    getCrRealFooterButtons,\n    getPreappstoreCrDemoContent,\n    getPreappstoreCrDemoFooterButtons,\n    getPreappstoreEuDemoContent,\n    getEuFooterButtons,\n} from '../Constants/cfd_compare_account_content';\nimport { GetSettings, GetAccountSettingsResponse } from '@deriv/api-types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst Row = ({\n    id,\n    attribute,\n    values,\n    pre_appstore_class,\n    available_accounts_count,\n    classname_for_demo_and_eu,\n    is_pre_appstore_setting,\n    content_flag,\n    is_high_risk_for_mt5,\n    CFDs_restricted_countries,\n    financial_restricted_countries,\n    is_preappstore_restricted_cr_demo_account,\n    residence,\n}: TCompareAccountRowProps) => {\n    const is_leverage_row = id === 'leverage';\n    const is_platform_row = id === 'platform';\n    const is_instruments_row = id === 'instruments';\n    const is_other_countries = ['af', 'pk', 'mg'].includes(residence);\n\n    const getContentSize = () => {\n        if (id === 'counterparty' || id === 'leverage') return isDesktop() ? 'xxs' : 'xxxs';\n        return isDesktop() ? 'xxxs' : 'xxxxs';\n    };\n\n    if (is_platform_row && !is_pre_appstore_setting) {\n        return null;\n    }\n\n    if (is_platform_row && is_pre_appstore_setting && CFDs_restricted_countries) {\n        values.synthetic_bvi = { text: 'MT5' };\n    }\n    if (CFDs_restricted_countries) {\n        if (is_leverage_row) values.synthetic_bvi = { text: localize('Up to 1:1000') };\n        delete values.derivx;\n    }\n    if (is_platform_row && financial_restricted_countries) {\n        values.financial_svg = { text: localize('MT5') };\n        if ('financial_labuan' in values) values.financial_labuan = { text: localize('MT5') };\n    }\n    // As we only show one account for Demo\n    if (content_flag === ContentFlag.CR_DEMO) {\n        delete values.financial_labuan;\n    }\n\n    if (is_pre_appstore_setting && is_preappstore_restricted_cr_demo_account) {\n        delete values.synthetic_bvi;\n    }\n\n    if (is_platform_row && content_flag === ContentFlag.HIGH_RISK_CR && is_high_risk_for_mt5) {\n        // needed to adjust the design for high risk\n        values.financial_svg = { text: 'MT5' };\n    }\n    return (\n        <Table.Row\n            className={\n                classname_for_demo_and_eu ??\n                classNames(`cfd-accounts-compare-modal__table-row${pre_appstore_class}`, {\n                    [`cfd-accounts-compare-modal__table-row--leverage${pre_appstore_class}`]: is_leverage_row,\n                    [`cfd-accounts-compare-modal__row-with-columns-count-${available_accounts_count + 1}`]:\n                        available_accounts_count < 6,\n                    [`cfd-accounts-compare-modal__table-row--platform${pre_appstore_class}`]: is_platform_row,\n                    [`cfd-accounts-compare-modal__table-row--instruments${pre_appstore_class}`]: is_instruments_row,\n                    'cfd-accounts-compare-modal__table-row--other-country': is_other_countries,\n                    [`cfd-accounts-compare-modal__table-row--leverage__${residence}`]:\n                        is_leverage_row && is_other_countries,\n                    [`cfd-accounts-compare-modal__table-row--instruments__${residence}`]:\n                        is_instruments_row && is_other_countries,\n                })\n            }\n        >\n            <Table.Cell fixed>\n                <Text as='p' weight='bold' color='prominent' size='xxs'>\n                    {attribute}\n                </Text>\n            </Table.Cell>\n\n            {Object.keys(values).map(rowKey => (\n                <Table.Cell\n                    key={rowKey}\n                    className={classNames('cfd-accounts-compare-modal__table-row-item', {\n                        'cfd-accounts-compare-modal__table-row-item--tooltip': (\n                            values[rowKey] as TCompareAccountRowItem\n                        )?.tooltip_msg,\n                    })}\n                >\n                    <>\n                        {Array.isArray(values[rowKey]) ? (\n                            (values[rowKey] as TCompareAccountRowItem[])?.map((item, index) => (\n                                <Text\n                                    key={index}\n                                    as='p'\n                                    color={item?.options?.color ?? 'prominent'}\n                                    weight={item?.options?.weight ?? 'normal'}\n                                    align={item?.options?.align ?? 'center'}\n                                    size={item?.options?.size ?? getContentSize()}\n                                    styles={item?.options?.styles ?? ''}\n                                >\n                                    {item.text}\n                                    {item?.options?.should_show_asterick_at_end && (\n                                        <Text color={'loss-danger'} size={'xxxs'}>\n                                            *\n                                        </Text>\n                                    )}\n                                </Text>\n                            ))\n                        ) : (\n                            <>\n                                <Text\n                                    as='p'\n                                    weight={(values[rowKey] as TCompareAccountRowItem)?.options?.weight ?? 'normal'}\n                                    align={(values[rowKey] as TCompareAccountRowItem)?.options?.align ?? 'center'}\n                                    color={(values[rowKey] as TCompareAccountRowItem)?.options?.color ?? 'prominent'}\n                                    size={(values[rowKey] as TCompareAccountRowItem)?.options?.size ?? getContentSize()}\n                                    styles={(values[rowKey] as TCompareAccountRowItem)?.options?.styles ?? ''}\n                                >\n                                    {(values[rowKey] as TCompareAccountRowItem)?.text}\n                                </Text>\n                                {(values[rowKey] as TCompareAccountRowItem)?.tooltip_msg && (\n                                    <Popover\n                                        alignment='left'\n                                        className='cfd-compare-accounts-tooltip'\n                                        classNameBubble='cfd-compare-accounts-tooltip--msg'\n                                        icon='info'\n                                        disable_message_icon\n                                        is_bubble_hover_enabled\n                                        message={(values[rowKey] as TCompareAccountRowItem)?.tooltip_msg}\n                                        zIndex={9999}\n                                    />\n                                )}\n                            </>\n                        )}\n                    </>\n                </Table.Cell>\n            ))}\n        </Table.Row>\n    );\n};\n\nconst DMT5CompareModalContent = observer(\n    ({\n        content_flag,\n        is_demo_tab,\n        is_logged_in,\n        is_pre_appstore_setting,\n        is_preappstore_cr_demo_account,\n        is_preappstore_restricted_cr_demo_account,\n        is_real_enabled,\n        openDerivRealAccountNeededModal,\n        openPasswordModal,\n        real_account_creation_unlock_date,\n        setShouldShowCooldownModal,\n        should_show_derivx,\n        show_eu_related_content,\n        toggleCompareAccounts,\n    }: TDMT5CompareModalContentProps) => {\n        const { client, ui, common, traders_hub } = useStore();\n\n        const {\n            account_settings,\n            account_status,\n            has_active_real_account: has_real_account,\n            is_virtual,\n            should_restrict_bvi_account_creation,\n            setAccountSettings,\n            should_restrict_vanuatu_account_creation,\n            trading_platform_available_accounts,\n            updateMT5Status,\n            upgradeable_landing_companies,\n            residence,\n        } = client;\n        const { openSwitchToRealAccountModal } = ui;\n        const { setAppstorePlatform } = common;\n        const { no_CR_account, is_eu_user, no_MF_account, CFDs_restricted_countries, financial_restricted_countries } =\n            traders_hub;\n\n        const {\n            clearCFDError,\n            current_list,\n            setAccountType,\n            setJurisdictionSelectedShortcode,\n            toggleCFDVerificationModal,\n        } = useCfdStore();\n\n        const [has_submitted_personal_details, setHasSubmittedPersonalDetails] = React.useState(false);\n\n        const mt5_platforms = trading_platform_available_accounts.map(\n            account => `${account.market_type === 'gaming' ? 'synthetic' : account.market_type}_${account.shortcode}`\n        );\n\n        const has_synthetic = trading_platform_available_accounts.some(account => account.market_type === 'gaming');\n        const available_accounts_keys = [...mt5_platforms, ...(should_show_derivx && has_synthetic ? ['derivx'] : [])];\n\n        const logged_out_available_accounts_count = show_eu_related_content ? 1 : 6;\n        const available_accounts_count = is_logged_in\n            ? available_accounts_keys.length\n            : logged_out_available_accounts_count;\n        const synthetic_accounts_count =\n            !is_logged_in && !show_eu_related_content\n                ? 2\n                : available_accounts_keys.filter(key => key.startsWith('synthetic')).length;\n        const financial_accounts_count =\n            !is_logged_in && !show_eu_related_content\n                ? 4\n                : available_accounts_keys.filter(key => key.startsWith('financial')).length || 1;\n\n        const is_high_risk_for_mt5 = synthetic_accounts_count === 1 && financial_accounts_count === 1;\n        const {\n            poi_or_poa_not_submitted,\n            poi_acknowledged_for_vanuatu_maltainvest,\n            poi_acknowledged_for_bvi_labuan,\n            poa_acknowledged,\n            poa_pending,\n        } = getAuthenticationStatusInfo(account_status);\n\n        const is_other_countries = ['af', 'pk', 'mg'].includes(residence);\n\n        React.useEffect(() => {\n            if (is_logged_in && !is_virtual) {\n                updateMT5Status();\n            }\n            if (!has_submitted_personal_details) {\n                let get_settings_response: GetSettings = {};\n                if (!account_settings) {\n                    WS.authorized.storage.getSettings().then((response: GetAccountSettingsResponse) => {\n                        get_settings_response = response.get_settings as GetSettings;\n                        setAccountSettings(response.get_settings as GetSettings);\n                    });\n                } else {\n                    get_settings_response = account_settings;\n                }\n                const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n                    get_settings_response;\n                if (citizen && place_of_birth && tax_residence && tax_identification_number && account_opening_reason) {\n                    setHasSubmittedPersonalDetails(true);\n                }\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        const getAvailableAccountsContent = (modal_content: TCompareAccountContentProps[]) => {\n            if (!is_logged_in) {\n                if (show_eu_related_content) {\n                    return modal_content;\n                }\n                const mt5_data = modal_content.map(item => {\n                    const { derivx, ...rest } = item.values; // eslint-disable-line @typescript-eslint/no-unused-vars\n                    return { ...item, values: rest };\n                });\n                return mt5_data;\n            }\n            return modal_content.map(row_data => {\n                const available_accounts_values = Object.entries(row_data.values).reduce(\n                    (acc, [key, value]) => (available_accounts_keys.includes(key) ? { ...acc, [key]: value } : acc),\n                    {} as TCompareAccountContentValues\n                );\n                const content_data = { ...row_data, values: {} as TCompareAccountContentValues };\n                const col_num = should_show_derivx ? 7 : 6;\n                if (available_accounts_keys.length < col_num && !show_eu_related_content) {\n                    // order of the values matters for data to be correctly displayed in the table\n                    const sorted_values = [\n                        'synthetic_svg',\n                        'synthetic_bvi',\n                        'financial_svg',\n                        'financial_bvi',\n                        'financial_vanuatu',\n                        'financial_labuan',\n                        ...(should_show_derivx && synthetic_accounts_count > 0 ? ['derivx'] : []),\n                    ];\n                    content_data.values = sorted_values.reduce(\n                        (acc, el) => (available_accounts_keys.includes(el) ? { ...acc, [el]: undefined } : acc),\n                        {}\n                    );\n                    available_accounts_keys.forEach(key => {\n                        if (row_data.id === 'leverage' && (key === 'financial_svg' || key === 'financial_bvi')) {\n                            content_data.values[key] = row_data.values.financial_vanuatu;\n                        } else if (row_data.id === 'instruments' && key === 'synthetic_bvi') {\n                            content_data.values[key] = row_data.values.synthetic_svg;\n                        } else if (row_data.id === 'instruments' && key === 'financial_bvi') {\n                            content_data.values[key] = row_data.values.financial_svg;\n                        }\n                    });\n                }\n                return { ...content_data, values: { ...content_data.values, ...available_accounts_values } };\n            });\n        };\n\n        const getAvailableAccountsFooterButtons = (footer_button_data: TCompareAccountFooterButtonData[]) => {\n            return footer_button_data.filter(data => {\n                if (CFDs_restricted_countries) {\n                    //remove derivx button if user is from restricted countries\n                    if (data.action === 'derivx') return false;\n                }\n                return available_accounts_keys.includes(data.action);\n            });\n        };\n\n        const onSelectRealAccount = (item: TCompareAccountFooterButtonData) => {\n            const selected_account_type = () => {\n                if (item.action === 'derivx') return 'all';\n                return item.action.startsWith('financial') ? 'financial' : 'synthetic';\n            };\n\n            const type_of_account = {\n                category: is_demo_tab ? 'demo' : 'real',\n                type: selected_account_type(),\n            };\n            clearCFDError();\n            setAccountType(type_of_account);\n\n            switch (item.action) {\n                case 'synthetic_svg':\n                case 'financial_svg':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                    openPasswordModal(type_of_account);\n                    break;\n                case 'synthetic_bvi':\n                case 'financial_bvi':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.BVI);\n                    if (\n                        poi_acknowledged_for_bvi_labuan &&\n                        !poi_or_poa_not_submitted &&\n                        !should_restrict_bvi_account_creation &&\n                        has_submitted_personal_details &&\n                        poa_acknowledged\n                    ) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'synthetic_vanuatu':\n                case 'financial_vanuatu':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.VANUATU);\n                    if (\n                        poi_acknowledged_for_vanuatu_maltainvest &&\n                        !poi_or_poa_not_submitted &&\n                        !should_restrict_vanuatu_account_creation &&\n                        has_submitted_personal_details &&\n                        poa_acknowledged\n                    ) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'financial_labuan':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.LABUAN);\n                    if (poi_acknowledged_for_bvi_labuan && poa_acknowledged && has_submitted_personal_details) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'financial_maltainvest':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                    if ((poi_acknowledged_for_vanuatu_maltainvest && poa_acknowledged) || is_demo_tab) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'derivx':\n                    setAppstorePlatform(CFD_PLATFORMS.DXTRADE);\n                    openPasswordModal(type_of_account);\n                    break;\n                default:\n            }\n        };\n\n        const isMt5AccountAdded = (item: TCompareAccountFooterButtonData) =>\n            Object.entries(current_list).some(([key, value]) => {\n                const [market, type] = item.action.split('_');\n                const current_account_type = is_demo_tab ? 'demo' : 'real';\n                return (\n                    value.market_type === market &&\n                    value.landing_company_short === type &&\n                    value.account_type === current_account_type &&\n                    key.includes(CFD_PLATFORMS.MT5)\n                );\n            });\n\n        const isDxtradeAccountAdded = () =>\n            Object.entries(current_list).some(([key, value]) => {\n                const current_account_type = is_demo_tab ? 'demo' : 'real';\n                return value.account_type === current_account_type && key.includes(CFD_PLATFORMS.DXTRADE);\n            });\n\n        const onButtonClick = (item: TCompareAccountFooterButtonData) => {\n            const if_no_corresponding_real_account = is_pre_appstore_setting\n                ? (no_CR_account && !is_eu_user) || (no_MF_account && is_eu_user)\n                : !has_real_account;\n\n            const should_show_missing_real_account =\n                is_logged_in &&\n                if_no_corresponding_real_account &&\n                upgradeable_landing_companies?.length > 0 &&\n                is_real_enabled;\n\n            toggleCompareAccounts();\n            if (should_show_missing_real_account) {\n                if (real_account_creation_unlock_date && item.action === 'financial_maltainvest') {\n                    setShouldShowCooldownModal(true);\n                } else {\n                    openDerivRealAccountNeededModal();\n                }\n            } else if (\n                is_virtual &&\n                !['synthetic_svg', 'financial_svg', 'derivx', 'financial_maltainvest'].includes(item.action)\n            ) {\n                openSwitchToRealAccountModal();\n            } else {\n                onSelectRealAccount(item);\n            }\n        };\n\n        const getModalContent = () => {\n            if (is_preappstore_cr_demo_account) {\n                return getPreappstoreCrDemoContent();\n            } else if (show_eu_related_content) {\n                if (is_pre_appstore_setting && content_flag === ContentFlag.EU_DEMO) {\n                    return getPreappstoreEuDemoContent();\n                }\n                return getEuRealContent();\n            }\n            return getCrRealContent();\n        };\n\n        const modal_footer = () => {\n            if (is_preappstore_cr_demo_account) return getPreappstoreCrDemoFooterButtons();\n            else if (is_demo_tab && show_eu_related_content) return getEuFooterButtons();\n            return show_eu_related_content ? getEuFooterButtons() : getCrRealFooterButtons();\n        };\n\n        const shouldShowPendingStatus = (item: TCompareAccountFooterButtonData) => {\n            const type = item.action.split('_')[1];\n            if (isMt5AccountAdded(item)) {\n                return false;\n            } else if (item.action === 'derivx') {\n                return false;\n            } else if (type === 'bvi' && should_restrict_bvi_account_creation && poa_pending) {\n                return true;\n            } else if (type === 'vanuatu' && should_restrict_vanuatu_account_creation && poa_pending) {\n                return true;\n            }\n\n            return false;\n        };\n\n        const pre_appstore_class = should_show_derivx && synthetic_accounts_count ? '__pre-appstore' : '';\n\n        const getClassNamesForDemoAndEu = () => {\n            if (is_preappstore_cr_demo_account) return 'cfd-accounts-compare-modal-row-demo';\n            else if (show_eu_related_content) return 'cfd-accounts-compare-modal-row-eu';\n            return null;\n        };\n\n        const classname_for_demo_and_eu = getClassNamesForDemoAndEu();\n\n        return (\n            <div className='cfd-accounts-compare-modal'>\n                <div className='cfd-accounts-compare-modal__table-wrapper'>\n                    <Table className='cfd-accounts-compare-modal__table'>\n                        <Table.Header>\n                            <Table.Row\n                                className={\n                                    classname_for_demo_and_eu ??\n                                    classNames(`cfd-accounts-compare-modal__table-header${pre_appstore_class}`, {\n                                        [`cfd-accounts-compare-modal__table-header-for-synthetic-${synthetic_accounts_count}-financial-${financial_accounts_count}${pre_appstore_class}`]:\n                                            available_accounts_count < 6 && !CFDs_restricted_countries,\n                                        [`cfd-accounts-compare-modal__table-header-for-synthetic-${synthetic_accounts_count}${pre_appstore_class}`]:\n                                            CFDs_restricted_countries,\n                                    })\n                                }\n                            >\n                                <Table.Head fixed className='cfd-accounts-compare-modal__table-empty-cell' />\n                                {!show_eu_related_content && synthetic_accounts_count > 0 && (\n                                    <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                        {localize('Derived')}\n                                    </Table.Head>\n                                )}\n                                {!CFDs_restricted_countries && financial_accounts_count > 0 && (\n                                    <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                        {show_eu_related_content ? localize('CFDs') : localize('Financial')}\n                                    </Table.Head>\n                                )}\n                                {!CFDs_restricted_countries && should_show_derivx && synthetic_accounts_count > 0 && (\n                                    <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                        {localize('Deriv X')}\n                                    </Table.Head>\n                                )}\n                            </Table.Row>\n                        </Table.Header>\n\n                        <React.Fragment>\n                            <Table.Body>\n                                {getAvailableAccountsContent(getModalContent()).map(row => (\n                                    <Row\n                                        key={row.id}\n                                        {...row}\n                                        pre_appstore_class={pre_appstore_class}\n                                        available_accounts_count={available_accounts_count}\n                                        classname_for_demo_and_eu={classname_for_demo_and_eu}\n                                        is_pre_appstore_setting={is_pre_appstore_setting}\n                                        content_flag={content_flag}\n                                        is_high_risk_for_mt5={is_high_risk_for_mt5}\n                                        CFDs_restricted_countries={CFDs_restricted_countries}\n                                        financial_restricted_countries={financial_restricted_countries}\n                                        is_preappstore_restricted_cr_demo_account={\n                                            is_preappstore_restricted_cr_demo_account\n                                        }\n                                        residence={residence}\n                                    />\n                                ))}\n                            </Table.Body>\n                            {is_logged_in && (\n                                <Table.Row\n                                    className={\n                                        classname_for_demo_and_eu ??\n                                        classNames(`cfd-accounts-compare-modal__table-footer${pre_appstore_class}`, {\n                                            [`cfd-accounts-compare-modal__row-with-columns-count-${\n                                                available_accounts_count + 1\n                                            }`]: available_accounts_count < 6,\n                                            [`cfd-accounts-compare-modal__table-footer__${residence}`]:\n                                                is_other_countries,\n                                        })\n                                    }\n                                >\n                                    <Table.Cell\n                                        fixed\n                                        className={\n                                            'cfd-accounts-compare-modal__table-empty-cell cfd-accounts-compare-modal__table-footer__item'\n                                        }\n                                    />\n\n                                    {getAvailableAccountsFooterButtons(modal_footer()).map((item, index) => (\n                                        <Table.Cell\n                                            key={index}\n                                            className={classNames('cfd-accounts-compare-modal__table-footer__item', {\n                                                [`cfd-accounts-compare-modal__table-footer__item--eu-pre_appstore}`]:\n                                                    is_pre_appstore_setting && show_eu_related_content,\n                                            })}\n                                        >\n                                            {!is_demo_tab && shouldShowPendingStatus(item) ? (\n                                                <div className='cfd-accounts-compare-modal__table-footer__item--verification-pending'>\n                                                    <Text size={isDesktop ? 'xxs' : 'xxxs'} align='center'>\n                                                        {localize('Pending verification')}\n                                                    </Text>\n                                                </div>\n                                            ) : (\n                                                <Button\n                                                    className='cfd-accounts-compare-modal__table-footer__button'\n                                                    disabled={\n                                                        item.action === 'derivx'\n                                                            ? isDxtradeAccountAdded()\n                                                            : isMt5AccountAdded(item)\n                                                    }\n                                                    type='button'\n                                                    primary_light\n                                                    onClick={() => onButtonClick(item)}\n                                                >\n                                                    {item.label}\n                                                </Button>\n                                            )}\n                                        </Table.Cell>\n                                    ))}\n                                </Table.Row>\n                            )}\n                        </React.Fragment>\n                    </Table>\n                </div>\n            </div>\n        );\n    }\n);\n\nexport default DMT5CompareModalContent;\n","import React from 'react';\nimport { Table, Text, ThemedScrollbars, Div100vhContainer } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { isDesktop, CFD_PLATFORMS } from '@deriv/shared';\nimport { LandingCompany, CurrencyConfigStructure } from '@deriv/api-types';\n\n// TODO: Remove this temporary type when api-types updates\ntype TLandingCompany = LandingCompany & {\n    /**\n     * Available Deriv X financial account types (all except Synthetic Indices).\n     */\n    dxtrade_all_company?: {\n        /**\n         * Landing Company details.\n         */\n        standard?: {\n            /**\n             * Landing Company address\n             */\n            address?: string[] | null;\n            /**\n             * Special conditions for changing sensitive fields\n             */\n            changeable_fields?: {\n                [k: string]: unknown;\n            };\n            /**\n             * Landing Company country of incorporation\n             */\n            country?: string;\n            currency_config?: CurrencyConfigStructure;\n            /**\n             * Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.\n             */\n            has_reality_check?: 0 | 1;\n            /**\n             * Allowed contract types\n             */\n            legal_allowed_contract_categories?: string[];\n            /**\n             * Allowable currencies\n             */\n            legal_allowed_currencies?: string[];\n            /**\n             * Allowable markets\n             */\n            legal_allowed_markets?: string[];\n            /**\n             * Default account currency\n             */\n            legal_default_currency?: string;\n            /**\n             * Landing Company legal name\n             */\n            name?: string;\n            /**\n             * Legal requirements for the Landing Company\n             */\n            requirements?: {\n                [k: string]: unknown;\n            };\n            /**\n             * Landing Company short code\n             */\n            shortcode?: string;\n            /**\n             * Flag that indicates whether the landing company supports professional accounts or not\n             */\n            support_professional_client?: 0 | 1;\n        };\n    };\n};\n\ntype TCFDAttributeDescriberProps = {\n    name: string;\n    counter: number | null;\n};\n\ntype TFilterAvailableAccounts = (\n    landing_companies: TLandingCompany,\n    table: TAccountsDescription[],\n    is_logged_in: boolean,\n    is_eu_client: boolean,\n    platform: string,\n    is_australian: boolean\n) => Array<{ [key: string]: string | React.ReactNode | undefined }>;\n\ntype TAccountsDescription = {\n    attribute: string;\n    dxtrade: TDxTradeAccountsDescription;\n};\n\ntype TDxTradeAccountsDescription = {\n    derivx: string;\n    footnote: string | null;\n};\n\ntype TCompareAccountsReusedProps = {\n    landing_companies: TLandingCompany;\n    platform: string;\n    is_logged_in: boolean;\n    is_uk: boolean;\n};\n\ntype TCompareAccountsDataParams = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n};\n\ntype TCFDCompareAccountHintProps = TCompareAccountsReusedProps & {\n    show_risk_message: boolean;\n};\n\ntype TModalContentProps = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n    is_eu: boolean;\n};\n\ntype TGetAccounts = (params: TCompareAccountsReusedProps) => TAccountsDescription[];\n\ntype TAccountTypesToFilter = (TLandingCompany['dxtrade_all_company'] | boolean | undefined)[];\n\nconst getAccounts: TGetAccounts = ({ landing_companies, is_logged_in }) => {\n    const getLoggedInTypesCount = ([landing_companies?.dxtrade_all_company] as TAccountTypesToFilter).length;\n\n    const account_types_count = is_logged_in ? getLoggedInTypesCount : 2;\n\n    return [\n        {\n            attribute: localize('Currency'),\n            dxtrade: {\n                derivx: localize('USD'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Maximum leverage'),\n            dxtrade: {\n                derivx: localize('Up to 1:1000'),\n                footnote: localize(\n                    'Leverage gives you the ability to trade a larger position using your existing capital. Leverage varies across different symbols.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Order execution'),\n            dxtrade: {\n                derivx: localize('Market'),\n                footnote: localize(\n                    \"All {{count}} account types use market execution. This means you agree with the broker's price in advance and will place orders at the broker's price.\",\n                    {\n                        count: account_types_count,\n                    }\n                ),\n            },\n        },\n        {\n            attribute: localize('Spread'),\n            dxtrade: {\n                derivx: localize('Fixed/Variable'),\n                footnote: localize(\n                    \"The spread is the difference between the buy price and sell price. A variable spread means that the spread is constantly changing, depending on market conditions. A fixed spread remains constant but is subject to alteration, at the Broker's absolute discretion.\"\n                ),\n            },\n        },\n        {\n            attribute: localize('Commission'),\n            dxtrade: {\n                derivx: localize('No'),\n                footnote: localize('Deriv charges no commission across all account types.'),\n            },\n        },\n        {\n            attribute: localize('Minimum deposit'),\n            dxtrade: {\n                derivx: localize('No'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Margin call'),\n            dxtrade: {\n                derivx: localize('100%'),\n                footnote: localize(\n                    'You’ll get a warning, named margin call, if your account balance drops down close to the stop out level.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Stop out level'),\n            dxtrade: {\n                derivx: localize('50%'),\n                footnote: localize(\n                    'If your margin level drops below our stop out level, your positions may be closed automatically to protect you from further losses.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Negative Balance Protection'),\n            dxtrade: {\n                derivx: localize('Available'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Number of assets'),\n            dxtrade: {\n                derivx: localize('110+'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Cryptocurrency trading'),\n            dxtrade: {\n                derivx: localize('N/A'),\n                footnote: localize('Indicates the availability of cryptocurrency trading on a particular account.'),\n            },\n        },\n        {\n            attribute: localize('Trading instruments'),\n            dxtrade: {\n                derivx: localize(\n                    'Synthetics, Baskets, Derived FX, Forex: standard/micro, Stocks, Stock indices, Commodities, Cryptocurrencies'\n                ),\n                footnote: null,\n            },\n        },\n    ];\n};\n\nconst CFDAttributeDescriber = ({ name, counter }: TCFDAttributeDescriberProps) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [is_visible, setIsVisible] = React.useState(false);\n    const toggleModal = () => setIsVisible(prev => !prev);\n\n    return counter ? (\n        <React.Fragment>\n            <Text\n                as='p'\n                weight='bold'\n                size='xs'\n                line_height='s'\n                className='cfd-attribute-describer'\n                onClick={toggleModal}\n            >\n                {name}\n                <Text weight='bold' as='span' line_height='x' size='xxxs' className='counter'>\n                    {counter}\n                </Text>\n            </Text>\n        </React.Fragment>\n    ) : (\n        <Text as='p' weight='bold' size='xs' line_height='s' className='cfd-attribute-describer'>\n            {name}\n        </Text>\n    );\n};\n\nconst filterAvailableAccounts: TFilterAvailableAccounts = (\n    landing_companies,\n    table,\n    is_logged_in,\n    is_eu_client,\n    platform\n) => {\n    let footnote_number = 0;\n    return table\n        .filter(row => row[platform as keyof TAccountsDescription])\n        .map(({ attribute, dxtrade = {} }) => {\n            const { derivx, footnote } = dxtrade;\n            const footnote_counter = footnote ? ++footnote_number : null;\n\n            if (platform === CFD_PLATFORMS.DXTRADE) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    derivx,\n                };\n            }\n            if (is_logged_in) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                };\n            }\n            return {\n                attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n            };\n        });\n};\n\nconst compareAccountsData = ({\n    landing_companies,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    residence,\n    is_uk,\n}: TCompareAccountsDataParams) => {\n    const is_australian = residence === 'au';\n    return filterAvailableAccounts(\n        landing_companies,\n        getAccounts({ landing_companies, platform, is_logged_in, is_uk }),\n        is_logged_in,\n        is_eu_client,\n        platform,\n        is_australian\n    );\n};\n\nconst CFDCompareAccountHint = ({\n    platform,\n    show_risk_message,\n    landing_companies,\n    is_logged_in,\n    is_uk,\n}: TCFDCompareAccountHintProps) => {\n    return (\n        <div className='cfd-compare-account--hint'>\n            <div className='cfd-compare-accounts__bullet-wrapper'>\n                <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                <Localize i18n_default_text='At bank rollover, liquidity in the forex markets is reduced and may increase the spread and processing time for client orders. This happens around 21:00 GMT during daylight saving time, and 22:00 GMT non-daylight saving time.' />\n            </div>\n            {show_risk_message && (\n                <React.Fragment>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                        <Localize i18n_default_text='Margin call and stop out level will change from time to time based on market condition.' />\n                    </div>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <Text\n                            size='xs'\n                            line_height='x'\n                            weight='bold'\n                            className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                        >\n                            *\n                        </Text>\n                        <Localize\n                            i18n_default_text='To protect your portfolio from adverse market movements due to the market opening gap, we reserve the right to decrease leverage on all offered symbols for financial accounts before market close and increase it again after market open. Please make sure that you have enough funds available in your {{platform}} account to support your positions at all times.'\n                            values={{\n                                platform: localize('Deriv X'),\n                            }}\n                        />\n                    </div>\n                    {is_uk && (\n                        <div className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                **\n                            </Text>\n                            <Localize\n                                i18n_default_text='Cryptocurrency trading is not available for clients residing in the United Kingdom.'\n                                values={{\n                                    platform: localize('Deriv X'),\n                                }}\n                            />\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n            {getAccounts({ landing_companies, platform, is_logged_in, is_uk })\n                .filter(\n                    item =>\n                        !!(item[platform as keyof TAccountsDescription] as TAccountsDescription['dxtrade'])?.footnote\n                )\n                .map((account, index) => {\n                    return (\n                        <div key={index} className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                {index + 1}\n                            </Text>\n                            <div className='cfd-compare-accounts__footnote'>\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className='cfd-compare-accounts__footnote-title'\n                                >\n                                    {account.attribute}\n                                </Text>\n                                <Text size='xs' color='prominent'>\n                                    {\n                                        (\n                                            account[\n                                                platform as keyof TAccountsDescription\n                                            ] as TAccountsDescription['dxtrade']\n                                        ).footnote\n                                    }\n                                </Text>\n                            </div>\n                        </div>\n                    );\n                })}\n        </div>\n    );\n};\n\nconst CfdDxtradeCompareContent = ({\n    landing_companies,\n    is_logged_in,\n    platform,\n    is_eu_client,\n    residence,\n    is_uk,\n}: TModalContentProps) => {\n    const [cols, setCols] = React.useState<Array<Record<string, string | React.ReactNode | undefined>>>([]);\n    const [template_columns, updateColumnsStyle] = React.useState('1fr 1.5fr');\n\n    React.useEffect(() => {\n        setCols(compareAccountsData({ landing_companies, is_logged_in, platform, is_eu_client, residence, is_uk }));\n        updateColumnsStyle('1fr 1.5fr');\n    }, [\n        landing_companies?.mt_financial_company,\n        landing_companies?.mt_gaming_company,\n        is_logged_in,\n        is_uk,\n        landing_companies,\n        platform,\n        is_eu_client,\n        residence,\n    ]);\n\n    const show_risk_message = !is_eu_client;\n\n    return (\n        <Div100vhContainer height_offset='40px' is_bypassed={isDesktop()}>\n            <ThemedScrollbars\n                className='cfd-compare-accounts'\n                style={{\n                    '--cfd-compare-accounts-template-columns': template_columns,\n                }}\n            >\n                <div className='cfd-compare-accounts__table-wrapper'>\n                    <Table className='cfd-compare-accounts__table'>\n                        <Table.Header>\n                            <Table.Row className='cfd-compare-accounts__table-row'>\n                                <Table.Head fixed />\n                                <Table.Head>{localize('Deriv X')}</Table.Head>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {cols.map((row, i) => (\n                                <Table.Row key={i} className='cfd-compare-accounts__table-row'>\n                                    {Object.keys(row).map((col, j) => (\n                                        <Table.Cell key={j} fixed={j === 0}>\n                                            {row[col]}\n                                        </Table.Cell>\n                                    ))}\n                                </Table.Row>\n                            ))}\n                        </Table.Body>\n                    </Table>\n                </div>\n                <CFDCompareAccountHint\n                    platform={platform}\n                    show_risk_message={show_risk_message}\n                    landing_companies={landing_companies}\n                    is_logged_in={is_logged_in}\n                    is_uk={is_uk}\n                />\n            </ThemedScrollbars>\n        </Div100vhContainer>\n    );\n};\n\nexport default CfdDxtradeCompareContent;\n","import React from 'react';\nimport { Button, Modal, DesktopWrapper, MobileDialog, MobileWrapper, UILoader } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { CFD_PLATFORMS, isLandingCompanyEnabled, ContentFlag } from '@deriv/shared';\nimport ModalContent from './compare-accounts-content';\nimport DMT5CompareModalContent from './mt5-compare-table-content';\nimport CfdDxtradeCompareContent from '../Components/cfd-dxtrade-compare-content';\nimport { observer, useStore } from '@deriv/stores';\nimport { LandingCompany } from '@deriv/api-types';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\ntype TCompareAccountsReusedProps = {\n    platform: string;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCompareAccountsModalProps = TCompareAccountsReusedProps & {\n    is_real_enabled: boolean;\n    is_demo_tab: boolean;\n    has_unmerged_account: boolean;\n    openPasswordModal: (account_type: TOpenAccountTransferMeta) => void;\n    real_account_creation_unlock_date: string;\n    setShouldShowCooldownModal: (value: boolean) => void;\n};\n\ntype TDxtradeCompareAccountContent = TCompareAccountsReusedProps & {\n    is_demo_tab: boolean;\n    is_eu_client: boolean;\n    has_unmerged_account: boolean;\n    residence: string;\n    is_eu: boolean;\n    is_logged_in: boolean;\n    is_uk: boolean;\n    landing_companies: LandingCompany;\n};\n\n// TODO: Remove this component and use one component for both when real released.\nconst DxtradeCompareAccountContent = ({\n    is_demo_tab,\n    is_logged_in,\n    landing_companies,\n    platform,\n    is_eu_client,\n    has_unmerged_account,\n    residence,\n    is_eu,\n    is_uk,\n}: TDxtradeCompareAccountContent) => {\n    if (is_demo_tab || !has_unmerged_account) {\n        return (\n            <CfdDxtradeCompareContent\n                is_logged_in={is_logged_in}\n                landing_companies={landing_companies}\n                platform={platform}\n                is_eu_client={is_eu_client}\n                residence={residence}\n                is_eu={is_eu}\n                is_uk={is_uk}\n            />\n        );\n    }\n\n    return (\n        <ModalContent\n            is_logged_in={is_logged_in}\n            landing_companies={landing_companies}\n            platform={platform}\n            is_eu_client={is_eu_client}\n            residence={residence}\n            is_eu={is_eu}\n            is_uk={is_uk}\n        />\n    );\n};\n\nconst CompareAccountsModal = observer(\n    ({\n        has_unmerged_account,\n        is_demo_tab,\n        is_real_enabled,\n        openPasswordModal,\n        platform,\n        real_account_creation_unlock_date,\n        setShouldShowCooldownModal,\n    }: TCompareAccountsModalProps) => {\n        const { ui, client, traders_hub } = useStore();\n\n        const { disableApp, enableApp, openDerivRealAccountNeededModal } = ui;\n        const {\n            is_populating_mt5_account_list: is_loading,\n            is_eu,\n            is_uk,\n            is_logged_in,\n            landing_companies,\n            residence,\n        } = client;\n        const { content_flag, show_eu_related_content, CFDs_restricted_countries } = traders_hub;\n\n        const { is_compare_accounts_visible, toggleCompareAccountsModal } = useCfdStore();\n        const location = window.location.pathname;\n        const is_pre_appstore_setting = location.startsWith('/appstore/traders-hub');\n\n        // TODO : should change the type to all after changing derivx api\n        const has_derivx =\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform: CFD_PLATFORMS.DXTRADE,\n                type: 'financial',\n            }) ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform: CFD_PLATFORMS.DXTRADE,\n                type: 'gaming',\n            }) ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform: CFD_PLATFORMS.DXTRADE,\n                type: 'all',\n            });\n\n        const should_show_derivx = is_pre_appstore_setting && has_derivx && !show_eu_related_content;\n\n        const is_preappstore_cr_demo_account = is_pre_appstore_setting && content_flag === ContentFlag.CR_DEMO;\n\n        const is_preappstore_restricted_cr_demo_account =\n            is_pre_appstore_setting && CFDs_restricted_countries && content_flag === ContentFlag.CR_DEMO;\n\n        const is_dxtrade = platform && platform === CFD_PLATFORMS.DXTRADE;\n        const mt5_accounts = [\n            landing_companies?.mt_gaming_company?.financial,\n            landing_companies?.mt_financial_company?.financial,\n            landing_companies?.mt_financial_company?.financial_stp,\n        ];\n\n        const cfd_account_button_label =\n            mt5_accounts.filter(Boolean).length === 1 ||\n            (is_demo_tab && platform === CFD_PLATFORMS.DXTRADE) ||\n            (!has_unmerged_account && platform === CFD_PLATFORMS.DXTRADE)\n                ? localize('Account Information')\n                : localize('Compare accounts');\n\n        const getCFDModalTitle = () => {\n            if (is_pre_appstore_setting && show_eu_related_content) {\n                return is_demo_tab ? localize('Deriv MT5 CFDs demo account') : localize('Deriv MT5 CFDs real account');\n            } else if (should_show_derivx) {\n                return is_demo_tab ? localize('Compare CFDs demo accounts') : localize('Compare CFDs real accounts');\n            }\n            return is_dxtrade ? cfd_account_button_label : localize('Compare available accounts');\n        };\n        const getModalStyle = () => {\n            if (is_dxtrade) {\n                return {\n                    height: '696px',\n                    width: '903px',\n                };\n            } else if (is_preappstore_cr_demo_account) {\n                return {\n                    height: '404px',\n                    width: '610px',\n                };\n            } else if (show_eu_related_content) {\n                if (is_pre_appstore_setting) {\n                    if (content_flag === ContentFlag.EU_DEMO) {\n                        return {\n                            height: '350px',\n                            width: '483px',\n                        };\n                    }\n                    return {\n                        height: '560px',\n                        width: '483px',\n                    };\n                }\n                return {\n                    height: '525px',\n                    width: '300px',\n                };\n            } else if (is_pre_appstore_setting && should_show_derivx) {\n                return {\n                    height: '600px',\n                    width: '1115px',\n                };\n            }\n            return {\n                height: '506px',\n                width: '996px',\n            };\n        };\n\n        const getModalContent = () => {\n            return is_dxtrade ? (\n                <DxtradeCompareAccountContent\n                    is_demo_tab={is_demo_tab}\n                    is_logged_in={is_logged_in}\n                    landing_companies={landing_companies}\n                    platform={platform}\n                    is_eu_client={!!show_eu_related_content}\n                    residence={residence}\n                    has_unmerged_account={has_unmerged_account}\n                    is_eu={is_eu}\n                    is_uk={is_uk}\n                />\n            ) : (\n                <DMT5CompareModalContent\n                    content_flag={content_flag}\n                    is_demo_tab={is_demo_tab}\n                    is_logged_in={is_logged_in}\n                    is_pre_appstore_setting={is_pre_appstore_setting}\n                    is_preappstore_cr_demo_account={is_preappstore_cr_demo_account}\n                    is_preappstore_restricted_cr_demo_account={is_preappstore_restricted_cr_demo_account}\n                    is_real_enabled={is_real_enabled}\n                    openDerivRealAccountNeededModal={openDerivRealAccountNeededModal}\n                    openPasswordModal={openPasswordModal}\n                    real_account_creation_unlock_date={real_account_creation_unlock_date}\n                    setShouldShowCooldownModal={setShouldShowCooldownModal}\n                    should_show_derivx={should_show_derivx}\n                    show_eu_related_content={show_eu_related_content}\n                    toggleCompareAccounts={toggleCompareAccountsModal}\n                />\n            );\n        };\n\n        return (\n            <>\n                <div\n                    className='cfd-compare-accounts-modal__wrapper'\n                    style={{ marginTop: is_dxtrade ? '5rem' : '2.4rem' }}\n                >\n                    {!(is_demo_tab && platform === 'mt5') && !is_pre_appstore_setting && (\n                        <Button\n                            className='cfd-dashboard__welcome-message--button'\n                            has_effect\n                            text={cfd_account_button_label}\n                            onClick={toggleCompareAccountsModal}\n                            secondary\n                            disabled={is_loading}\n                        />\n                    )}\n                    <React.Suspense fallback={<UILoader />}>\n                        <DesktopWrapper>\n                            <Modal\n                                className={\n                                    is_dxtrade ? 'cfd-dashboard__compare-accounts' : 'cfd-accounts-compare-modal'\n                                }\n                                disableApp={disableApp}\n                                enableApp={enableApp}\n                                is_open={is_compare_accounts_visible}\n                                title={getCFDModalTitle()}\n                                toggleModal={toggleCompareAccountsModal}\n                                type='button'\n                                height={getModalStyle().height}\n                                width={getModalStyle().width}\n                                exit_classname={is_dxtrade ? '' : 'cfd-modal--custom-exit'}\n                            >\n                                {getModalContent()}\n                            </Modal>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <MobileDialog\n                                portal_element_id='deriv_app'\n                                title={getCFDModalTitle()}\n                                wrapper_classname='cfd-dashboard__compare-accounts'\n                                visible={is_compare_accounts_visible}\n                                onClose={toggleCompareAccountsModal}\n                                header_classname={is_dxtrade ? '' : 'cfd-accounts-compare-modal-mobile-header'}\n                                has_full_height\n                            >\n                                {getModalContent()}\n                            </MobileDialog>\n                        </MobileWrapper>\n                    </React.Suspense>\n                </div>\n            </>\n        );\n    }\n);\n\nexport default CompareAccountsModal;\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionVerificationItems, TJurisdictionVerificationStatus } from 'Components/props.types';\n\ntype TJurisdictionVerificationContents = {\n    short_description: string;\n    required_verification_docs: TJurisdictionVerificationItems;\n    status_references: Array<TJurisdictionVerificationStatus>;\n};\n\nexport const jurisdictionVerificationContents = (): TJurisdictionVerificationContents => ({\n    short_description: localize('We need you to submit these in order to get this account:'),\n    required_verification_docs: {\n        document_number: {\n            icon: 'IcDocumentNumberVerification',\n            text: localize('Document number (identity card, passport)'),\n        },\n        selfie: {\n            icon: 'IcSelfieVerification',\n            text: localize('A selfie of yourself.'),\n        },\n        identity_document: {\n            icon: 'IcIdentityDocumentVerification',\n            text: localize('A copy of your identity document (identity card, passport)'),\n        },\n        name_and_address: {\n            icon: 'IcNameAndAddressVerification',\n            text: localize(\n                'A recent utility bill (electricity, water or gas) or recent bank statement or government-issued letter with your name and address.'\n            ),\n        },\n        not_applicable: {\n            icon: 'IcNotApplicableVerification',\n            text: '',\n        },\n    },\n    status_references: [\n        {\n            icon: 'IcVerificationStatusYellow',\n            text: localize('Your document is pending for verification.'),\n            color: 'yellow',\n        },\n        {\n            icon: 'IcVerificationStatusRed',\n            text: localize('Verification failed. Resubmit during account creation.'),\n            color: 'red',\n        },\n        { icon: 'IcVerificationStatusGreen', text: localize('Your document is verified.'), color: 'green' },\n    ],\n});\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { jurisdictionVerificationContents } from '../../Constants/jurisdiction-contents/jurisdiction-verification-contents';\nimport { TJurisdictionCardBackProps } from 'Containers/props.types';\n\nconst JurisdictionCardBack = ({\n    card_classname,\n    disabled,\n    is_card_selected,\n    toggleCardFlip,\n    verification_docs,\n}: TJurisdictionCardBackProps) => (\n    <div\n        data-testid='dt_jurisdiction_card_back_container'\n        className={classNames(card_classname, 'cfd-card-back', {\n            [`${card_classname}--selected selected-card`]: is_card_selected,\n            'cfd-card-disabled-flat': disabled,\n        })}\n    >\n        <div\n            data-testid='dt_jurisdiction_card_back'\n            className={classNames(\n                `${card_classname}__card-content-container`,\n                `${card_classname}__card-flipped-container`\n            )}\n        >\n            <div>\n                <Icon\n                    onClick={toggleCardFlip}\n                    className='cfd-card-back-section-back-button'\n                    icon='IcBackButton'\n                    size={20}\n                />\n            </div>\n            <Text as='div' size='xxs'>\n                {jurisdictionVerificationContents().short_description}\n            </Text>\n            <div className={classNames('cfd-card-back-section-items-container')}>\n                {verification_docs?.map(verification_item => (\n                    <div key={verification_item} className='cfd-card-back-section-items-sub-container'>\n                        <div>\n                            <Icon\n                                icon={\n                                    jurisdictionVerificationContents().required_verification_docs[verification_item]\n                                        ?.icon\n                                }\n                            />\n                        </div>\n                        <Text as='span' size='xxs' className='cfd-card-back-section-text-icon-aligned'>\n                            {jurisdictionVerificationContents().required_verification_docs[verification_item]?.text}\n                        </Text>\n                    </div>\n                ))}\n            </div>\n            <div className='cfd-card-section-divider' />\n            <div className='cfd-card-back-section-items-container'>\n                {jurisdictionVerificationContents().status_references.map(status_item => (\n                    <div className='cfd-card-back-section-items-sub-container' key={status_item.color}>\n                        <div>\n                            <Icon icon={status_item.icon} />\n                        </div>\n                        <Text as='span' size='xxs' className='cfd-card-back-section-text-icon-aligned'>\n                            {status_item.text}\n                        </Text>\n                    </div>\n                ))}\n            </div>\n        </div>\n    </div>\n);\n\nexport default JurisdictionCardBack;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { TJurisdictionClickableDescriptionProps } from 'Containers/props.types';\n\nconst JurisdictionClickableDescription = ({\n    clickable_description,\n    toggleCardFlip,\n}: TJurisdictionClickableDescriptionProps) => (\n    <div>\n        {clickable_description.map(description_part => {\n            return description_part.type === 'link' ? (\n                <span key={description_part.text} onClick={toggleCardFlip}>\n                    <Text\n                        data-testid='dt_jurisdiction_clickable_description'\n                        as='span'\n                        size='xxs'\n                        className='cfd-card-clickable-description-link'\n                    >\n                        {description_part.text}\n                    </Text>\n                    &nbsp;\n                </span>\n            ) : (\n                <Text key={description_part.text} as='span' size='xxs'>\n                    {description_part.text}\n                </Text>\n            );\n        })}\n    </div>\n);\n\nexport default JurisdictionClickableDescription;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Icon, Text } from '@deriv/components';\nimport { getAuthenticationStatusInfo, Jurisdiction } from '@deriv/shared';\nimport { jurisdictionVerificationContents } from '../../Constants/jurisdiction-contents/jurisdiction-verification-contents';\nimport { TJurisdictionTitleIndicatorProps } from 'Containers/props.types';\nimport { TJurisdictionCardItemVerificationItem, TJurisdictionCardVerificationStatus } from 'Components/props.types';\n\nconst JurisdictionTitleIndicator = ({\n    account_status,\n    title_indicators,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionTitleIndicatorProps) => {\n    const {\n        poi_pending_for_bvi_labuan,\n        poi_resubmit_for_bvi_labuan,\n        poi_verified_for_bvi_labuan,\n        poi_pending_for_vanuatu_maltainvest,\n        poi_resubmit_for_vanuatu_maltainvest,\n        poi_verified_for_vanuatu_maltainvest,\n        poa_pending,\n        need_poa_resubmission,\n        poa_verified,\n    } = getAuthenticationStatusInfo(account_status);\n\n    const getVerificationIconVariant = (verification_document: TJurisdictionCardItemVerificationItem): string => {\n        let icon_variant: TJurisdictionCardVerificationStatus = 'Default';\n        if ([Jurisdiction.BVI, Jurisdiction.LABUAN].includes(type_of_card)) {\n            if (['document_number', 'selfie', 'identity_document'].includes(verification_document)) {\n                if (poi_pending_for_bvi_labuan) {\n                    icon_variant = 'Pending';\n                } else if (poi_resubmit_for_bvi_labuan) {\n                    icon_variant = 'Failed';\n                } else if (poi_verified_for_bvi_labuan) {\n                    icon_variant = 'Verified';\n                }\n            }\n        } else if ([Jurisdiction.VANUATU, Jurisdiction.MALTA_INVEST].includes(type_of_card)) {\n            if (['document_number', 'selfie', 'identity_document'].includes(verification_document)) {\n                if (poi_pending_for_vanuatu_maltainvest) {\n                    icon_variant = 'Pending';\n                } else if (poi_resubmit_for_vanuatu_maltainvest) {\n                    icon_variant = 'Failed';\n                } else if (poi_verified_for_vanuatu_maltainvest) {\n                    icon_variant = 'Verified';\n                }\n            }\n        }\n        if (verification_document === 'name_and_address') {\n            if (poa_pending) {\n                icon_variant = 'Pending';\n            } else if (need_poa_resubmission) {\n                icon_variant = 'Failed';\n            } else if (poa_verified) {\n                icon_variant = 'Verified';\n            }\n        }\n        return icon_variant;\n    };\n\n    return title_indicators.type === 'displayText' ? (\n        <Text\n            as='span'\n            color='colored-background'\n            weight='bold'\n            align='center'\n            size='xxxs'\n            className={classNames(\n                'cfd-card-section-title-indicator',\n                `cfd-card-section-title-indicator__${title_indicators.display_text_skin_color}`\n            )}\n        >\n            {title_indicators.display_text}\n        </Text>\n    ) : (\n        <div\n            data-testid='dt_jurisdiction_title_indicator_icon'\n            className='cfd-card-section-title-indicator-icon-container'\n        >\n            {verification_docs?.map(verification_document => (\n                <div\n                    data-testid={`dt_jurisdiction_title_indicator_${getVerificationIconVariant(\n                        verification_document\n                    )}_icon`}\n                    key={verification_document}\n                >\n                    <Icon\n                        size={24}\n                        icon={jurisdictionVerificationContents().required_verification_docs[\n                            verification_document\n                        ]?.icon.concat(getVerificationIconVariant(verification_document))}\n                    />\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default JurisdictionTitleIndicator;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { TJurisdictionCardSectionProps } from '../props.types';\nimport JurisdictionClickableDescription from './jurisdiction-clickable-description';\nimport JurisdictionTitleIndicator from './jurisdiction-title-indicator';\n\nconst JurisdictionCardSection = ({\n    account_status,\n    card_section_item,\n    toggleCardFlip,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionCardSectionProps) => (\n    <div className='cfd-card-section'>\n        <div className='cfd-card-title-container'>\n            <Text as='span' weight='bold' size='xs'>\n                {card_section_item.title}\n            </Text>\n            {card_section_item.title_indicators && (\n                <JurisdictionTitleIndicator\n                    account_status={account_status}\n                    title_indicators={card_section_item.title_indicators}\n                    type_of_card={type_of_card}\n                    verification_docs={verification_docs}\n                />\n            )}\n        </div>\n        {(card_section_item.clickable_description || card_section_item.description) && (\n            <div className={`cfd-card-section-description-height-${card_section_item.key.toLowerCase()}`}>\n                {card_section_item.clickable_description ? (\n                    <JurisdictionClickableDescription\n                        clickable_description={card_section_item.clickable_description}\n                        toggleCardFlip={toggleCardFlip}\n                    />\n                ) : (\n                    card_section_item.description && (\n                        <Text as='span' size='xxs'>\n                            {card_section_item.description}\n                        </Text>\n                    )\n                )}\n            </div>\n        )}\n    </div>\n);\n\nexport default JurisdictionCardSection;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionCardFrontProps } from 'Containers/props.types';\nimport JurisdictionCardSection from './jurisdiction-card-section';\n\nconst JurisdictionCardFront = ({\n    account_status,\n    card_classname,\n    card_data,\n    card_values,\n    disabled,\n    is_card_selected,\n    toggleCardFlip,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionCardFrontProps) => (\n    <div\n        className={classNames(card_classname, 'cfd-card-front', {\n            [`${card_classname}--selected selected-card`]: is_card_selected,\n            'cfd-card-disabled-flat': disabled,\n        })}\n    >\n        <div className={`${card_classname}__card-content-container`}>\n            {card_values.is_over_header_available ? (\n                <Text\n                    as='div'\n                    weight='bold'\n                    color='info-blue'\n                    align='center'\n                    size='xs'\n                    className={`${card_classname}__card-content-over-header`}\n                >\n                    <Localize i18n_default_text={card_values.over_header} />\n                </Text>\n            ) : (\n                <div className={`${card_classname}__card-content-over-header-blank`} />\n            )}\n            <Text\n                as='p'\n                weight='bold'\n                color='prominent'\n                align='center'\n                size='xsm'\n                className={`${card_classname}__h2-header`}\n            >\n                <Localize i18n_default_text={card_values.header} />\n            </Text>\n            <div className={`${card_classname}__card-section-container`}>\n                {card_data.map((item, index) => (\n                    <React.Fragment key={item.key}>\n                        <JurisdictionCardSection\n                            account_status={account_status}\n                            card_section_item={item}\n                            toggleCardFlip={toggleCardFlip}\n                            type_of_card={type_of_card}\n                            verification_docs={verification_docs}\n                        />\n                        {index < card_data.length - 1 && <div className='cfd-card-section-divider' />}\n                    </React.Fragment>\n                ))}\n            </div>\n            {disabled && (\n                <div className={`${card_classname}__card-content-footer`}>\n                    <Text\n                        as='div'\n                        weight='bold'\n                        color='colored-background'\n                        align='center'\n                        size='xs'\n                        className={`${card_classname}__card-content-footer-text`}\n                    >\n                        <Localize i18n_default_text='Added' />\n                    </Text>\n                </div>\n            )}\n        </div>\n    </div>\n);\n\nexport default JurisdictionCardFront;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Jurisdiction } from '@deriv/shared';\nimport { getJurisdictionContents } from '../../Constants/jurisdiction-contents/jurisdiction-contents';\nimport { TJurisdictionCardProps } from '../props.types';\nimport JurisdictionCardBack from './jurisdiction-card-back';\nimport JurisdictionCardFront from './jurisdiction-card-front';\n\nconst JurisdictionCard = ({\n    account_status,\n    account_type,\n    disabled,\n    is_non_idv_design = false,\n    jurisdiction_selected_shortcode,\n    setJurisdictionSelectedShortcode,\n    type_of_card,\n}: TJurisdictionCardProps) => {\n    const card_classname = `cfd-jurisdiction-card--${account_type}`;\n    const is_synthetic = account_type === 'synthetic';\n    const is_swapfree = account_type === 'all';\n    const card_values = getJurisdictionContents()[type_of_card];\n    const non_synthetic_card_data = is_swapfree\n        ? card_values?.swapfree_contents ?? []\n        : card_values?.financial_contents;\n    const card_data = is_synthetic ? card_values?.synthetic_contents : non_synthetic_card_data;\n    const [is_card_flipped, setIsCardFlipped] = React.useState(false);\n    const is_card_selected = jurisdiction_selected_shortcode === type_of_card;\n    let verification_docs = is_synthetic\n        ? card_values?.synthetic_verification_docs\n        : card_values?.financial_verification_docs;\n    if ([Jurisdiction.BVI, Jurisdiction.VANUATU, Jurisdiction.LABUAN].includes(type_of_card) && is_non_idv_design) {\n        verification_docs = ['selfie', 'identity_document', 'name_and_address'];\n    }\n\n    const cardSelection = (cardType: string) => {\n        setJurisdictionSelectedShortcode(jurisdiction_selected_shortcode === cardType ? '' : cardType);\n    };\n\n    const toggleCardFlip: React.MouseEventHandler<HTMLSpanElement> = event => {\n        event.stopPropagation();\n        setIsCardFlipped(!is_card_flipped);\n    };\n\n    return (\n        <div className='cfd-card-perspective'>\n            <div\n                data-testid='dt_jurisdiction_card'\n                className={classNames('cfd-card-container', `${account_type}`, {\n                    'cfd-card-flipped': is_card_flipped,\n                    'cfd-card-disabled': disabled,\n                })}\n                onClick={disabled ? () => undefined : () => cardSelection(type_of_card)}\n            >\n                <JurisdictionCardFront\n                    account_status={account_status}\n                    card_classname={card_classname}\n                    card_data={card_data}\n                    card_values={card_values}\n                    disabled={disabled}\n                    is_card_selected={is_card_selected}\n                    toggleCardFlip={toggleCardFlip}\n                    type_of_card={type_of_card}\n                    verification_docs={verification_docs}\n                />\n                <JurisdictionCardBack\n                    card_classname={card_classname}\n                    disabled={disabled}\n                    is_card_selected={is_card_selected}\n                    toggleCardFlip={toggleCardFlip}\n                    verification_docs={verification_docs}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default JurisdictionCard;\n","import { TJurisdictionCardItems } from 'Components/props.types';\nimport { getJurisdictionBviContents } from './jurisdiction-bvi-contents';\nimport { getJurisdictionLabuanContents } from './jurisdiction-labuan-contents';\nimport { getJurisdictionSvgContents } from './jurisdiction-svg-contents';\nimport { getJurisdictionVanuatuContents } from './jurisdiction-vanuatu-contents';\nimport { getJurisdictionMaltainvestContents } from './jurisdiction_maltainvest_contents';\n\ntype TJurisdictionContent = {\n    svg: TJurisdictionCardItems;\n    vanuatu: TJurisdictionCardItems;\n    labuan: TJurisdictionCardItems;\n    maltainvest: TJurisdictionCardItems;\n    bvi: TJurisdictionCardItems;\n};\n\nexport const getJurisdictionContents = (): TJurisdictionContent => ({\n    svg: getJurisdictionSvgContents(),\n    bvi: getJurisdictionBviContents(),\n    vanuatu: getJurisdictionVanuatuContents(),\n    labuan: getJurisdictionLabuanContents(),\n    maltainvest: getJurisdictionMaltainvestContents(),\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionSvgContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('St. Vincent & Grenadines'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Baskets and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('170+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.6 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    swapfree_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock Indices, Cryptocurrencies, and ETFs'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    synthetic_verification_docs: ['not_applicable'],\n    financial_verification_docs: ['not_applicable'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionBviContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('British Virgin Islands'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Baskets and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('170+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114)'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionVanuatuContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('Vanuatu'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Baskets and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Vanuatu Financial Services Commission'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stock indices, Commodities and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('90+'),\n                display_text_skin_color: 'red-dark',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Vanuatu Financial Services Commission'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionLabuanContents = (): TJurisdictionCardItems => ({\n    over_header: localize('Straight-through processing'),\n    is_over_header_available: true,\n    header: localize('Labuan'),\n    synthetic_contents: [\n        { key: 'assets', title: localize('Assets'), description: localize('Forex and Cryptocurrencies') },\n        { key: 'leverage', title: localize('Leverage') },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Labuan Financial Services Authority (licence no. MB/18/0024)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('80+'),\n                display_text_skin_color: 'red-dark',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:100'),\n                display_text_skin_color: 'yellow-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.6 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Labuan Financial Services Authority (licence no. MB/18/0024)'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionMaltainvestContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('Malta'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('140+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:30'),\n                display_text_skin_color: 'brown-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('140+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:30'),\n                display_text_skin_color: 'brown-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n        },\n    ],\n    synthetic_verification_docs: ['selfie', 'identity_document', 'name_and_address'],\n    financial_verification_docs: ['selfie', 'identity_document', 'name_and_address'],\n});\n","import React from 'react';\nimport { Jurisdiction } from '@deriv/shared';\nimport { TJurisdictionModalContentProps } from '../props.types';\nimport JurisdictionCard from './jurisdiction-card';\n\nconst JurisdictionModalContent = ({\n    account_status,\n    account_type,\n    is_non_idv_design = false,\n    is_virtual,\n    jurisdiction_selected_shortcode,\n    setJurisdictionSelectedShortcode,\n    synthetic_available_accounts,\n    financial_available_accounts,\n    real_synthetic_accounts_existing_data,\n    real_financial_accounts_existing_data,\n    real_swapfree_accounts_existing_data,\n    swapfree_available_accounts,\n}: TJurisdictionModalContentProps) => {\n    const card_classname = `cfd-jurisdiction-card--${account_type}`;\n\n    const cardsToBeShown = (type_of_card: string) => {\n        switch (account_type) {\n            case 'synthetic':\n                return synthetic_available_accounts?.some(account => account.shortcode === type_of_card);\n            case 'all':\n                return swapfree_available_accounts?.some(account => account.shortcode === type_of_card);\n            default:\n                return financial_available_accounts?.some(account => account.shortcode === type_of_card);\n        }\n    };\n\n    const disableCard = (type_of_card: string) => {\n        if (is_virtual && type_of_card !== 'svg') {\n            return true;\n        }\n        switch (account_type) {\n            case 'synthetic':\n                return real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n            case 'all':\n                return real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n            default:\n                return real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n        }\n    };\n\n    const jurisdiction_cards_array = [\n        Jurisdiction.SVG,\n        Jurisdiction.BVI,\n        Jurisdiction.VANUATU,\n        Jurisdiction.LABUAN,\n        Jurisdiction.MALTA_INVEST,\n    ];\n\n    return (\n        <div data-testid='dt-jurisdiction-modal-content' className={`${card_classname}__wrapper`}>\n            {jurisdiction_cards_array.map(\n                card =>\n                    cardsToBeShown(card) && (\n                        <JurisdictionCard\n                            account_status={account_status}\n                            account_type={account_type}\n                            disabled={disableCard(card)}\n                            is_non_idv_design={is_non_idv_design}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            key={card}\n                            setJurisdictionSelectedShortcode={setJurisdictionSelectedShortcode}\n                            type_of_card={card}\n                        />\n                    )\n            )}\n        </div>\n    );\n};\n\nexport default JurisdictionModalContent;\n","import React from 'react';\nimport { Checkbox, StaticUrl, Text } from '@deriv/components';\nimport { isMobile, Jurisdiction } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionCheckBoxProps } from '../props.types';\n\nconst JurisdictionCheckBox = ({\n    class_name,\n    is_checked,\n    jurisdiction_selected_shortcode,\n    onCheck,\n    should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation,\n}: TJurisdictionCheckBoxProps) => {\n    const shouldShowCheckBox = () => {\n        if (\n            !jurisdiction_selected_shortcode ||\n            jurisdiction_selected_shortcode === Jurisdiction.SVG ||\n            (jurisdiction_selected_shortcode === Jurisdiction.BVI && should_restrict_bvi_account_creation) ||\n            (jurisdiction_selected_shortcode === Jurisdiction.VANUATU && should_restrict_vanuatu_account_creation)\n        ) {\n            return false;\n        }\n        return true;\n    };\n\n    const dbvi_company_names: { [key: string]: { [key: string]: string } } = {\n        bvi: { name: 'Deriv (BVI) Ltd', tnc_url: 'tnc/deriv-(bvi)-ltd.pdf' },\n        labuan: { name: 'Deriv (FX) Ltd', tnc_url: 'tnc/deriv-(fx)-ltd.pdf' },\n        maltainvest: {\n            name: 'Deriv Investments (Europe) Limited',\n            tnc_url: 'tnc/deriv-investments-(europe)-limited.pdf',\n        },\n        vanuatu: { name: 'Deriv (V) Ltd', tnc_url: 'tnc/general-terms.pdf' },\n    };\n\n    const getCheckboxLabel = () => (\n        <Text as='p' align='center' size={isMobile() ? 'xxs' : 'xs'} line_height='xs'>\n            <Localize\n                i18n_default_text=\"I confirm and accept {{company}} 's <0>Terms and Conditions</0>\"\n                values={{ company: dbvi_company_names[jurisdiction_selected_shortcode].name }}\n                components={[\n                    <StaticUrl\n                        key={0}\n                        className='link--no-bold'\n                        href={dbvi_company_names[jurisdiction_selected_shortcode].tnc_url}\n                    />,\n                ]}\n            />\n        </Text>\n    );\n    return (\n        <React.Fragment>\n            {shouldShowCheckBox() && (\n                <div className={class_name}>\n                    <Checkbox\n                        value={is_checked}\n                        onChange={onCheck}\n                        label={getCheckboxLabel()}\n                        defaultChecked={!!is_checked}\n                    />\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default JurisdictionCheckBox;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { getAuthenticationStatusInfo, isMobile, Jurisdiction, getMT5Title } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionModalFootNoteProps } from '../props.types';\n\nconst FooterNote = ({\n    account_status,\n    account_type,\n    card_classname,\n    jurisdiction_selected_shortcode,\n    should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation,\n}: TJurisdictionModalFootNoteProps) => {\n    const account_type_name = getMT5Title(account_type);\n\n    const { poa_pending } = getAuthenticationStatusInfo(account_status);\n\n    if (jurisdiction_selected_shortcode === Jurisdiction.SVG) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0> account under Deriv (SVG) LLC (company no. 273 LLC 2020).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (\n        (jurisdiction_selected_shortcode === Jurisdiction.BVI && should_restrict_bvi_account_creation) ||\n        (jurisdiction_selected_shortcode === Jurisdiction.VANUATU && should_restrict_vanuatu_account_creation)\n    ) {\n        return poa_pending ? (\n            <Localize\n                i18n_default_text='<0>You can open this account once your submitted documents have been verified.</0>'\n                components={[<span key={0} className={`${card_classname}__footnote--pending`} />]}\n            />\n        ) : (\n            <Localize i18n_default_text='To create this account first we need you to resubmit your proof of address.' />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.BVI) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0>  account under Deriv (BVI) Ltd, regulated by the British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.VANUATU) {\n        return (\n            <Localize\n                i18n_default_text='Add Your Deriv MT5 <0>{{account_type_name}}</0>  account under Deriv (V) Ltd, regulated by the Vanuatu Financial Services Commission.'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.LABUAN) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0>  STP account under Deriv (FX) Ltd regulated by Labuan Financial Services Authority (Licence no. MB/18/0024).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.MALTA_INVEST) {\n        return (\n            <Localize i18n_default_text='Add your Deriv MT5 CFDs account under Deriv Investments (Europe) Limited, regulated by the Malta Financial Services Authority (MFSA) (licence no. IS/70156).' />\n        );\n    }\n\n    return null;\n};\n\nconst JurisdictionModalFootNote = (props: TJurisdictionModalFootNoteProps) => {\n    return (\n        <React.Fragment>\n            {props.jurisdiction_selected_shortcode && (\n                <div data-testid='dt-jurisdiction-footnote' className={`${props.card_classname}__footnote`}>\n                    <Text\n                        as='p'\n                        color='prominent'\n                        align='center'\n                        size={isMobile() ? 'xxs' : 'xs'}\n                        weight='bold'\n                        line_height='xs'\n                    >\n                        <FooterNote {...props} />\n                    </Text>\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default JurisdictionModalFootNote;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { getAuthenticationStatusInfo, isMobile, Jurisdiction } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TJurisdictionModalContentWrapperProps } from '../props.types';\nimport JurisdictionModalContent from './jurisdiction-modal-content';\nimport JurisdictionCheckBox from './jurisdiction-modal-checkbox';\nimport JurisdictionModalFootNote from './jurisdiction-modal-foot-note';\nimport { useStore, observer } from '@deriv/stores';\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst JurisdictionModalContentWrapper = observer(({ openPasswordModal }: TJurisdictionModalContentWrapperProps) => {\n    const { client, traders_hub } = useStore();\n\n    const { show_eu_related_content } = traders_hub;\n\n    const {\n        trading_platform_available_accounts,\n        account_status,\n        fetchAccountSettings,\n        residence,\n        residence_list,\n        is_virtual,\n        updateMT5Status,\n        should_restrict_vanuatu_account_creation,\n        should_restrict_bvi_account_creation,\n    } = client;\n\n    const {\n        is_jurisdiction_modal_visible,\n        has_submitted_cfd_personal_details,\n        jurisdiction_selected_shortcode,\n        toggleCFDVerificationModal,\n        toggleJurisdictionModal,\n        account_type,\n        real_financial_accounts_existing_data,\n        real_swapfree_accounts_existing_data,\n        real_synthetic_accounts_existing_data,\n        setJurisdictionSelectedShortcode,\n    } = useCfdStore();\n\n    const [checked, setChecked] = React.useState(false);\n\n    const {\n        poi_or_poa_not_submitted,\n        poi_acknowledged_for_bvi_labuan,\n        poi_acknowledged_for_vanuatu_maltainvest,\n        poa_acknowledged,\n        need_poa_resubmission,\n    } = getAuthenticationStatusInfo(account_status);\n\n    React.useEffect(() => {\n        if (is_jurisdiction_modal_visible) {\n            if (!is_virtual) {\n                updateMT5Status();\n                fetchAccountSettings();\n            }\n            setJurisdictionSelectedShortcode('');\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [is_jurisdiction_modal_visible]);\n\n    React.useEffect(() => {\n        if (jurisdiction_selected_shortcode) {\n            setChecked(false);\n        }\n    }, [jurisdiction_selected_shortcode, is_jurisdiction_modal_visible]);\n\n    const financial_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === 'financial' &&\n            (show_eu_related_content\n                ? available_account.shortcode === 'maltainvest'\n                : available_account.shortcode !== 'maltainvest')\n    );\n\n    const synthetic_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === 'gaming' &&\n            (show_eu_related_content\n                ? available_account.shortcode === 'maltainvest'\n                : available_account.shortcode !== 'maltainvest')\n    );\n\n    const is_svg_selected = jurisdiction_selected_shortcode === Jurisdiction.SVG;\n    const is_bvi_selected = jurisdiction_selected_shortcode === Jurisdiction.BVI;\n    const is_vanuatu_selected = jurisdiction_selected_shortcode === Jurisdiction.VANUATU;\n    const is_labuan_selected = jurisdiction_selected_shortcode === Jurisdiction.LABUAN;\n    const is_maltainvest_selected = jurisdiction_selected_shortcode === Jurisdiction.MALTA_INVEST;\n\n    const is_idv_country =\n        residence_list.find(elem => elem?.value === residence)?.identity?.services?.idv?.is_country_supported === 1;\n    const has_idv_attempts = (account_status?.authentication?.identity?.services?.idv?.submissions_left ?? 0) > 0;\n    const is_non_idv_design = !is_idv_country || (is_idv_country && !has_idv_attempts);\n\n    const swapfree_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === 'all' &&\n            (show_eu_related_content\n                ? available_account.shortcode === 'maltainvest'\n                : available_account.shortcode !== 'maltainvest')\n    );\n\n    const isNextButtonDisabled = () => {\n        if (jurisdiction_selected_shortcode) {\n            let is_account_created;\n            if (account_type.type === 'synthetic') {\n                is_account_created = real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            } else if (account_type.type === 'all') {\n                is_account_created = real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            } else {\n                is_account_created = real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            }\n            if (!is_account_created) {\n                if (\n                    is_svg_selected ||\n                    (is_bvi_selected && should_restrict_bvi_account_creation && need_poa_resubmission) ||\n                    (is_vanuatu_selected && should_restrict_vanuatu_account_creation && need_poa_resubmission)\n                ) {\n                    return false;\n                }\n                return !checked;\n            }\n            return true;\n        }\n        return true;\n    };\n\n    const onSelectRealAccount = () => {\n        const type_of_account = {\n            category: account_type.category,\n            type: account_type.type,\n        };\n\n        if (is_svg_selected) {\n            openPasswordModal(type_of_account);\n        } else if (is_vanuatu_selected) {\n            if (\n                poi_acknowledged_for_vanuatu_maltainvest &&\n                !poi_or_poa_not_submitted &&\n                !should_restrict_vanuatu_account_creation &&\n                poa_acknowledged &&\n                has_submitted_cfd_personal_details\n            ) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_bvi_selected) {\n            if (\n                poi_acknowledged_for_bvi_labuan &&\n                !poi_or_poa_not_submitted &&\n                !should_restrict_bvi_account_creation &&\n                poa_acknowledged &&\n                has_submitted_cfd_personal_details\n            ) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_labuan_selected) {\n            if (poi_acknowledged_for_bvi_labuan && poa_acknowledged && has_submitted_cfd_personal_details) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_maltainvest_selected) {\n            if (poi_acknowledged_for_vanuatu_maltainvest && poa_acknowledged) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        }\n    };\n\n    return (\n        <div className='jurisdiction-modal__content-wrapper'>\n            <div className='jurisdiction-modal__scrollable-content'>\n                <JurisdictionModalContent\n                    account_status={account_status}\n                    account_type={account_type.type}\n                    financial_available_accounts={financial_available_accounts}\n                    is_non_idv_design={is_non_idv_design}\n                    is_virtual={is_virtual}\n                    real_financial_accounts_existing_data={real_financial_accounts_existing_data}\n                    real_synthetic_accounts_existing_data={real_synthetic_accounts_existing_data}\n                    jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                    real_swapfree_accounts_existing_data={real_swapfree_accounts_existing_data}\n                    setJurisdictionSelectedShortcode={setJurisdictionSelectedShortcode}\n                    swapfree_available_accounts={swapfree_available_accounts}\n                    synthetic_available_accounts={synthetic_available_accounts}\n                />\n                <div\n                    className={classNames(\n                        'jurisdiction-modal__footer-content',\n                        `cfd-jurisdiction-card--${account_type.type}__footer-wrapper`\n                    )}\n                >\n                    <div className={`cfd-jurisdiction-card--${account_type.type}__footnotes-container`}>\n                        <JurisdictionModalFootNote\n                            account_status={account_status}\n                            account_type={account_type.type}\n                            card_classname={`cfd-jurisdiction-card--${account_type.type}`}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            should_restrict_bvi_account_creation={should_restrict_bvi_account_creation}\n                            should_restrict_vanuatu_account_creation={should_restrict_vanuatu_account_creation}\n                        />\n                        <JurisdictionCheckBox\n                            is_checked={checked}\n                            onCheck={() => setChecked(!checked)}\n                            class_name={`cfd-jurisdiction-card--${account_type.type}__jurisdiction-checkbox`}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            should_restrict_bvi_account_creation={should_restrict_bvi_account_creation}\n                            should_restrict_vanuatu_account_creation={should_restrict_vanuatu_account_creation}\n                        />\n                    </div>\n                </div>\n            </div>\n            <Modal.Footer className='jurisdiction-modal__footer-button' has_separator>\n                <Button\n                    disabled={isNextButtonDisabled()}\n                    primary\n                    style={{ width: isMobile() ? '100%' : 'unset' }}\n                    onClick={() => {\n                        toggleJurisdictionModal();\n                        onSelectRealAccount();\n                    }}\n                >\n                    {localize('Next')}\n                </Button>\n            </Modal.Footer>\n        </div>\n    );\n});\n\nexport default JurisdictionModalContentWrapper;\n","import React from 'react';\nimport { DesktopWrapper, MobileDialog, MobileWrapper, Modal, UILoader } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getMT5Title } from '@deriv/shared';\nimport { TJurisdictionModalProps } from '../props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\nimport JurisdictionModalContentWrapper from './jurisdiction-modal-content-wrapper';\n\nconst JurisdictionModal = observer(({ openPasswordModal }: TJurisdictionModalProps) => {\n    const { traders_hub, ui } = useStore();\n\n    const { show_eu_related_content } = traders_hub;\n    const { disableApp, enableApp } = ui;\n\n    const { account_type, is_jurisdiction_modal_visible, toggleJurisdictionModal } = useCfdStore();\n\n    const modal_title = show_eu_related_content\n        ? localize('Choose a jurisdiction for your Deriv MT5 CFDs account')\n        : localize('Choose a jurisdiction for your Deriv MT5 {{account_type}} account', {\n              account_type: localize(getMT5Title(account_type.type)),\n          });\n\n    return (\n        <div>\n            <React.Suspense fallback={<UILoader />}>\n                <DesktopWrapper>\n                    <Modal\n                        className='jurisdiction-modal'\n                        disableApp={disableApp}\n                        enableApp={enableApp}\n                        exit_classname='cfd-modal--custom-exit'\n                        is_open={is_jurisdiction_modal_visible}\n                        title={modal_title}\n                        toggleModal={toggleJurisdictionModal}\n                        type='button'\n                        width={account_type.type === 'financial' ? '1200px' : '1040px'}\n                    >\n                        <JurisdictionModalContentWrapper openPasswordModal={openPasswordModal} />\n                    </Modal>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <MobileDialog\n                        portal_element_id='deriv_app'\n                        title={modal_title}\n                        visible={is_jurisdiction_modal_visible}\n                        onClose={toggleJurisdictionModal}\n                    >\n                        <JurisdictionModalContentWrapper openPasswordModal={openPasswordModal} />\n                    </MobileDialog>\n                </MobileWrapper>\n            </React.Suspense>\n        </div>\n    );\n});\n\nexport default JurisdictionModal;\n","import React from 'react';\nimport { Text, Button, Icon, Money, Popover } from '@deriv/components';\nimport { TPasswordBoxProps, TTradingPlatformAccounts } from '../Components/props.types';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport {\n    CFD_PLATFORMS,\n    isMobile,\n    getCFDAccountDisplay,\n    getCFDPlatformLabel,\n    getPlatformSettings,\n    getUrlBase,\n    getCFDAccountKey,\n} from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { CFDAccountCopy } from '../Components/cfd-account-copy';\nimport { getPlatformMt5DownloadLink, getMT5WebTerminalLink } from '../Helpers/constants';\nimport TradingPlatformIcon from '../Assets/svgs/trading-platform';\nimport { TCFDPasswordReset } from './props.types';\n\ntype TMT5TradeModalProps = {\n    mt5_trade_account: DetailsOfEachMT5Loginid;\n    show_eu_related_content: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n};\n\nexport type TSpecBoxProps = {\n    value: string | undefined;\n    is_bold?: boolean;\n};\n\nconst SpecBox = ({ value, is_bold }: TSpecBoxProps) => (\n    <div className='cfd-trade-modal__spec-box'>\n        <Text size='xs' weight={is_bold ? 'bold' : ''} className='cfd-trade-modal__spec-text'>\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-trade-modal__spec-copy' />\n    </div>\n);\n\nconst PasswordBox = ({ platform, onClick }: TPasswordBoxProps) => (\n    <div className='cfd-trade-modal__password-box'>\n        <div className='cfd-trade-modal__password-text'>\n            <Popover\n                alignment='right'\n                message={localize(\n                    'Use these credentials to log in to your {{platform}} account on the website and mobile apps.',\n                    {\n                        platform: getCFDPlatformLabel(platform),\n                    }\n                )}\n                classNameBubble='cfd-trade-modal__password-tooltip'\n                zIndex={9999}\n            >\n                <Text size='xs'>***************</Text>\n            </Popover>\n        </div>\n        <Popover\n            className='cfd-trade-modal__password-popover'\n            alignment='left'\n            message={localize('Change Password')}\n            relative_render\n            zIndex={9999}\n        >\n            <Button\n                className='cfd-trade-modal__password-action'\n                transparent\n                onClick={onClick}\n                icon={\n                    <Icon\n                        icon='IcEdit'\n                        className='da-article__learn-more-icon'\n                        custom_color='var(--text-less-prominent)'\n                    />\n                }\n            />\n        </Popover>\n    </div>\n);\n\nconst getTitle = (market_type: string, show_eu_related_content: boolean) => {\n    if (show_eu_related_content) localize('MT5 CFDs');\n    return market_type;\n};\n\nconst DMT5TradeModal = ({\n    mt5_trade_account,\n    show_eu_related_content,\n    onPasswordManager,\n    toggleModal,\n}: TMT5TradeModalProps) => {\n    const getCompanyShortcode = () => {\n        if (\n            (mt5_trade_account.account_type === 'demo' &&\n                mt5_trade_account.market_type === 'financial' &&\n                mt5_trade_account.landing_company_short === 'labuan') ||\n            mt5_trade_account.account_type === 'real'\n        ) {\n            return mt5_trade_account.landing_company_short;\n        }\n        return undefined;\n    };\n\n    const getHeadingTitle = () =>\n        getCFDAccountDisplay({\n            market_type: mt5_trade_account.market_type,\n            sub_account_type: mt5_trade_account.sub_account_type,\n            platform: CFD_PLATFORMS.MT5,\n            is_eu: show_eu_related_content,\n            shortcode: getCompanyShortcode(),\n            is_mt5_trade_modal: true,\n        });\n    const getAccountTitle = () => {\n        if (show_eu_related_content) return 'CFDs';\n        else if (mt5_trade_account.market_type === 'synthetic') return 'Derived';\n        else if (mt5_trade_account.market_type === 'all') return 'SwapFree';\n        return 'Financial';\n    };\n    return (\n        <div className='cfd-trade-modal-container'>\n            <div className='cfd-trade-modal'>\n                <TradingPlatformIcon icon={getAccountTitle()} size={24} />\n                <div className='cfd-trade-modal__desc'>\n                    <Text size='xs' line_height='l' className='cfd-trade-modal__desc-heading'>\n                        {getHeadingTitle()}\n                    </Text>\n                    {(mt5_trade_account as TTradingPlatformAccounts)?.display_login && (\n                        <Text color='less-prominent' size='xxxs' line_height='xxxs'>\n                            {(mt5_trade_account as TTradingPlatformAccounts)?.display_login}\n                        </Text>\n                    )}\n                </div>\n                {mt5_trade_account?.display_balance && (\n                    <Text size='xs' color='profit-success' className='cfd-trade-modal__desc-balance' weight='bold'>\n                        <Money\n                            amount={mt5_trade_account.display_balance}\n                            currency={mt5_trade_account.currency}\n                            has_sign={!!mt5_trade_account.balance && mt5_trade_account.balance < 0}\n                            show_currency\n                        />\n                    </Text>\n                )}\n            </div>\n            <div className='cfd-trade-modal__login-specs'>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Broker')}</Text>\n                    <SpecBox is_bold value={'Deriv Limited'} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Server')}</Text>\n                    <SpecBox is_bold value={(mt5_trade_account as DetailsOfEachMT5Loginid)?.server_info?.environment} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Login ID')}</Text>\n                    <SpecBox is_bold value={(mt5_trade_account as TTradingPlatformAccounts)?.display_login} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Password')}</Text>\n                    <div className='cfd-trade-modal--paragraph'>\n                        <PasswordBox\n                            platform='mt5'\n                            onClick={() => {\n                                const account_type = getCFDAccountKey({\n                                    market_type: mt5_trade_account.market_type,\n                                    sub_account_type: mt5_trade_account.sub_account_type,\n                                    platform: CFD_PLATFORMS.DMT5,\n                                    shortcode: mt5_trade_account.landing_company_short,\n                                });\n                                onPasswordManager(\n                                    mt5_trade_account?.login,\n                                    getTitle(mt5_trade_account.market_type || '', show_eu_related_content),\n                                    mt5_trade_account.account_type || '',\n                                    account_type,\n                                    (mt5_trade_account as DetailsOfEachMT5Loginid)?.server\n                                );\n                                toggleModal();\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className='cfd-trade-modal__maintenance'>\n                    <Icon\n                        icon='IcAlertWarning'\n                        size={isMobile() ? 28 : 20}\n                        className='cfd-trade-modal__maintenance-icon'\n                    />\n                    <div className='cfd-trade-modal__maintenance-text'>\n                        <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                    </div>\n                </div>\n            </div>\n            <div className='cfd-trade-modal__download-center-app'>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcRebrandingMt5Logo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 web')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getMT5WebTerminalLink({\n                            category: mt5_trade_account.account_type,\n                            loginid: (mt5_trade_account as TTradingPlatformAccounts).display_login,\n                            server_name: (mt5_trade_account as DetailsOfEachMT5Loginid)?.server_info?.environment,\n                        })}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Open')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcWindowsLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 Windows app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('windows')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Download')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcMacosLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 MacOS app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('macos')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Download')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcLinuxLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 Linux app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('linux')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Learn more')}\n                        </Text>\n                    </a>\n                </div>\n            </div>\n            <Text\n                align='center'\n                as='div'\n                className='cfd-trade-modal__download-center-text'\n                size={isMobile() ? 'xxxs' : 'xxs'}\n                weight='bold'\n            >\n                {localize(\n                    'Download {{ platform }} on your phone to trade with the {{ platform }} {{ account }} account',\n                    {\n                        platform: getCFDPlatformLabel(CFD_PLATFORMS.MT5),\n                        account: getAccountTitle(),\n                    }\n                )}\n            </Text>\n            <div className='cfd-trade-modal__download-center-options'>\n                <div className='cfd-trade-modal__download-center-options--mobile-links'>\n                    <a href={getPlatformMt5DownloadLink('ios')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationApple' width={135} height={40} />\n                    </a>\n                    <a href={getPlatformMt5DownloadLink('android')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationGoogle' width={135} height={40} />\n                    </a>\n                    <a href={getPlatformMt5DownloadLink('huawei')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationHuawei' width={135} height={40} />\n                    </a>\n                </div>\n                {!isMobile() && (\n                    <div className='cfd-trade-modal__download-center-options--qrcode'>\n                        <img src={getUrlBase('/public/images/common/mt5_download.png')} width={80} height={80} />\n                        <Text align='center' size='xxs'>\n                            {localize('Scan the QR code to download {{ platform }}.', {\n                                platform: getPlatformSettings('mt5').name,\n                            })}\n                        </Text>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default DMT5TradeModal;\n","import React from 'react';\nimport { DesktopWrapper, Div100vhContainer, Modal, MobileWrapper, PageOverlay, UILoader } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport TradeModal from './trade-modal';\nimport DMT5TradeModal from './dmt5-trade-modal';\nimport { TCFDPasswordReset } from './props.types';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\ntype TMT5TradeModalProps = {\n    is_eu_user: boolean;\n    is_open: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n    is_demo: string;\n};\n\nconst MT5TradeModal = observer(\n    ({ is_eu_user, is_open, onPasswordManager, toggleModal, is_demo }: TMT5TradeModalProps) => {\n        const { traders_hub, common } = useStore();\n\n        const { show_eu_related_content } = traders_hub;\n        const { platform } = common;\n\n        const { mt5_trade_account, dxtrade_tokens, derivez_tokens } = useCfdStore();\n\n        const CFDTradeModal = () => {\n            if (platform === 'mt5') {\n                return (\n                    <DMT5TradeModal\n                        mt5_trade_account={mt5_trade_account}\n                        show_eu_related_content={show_eu_related_content}\n                        onPasswordManager={onPasswordManager}\n                        toggleModal={toggleModal}\n                    />\n                );\n            }\n            return (\n                <TradeModal\n                    mt5_trade_account={mt5_trade_account}\n                    is_eu_user={is_eu_user}\n                    onPasswordManager={onPasswordManager}\n                    toggleModal={toggleModal}\n                    is_demo={is_demo}\n                    platform={platform}\n                    dxtrade_tokens={dxtrade_tokens}\n                    derivez_tokens={derivez_tokens}\n                />\n            );\n        };\n\n        return (\n            <React.Suspense fallback={<UILoader />}>\n                <DesktopWrapper>\n                    <Modal\n                        is_open={is_open}\n                        title={localize('Trade')}\n                        toggleModal={toggleModal}\n                        should_header_stick_body={false}\n                        width='600px'\n                        exit_classname='cfd-modal--custom-exit'\n                    >\n                        <CFDTradeModal />\n                    </Modal>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <PageOverlay\n                        is_open={is_open}\n                        portal_id='deriv_app'\n                        header='Trade'\n                        onClickClose={toggleModal}\n                        header_classname='cfd-trade-modal__mobile-title'\n                    >\n                        <Div100vhContainer className='cfd-trade-modal__mobile-view-wrapper' height_offset='80px'>\n                            <CFDTradeModal />\n                        </Div100vhContainer>\n                    </PageOverlay>\n                </MobileWrapper>\n            </React.Suspense>\n        );\n    }\n);\n\nexport default MT5TradeModal;\n","import React from 'react';\nimport { QRCode } from 'react-qrcode';\nimport { TCFDsPlatformType } from 'Components/props.types';\nimport {\n    getDXTradeWebTerminalLink,\n    getDerivEzWebTerminalLink,\n    platformsText,\n    platformsIcons,\n    mobileDownloadLink,\n} from './constants';\nimport { Text, Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { isMobile, OSDetect, isDesktopOs } from '@deriv/shared';\nimport { TCFDDashboardContainer } from 'Containers/props.types';\n\nexport const getPlatformQRCode = (acc_type: TCFDsPlatformType) => {\n    const qr_code_width = isMobile() ? '100%' : '80%';\n    const os = OSDetect();\n    const checkForDesktop = isDesktopOs() ? (os === 'mac' ? 'ios' : 'android') : os;\n\n    return (\n        <React.Fragment>\n            <QRCode\n                value={platformsText(acc_type) === 'EZ' ? 'https://onelink.to/bkdwkd' : 'https://onelink.to/grmtyx'}\n                size={5}\n                style={{ height: 'auto', maxWidth: '100%', width: qr_code_width }}\n            />\n            <Text align='center' size='xxs'>\n                <Localize\n                    i18n_default_text='Scan the QR code to download Deriv {{ platform }}.'\n                    values={{ platform: platformsText(acc_type) === 'EZ' ? 'GO' : platformsText(acc_type) }}\n                />\n            </Text>\n        </React.Fragment>\n    );\n};\n\ntype TPlatformsDesktopDownload = {\n    platform: TCFDsPlatformType;\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n    derivez_tokens: TCFDDashboardContainer['derivez_tokens'];\n    is_demo: string;\n};\n\nexport const PlatformsDesktopDownload = ({\n    platform,\n    dxtrade_tokens,\n    derivez_tokens,\n    is_demo,\n}: TPlatformsDesktopDownload) => {\n    const PlatformsDesktopDownloadLinks = () => {\n        switch (platform) {\n            case 'derivez':\n                return getDerivEzWebTerminalLink(\n                    is_demo ? 'demo' : 'real',\n                    derivez_tokens && derivez_tokens[is_demo ? 'demo' : 'real']\n                );\n            case 'dxtrade':\n                return getDXTradeWebTerminalLink(\n                    is_demo ? 'demo' : 'real',\n                    dxtrade_tokens && dxtrade_tokens[is_demo ? 'demo' : 'real']\n                );\n            default:\n                return '';\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <a\n                className='cfd-trade-modal__dxtrade-button'\n                href={PlatformsDesktopDownloadLinks()}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon\n                    className='cfd-trade-modal__dxtrade-button-icon'\n                    icon={`IcBrand${platformsIcons(platform)}Wordmark`}\n                    size={36}\n                />\n                <div className='cfd-trade-modal__dxtrade-button-text'>\n                    <Text color='colored-background' size='xxs' weight='bold'>\n                        <Localize i18n_default_text='Web terminal' />\n                    </Text>\n                </div>\n            </a>\n        </React.Fragment>\n    );\n};\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { CFDAccountCopy } from './cfd-account-copy';\n\nexport type TSpecBoxProps = {\n    value?: string;\n    is_bold?: boolean;\n};\n\nconst SpecBox = ({ value, is_bold }: TSpecBoxProps) => (\n    <div className='cfd-trade-modal__spec-box'>\n        <Text size='xs' weight={is_bold ? 'bold' : ''} className='cfd-trade-modal__spec-text'>\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-trade-modal__spec-copy' />\n    </div>\n);\n\nexport default SpecBox;\n","import React from 'react';\nimport { getCFDPlatformLabel } from '@deriv/shared';\nimport { Text, Button, Icon, Popover } from '@deriv/components';\nimport { TPasswordBoxProps } from './props.types';\nimport { localize } from '@deriv/translations';\n\nconst PasswordBox = ({ platform, onClick }: TPasswordBoxProps) => (\n    <div className='cfd-trade-modal__password-box'>\n        <div className='cfd-trade-modal__password-text'>\n            <Popover\n                alignment='right'\n                message={localize(\n                    'Use these credentials to log in to your {{platform}} account on the website and mobile apps.',\n                    {\n                        platform: getCFDPlatformLabel(platform),\n                    }\n                )}\n                classNameBubble='cfd-trade-modal__password-tooltip'\n                zIndex={9999}\n            >\n                <Text size='xs'>***************</Text>\n            </Popover>\n        </div>\n        <Popover\n            className='cfd-trade-modal__password-popover'\n            alignment='left'\n            message={localize('Change Password')}\n            relative_render\n            zIndex={9999}\n        >\n            <Button\n                className='cfd-trade-modal__password-action'\n                transparent\n                onClick={onClick}\n                icon={\n                    <Icon\n                        icon='IcEdit'\n                        className='da-article__learn-more-icon'\n                        custom_color='var(--text-less-prominent)'\n                    />\n                }\n            />\n        </Popover>\n    </div>\n);\n\nexport default PasswordBox;\n","import React from 'react';\nimport { Text, Icon, Money } from '@deriv/components';\nimport { TTradingPlatformAccounts, TCFDDashboardContainer, TCFDsPlatformType } from 'Components/props.types';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { CFD_PLATFORMS, getCFDAccountKey, isMobile } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { getPlatformQRCode, PlatformsDesktopDownload } from '../Helpers/config';\nimport { getTitle, platformsText, mobileDownloadLink } from '../Helpers/constants';\nimport SpecBox from '../Components/specbox';\nimport PasswordBox from '../Components/passwordbox';\nimport { TCFDPasswordReset } from './props.types';\n\ntype TTradeModalProps = {\n    mt5_trade_account: Required<DetailsOfEachMT5Loginid>;\n    is_eu_user: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n    derivez_tokens: TCFDDashboardContainer['derivez_tokens'];\n    is_demo: string;\n    platform: TCFDsPlatformType;\n};\n\nconst PlatformIconsAndDescriptions = (\n    platform: TCFDsPlatformType,\n    is_demo: string,\n    mt5_trade_account: Required<DetailsOfEachMT5Loginid>\n) => {\n    return (\n        <React.Fragment>\n            <Icon icon={`IcRebranding${platform.charAt(0).toUpperCase()}${platform.slice(1)}Dashboard`} size={24} />\n            <div className='cfd-trade-modal__desc'>\n                <Text size='xs' line_height='l' className='cfd-trade-modal__desc-heading'>\n                    <Localize\n                        i18n_default_text='Deriv {{platform}} {{is_demo}}'\n                        values={{\n                            platform: platformsText(platform),\n                            is_demo: is_demo ? 'Demo' : '',\n                        }}\n                    />\n                </Text>\n                {(mt5_trade_account as TTradingPlatformAccounts)?.display_login && (\n                    <Text color='less-prominent' size='xxxs' line_height='xxxs'>\n                        {(mt5_trade_account as TTradingPlatformAccounts)?.display_login}\n                    </Text>\n                )}\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst TradeModal = ({\n    mt5_trade_account,\n    is_eu_user,\n    onPasswordManager,\n    toggleModal,\n    dxtrade_tokens,\n    derivez_tokens,\n    is_demo,\n    platform,\n}: TTradeModalProps) => {\n    const CTraderAndDerivEZDescription = () => {\n        const platform_name = platform === 'derivez' ? 'Deriv EZ' : 'cTrader';\n        return (\n            <div className='cfd-trade-modal__login-specs-item'>\n                <Text className='cfd-trade-modal--paragraph'>\n                    <Localize\n                        i18n_default_text='Use your Deriv account email and password to login into the {{ platform }} platform.'\n                        values={{ platform: platform_name }}\n                    />\n                </Text>\n            </div>\n        );\n    };\n    const downloadCenterDescription = () => {\n        switch (platform) {\n            case 'dxtrade':\n                return (\n                    <Text\n                        align='center'\n                        as='p'\n                        className='cfd-trade-modal__download-center-text'\n                        size={isMobile() ? 'xxxs' : 'xxs'}\n                        weight='bold'\n                    >\n                        {localize('Download Deriv X on your phone to trade with the Deriv X account')}\n                    </Text>\n                );\n            case 'derivez':\n                return (\n                    <Text\n                        align='center'\n                        as='p'\n                        className='cfd-trade-modal__download-center-text'\n                        size={isMobile() ? 'xxxs' : 'xxs'}\n                        weight='bold'\n                    >\n                        {localize('Download Deriv GO on your phone to trade with the Deriv EZ account')}\n                    </Text>\n                );\n            case 'ctrader':\n                return (\n                    <Text\n                        align='center'\n                        as='p'\n                        className='cfd-trade-modal__download-center-text'\n                        size={isMobile() ? 'xxxs' : 'xxs'}\n                        weight='bold'\n                    >\n                        {localize('Download Deriv cTrader on your phone to trade with the Deriv cTrader account')}\n                    </Text>\n                );\n            default:\n                return '';\n        }\n    };\n\n    const downloadCenterAppOption = (platform_type: TCFDsPlatformType) => {\n        let app_title = '';\n        if (platform_type === 'dxtrade') {\n            app_title = localize('Run Deriv X on your browser');\n        } else if (platform_type === 'derivez') {\n            app_title = localize('Run Deriv EZ on your browser');\n        } else if (platform_type === 'ctrader') {\n            app_title = localize('Run Deriv cTrader on your browser');\n        } else {\n            return null;\n        }\n\n        return (\n            <React.Fragment>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {app_title}\n                    </Text>\n                    <PlatformsDesktopDownload\n                        platform={platform}\n                        is_demo={is_demo}\n                        dxtrade_tokens={dxtrade_tokens}\n                        derivez_tokens={derivez_tokens}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <div className='cfd-trade-modal-container'>\n            <div className='cfd-trade-modal'>\n                {PlatformIconsAndDescriptions(platform, is_demo, mt5_trade_account)}\n                {mt5_trade_account?.display_balance && (\n                    <Text size='xs' color='profit-success' className='cfd-trade-modal__desc-balance' weight='bold'>\n                        <Money\n                            amount={mt5_trade_account.display_balance}\n                            currency={mt5_trade_account.currency}\n                            has_sign={!!mt5_trade_account.balance && mt5_trade_account.balance < 0}\n                            show_currency\n                        />\n                    </Text>\n                )}\n            </div>\n            <div className='cfd-trade-modal__login-specs'>\n                {platform !== 'dxtrade' && <CTraderAndDerivEZDescription />}\n                {platform === 'dxtrade' && (\n                    <React.Fragment>\n                        <div className='cfd-trade-modal__login-specs-item'>\n                            <Text className='cfd-trade-modal--paragraph'>{localize('Username')}</Text>\n                            <SpecBox is_bold value={(mt5_trade_account as TTradingPlatformAccounts)?.login} />\n                        </div>\n                        <div className='cfd-trade-modal__login-specs-item'>\n                            <Text className='cfd-trade-modal--paragraph'>{localize('Password')}</Text>\n                            <div className='cfd-trade-modal--paragraph'>\n                                <PasswordBox\n                                    platform='dxtrade'\n                                    onClick={() => {\n                                        const account_type = getCFDAccountKey({\n                                            market_type: mt5_trade_account.market_type,\n                                            sub_account_type: mt5_trade_account.sub_account_type,\n                                            platform: CFD_PLATFORMS.DMT5,\n                                            shortcode: mt5_trade_account.landing_company_short,\n                                        });\n                                        onPasswordManager(\n                                            mt5_trade_account?.login,\n                                            getTitle(mt5_trade_account.market_type, is_eu_user),\n                                            mt5_trade_account.account_type,\n                                            account_type,\n                                            (mt5_trade_account as DetailsOfEachMT5Loginid)?.server\n                                        );\n                                        toggleModal();\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </React.Fragment>\n                )}\n\n                <div className='cfd-trade-modal__maintenance'>\n                    <Icon\n                        icon='IcAlertWarning'\n                        size={isMobile() ? 28 : 20}\n                        className='cfd-trade-modal__maintenance-icon'\n                    />\n                    <div className='cfd-trade-modal__maintenance-text'>\n                        <Text size='xxxs' className='cfd-trade-modal__maintenance-text'>\n                            {platform === CFD_PLATFORMS.DXTRADE && (\n                                <Localize i18n_default_text='Server maintenance starts at 06:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                            )}\n                            {platform === CFD_PLATFORMS.MT5 && (\n                                <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                            )}\n                            {platform === CFD_PLATFORMS.DERIVEZ && (\n                                <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                            )}\n                        </Text>\n                    </div>\n                </div>\n            </div>\n            <div className='cfd-trade-modal__download-center-app'>{downloadCenterAppOption(platform)}</div>\n            <div className='cfd-trade-modal__download-center-description'>{downloadCenterDescription()}</div>\n            <div className='cfd-trade-modal__download-center-options'>\n                <div className='cfd-trade-modal__download-center-options--mobile-links'>\n                    <div className='cfd-trade-modal__download-center-options--mobile-links--apple'>\n                        <a href={mobileDownloadLink(platform, 'ios')} target='_blank' rel='noopener noreferrer'>\n                            <Icon icon='IcInstallationApple' width={isMobile() ? '160' : '130'} height={40} />\n                        </a>\n                    </div>\n                    <a href={mobileDownloadLink(platform, 'android')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationGoogle' width={135} height={40} />\n                    </a>\n                    <a href={mobileDownloadLink(platform, 'huawei')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationHuawei' width={135} height={40} />\n                    </a>\n                </div>\n                {!isMobile() && (\n                    <div className='cfd-trade-modal__download-center-options--qrcode'>\n                        {getPlatformQRCode(platform)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TradeModal;\n","import { OSDetect } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TCFDsPlatformType } from 'Components/props.types';\n\nconst platformsText = (platform: TCFDsPlatformType) => {\n    switch (platform) {\n        case 'derivez':\n            return 'EZ';\n        case 'dxtrade':\n            return 'X';\n        default:\n            return '';\n    }\n};\n\nconst platformsIcons = (platform: TCFDsPlatformType) => {\n    switch (platform) {\n        case 'derivez':\n            return 'DerivEz';\n        case 'dxtrade':\n            return 'Dxtrade';\n        default:\n            return '';\n    }\n};\n\nconst mobileDownloadLink = (platform: TCFDsPlatformType, type: 'ios' | 'android' | 'huawei') => {\n    switch (platform) {\n        case 'dxtrade':\n            return getPlatformDXTradeDownloadLink(type);\n        case 'derivez':\n            return getPlatformDerivEZDownloadLink(type);\n        default:\n            return '';\n    }\n};\n\nconst getTitle = (market_type: string, is_eu_user: boolean) => {\n    if (is_eu_user) localize('MT5 CFDs');\n    return market_type;\n};\n\nconst REAL_DXTRADE_URL = 'https://dx.deriv.com';\nconst DEMO_DXTRADE_URL = 'https://dx-demo.deriv.com';\n\nconst DERIVEZ_URL = 'https://dqwsqxuu0r6t9.cloudfront.net/';\nconst DERIVEZ_IOS_APP_URL = 'https://apps.apple.com/my/app/deriv-go/id1550561298';\nconst DERIVEZ_ANDROID_APP_URL = 'https://play.google.com/store/apps/details?id=com.deriv.app&pli=1';\nconst DERIVEZ_HUAWEI_APP_URL = 'https://appgallery.huawei.com/#/app/C103801913';\n\nconst DXTRADE_IOS_APP_URL = 'https://apps.apple.com/us/app/deriv-x/id1563337503';\nconst DXTRADE_ANDROID_APP_URL = 'https://play.google.com/store/apps/details?id=com.deriv.dx';\nconst DXTRADE_HUAWEI_APP_URL = 'https://appgallery.huawei.com/app/C104633219';\n\nconst getBrokerName = () => 'Deriv Limited';\n\nconst getTopUpConfig = () => {\n    return {\n        minimum_amount: 1000,\n        additional_amount: 10000,\n    };\n};\n\nconst getPlatformDXTradeDownloadLink = (platform?: 'ios' | 'android' | 'huawei') => {\n    switch (platform) {\n        case 'ios':\n            return DXTRADE_IOS_APP_URL;\n        case 'huawei':\n            return DXTRADE_HUAWEI_APP_URL;\n        case 'android':\n            return DXTRADE_ANDROID_APP_URL;\n        default:\n            return '';\n    }\n};\n\nconst getPlatformDerivEZDownloadLink = (platform: 'ios' | 'android' | 'huawei') => {\n    switch (platform) {\n        case 'ios':\n            return DERIVEZ_IOS_APP_URL;\n        case 'android':\n            return DERIVEZ_ANDROID_APP_URL;\n        case 'huawei':\n            return DERIVEZ_HUAWEI_APP_URL;\n        default:\n            return '';\n    }\n};\n\nconst getPlatformMt5DownloadLink = (platform: string | undefined = undefined) => {\n    switch (platform || OSDetect()) {\n        case 'windows':\n            return 'https://download.mql5.com/cdn/web/deriv.limited/mt5/derivmt5setup.exe';\n        case 'linux':\n            return 'https://www.metatrader5.com/en/terminal/help/start_advanced/install_linux';\n        case 'ios':\n            return 'https://apps.apple.com/us/app/metatrader-5/id413251709';\n        case 'macos':\n            return 'https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/MetaTrader5.dmg';\n        case 'huawei':\n            return 'https://appgallery.huawei.com/#/app/C102015329';\n        case 'android':\n            return 'https://download.mql5.com/cdn/mobile/mt5/android?server=Deriv-Demo,Deriv-Server';\n        default:\n            return getMT5WebTerminalLink({ category: 'real' }); // Web\n    }\n};\n\nconst getDXTradeWebTerminalLink = (category: string, token?: string) => {\n    let url = category === 'real' ? REAL_DXTRADE_URL : DEMO_DXTRADE_URL;\n\n    if (token) {\n        url += `?token=${token}`;\n    }\n\n    return url;\n};\n\nconst getDerivEzWebTerminalLink = (category: string, token?: string) => {\n    let url = DERIVEZ_URL;\n\n    if (token) {\n        url += `?lang=en&token=${token}`;\n    }\n\n    return url;\n};\n\nconst getMT5WebTerminalLink = ({\n    category,\n    loginid,\n    server_name = 'Deriv-Server',\n}: {\n    category?: string;\n    loginid?: string;\n    server_name?: string;\n}) => {\n    const is_demo = category === 'demo';\n    const server = is_demo ? 'Deriv-Demo' : server_name;\n    const login = loginid ?? '';\n\n    return `https://metatraderweb.app/trade?servers=${server}&trade_server=${server}${login && `&login=${login}`}`;\n};\n\nexport {\n    REAL_DXTRADE_URL,\n    DEMO_DXTRADE_URL,\n    DERIVEZ_URL,\n    getBrokerName,\n    platformsText,\n    platformsIcons,\n    getTitle,\n    mobileDownloadLink,\n    getPlatformDXTradeDownloadLink,\n    getPlatformDerivEZDownloadLink,\n    getPlatformMt5DownloadLink,\n    getDXTradeWebTerminalLink,\n    getDerivEzWebTerminalLink,\n    getMT5WebTerminalLink,\n    getTopUpConfig,\n};\n","import { localize } from '@deriv/translations';\nimport { Jurisdiction } from '@deriv/shared';\n\nexport type TDxCompanies = ReturnType<typeof getDxCompanies>;\nexport type TMtCompanies = ReturnType<typeof getMtCompanies>;\nexport type TDerivezCompanies = ReturnType<typeof getDerivezCompanies>;\n\nexport const getDxCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('CFDs'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: localize('Financial'),\n    };\n    return {\n        demo: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getMtCompanies = (is_eu: boolean) => {\n    // TODO: Move this to the getDxCompanies for real release and when separating MT5 and DerivX components.\n    const all_config = {\n        account_type: '',\n        leverage: 100,\n        short_title: localize('Swap-Free'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: is_eu ? localize('CFDs') : localize('Financial'),\n    };\n    const financial_stp_config = {\n        account_type: 'financial_stp',\n        leverage: 100,\n        short_title: localize('Financial STP'),\n    };\n    return {\n        demo: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free SVG'),\n                short_title: localize('Swap-Free SVG'),\n            },\n            derivez: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial SVG'),\n                short_title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Demo Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            derivez: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_bvi: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived BVI'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_bvi: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial BVI'),\n                short_title: financial_config.short_title,\n            },\n            financial_fx: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Labuan'),\n                short_title: financial_config.short_title,\n            },\n            financial_v: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Vanuatu'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getDerivezCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 1000,\n        short_title: localize('CFDs'),\n    };\n    return {\n        demo: {\n            all: {\n                derivez_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                derivez_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getFormattedJurisdictionCode = (jurisdiction_code: string) => {\n    let formatted_label = '';\n\n    switch (jurisdiction_code) {\n        case Jurisdiction.SVG:\n            formatted_label = localize('SVG');\n            break;\n        case Jurisdiction.BVI:\n            formatted_label = localize('BVI');\n            break;\n        case Jurisdiction.LABUAN:\n            formatted_label = localize('Labuan');\n            break;\n        case Jurisdiction.VANUATU:\n            formatted_label = localize('Vanuatu');\n            break;\n        default:\n            formatted_label = jurisdiction_code?.toUpperCase();\n            break;\n    }\n\n    return formatted_label;\n};\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport { useStore } from '@deriv/stores';\nimport type { TCFDStore } from '../../../../types/cfd-store.types';\n\nconst CFDStoreContext = createContext<TCFDStore | null>(null);\n\nexport const CFDStoreProvider = ({ children }: PropsWithChildren<unknown>) => {\n    const { modules } = useStore();\n\n    return (\n        <CFDStoreContext.Provider\n            // value={memoizedValue}\n            value={modules?.cfd || {}}\n        >\n            {children}\n        </CFDStoreContext.Provider>\n    );\n};\n\nexport const useCfdStore = () => {\n    const store = useContext(CFDStoreContext);\n\n    if (!store) {\n        throw new Error('useCfdStore must be used within CfdStoreContext');\n    }\n\n    return store;\n};\n","class Errors {\n    constructor() {\n        this.errors = {};\n    }\n\n    add(attribute, message) {\n        if (!this.has(attribute)) {\n            this.errors[attribute] = [];\n        }\n\n        if (this.errors[attribute].indexOf(message) === -1) {\n            this.errors[attribute].push(message);\n        }\n    }\n\n    all() {\n        return this.errors;\n    }\n\n    first(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute][0];\n        }\n        return null;\n    }\n\n    get(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute];\n        }\n\n        return [];\n    }\n\n    has(attribute) {\n        return Object.prototype.hasOwnProperty.call(this.errors, attribute);\n    }\n}\n\nexport default Errors;\n","import { template } from '_common/utility';\nimport { getPreBuildDVRs } from '@deriv/shared';\nimport Error from './errors';\n\nclass Validator {\n    constructor(input, rules, store = null) {\n        this.input = input;\n        this.rules = rules;\n        this.store = store;\n        this.errors = new Error();\n\n        this.error_count = 0;\n    }\n\n    /**\n     * Add failure and error message for given rule\n     *\n     * @param {string} attribute\n     * @param {object} rule\n     */\n    addFailure(attribute, rule, error_message) {\n        let message = error_message || rule.options.message || getPreBuildDVRs()[rule.name].message();\n        if (rule.name === 'length') {\n            message = template(message, [\n                rule.options.min === rule.options.max ? rule.options.min : `${rule.options.min}-${rule.options.max}`,\n            ]);\n        } else if (rule.name === 'min') {\n            message = template(message, [rule.options.min]);\n        } else if (rule.name === 'not_equal') {\n            message = template(message, [rule.options.name1, rule.options.name2]);\n        }\n        this.errors.add(attribute, message);\n        this.error_count++;\n    }\n\n    /**\n     * Runs validator\n     *\n     * @return {boolean} Whether it passes; true = passes, false = fails\n     */\n    check() {\n        Object.keys(this.input).forEach(attribute => {\n            if (!Object.prototype.hasOwnProperty.call(this.rules, attribute)) {\n                return;\n            }\n\n            this.rules[attribute].forEach(rule => {\n                const ruleObject = Validator.getRuleObject(rule);\n\n                if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\n                    return;\n                }\n\n                if (ruleObject.options.condition && !ruleObject.options.condition(this.store)) {\n                    return;\n                }\n\n                if (this.input[attribute] === '' && ruleObject.name !== 'req') {\n                    return;\n                }\n\n                let is_valid, error_message;\n                if (ruleObject.name === 'number') {\n                    const { is_ok, message } = ruleObject.validator(\n                        this.input[attribute],\n                        ruleObject.options,\n                        this.store,\n                        this.input\n                    );\n                    is_valid = is_ok;\n                    error_message = message;\n                } else {\n                    is_valid = ruleObject.validator(this.input[attribute], ruleObject.options, this.store, this.input);\n                }\n\n                if (!is_valid) {\n                    this.addFailure(attribute, ruleObject, error_message);\n                }\n            });\n        });\n        return !this.error_count;\n    }\n\n    /**\n     * Determine if validation passes\n     *\n     * @return {boolean}\n     */\n    isPassed() {\n        return this.check();\n    }\n\n    /**\n     * Converts the rule array to an object\n     *\n     * @param {array} rule\n     * @return {object}\n     */\n    static getRuleObject(rule) {\n        const is_rule_string = typeof rule === 'string';\n        const rule_object = {\n            name: is_rule_string ? rule : rule[0],\n            options: is_rule_string ? {} : rule[1] || {},\n        };\n\n        rule_object.validator = rule_object.name === 'custom' ? rule[1].func : getPreBuildDVRs()[rule_object.name].func;\n\n        return rule_object;\n    }\n}\n\nexport default Validator;\n","import Validator from './validator';\n\nexport default Validator;\n","import { action, intercept, observable, reaction, toJS, when, makeObservable } from 'mobx';\nimport { isProduction, isEmptyObject } from '@deriv/shared';\n\nimport Validator from '../Utils/Validator';\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n\n    validation_errors = {};\n\n    validation_rules = {};\n\n    preSwitchAccountDisposer = null;\n    pre_switch_account_listener = null;\n\n    switchAccountDisposer = null;\n    switch_account_listener = null;\n\n    logoutDisposer = null;\n    logout_listener = null;\n\n    clientInitDisposer = null;\n    client_init_listener = null;\n\n    networkStatusChangeDisposer = null;\n    network_status_change_listener = null;\n\n    themeChangeDisposer = null;\n    theme_change_listener = null;\n\n    realAccountSignupEndedDisposer = null;\n    real_account_signup_ended_listener = null;\n\n    partial_fetch_time = 0;\n\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {}) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage =\n            (local_storage_properties && local_storage_properties.length) ||\n            (session_storage_properties && session_storage_properties.length);\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties) {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties && properties.length) {\n            snapshot = properties.reduce((result, p) => Object.assign(result, { [p]: snapshot[p] }), {});\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties, storage) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n        const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName, messages) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules = {}) {\n        Object.keys(rules).forEach(key => {\n            this.addRule(key, rules[key]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule(property, rules) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty(property, value) {\n        const trigger = this.validation_rules[property].trigger;\n        const inputs = { [property]: value !== undefined ? value : this[property] };\n        const validation_rules = { [property]: this.validation_rules[property].rules || [] };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n        }\n\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener) {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener) {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener) {\n        this.logoutDisposer = when(\n            () => this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener) {\n        this.clientInitDisposer = when(\n            () => this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener) {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener) {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener) {\n        this.realAccountSignupEndedDisposer = when(\n            () => this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid, ...reactions) {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = false;\n        }\n    }\n}\n","import { action, computed, observable, reaction, runInAction, makeObservable, override } from 'mobx';\nimport { getAccountListKey, getAccountTypeFields, CFD_PLATFORMS, WS, Jurisdiction } from '@deriv/shared';\nimport BaseStore from 'Stores/base-store';\nimport { getDxCompanies, getMtCompanies, getDerivezCompanies } from './Helpers/cfd-config';\n\nexport default class CFDStore extends BaseStore {\n    is_compare_accounts_visible = false;\n    is_cfd_personal_details_modal_visible = false;\n    is_jurisdiction_modal_visible = false;\n    is_mt5_trade_modal_visible = false;\n    jurisdiction_selected_shortcode = '';\n\n    account_type = {\n        category: '',\n        type: '',\n    };\n\n    mt5_trade_account = {};\n    new_account_response = {};\n    map_type = {};\n    has_cfd_error = false;\n    error_message = '';\n\n    is_account_being_created = false;\n    is_cfd_success_dialog_enabled = false;\n    is_mt5_financial_stp_modal_open = false;\n    is_cfd_password_modal_enabled = false;\n\n    current_account = undefined; // this is a tmp value, don't rely on it, unless you set it first.\n\n    error_type = undefined;\n\n    is_cfd_verification_modal_visible = false;\n    dxtrade_tokens = {\n        demo: '',\n        real: '',\n    };\n    derivez_tokens = {\n        demo: '',\n        real: '',\n    };\n\n    real_synthetic_accounts_existing_data = [];\n    real_financial_accounts_existing_data = [];\n    real_swapfree_accounts_existing_data = [];\n\n    constructor({ root_store }) {\n        super({ root_store });\n\n        makeObservable(this, {\n            is_compare_accounts_visible: observable,\n            is_cfd_personal_details_modal_visible: observable,\n            is_jurisdiction_modal_visible: observable,\n            is_mt5_trade_modal_visible: observable,\n            jurisdiction_selected_shortcode: observable,\n            account_type: observable,\n            mt5_trade_account: observable,\n            new_account_response: observable,\n            map_type: observable,\n            has_cfd_error: observable,\n            error_message: observable,\n            is_account_being_created: observable,\n            is_cfd_success_dialog_enabled: observable,\n            is_mt5_financial_stp_modal_open: observable,\n            is_cfd_password_modal_enabled: observable,\n            current_account: observable,\n            is_cfd_verification_modal_visible: observable,\n            error_type: observable,\n            dxtrade_tokens: observable,\n            derivez_tokens: observable,\n            account_title: computed,\n            current_list: computed,\n            has_created_account_for_selected_jurisdiction: computed,\n            has_submitted_cfd_personal_details: computed,\n            is_high_risk_client_for_mt5: computed,\n            onMount: action.bound,\n            onUnmount: override,\n            checkShouldOpenAccount: action.bound,\n            realAccountSignupEndListener: action.bound,\n            resetFormErrors: action.bound,\n            clearCFDError: action.bound,\n            createCFDAccount: action.bound,\n            disableCFDPasswordModal: action.bound,\n            enableCFDPasswordModal: action.bound,\n            getName: action.bound,\n            openMT5Account: action.bound,\n            openCFDAccount: action.bound,\n            beginRealSignupForMt5: action.bound,\n            enableMt5FinancialStpModal: action.bound,\n            setAccountType: action.bound,\n            setCurrentAccount: action.bound,\n            setMT5TradeAccount: action.bound,\n            setIsAccountBeingCreated: action.bound,\n            setError: action.bound,\n            setCFDNewAccount: action.bound,\n            setCFDSuccessDialog: action.bound,\n            storeProofOfAddress: action.bound,\n            getAccountStatus: action.bound,\n            creatMT5Password: action.bound,\n            submitMt5Password: action.bound,\n            createCFDPassword: action.bound,\n            submitCFDPassword: action.bound,\n            toggleCompareAccountsModal: action.bound,\n            getRealSyntheticAccountsExistingData: action.bound,\n            getRealFinancialAccountsExistingData: action.bound,\n            getRealSwapfreeAccountsExistingData: action.bound,\n            toggleJurisdictionModal: action.bound,\n            toggleMT5TradeModal: action.bound,\n            disableMt5FinancialStpModal: action.bound,\n            topUpVirtual: action.bound,\n            sendVerifyEmail: action.bound,\n            setJurisdictionSelectedShortcode: action.bound,\n            toggleCFDVerificationModal: action.bound,\n            setDxtradeToken: action.bound,\n            setDerivezToken: action.bound,\n            loadDxtradeTokens: action.bound,\n            loadDerivezTokens: action.bound,\n        });\n\n        // reaction(\n        //     () => [this.root_store.client.dxtrade_accounts_list],\n        //     () => {\n        //         if (this.root_store.client.dxtrade_accounts_list.length > 0) {\n        //             this.loadDxtradeTokens();\n        //         }\n        //     }\n        // );\n\n        reaction(\n            () => [this.root_store.client.derivez_accounts_list],\n            () => {\n                if (this.root_store.client.derivez_accounts_list.length > 0) {\n                    this.loadDerivezTokens();\n                }\n            }\n        );\n    }\n\n    get account_title() {\n        return this.account_type.category\n            ? getMtCompanies(this.root_store.traders_hub.show_eu_related_content)[this.account_type.category][\n                  this.account_type.type\n              ].title\n            : '';\n    }\n\n    get has_submitted_cfd_personal_details() {\n        const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n            this.root_store.client.account_settings;\n        return !!(citizen && place_of_birth && tax_residence && tax_identification_number && account_opening_reason);\n    }\n\n    get current_list() {\n        const list = {};\n        const show_eu_related_content = this.root_store.traders_hub.show_eu_related_content;\n        this.root_store.client.mt5_login_list\n            .filter(acc =>\n                show_eu_related_content\n                    ? acc.landing_company_short === 'maltainvest'\n                    : acc.landing_company_short !== 'maltainvest'\n            )\n            .forEach(account => {\n                // e.g. mt5.real.financial_stp\n                list[getAccountListKey(account, CFD_PLATFORMS.MT5, account.landing_company_short)] = {\n                    ...account,\n                };\n            });\n\n        this.root_store.client.dxtrade_accounts_list.forEach(account => {\n            // e.g. dxtrade.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DXTRADE)] = {\n                ...account,\n            };\n        });\n\n        this.root_store.client.derivez_accounts_list.forEach(account => {\n            // e.g. derivez.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DERIVEZ)] = {\n                ...account,\n            };\n        });\n\n        return list;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get mt5_companies() {\n        return getMtCompanies(this.root_store.client.is_eu);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get dxtrade_companies() {\n        return getDxCompanies();\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get derivez_companies() {\n        return getDerivezCompanies();\n    }\n\n    get has_created_account_for_selected_jurisdiction() {\n        switch (this.account_type.type) {\n            case 'synthetic':\n                return this.real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            case 'all':\n                return this.real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            default:\n                return this.real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n        }\n    }\n\n    onMount() {\n        this.checkShouldOpenAccount();\n        this.onRealAccountSignupEnd(this.realAccountSignupEndListener);\n        this.root_store.ui.is_cfd_page = true;\n    }\n\n    onUnmount() {\n        this.disposeRealAccountSignupEnd();\n        this.root_store.ui.is_cfd_page = false;\n    }\n\n    // other platforms can redirect to here using account switcher's `Add` account button\n    // so in that case we should open the corresponding account opening modal on load/component update\n    checkShouldOpenAccount() {\n        const account_type = sessionStorage.getItem('open_cfd_account_type');\n        if (account_type) {\n            const [category, platform, type, set_password] = account_type.split('.');\n            this.createCFDAccount({ category, platform, type, set_password });\n            sessionStorage.removeItem('open_cfd_account_type');\n        }\n    }\n\n    setIsAccountBeingCreated(is_account_being_created) {\n        this.is_account_being_created = is_account_being_created;\n    }\n\n    realAccountSignupEndListener() {\n        const post_signup = JSON.parse(sessionStorage.getItem('post_real_account_signup'));\n        if (post_signup && post_signup.category && post_signup.type) {\n            sessionStorage.removeItem('post_real_account_signup');\n            this.enableCFDPasswordModal();\n        }\n        return Promise.resolve();\n    }\n\n    resetFormErrors() {\n        this.error_message = '';\n        this.error_type = undefined;\n        this.has_cfd_error = false;\n    }\n\n    clearCFDError() {\n        this.resetFormErrors();\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    async createCFDAccount({ category, platform, type, set_password }) {\n        this.clearCFDError();\n        this.setIsAccountBeingCreated(true);\n        this.setAccountType({\n            category,\n            type,\n        });\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (category === 'real') {\n                this.realCFDSignup(set_password);\n            } else {\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (category === 'real') {\n                this.toggleJurisdictionModal();\n            } else {\n                if (this.root_store.traders_hub.show_eu_related_content) {\n                    this.setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                } else this.setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.DERIVEZ) {\n            this.setJurisdictionSelectedShortcode('svg');\n            const values = {\n                platform,\n                account_type: this.account_type.category,\n                market_type: this.account_type.type,\n                company: this.jurisdiction_selected_shortcode,\n            };\n            const response = await this.openCFDAccount(values);\n            if (!response.error) {\n                this.enableCFDPasswordModal();\n                this.setCFDSuccessDialog(true);\n                const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n                this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n                this.setCFDNewAccount(response.trading_platform_new_account);\n                this.setIsAccountBeingCreated(false);\n            } else {\n                this.setError(true, response.error);\n                this.setIsAccountBeingCreated(false);\n            }\n        }\n    }\n\n    demoCFDSignup() {\n        this.enableCFDPasswordModal();\n    }\n\n    disableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    enableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = true;\n    }\n\n    getName() {\n        const { first_name } = this.root_store.client.account_settings && this.root_store.client.account_settings;\n        const title = this.mt5_companies[this.account_type.category][this.account_type.type].title;\n\n        // First name is not set when user has no real account\n        return first_name ? [first_name, title].join(' ') : title;\n    }\n\n    openMT5Account(values) {\n        const name = this.getName();\n        const leverage = this.mt5_companies[this.account_type.category][this.account_type.type].leverage;\n        const type_request = getAccountTypeFields(this.account_type);\n        const { address_line_1, address_line_2, address_postcode, address_city, address_state, country_code, phone } =\n            this.root_store.client.account_settings;\n\n        return WS.mt5NewAccount({\n            mainPassword: values.password,\n            email: this.root_store.client.email_address,\n            leverage,\n            name,\n            address: address_line_1 || address_line_2,\n            city: address_city,\n            country: country_code,\n            phone,\n            state: address_state,\n            zipCode: address_postcode,\n            ...(this.account_type.type === 'all' ? { sub_account_category: 'swap_free' } : {}),\n            ...(values.server ? { server: values.server } : {}),\n            ...(this.jurisdiction_selected_shortcode ? { company: this.jurisdiction_selected_shortcode } : {}),\n            ...(this.jurisdiction_selected_shortcode !== Jurisdiction.LABUAN\n                ? type_request\n                : {\n                      account_type: 'financial',\n                      mt5_account_type: 'financial_stp',\n                  }),\n        });\n    }\n\n    openCFDAccount(values) {\n        return WS.tradingPlatformNewAccount({\n            password: CFD_PLATFORMS.DXTRADE ? values.password : '',\n            platform: values.platform,\n            account_type: this.account_type.category,\n            market_type:\n                this.account_type.type === 'dxtrade' || this.account_type.type === 'derivez'\n                    ? 'all'\n                    : this.account_type.type,\n            company: CFD_PLATFORMS.DERIVEZ ? this.jurisdiction_selected_shortcode : '',\n        });\n    }\n\n    beginRealSignupForMt5() {\n        sessionStorage.setItem('post_real_account_signup', JSON.stringify(this.account_type));\n        this.root_store.ui.openRealAccountSignup('svg');\n    }\n\n    realCFDSignup(set_password) {\n        switch (this.account_type.type) {\n            case 'financial':\n                this.enableCFDPasswordModal();\n                break;\n            case 'financial_stp':\n                this.root_store.client.fetchResidenceList();\n                this.root_store.client.fetchStatesList();\n                this.root_store.client.fetchAccountSettings();\n                if (set_password) this.enableCFDPasswordModal();\n                else this.enableMt5FinancialStpModal();\n                break;\n            case 'synthetic':\n            case 'dxtrade':\n            case 'all':\n                this.enableCFDPasswordModal();\n                break;\n            default:\n                throw new Error('Cannot determine mt5 account signup.');\n        }\n    }\n\n    enableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = true;\n    }\n\n    setAccountType(account_type) {\n        this.account_type = account_type;\n    }\n\n    setCurrentAccount(data, meta) {\n        this.current_account = {\n            ...meta,\n            ...data,\n        };\n    }\n\n    setMT5TradeAccount(mt5_trade_account) {\n        this.mt5_trade_account = mt5_trade_account;\n    }\n\n    setError(state, obj) {\n        this.has_cfd_error = state;\n        this.error_message = obj ? obj.message : '';\n        this.error_type = obj?.code ?? undefined;\n    }\n\n    setCFDNewAccount(cfd_new_account) {\n        this.new_account_response = cfd_new_account;\n    }\n\n    setCFDSuccessDialog(value) {\n        this.is_cfd_success_dialog_enabled = !!value;\n    }\n\n    storeProofOfAddress(file_uploader_ref, values, { setStatus }) {\n        return new Promise((resolve, reject) => {\n            setStatus({ msg: '' });\n            this.setState({ is_btn_loading: true });\n\n            WS.setSettings(values).then(data => {\n                if (data.error) {\n                    setStatus({ msg: data.error.message });\n                    reject(data);\n                } else {\n                    this.root_store.fetchAccountSettings();\n                    // force request to update settings cache since settings have been updated\n                    file_uploader_ref.current.upload().then(api_response => {\n                        if (api_response.warning) {\n                            setStatus({ msg: api_response.message });\n                            reject(api_response);\n                        } else {\n                            WS.authorized.storage.getAccountStatus().then(({ error, get_account_status }) => {\n                                if (error) {\n                                    reject(error);\n                                }\n                                const { identity } = get_account_status.authentication;\n                                const has_poi = !(identity && identity.status === 'none');\n                                resolve({\n                                    identity,\n                                    has_poi,\n                                });\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    async getAccountStatus(platform) {\n        const should_load_account_status =\n            (platform === CFD_PLATFORMS.MT5 && this.root_store.client.is_mt5_password_not_set) ||\n            (platform === CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set);\n\n        if (should_load_account_status) {\n            await WS.getAccountStatus();\n        }\n    }\n\n    async creatMT5Password(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.MT5,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n        return false;\n    }\n\n    async submitMt5Password(values, actions) {\n        if (this.root_store.client.is_mt5_password_not_set) {\n            const has_error = await this.creatMT5Password(values, actions);\n            if (has_error) return;\n        }\n\n        this.resetFormErrors();\n        const response = await this.openMT5Account(values);\n        if (!response.error) {\n            actions.setStatus({ success: true });\n            actions.setSubmitting(false);\n            this.setError(false);\n            this.setCFDSuccessDialog(true);\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n\n            const mt5_login_list_response = await WS.authorized.mt5LoginList();\n            this.root_store.client.responseMt5LoginList(mt5_login_list_response);\n\n            WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n            this.root_store.client.responseMT5TradingServers(await WS.tradingServers(CFD_PLATFORMS.MT5));\n            this.setCFDNewAccount(response.mt5_new_account);\n        } else {\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n        }\n    }\n\n    async createCFDPassword(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.DXTRADE,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n\n        return false;\n    }\n\n    async submitCFDPassword(values, actions) {\n        if (CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set) {\n            const has_error = await this.createCFDPassword(values, actions);\n            if (has_error) return;\n        }\n\n        const response = await this.openCFDAccount(values);\n\n        if (response.error) {\n            await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n        }\n\n        actions.setStatus({ success: true });\n        actions.setSubmitting(false);\n        this.setError(false);\n        this.setCFDSuccessDialog(true);\n        await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n\n        const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n        this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n\n        WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n        this.setCFDNewAccount(response.trading_platform_new_account);\n    }\n\n    toggleCompareAccountsModal() {\n        this.is_compare_accounts_visible = !this.is_compare_accounts_visible;\n    }\n\n    getRealSyntheticAccountsExistingData(real_synthetic_accounts_existing_data) {\n        this.real_synthetic_accounts_existing_data = real_synthetic_accounts_existing_data;\n    }\n\n    getRealFinancialAccountsExistingData(real_financial_accounts_existing_data) {\n        this.real_financial_accounts_existing_data = real_financial_accounts_existing_data;\n    }\n\n    getRealSwapfreeAccountsExistingData(real_swapfree_accounts_existing_data) {\n        this.real_swapfree_accounts_existing_data = real_swapfree_accounts_existing_data;\n    }\n\n    toggleJurisdictionModal() {\n        this.is_jurisdiction_modal_visible = !this.is_jurisdiction_modal_visible;\n    }\n\n    toggleMT5TradeModal() {\n        this.is_mt5_trade_modal_visible = !this.is_mt5_trade_modal_visible;\n    }\n\n    disableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = false;\n    }\n\n    async topUpVirtual(platform) {\n        this.root_store.ui.setTopUpInProgress(true);\n        let response;\n\n        switch (platform) {\n            case CFD_PLATFORMS.DXTRADE: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.DXTRADE,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.MT5: {\n                response = await WS.authorized.mt5Deposit({\n                    to_mt5: this.current_account.login,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.DERIVEZ: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.DERIVEZ,\n                    to_account: this.current_account.login,\n                });\n                break;\n            }\n            default: {\n                response.error = 'Invalid platform';\n                break;\n            }\n        }\n\n        if (!response.error) {\n            let new_balance;\n            switch (platform) {\n                case CFD_PLATFORMS.DXTRADE: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DXTRADE)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.dxtrade_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.MT5: {\n                    await WS.authorized.mt5LoginList().then(this.root_store.client.responseMt5LoginList);\n\n                    new_balance = this.root_store.client.mt5_login_list.find(\n                        item => item.login === this.current_account.login\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.DERIVEZ: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DERIVEZ)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.derivez_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n            runInAction(() => {\n                // Get new current account\n                this.root_store.ui.is_top_up_virtual_open = false;\n                this.current_account.balance = new_balance;\n            });\n            setTimeout(() => {\n                runInAction(() => {\n                    this.root_store.ui.is_top_up_virtual_success = true;\n                });\n            }, 250);\n        } else {\n            // eslint-disable-next-line no-console\n            console.error(response);\n        }\n        this.root_store.ui.setTopUpInProgress(false);\n    }\n\n    sendVerifyEmail() {\n        return WS.verifyEmail(this.root_store.client.email, 'trading_platform_investor_password_reset');\n    }\n\n    setDxtradeToken(response, server) {\n        if (!response.error) {\n            const { dxtrade } = response.service_token;\n            this.dxtrade_tokens[server] = dxtrade.token;\n        }\n    }\n\n    loadDxtradeTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.dxtrade_accounts_list.some(\n                account => account.account_type === account_type\n            );\n            if (!this.dxtrade_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DXTRADE, account_type).then(response =>\n                    this.setDxtradeToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    setDerivezToken(response, server) {\n        if (!response.error) {\n            const { pandats } = response.service_token;\n            this.derivez_tokens[server] = pandats.token;\n        }\n    }\n\n    loadDerivezTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.derivez_accounts_list.some(\n                account => account.account_type === account_type\n            );\n\n            if (!this.derivez_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DERIVEZ, account_type).then(response =>\n                    this.setDerivezToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    static async changePassword({ login, old_password, new_password, password_type }) {\n        let response;\n\n        if (password_type === 'investor') {\n            response = await WS.authorized.tradingPlatformInvestorPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        } else {\n            response = await WS.authorized.tradingPlatformPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        }\n\n        return response?.error?.message;\n    }\n\n    setJurisdictionSelectedShortcode(shortcode) {\n        this.jurisdiction_selected_shortcode = shortcode;\n    }\n\n    toggleCFDVerificationModal() {\n        this.is_cfd_verification_modal_visible = !this.is_cfd_verification_modal_visible;\n    }\n\n    get is_high_risk_client_for_mt5() {\n        const { trading_platform_available_accounts } = this.root_store.client;\n        const financial_available_accounts = trading_platform_available_accounts.filter(\n            available_account => available_account.market_type === 'financial'\n        );\n\n        const synthetic_available_accounts = trading_platform_available_accounts.filter(\n            available_account => available_account.market_type === 'gaming'\n        );\n\n        return (\n            financial_available_accounts.length === 1 &&\n            financial_available_accounts.every(acc => acc.shortcode === 'svg') &&\n            synthetic_available_accounts.length === 1 &&\n            synthetic_available_accounts.every(acc => acc.shortcode === 'svg')\n        );\n    }\n}\n","const template = (string, content) => {\n    let to_replace = content;\n    if (content && !Array.isArray(content)) {\n        to_replace = [content];\n    }\n    return string.replace(/\\[_(\\d+)]/g, (s, index) => to_replace[+index - 1]);\n};\n\n/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach(attr => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash =\n        static_hash || (document.querySelector('script[src*=\"main\"]').getAttribute('src') || '').split('.')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nmodule.exports = {\n    template,\n    createElement,\n    getStaticHash,\n    PromiseClass,\n};\n","import React from 'react';\nimport { CFD_PLATFORMS } from '@deriv/shared';\nimport { Button, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { TMissingRealAccount } from './props.types';\n\nconst MissingRealAccount = ({ onClickSignup, platform }: TMissingRealAccount) => (\n    <div className='cfd-dashboard__missing-real'>\n        <div className='cfd-dashboard__missing-real-wrapper'>\n            <Text className='cfd-dashboard__missing-real--heading' as='h1' weight='bold' line_height='l'>\n                {platform === CFD_PLATFORMS.MT5 ? (\n                    <Localize i18n_default_text='You need a real account (fiat currency or cryptocurrency) in Deriv to create a real Deriv MT5 account.' />\n                ) : (\n                    <Localize i18n_default_text='To create a Deriv X real account, create a Deriv real account first.' />\n                )}\n            </Text>\n        </div>\n        <div>\n            <Button className='cfd-dashboard__missing-real--button' onClick={onClickSignup} type='button' primary large>\n                <span className='btn__text'>\n                    <Localize i18n_default_text='Create a Deriv account' />\n                </span>\n            </Button>\n        </div>\n    </div>\n);\n\nexport default MissingRealAccount;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype LoadingProps = {\n    className?: string;\n    is_invisible?: boolean;\n    theme?: string;\n    id?: string;\n};\n\nconst Loading = ({ className, is_invisible, theme, id }: LoadingProps) => (\n    <div\n        id={id}\n        data-testid='dt_barspinner'\n        className={classNames('barspinner', `barspinner--${theme || 'dark'}`, { invisible: is_invisible }, className)}\n    >\n        {Array.from(new Array(5)).map((x, inx) => (\n            <div key={inx} className={`barspinner__rect barspinner__rect--${inx + 1} rect${inx + 1}`} />\n        ))}\n    </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport Loading from '../templates/_common/components/loading';\n\nconst LoadingCFDRealAccountDisplay = () => (\n    <div className='cfd-real-accounts-display'>\n        <Loading />\n    </div>\n);\n\nexport default LoadingCFDRealAccountDisplay;\n","import { CFD_PLATFORMS } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nexport const general_messages = {\n    getWelcomeHeader: (is_logged_in, platform) => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (is_logged_in) return localize('Welcome to your Deriv X dashboard');\n            return localize('Welcome to Deriv X');\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            return localize('Welcome to Deriv MT5 dashboard');\n        }\n        return localize('');\n    },\n    getDownloadHeader: platform => {\n        if (platform === CFD_PLATFORMS.DXTRADE)\n            return localize('Run Deriv X on your browser or download the mobile app');\n        else if (platform === CFD_PLATFORMS.MT5)\n            return localize('Run MT5 from your browser or download the MT5 app for your devices');\n        return '';\n    },\n    getFinancialAccountDescriptor: (platform, show_eu_related_content) => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            return localize('Trade forex, basket indices, commodities, and cryptocurrencies with high leverage.');\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (show_eu_related_content) {\n                return localize(\n                    'Trade CFDs on forex, stocks, stock indices, synthetic indices, cryptocurrencies, and commodities with leverage.'\n                );\n            }\n            return localize('Trade CFDs on forex, stocks & stock indices, commodities, and crypto.');\n        }\n        return '';\n    },\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { QRCode } from 'react-qrcode';\nimport { Icon, Text, DesktopWrapper, MobileWrapper } from '@deriv/components';\nimport { CFD_PLATFORMS, isDesktop, isMobile } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    getDXTradeWebTerminalLink,\n    getPlatformDXTradeDownloadLink,\n    getPlatformMt5DownloadLink,\n} from '../Helpers/constants';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport { TCFDDashboardContainer } from './props.types';\n\ntype TDxtradeDesktopDownloadProps = {\n    active_index: TCFDDashboardContainer['active_index'];\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n};\n\ntype TMobileDownloadProps = {\n    is_dark_mode_on: TCFDDashboardContainer['is_dark_mode_on'];\n    platform: TCFDDashboardContainer['platform'];\n};\n\nconst mobileDownloadLink = (platform: string, type: 'ios' | 'android' | 'huawei') => {\n    return platform === CFD_PLATFORMS.MT5 ? getPlatformMt5DownloadLink(type) : getPlatformDXTradeDownloadLink(type);\n};\n\nconst DxtradeDesktopDownload = ({ active_index, dxtrade_tokens }: TDxtradeDesktopDownloadProps) => (\n    <React.Fragment>\n        <h1 className='cfd-dashboard__download-container-heading'>{localize('Run Deriv X on your browser')}</h1>\n        <a\n            className='cfd-dashboard__download-container-dxtrade-button'\n            href={getDXTradeWebTerminalLink(\n                active_index === 0 ? 'real' : 'demo',\n                dxtrade_tokens && dxtrade_tokens[active_index === 0 ? 'real' : 'demo']\n            )}\n            target='_blank'\n            rel='noopener noreferrer'\n        >\n            <Icon\n                className='cfd-dashboard__download-container-dxtrade-button-icon'\n                icon='IcRebrandingDxtrade'\n                size={32}\n            />\n            <div className='cfd-dashboard__download-container-dxtrade-button-text'>\n                <Text color='colored-background' size='xxs' weight='bold'>\n                    <Localize i18n_default_text='Web terminal' />\n                </Text>\n            </div>\n        </a>\n    </React.Fragment>\n);\n\nconst MT5DesktopDownload = () => (\n    <React.Fragment>\n        <div className='cfd-dashboard__download-container-links-icons'>\n            <Icon icon='IcMt5DeviceDesktop' width={118} height={85} />\n            <Icon icon='IcMt5DeviceLaptop' width={75} height={51} />\n        </div>\n        <div className='cfd-dashboard__download-container-links-download-buttons'>\n            <a href={getPlatformMt5DownloadLink('windows')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationWindows' width={138} height={40} />\n            </a>\n            <a href={getPlatformMt5DownloadLink('macos')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationMacos' width={138} height={40} />\n            </a>\n            <a href={getPlatformMt5DownloadLink('linux')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationLinux' width={138} height={40} />\n            </a>\n        </div>\n        <Text as='p' align='center' size='xxxs' className='cfd-dashboard__download-center--hint'>\n            <Localize i18n_default_text='The MT5 desktop app is not supported by Windows XP, Windows 2003, and Windows Vista.' />\n        </Text>\n    </React.Fragment>\n);\n\nconst MobileDownload = ({ is_dark_mode_on, platform }: TMobileDownloadProps) => (\n    <React.Fragment>\n        {platform === CFD_PLATFORMS.DXTRADE && (\n            <h1 className='cfd-dashboard__download-container-heading'>{localize('Download the Deriv X mobile app')}</h1>\n        )}\n        <div\n            className={classnames({\n                'cfd-dashboard__download-container-links-icons': isMobile() || platform === CFD_PLATFORMS.MT5,\n            })}\n        >\n            {isMobile() && platform === CFD_PLATFORMS.DXTRADE && (\n                <React.Fragment>\n                    <Icon\n                        icon={is_dark_mode_on ? 'IcDxtradeDeviceTabletLight' : 'IcDxtradeDeviceTablet'}\n                        width={133}\n                        height={106}\n                    />\n                    <Icon\n                        icon={is_dark_mode_on ? 'IcDxtradeDevicePhoneLight' : 'IcDxtradeDevicePhone'}\n                        width={48}\n                        height={74}\n                    />\n                </React.Fragment>\n            )}\n            {platform === CFD_PLATFORMS.MT5 && (\n                <React.Fragment>\n                    <Icon icon='IcMt5DeviceTablet' width={133} height={106} />\n                    <Icon icon='IcMt5DevicePhone' width={48} height={74} />\n                </React.Fragment>\n            )}\n        </div>\n        <div\n            className={classnames('cfd-dashboard__download-container-links-download-buttons', {\n                'cfd-dashboard__download-container-links-download-buttons--column':\n                    isMobile() && platform === CFD_PLATFORMS.MT5,\n            })}\n        >\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'ios')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationApple' width={135} height={40} />\n            </a>\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'android')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationGoogle' width={135} height={40} />\n            </a>\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'huawei')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationHuawei' width={135} height={40} />\n            </a>\n        </div>\n    </React.Fragment>\n);\n\nconst QRCodeBox = ({ platform }: { platform: string }) => (\n    <DesktopWrapper>\n        <div className='cfd-dashboard__download-container-qrcode'>\n            <QRCode value={mobileDownloadLink(platform, 'android')} size={160} />\n            <span className='cfd-dashboard__download-container-qrcode__hint'>\n                {localize('Scan the QR code to download the Deriv X Mobile App')}\n            </span>\n        </div>\n    </DesktopWrapper>\n);\n\nconst CFDDownloadContainer = ({ platform, is_dark_mode_on, active_index, dxtrade_tokens }: TCFDDashboardContainer) => (\n    <React.Fragment>\n        <MobileWrapper>\n            <Text\n                className='cfd-dashboard__download-container-mobile-hint'\n                color='general'\n                size='xxs'\n                weight='400'\n                align='center'\n            >\n                <Localize i18n_default_text='If you have the app, launch it to start trading.' />\n            </Text>\n        </MobileWrapper>\n        <div\n            className={classnames('cfd-dashboard__download-container', {\n                'cfd-dashboard__download-container--is-mt5': platform === CFD_PLATFORMS.MT5,\n            })}\n            data-testid='dt_cfd_dashboard_download_center_container'\n        >\n            {platform === CFD_PLATFORMS.MT5 && (\n                <h1 className='cfd-dashboard__download-container-heading'>\n                    {isDesktop() ? general_messages.getDownloadHeader(platform) : localize('Download the MT5 app')}\n                </h1>\n            )}\n            <div\n                className={classnames('cfd-dashboard__download-container-links', {\n                    'cfd-dashboard__download-container-links--is-mt5': platform === CFD_PLATFORMS.MT5,\n                })}\n            >\n                <DesktopWrapper>\n                    <div className='cfd-dashboard__download-container-links--desktop'>\n                        {platform === CFD_PLATFORMS.DXTRADE && (\n                            <DxtradeDesktopDownload active_index={active_index} dxtrade_tokens={dxtrade_tokens} />\n                        )}\n                        {platform === CFD_PLATFORMS.MT5 && <MT5DesktopDownload />}\n                    </div>\n                </DesktopWrapper>\n\n                <div className='cfd-dashboard__download-container-links--mobile'>\n                    <MobileDownload is_dark_mode_on={is_dark_mode_on} platform={platform} />\n                </div>\n            </div>\n\n            {platform === CFD_PLATFORMS.DXTRADE && <QRCodeBox platform={platform} />}\n        </div>\n    </React.Fragment>\n);\n\nexport default CFDDownloadContainer;\n","import React from 'react';\nimport { Dialog, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\nconst SwitchToRealAccountModal = observer(() => {\n    const { ui } = useStore();\n\n    const {\n        is_switch_to_deriv_account_modal_visible: is_open,\n        openSwitchToRealAccountModal: onClose,\n        disableApp,\n        enableApp,\n    } = ui;\n\n    return (\n        <Dialog\n            className='switch-to-real-account-modal'\n            confirm_button_text={localize('Ok')}\n            onConfirm={onClose}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_closed_on_confirm\n            is_visible={is_open}\n        >\n            <Icon icon={'IcPoaLock'} size={60} />\n            <Text\n                className='da-icon-with-message__text'\n                as='p'\n                size={isMobile() ? 'xxs' : 'xs'}\n                color='general'\n                line_height='m'\n                align='center'\n            >\n                {localize('Switch to your real account to create a Deriv MT5 account')}\n            </Text>\n        </Dialog>\n    );\n});\n\nexport default SwitchToRealAccountModal;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon, Money, Button, Text, DesktopWrapper, MobileWrapper, Popover } from '@deriv/components';\nimport { isMobile, mobileOSDetect, getCFDPlatformLabel, CFD_PLATFORMS, isDesktop } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { CFDAccountCopy } from './cfd-account-copy';\nimport {\n    getDXTradeWebTerminalLink,\n    getDerivEzWebTerminalLink,\n    getPlatformDXTradeDownloadLink,\n} from '../Helpers/constants';\nimport {\n    TAccountIconValues,\n    TSpecBoxProps,\n    TPasswordBoxProps,\n    TCFDAccountCardActionProps,\n    TCFDAccountCard,\n    TTradingPlatformAccounts,\n    TTradingPlatformAvailableAccount,\n} from './props.types';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { useStore, observer } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { FormikValues } from 'formik';\n\nconst account_icons: { [key: string]: TAccountIconValues } = {\n    mt5: {\n        synthetic: 'IcMt5SyntheticPlatform',\n        financial: 'IcMt5FinancialPlatform',\n        financial_stp: 'IcMt5FinancialStpPlatform',\n        cfd: 'IcMt5CfdPlatform',\n        all: 'IcMt5SwapFreePlatform',\n    },\n    // TODO: Line 30, 31 and 32 should be removed after real released.\n    dxtrade: {\n        synthetic: 'IcDxtradeSyntheticPlatform',\n        financial: 'IcDxtradeFinancialPlatform',\n        cfd: 'IcMt5CfdPlatform',\n        all: 'IcDxtradeDerivxPlatform',\n    },\n};\n\nconst AddAccountButton = React.forwardRef<HTMLDivElement, { onSelectAccount: () => void; is_disabled?: boolean }>(\n    ({ onSelectAccount, is_disabled }, ref) => {\n        return (\n            <div\n                onClick={is_disabled ? () => undefined : onSelectAccount}\n                className={classNames('cfd-account-card__add-server', {\n                    'cfd-account-card__add-server--disabled': is_disabled,\n                })}\n                ref={ref}\n            >\n                <span className='cfd-account-card__add-server--icon'>+</span>\n                <Localize i18n_default_text='Add account' />\n            </div>\n        );\n    }\n);\n\nAddAccountButton.displayName = 'AddAccountButton';\n\nconst SpecBox = ({ value, is_bold }: TSpecBoxProps) => (\n    <div className='cfd-account-card__spec-box'>\n        <Text size='xs' weight={is_bold ? 'bold' : ''} className='cfd-account-card__spec-text'>\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-account-card__spec-copy' />\n    </div>\n);\n\nconst PasswordBox = ({ platform, onClick }: TPasswordBoxProps) => (\n    <div className='cfd-account-card__password-box'>\n        <div className='cfd-account-card__password-text'>\n            <Popover\n                alignment='right'\n                message={localize(\n                    'Use these credentials to log in to your {{platform}} account on the website and mobile apps.',\n                    {\n                        platform: getCFDPlatformLabel(platform),\n                    }\n                )}\n                classNameBubble='cfd-account-card__password-tooltip'\n            >\n                <Text size='xs'>•••••••••••••••</Text>\n            </Popover>\n        </div>\n        <Popover alignment='bottom' message={localize('Change Password')}>\n            <Button\n                className='cfd-account-card__password-action'\n                transparent\n                onClick={onClick}\n                icon={\n                    <Icon\n                        icon='IcEdit'\n                        className='da-article__learn-more-icon'\n                        custom_color='var(--text-less-prominent)'\n                    />\n                }\n            />\n        </Popover>\n    </div>\n);\n\nconst CFDAccountCardAction = ({\n    button_label,\n    handleClickSwitchAccount,\n    has_real_account,\n    is_accounts_switcher_on,\n    is_button_primary,\n    is_disabled,\n    is_virtual,\n    onSelectAccount,\n    type,\n    platform,\n    title,\n    real_account_creation_unlock_date,\n    setShouldShowCooldownModal,\n}: TCFDAccountCardActionProps) => {\n    if (\n        is_virtual &&\n        type.category === 'real' &&\n        typeof handleClickSwitchAccount === 'function' &&\n        (platform === CFD_PLATFORMS.MT5 ? has_real_account && type.type === 'financial_stp' : true)\n    ) {\n        return (\n            <div className='cfd-account-card__action-wrapper'>\n                <Localize\n                    i18n_default_text='<0>Switch to your real account</0><1> to create a {{platform}} {{account_title}} account.</1>'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                        account_title: title === 'Deriv X' ? '' : title,\n                    }}\n                    components={[\n                        <a\n                            className={classNames('cfd-account-card__action-wrapper__link link link--orange', {\n                                'cfd-account-card__action-wrapper__link--disabled': is_accounts_switcher_on,\n                            })}\n                            key={0}\n                            onClick={handleClickSwitchAccount}\n                        />,\n                        <Text key={1} line_height='s' size='xxs' />,\n                    ]}\n                />\n            </div>\n        );\n    }\n    const lbl_add_account =\n        type.category === 'real' ? (\n            <Localize i18n_default_text='Add real account' />\n        ) : (\n            <Localize i18n_default_text='Add demo account' />\n        );\n    const cta_label = button_label || lbl_add_account;\n    return (\n        <Button\n            className='cfd-account-card__account-selection'\n            onClick={() => {\n                if (real_account_creation_unlock_date) {\n                    setShouldShowCooldownModal(true);\n                } else {\n                    onSelectAccount();\n                }\n            }}\n            type='button'\n            is_disabled={is_disabled}\n            primary={is_button_primary}\n            secondary={!is_button_primary}\n            large\n        >\n            {cta_label}\n        </Button>\n    );\n};\n\nconst CFDAccountCardComponent = observer(\n    ({\n        button_label,\n        commission_message,\n        descriptor,\n        existing_accounts_data,\n        has_banner,\n        has_cfd_account_error,\n        has_real_account,\n        is_accounts_switcher_on,\n        is_button_primary,\n        is_disabled,\n        is_logged_in,\n        is_virtual,\n        onClickFund,\n        onPasswordManager,\n        onSelectAccount,\n        platform,\n        specs,\n        title,\n        toggleAccountsDialog,\n        toggleShouldShowRealAccountsList,\n        type,\n    }: TCFDAccountCard) => {\n        const { ui, common, traders_hub, client } = useStore();\n\n        const { setIsAcuityModalOpen, setShouldShowCooldownModal } = ui;\n        const { setAppstorePlatform } = common;\n        const { show_eu_related_content } = traders_hub;\n        const {\n            updateAccountStatus,\n            isEligibleForMoreRealMt5,\n            isEligibleForMoreDemoMt5Svg,\n            real_account_creation_unlock_date,\n        } = client;\n\n        const {\n            dxtrade_tokens,\n            derivez_tokens,\n            setAccountType,\n            setJurisdictionSelectedShortcode,\n            setMT5TradeAccount,\n            toggleCFDVerificationModal,\n            toggleMT5TradeModal,\n        } = useCfdStore();\n\n        const existing_data = existing_accounts_data?.length ? existing_accounts_data?.[0] : existing_accounts_data;\n\n        const should_show_extra_add_account_button =\n            is_logged_in &&\n            !show_eu_related_content &&\n            platform === CFD_PLATFORMS.MT5 &&\n            (type.category === 'demo'\n                ? isEligibleForMoreDemoMt5Svg(\n                      type.type as TTradingPlatformAvailableAccount['market_type'] | 'synthetic'\n                  ) && !!existing_data\n                : isEligibleForMoreRealMt5(\n                      type.type as TTradingPlatformAvailableAccount['market_type'] | 'synthetic'\n                  ) && !!existing_data);\n\n        const platform_icon = show_eu_related_content && platform === CFD_PLATFORMS.MT5 ? 'cfd' : type.type;\n\n        const icon: React.ReactNode | null = type.type ? (\n            <Icon icon={account_icons[type.platform][platform_icon]} size={64} />\n        ) : null;\n        const has_popular_banner: boolean = type.type === 'synthetic';\n        const has_demo_banner: boolean = type.category === 'demo';\n        const has_server_banner =\n            is_logged_in &&\n            existing_data &&\n            type.category === 'real' &&\n            type.type === 'synthetic' &&\n            (existing_data as DetailsOfEachMT5Loginid)?.server_info;\n\n        const ref = React.useRef<HTMLDivElement | null>(null);\n        const wrapper_ref = React.useRef<HTMLDivElement | null>(null);\n        const button_ref = React.useRef<HTMLDivElement | null>(null);\n\n        const handleClickSwitchAccount: () => void = () => {\n            toggleShouldShowRealAccountsList?.(true);\n            toggleAccountsDialog?.(true);\n        };\n\n        const getDxtradeDownloadLink: () => string = () => {\n            const os = mobileOSDetect();\n            if (os === 'iOS') {\n                return getPlatformDXTradeDownloadLink('ios');\n            }\n            return getPlatformDXTradeDownloadLink('android');\n        };\n\n        const checkMultipleSvgAcc = () => {\n            const all_svg_acc: DetailsOfEachMT5Loginid[] = [];\n            existing_accounts_data?.map(acc => {\n                if (acc.landing_company_short === 'svg') {\n                    if (all_svg_acc.length) {\n                        all_svg_acc.forEach(svg_acc => {\n                            if (svg_acc.server !== acc.server) all_svg_acc.push(acc);\n                            return all_svg_acc;\n                        });\n                    } else {\n                        all_svg_acc.push(acc);\n                    }\n                }\n            });\n            return all_svg_acc;\n        };\n\n        const getServerName: (value: DetailsOfEachMT5Loginid) => string = React.useCallback(server => {\n            if (server) {\n                const server_region = (server as DetailsOfEachMT5Loginid).server_info?.geolocation?.region;\n                if (server_region) {\n                    return `${server_region} ${\n                        (server as DetailsOfEachMT5Loginid)?.server_info?.geolocation?.sequence === 1\n                            ? ''\n                            : (server as DetailsOfEachMT5Loginid)?.server_info?.geolocation?.sequence\n                    }`;\n                }\n            }\n            return '';\n        }, []);\n\n        const getBannerStatus = (account: DetailsOfEachMT5Loginid) => {\n            const { landing_company_short, status } = account;\n            if (landing_company_short && status && ['proof_failed', 'verification_pending'].includes(status)) {\n                const should_show_pending_button = status === 'verification_pending';\n                return (\n                    <Button\n                        className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                        type='button'\n                        onClick={() => {\n                            setAccountType({\n                                category: type.category,\n                                type: type.type,\n                            });\n                            setJurisdictionSelectedShortcode(landing_company_short);\n                            updateAccountStatus();\n                            toggleCFDVerificationModal();\n                        }}\n                        primary\n                        large\n                        disabled={should_show_pending_button}\n                    >\n                        {should_show_pending_button ? (\n                            <Localize i18n_default_text='Pending verification' />\n                        ) : (\n                            <Localize i18n_default_text='Resubmit document' />\n                        )}\n                    </Button>\n                );\n            }\n            return null;\n        };\n\n        const is_web_terminal_unsupported = isMobile() && platform === CFD_PLATFORMS.DXTRADE;\n        const tbody_content = platform === CFD_PLATFORMS.DXTRADE && (\n            <React.Fragment>\n                <tr className='cfd-account-card__login-specs-table-row'>\n                    <td className='cfd-account-card__login-specs-table-attribute'>\n                        <div className='cfd-account-card--paragraph'>{localize('Username')}</div>\n                    </td>\n                    <td className='cfd-account-card__login-specs-table-data'>\n                        <div className='cfd-account-card--paragraph'>\n                            <SpecBox value={existing_data?.login} is_bold />\n                        </div>\n                    </td>\n                </tr>\n            </React.Fragment>\n        );\n\n        return (\n            <div ref={wrapper_ref} className='cfd-account-card__wrapper'>\n                <div\n                    className={classNames('cfd-account-card', { 'cfd-account-card__logged-out': !is_logged_in })}\n                    ref={ref}\n                >\n                    {has_popular_banner && (\n                        <div className='cfd-account-card__banner'>\n                            <Localize i18n_default_text='Most popular' />\n                        </div>\n                    )}\n                    {has_demo_banner && (\n                        <div className='cfd-account-card__banner cfd-account-card__banner--demo'>\n                            <Localize i18n_default_text='DEMO' />\n                        </div>\n                    )}\n                    <div\n                        className={classNames('cfd-account-card__type', {\n                            'cfd-account-card__type--has-banner': has_banner || has_popular_banner || has_server_banner,\n                        })}\n                        id={`${platform === CFD_PLATFORMS.DXTRADE ? CFD_PLATFORMS.DXTRADE : CFD_PLATFORMS.MT5}_${\n                            type.category\n                        }_${type.type}`}\n                    >\n                        {icon}\n                        <div className='cfd-account-card__type--description'>\n                            <Text size='xxl' className='cfd-account-card--heading'>\n                                {title}\n                            </Text>\n                            {platform === CFD_PLATFORMS.DXTRADE ? (\n                                (!existing_data || !is_logged_in) && (\n                                    <p className='cfd-account-card--paragraph'>{descriptor}</p>\n                                )\n                            ) : (\n                                <p className='cfd-account-card--paragraph'>{descriptor}</p>\n                            )}\n                            {existing_data?.display_balance && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                    <Money\n                                        amount={existing_data.display_balance}\n                                        currency={existing_data.currency}\n                                        has_sign={existing_data.balance ? existing_data.balance < 0 : false}\n                                        show_currency\n                                    />\n                                </Text>\n                            )}\n                            {(existing_data as TTradingPlatformAccounts)?.display_login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.DXTRADE && (\n                                    <Text color='less-prominent' size='xxxs' line_height='s'>\n                                        {(existing_data as TTradingPlatformAccounts)?.display_login}\n                                    </Text>\n                                )}\n                        </div>\n                    </div>\n                    {platform === CFD_PLATFORMS.MT5 && isDesktop() && is_logged_in && (\n                        <div className='cfd-account-card__acuity-container'>\n                            {type.type === 'financial' && (\n                                <Button\n                                    onClick={() => setIsAcuityModalOpen(true)}\n                                    className='cfd-account-card__acuity-banner'\n                                    type='button'\n                                    transparent\n                                >\n                                    <div className='cfd-account-card__acuity-banner--wrapper'>\n                                        <Icon icon='icMt5Acuity' />\n                                        <Text as='p' size='xxs' weight='bold' color='prominent'>\n                                            <Localize i18n_default_text='Get Acuity trading tools' />\n                                        </Text>\n                                        <Icon icon='IcAddOutline' color='secondary' />\n                                    </div>\n                                </Button>\n                            )}\n                        </div>\n                    )}\n                    {existing_data && <div className='cfd-account-card__divider' />}\n\n                    <div className='cfd-account-card__cta' style={!existing_data?.login ? { marginTop: 'auto' } : {}}>\n                        <div className='cfd-account-card__cta-wrapper'>\n                            {platform === CFD_PLATFORMS.DXTRADE && (!existing_data?.login || !is_logged_in) && (\n                                <div className='cfd-account-card__specs'>\n                                    <table className='cfd-account-card__specs-table'>\n                                        <tbody>\n                                            {typeof specs !== 'undefined' &&\n                                                Object.keys(specs).map((spec_attribute, idx) => (\n                                                    <tr key={idx} className='cfd-account-card__specs-table-row'>\n                                                        <td className='cfd-account-card__specs-table-attribute'>\n                                                            <p className='cfd-account-card--paragraph'>\n                                                                {specs[spec_attribute].key()}\n                                                            </p>\n                                                        </td>\n                                                        <td className='cfd-account-card__specs-table-data'>\n                                                            <p className='cfd-account-card--paragraph'>\n                                                                {specs[spec_attribute].value()}\n                                                            </p>\n                                                        </td>\n                                                    </tr>\n                                                ))}\n                                        </tbody>\n                                    </table>\n                                </div>\n                            )}\n                            {existing_data?.login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.MT5 &&\n                                type.category === 'demo' &&\n                                existing_accounts_data?.length &&\n                                existing_accounts_data?.map((acc: FormikValues, index: number) => (\n                                    <div className='cfd-account-card__item' key={index}>\n                                        {acc?.display_balance &&\n                                            is_logged_in &&\n                                            acc.landing_company_short === 'labuan' && (\n                                                <div className='cfd-account-card__item--banner'>\n                                                    <Localize i18n_default_text={'Labuan'} />\n                                                </div>\n                                            )}\n                                        {(acc as TTradingPlatformAccounts)?.display_login && (\n                                            <div\n                                                className={`cfd-account-card--login-id${\n                                                    acc.landing_company_short === 'labuan' ? '' : '-demo'\n                                                }`}\n                                            >\n                                                <Text size='xxxs' weight='bold'>\n                                                    {(acc as TTradingPlatformAccounts)?.display_login}\n                                                </Text>\n                                            </div>\n                                        )}\n                                        {acc?.display_balance && is_logged_in && (\n                                            <div className='cfd-account-card__balance'>\n                                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                    <Money\n                                                        amount={acc.display_balance}\n                                                        currency={acc.currency}\n                                                        has_sign={!!acc.balance && acc.balance < 0}\n                                                        show_currency\n                                                    />\n                                                </Text>\n                                            </div>\n                                        )}\n                                        <div className='cfd-account-card__manage--mt5'>\n                                            {acc && is_logged_in && (\n                                                <Button onClick={() => onClickFund(acc)} type='button' secondary>\n                                                    <Localize i18n_default_text='Top up' />\n                                                </Button>\n                                            )}\n                                            {acc && is_logged_in && !is_web_terminal_unsupported && (\n                                                <Button\n                                                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                    type='button'\n                                                    onClick={() => {\n                                                        setAppstorePlatform(platform);\n                                                        toggleMT5TradeModal();\n                                                        setMT5TradeAccount(acc);\n                                                    }}\n                                                    primary\n                                                    large\n                                                >\n                                                    <Localize i18n_default_text='Trade' />\n                                                </Button>\n                                            )}\n                                        </div>\n                                    </div>\n                                ))}\n                            {existing_data?.login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.MT5 &&\n                                !existing_accounts_data?.length &&\n                                type.category === 'demo' && (\n                                    <div className='cfd-account-card__item'>\n                                        {(existing_data as TTradingPlatformAccounts)?.display_login && (\n                                            <div className='cfd-account-card--login-id-demo'>\n                                                <Text size='xxxs' weight='bold'>\n                                                    {(existing_data as TTradingPlatformAccounts)?.display_login}\n                                                </Text>\n                                            </div>\n                                        )}\n                                        {existing_data?.display_balance && is_logged_in && (\n                                            <div className='cfd-account-card__balance'>\n                                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                    <Money\n                                                        amount={existing_data.display_balance}\n                                                        currency={existing_data.currency}\n                                                        has_sign={!!existing_data.balance && existing_data.balance < 0}\n                                                        show_currency\n                                                    />\n                                                </Text>\n                                            </div>\n                                        )}\n                                        <div className='cfd-account-card__manage--mt5'>\n                                            {existing_data && is_logged_in && (\n                                                <Button\n                                                    onClick={() => onClickFund(existing_data)}\n                                                    type='button'\n                                                    secondary\n                                                >\n                                                    <Localize i18n_default_text='Top up' />\n                                                </Button>\n                                            )}\n                                            {existing_data && is_logged_in && !is_web_terminal_unsupported && (\n                                                <Button\n                                                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                    type='button'\n                                                    onClick={() => {\n                                                        setAppstorePlatform(platform);\n                                                        toggleMT5TradeModal();\n                                                        setMT5TradeAccount(existing_data);\n                                                    }}\n                                                    primary\n                                                    large\n                                                >\n                                                    <Localize i18n_default_text='Trade' />\n                                                </Button>\n                                            )}\n                                        </div>\n                                    </div>\n                                )}\n                            {existing_data?.login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.MT5 &&\n                                type.category === 'real' &&\n                                existing_accounts_data?.map((acc: FormikValues, index: number) => (\n                                    <div className='cfd-account-card__item' key={index}>\n                                        {existing_data?.display_balance && is_logged_in && !show_eu_related_content && (\n                                            <div className='cfd-account-card__item--banner'>\n                                                <Localize\n                                                    i18n_default_text={\n                                                        acc.landing_company_short &&\n                                                        !['svg', 'bvi'].includes(acc?.landing_company_short)\n                                                            ? acc.landing_company_short?.charAt(0).toUpperCase() +\n                                                              acc.landing_company_short.slice(1)\n                                                            : acc.landing_company_short?.toUpperCase()\n                                                    }\n                                                />\n                                            </div>\n                                        )}\n                                        {(acc as TTradingPlatformAccounts)?.display_login && (\n                                            <div className='cfd-account-card--login-id'>\n                                                <Text size='xxxs' weight='bold'>\n                                                    {(acc as TTradingPlatformAccounts)?.display_login}\n                                                </Text>\n                                            </div>\n                                        )}\n                                        {existing_data?.display_balance && is_logged_in && (\n                                            <div className='cfd-account-card__balance'>\n                                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                    <Money\n                                                        amount={acc.display_balance}\n                                                        currency={acc.currency}\n                                                        has_sign={!!acc.balance && acc.balance < 0}\n                                                        show_currency\n                                                    />\n                                                </Text>\n                                                {checkMultipleSvgAcc()?.length > 1 &&\n                                                    acc.landing_company_short === 'svg' && (\n                                                        <Text\n                                                            className='cfd-account-card__balance--region'\n                                                            color='colored-background'\n                                                            size='xxxs'\n                                                            weight='bold'\n                                                        >\n                                                            {getServerName(acc)}\n                                                        </Text>\n                                                    )}\n                                            </div>\n                                        )}\n                                        <div className='cfd-account-card__manage--mt5'>\n                                            {getBannerStatus(acc) ?? (\n                                                <React.Fragment>\n                                                    {existing_data && is_logged_in && (\n                                                        <Button\n                                                            onClick={() => {\n                                                                const selected_account_data =\n                                                                    existing_accounts_data?.find(\n                                                                        data =>\n                                                                            data.landing_company_short ===\n                                                                                acc.landing_company_short &&\n                                                                            data.login === acc.login\n                                                                    );\n\n                                                                onClickFund(\n                                                                    selected_account_data as DetailsOfEachMT5Loginid\n                                                                );\n                                                            }}\n                                                            type='button'\n                                                            secondary\n                                                        >\n                                                            <Localize i18n_default_text='Top up' />\n                                                        </Button>\n                                                    )}\n                                                    {existing_data && is_logged_in && !is_web_terminal_unsupported && (\n                                                        <Button\n                                                            className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                            type='button'\n                                                            onClick={() => {\n                                                                const selected_account_data =\n                                                                    existing_accounts_data?.find(\n                                                                        data =>\n                                                                            data.landing_company_short ===\n                                                                                acc.landing_company_short &&\n                                                                            data.login === acc.login\n                                                                    );\n                                                                setAppstorePlatform(platform);\n                                                                toggleMT5TradeModal();\n                                                                setMT5TradeAccount(selected_account_data);\n                                                            }}\n                                                            primary\n                                                            large\n                                                        >\n                                                            <Localize i18n_default_text='Trade' />\n                                                        </Button>\n                                                    )}\n                                                </React.Fragment>\n                                            )}\n                                        </div>\n                                    </div>\n                                ))}\n                            {existing_data?.login && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                                <React.Fragment>\n                                    <div className='cfd-account-card__login-specs'>\n                                        <table className='cfd-account-card__login-specs-table'>\n                                            <tbody>\n                                                {tbody_content}\n                                                <tr className='cfd-account-card__login-specs-table-row cfd-account-card__login-specs-table-row--account-id'>\n                                                    <td className='cfd-account-card__login-specs-table-attribute'>\n                                                        <div className='cfd-account-card--paragraph'>\n                                                            {localize('Password')}\n                                                        </div>\n                                                    </td>\n                                                    <td className='cfd-account-card__login-specs-table-data'>\n                                                        <div className='cfd-account-card--paragraph'>\n                                                            <PasswordBox\n                                                                platform={platform}\n                                                                onClick={() => {\n                                                                    onPasswordManager(\n                                                                        existing_data?.login,\n                                                                        title,\n                                                                        type.category,\n                                                                        type.type,\n                                                                        (existing_data as DetailsOfEachMT5Loginid)\n                                                                            ?.server\n                                                                    );\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </React.Fragment>\n                            )}\n                            {((!existing_data && commission_message) || !is_logged_in) &&\n                                platform === CFD_PLATFORMS.DXTRADE && (\n                                    <div className='cfd-account-card__commission'>\n                                        <Text as='p' color='general' size='xs' styles={{ margin: '1.6rem auto' }}>\n                                            {commission_message}\n                                        </Text>\n                                    </div>\n                                )}\n                            {existing_data && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                                <div className='cfd-account-card__manage'>\n                                    <Button onClick={() => onClickFund(existing_data)} type='button' secondary>\n                                        {type.category === 'real' && <Localize i18n_default_text='Fund transfer' />}\n                                        {type.category === 'demo' && <Localize i18n_default_text='Top up' />}\n                                    </Button>\n                                </div>\n                            )}\n                            {existing_data &&\n                                is_logged_in &&\n                                !is_web_terminal_unsupported &&\n                                platform === CFD_PLATFORMS.DXTRADE && (\n                                    <a\n                                        className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                        type='button'\n                                        href={getDXTradeWebTerminalLink(\n                                            type.category,\n                                            dxtrade_tokens[type.category as 'demo' | 'real']\n                                        )}\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                    >\n                                        <Localize i18n_default_text='Trade on web terminal' />\n                                    </a>\n                                )}\n                            {existing_data && is_logged_in && is_web_terminal_unsupported && (\n                                <a\n                                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                    type='button'\n                                    href={getDxtradeDownloadLink()}\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                >\n                                    <Localize i18n_default_text='Download the app' />\n                                </a>\n                            )}\n                            {existing_data &&\n                                is_logged_in &&\n                                !is_web_terminal_unsupported &&\n                                platform === CFD_PLATFORMS.DERIVEZ && (\n                                    <a\n                                        className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                        type='button'\n                                        href={getDerivEzWebTerminalLink(\n                                            type.category,\n                                            derivez_tokens[type.category as 'demo' | 'real']\n                                        )}\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                    >\n                                        <Localize i18n_default_text='Trade on web terminal' />\n                                    </a>\n                                )}\n                            {!existing_data && is_logged_in && (\n                                <CFDAccountCardAction\n                                    button_label={button_label}\n                                    handleClickSwitchAccount={handleClickSwitchAccount}\n                                    has_real_account={has_real_account}\n                                    is_accounts_switcher_on={is_accounts_switcher_on}\n                                    is_button_primary={is_button_primary}\n                                    is_disabled={is_disabled}\n                                    is_virtual={is_virtual}\n                                    onSelectAccount={onSelectAccount}\n                                    type={type}\n                                    platform={platform}\n                                    title={title}\n                                    real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                    setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                />\n                            )}\n                        </div>\n                    </div>\n                    <React.Fragment>\n                        {should_show_extra_add_account_button && (\n                            <MobileWrapper>\n                                <AddAccountButton\n                                    ref={button_ref}\n                                    onSelectAccount={onSelectAccount}\n                                    is_disabled={has_cfd_account_error}\n                                />\n                            </MobileWrapper>\n                        )}\n                    </React.Fragment>\n                </div>\n                <DesktopWrapper>\n                    <CSSTransition\n                        in={should_show_extra_add_account_button}\n                        timeout={0}\n                        classNames='cfd-account-card__add-server'\n                        unmountOnExit\n                    >\n                        <AddAccountButton\n                            ref={button_ref}\n                            onSelectAccount={onSelectAccount}\n                            is_disabled={has_cfd_account_error}\n                        />\n                    </CSSTransition>\n                </DesktopWrapper>\n            </div>\n        );\n    }\n);\n\nconst CFDAccountCard = CFDAccountCardComponent;\n\nexport { CFDAccountCard };\n","import { localize } from '@deriv/translations';\n\ntype TMT5 = {\n    real_synthetic_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    eu_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_stp_specs: Record<string, { key: () => string; value: () => string }>;\n    au_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    demo_financial_stp_specs: Record<string, { key: () => string; value: () => string }>;\n};\n\ntype TDXTrade = {\n    demo_all_specs: Record<string, { key: () => string; value: () => string }>;\n    real_all_specs: Record<string, { key: () => string; value: () => string }>;\n    real_synthetic_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    eu_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    au_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    demo_financial_stp_specs?: Record<string, { key: () => string; value: () => string }>;\n    real_financial_stp_specs?: Record<string, { key: () => string; value: () => string }>;\n};\n\nexport type TSpecifications = {\n    mt5: TMT5;\n    dxtrade: TDXTrade;\n};\n\nconst mt5 = {\n    real_synthetic_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('20+') },\n    },\n    real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('150+') },\n    },\n    real_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('40+') },\n    },\n    eu_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('50+') },\n    },\n    real_financial_stp_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:100') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('70+') },\n    },\n    au_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('100+') },\n    },\n    demo_financial_stp_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:100') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('70+') },\n    },\n};\n\n// TODO: Edit this after real accounts release\nconst dxtrade = {\n    demo_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('110+') },\n    },\n    real_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('110+') },\n    },\n    real_synthetic_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('20+') },\n    },\n    real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n    eu_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n    au_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n};\n\nconst specifications = {\n    mt5,\n    dxtrade,\n};\n\nexport default specifications;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport { CFDAccountCard } from './cfd-account-card';\nimport specifications from '../Constants/cfd-specifications';\nimport Loading from '../templates/_common/components/loading';\nimport { LandingCompany, DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\nimport { TCFDPasswordReset } from '../Containers/props.types';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCFDDemoAccountDisplayProps = {\n    has_cfd_account_error: boolean;\n    standpoint: TStandPoint;\n    is_loading: boolean;\n    is_logged_in: boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    current_list: Record<\n        string,\n        DetailsOfEachMT5Loginid & {\n            enabled: number;\n        }\n    >;\n    openPasswordManager: (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => void;\n    landing_companies?: LandingCompany;\n};\n\nconst CFDDxtradeDemoAccountDisplay = ({\n    has_cfd_account_error,\n    standpoint,\n    is_loading,\n    is_logged_in,\n    onSelectAccount,\n    openAccountTransfer,\n    platform,\n    current_list,\n    openPasswordManager,\n}: TCFDDemoAccountDisplayProps) => {\n    const existing_accounts_data = (acc_type: 'dxtrade') => {\n        const acc = Object.keys(current_list).some(\n            key => key.startsWith(`${platform}.demo.${acc_type}`) && current_list[key].enabled === 1\n        )\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(`${platform}.demo.${acc_type}`))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    const current_list_index = Object.keys(current_list).find(key => key.startsWith(`${platform}.demo.dxtrade`)) || '';\n\n    return (\n        <div className='cfd-demo-accounts-display' data-testid='dt_cfd_demo_accounts_display'>\n            {is_loading ? (\n                <Loading />\n            ) : (\n                <CFDAccountCard\n                    key='cfd'\n                    title={localize('Deriv X')}\n                    type={{\n                        category: 'demo',\n                        platform: 'dxtrade',\n                        type: 'all',\n                    }}\n                    is_disabled={has_cfd_account_error || standpoint.malta}\n                    is_logged_in={is_logged_in}\n                    existing_accounts_data={existing_accounts_data('dxtrade')}\n                    commission_message={localize('No commission')}\n                    onSelectAccount={() =>\n                        onSelectAccount({\n                            category: 'demo',\n                            platform: 'dxtrade',\n                            type: 'all',\n                        })\n                    }\n                    onPasswordManager={openPasswordManager}\n                    onClickFund={() =>\n                        openAccountTransfer(current_list[current_list_index], {\n                            category: 'demo',\n                            type: 'all',\n                        })\n                    }\n                    platform={platform}\n                    descriptor={localize(\n                        'Trade CFDs on forex, derived indices, cryptocurrencies, and commodities with high leverage.'\n                    )}\n                    specs={specifications.dxtrade.demo_all_specs}\n                    has_banner\n                />\n            )}\n        </div>\n    );\n};\n\nexport default CFDDxtradeDemoAccountDisplay;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport { CFDAccountCard } from './cfd-account-card';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport specifications, { TSpecifications } from '../Constants/cfd-specifications';\nimport Loading from '../templates/_common/components/loading';\nimport { LandingCompany, DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\nimport { TCFDPasswordReset } from '../Containers/props.types';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCFDDemoAccountDisplayProps = {\n    is_eu: boolean;\n    is_eu_country: boolean;\n    has_maltainvest_account: boolean;\n    has_cfd_account_error: boolean;\n    openAccountNeededModal: (target: string, target_label: string, target_dmt5_label: string) => void;\n    standpoint: TStandPoint;\n    is_loading: boolean;\n    is_logged_in: boolean;\n    isSyntheticCardVisible: (account_category: string) => boolean;\n    isFinancialCardVisible: () => boolean;\n    isSwapFreeCardVisible: () => boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    current_list: Record<string, DetailsOfEachMT5Loginid & DetailsOfEachMT5Loginid[]>;\n    openPasswordManager: (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => void;\n    residence: string;\n    landing_companies?: LandingCompany;\n    toggleMT5TradeModal: () => void;\n    show_eu_related_content: boolean;\n};\n\nconst CFDMT5DemoAccountDisplay = ({\n    is_eu,\n    is_eu_country,\n    has_maltainvest_account,\n    has_cfd_account_error,\n    openAccountNeededModal,\n    standpoint,\n    is_loading,\n    is_logged_in,\n    isSyntheticCardVisible,\n    isFinancialCardVisible,\n    isSwapFreeCardVisible,\n    onSelectAccount,\n    openAccountTransfer,\n    platform,\n    current_list,\n    openPasswordManager,\n    residence,\n    show_eu_related_content,\n}: TCFDDemoAccountDisplayProps) => {\n    const openAccountTransferList = (type: DetailsOfEachMT5Loginid['market_type']) => {\n        return Object.keys(current_list).find((key: string) => key.startsWith(`${platform}.demo.${type}`)) || '';\n    };\n\n    const openCFDAccount = () => {\n        if (is_eu && !has_maltainvest_account && standpoint.iom) {\n            openAccountNeededModal('maltainvest', localize('Deriv Multipliers'), localize('demo CFDs'));\n        } else {\n            onSelectAccount({\n                category: 'demo',\n                type: 'financial',\n                platform,\n            });\n        }\n    };\n\n    const financial_accounts_data = () => {\n        const acc = Object.keys(current_list).some(key => key.startsWith(`${platform}.demo.financial`))\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(`${platform}.demo.financial`))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    const financial_specs = React.useMemo(() => {\n        const should_show_eu = (is_logged_in && is_eu) || (!is_logged_in && is_eu_country);\n        if (residence === 'au') {\n            return specifications[platform as keyof TSpecifications].au_real_financial_specs;\n        }\n        if (should_show_eu) {\n            return specifications[platform as keyof TSpecifications].eu_real_financial_specs;\n        }\n        return specifications[platform as keyof TSpecifications].real_financial_specs;\n    }, [is_logged_in, is_eu, is_eu_country, residence, platform]);\n\n    return (\n        <React.Fragment>\n            {is_loading ? (\n                <Loading />\n            ) : (\n                <div className='cfd-demo-accounts-display' data-testid='dt_cfd_demo_accounts_display'>\n                    {isSyntheticCardVisible('demo') && (\n                        <CFDAccountCard\n                            title={localize('Derived')}\n                            type={{\n                                category: 'demo',\n                                type: 'synthetic',\n                                platform,\n                            }}\n                            is_disabled={has_cfd_account_error || standpoint.malta}\n                            is_logged_in={is_logged_in}\n                            existing_accounts_data={current_list[openAccountTransferList('synthetic')]}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={() =>\n                                onSelectAccount({\n                                    category: 'demo',\n                                    type: 'synthetic',\n                                    platform,\n                                })\n                            }\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('synthetic')], {\n                                    category: 'demo',\n                                    type: 'synthetic',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={localize('Trade CFDs on our synthetics, baskets, and derived FX.')}\n                            specs={specifications[platform as keyof TSpecifications].real_synthetic_specs}\n                            has_banner\n                        />\n                    )}\n\n                    {isFinancialCardVisible() && (\n                        <CFDAccountCard\n                            title={show_eu_related_content ? localize('CFDs') : localize('Financial')}\n                            is_disabled={has_cfd_account_error}\n                            is_logged_in={is_logged_in}\n                            type={{\n                                category: 'demo',\n                                type: 'financial',\n                                platform,\n                            }}\n                            existing_accounts_data={financial_accounts_data()}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={openCFDAccount}\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('financial')], {\n                                    category: 'demo',\n                                    type: 'financial',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={general_messages.getFinancialAccountDescriptor(\n                                platform,\n                                show_eu_related_content\n                            )}\n                            specs={financial_specs}\n                            has_banner\n                        />\n                    )}\n\n                    {isSwapFreeCardVisible() && (\n                        <CFDAccountCard\n                            title={localize('Swap-Free')}\n                            type={{\n                                category: 'demo',\n                                type: 'all',\n                                platform,\n                            }}\n                            is_disabled={has_cfd_account_error || standpoint.malta}\n                            is_logged_in={is_logged_in}\n                            existing_accounts_data={current_list[openAccountTransferList('all')]}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={() =>\n                                onSelectAccount({\n                                    category: 'demo',\n                                    type: 'all',\n                                    platform,\n                                })\n                            }\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('all')], {\n                                    category: 'demo',\n                                    type: 'all',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={localize(\n                                'Trade swap-free CFDs on MT5 with synthetics, forex, stocks, stock indices, cryptocurrencies, and ETFs.'\n                            )}\n                            specs={specifications[platform as keyof TSpecifications].real_all_specs}\n                            has_banner\n                        />\n                    )}\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default CFDMT5DemoAccountDisplay;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { localize } from '@deriv/translations';\nimport { DesktopWrapper, MobileWrapper, Carousel } from '@deriv/components';\nimport { getAccountTypeFields, getAccountListKey, getCFDAccountKey } from '@deriv/shared';\nimport specifications, { TSpecifications } from '../Constants/cfd-specifications';\nimport { CFDAccountCard } from './cfd-account-card';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\nimport { TCFDPasswordReset } from '../Containers/props.types';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCurrentList = DetailsOfEachMT5Loginid & {\n    enabled: number;\n};\n\ntype TCFDRealAccountDisplayProps = {\n    has_real_account: boolean;\n    is_accounts_switcher_on: boolean;\n    is_eu: boolean;\n    is_eu_country: boolean;\n    has_cfd_account_error: boolean;\n    standpoint: TStandPoint;\n    is_loading?: boolean;\n    is_logged_in: boolean;\n    isSyntheticCardVisible: (account_category: string) => boolean;\n    isDxtradeAllCardVisible: (account_category: string) => boolean;\n    is_virtual: boolean;\n    isFinancialCardVisible: () => boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    realSyntheticAccountsExistingData: (getRealExistingData: DetailsOfEachMT5Loginid[] | undefined) => void;\n    realFinancialAccountsExistingData: (getRealExistingData: DetailsOfEachMT5Loginid[] | undefined) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    isAccountOfTypeDisabled: (\n        account: Array<DetailsOfEachMT5Loginid> & { [key: string]: DetailsOfEachMT5Loginid }\n    ) => boolean;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    current_list: Record<string, TCurrentList>;\n    openPasswordManager: (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => void;\n    toggleAccountsDialog: (is_accounts_switcher_on?: boolean) => void;\n    toggleShouldShowRealAccountsList: (prop: boolean) => void;\n    residence: string;\n    account_status?: object;\n    openDerivRealAccountNeededModal: () => void;\n    should_enable_add_button?: boolean;\n    real_account_creation_unlock_date: string;\n    setShouldShowCooldownModal: (value: boolean) => void;\n    show_eu_related_content: boolean;\n};\n\nconst CFDRealAccountDisplay = ({\n    has_real_account,\n    is_accounts_switcher_on,\n    is_eu,\n    is_eu_country,\n    has_cfd_account_error,\n    is_virtual,\n    isSyntheticCardVisible,\n    isFinancialCardVisible,\n    isDxtradeAllCardVisible,\n    onSelectAccount,\n    realSyntheticAccountsExistingData,\n    realFinancialAccountsExistingData,\n    openAccountTransfer,\n    isAccountOfTypeDisabled,\n    current_list,\n    openPasswordManager,\n    platform,\n    standpoint,\n    is_logged_in,\n    toggleAccountsDialog,\n    toggleShouldShowRealAccountsList,\n    residence,\n    openDerivRealAccountNeededModal,\n    should_enable_add_button,\n    show_eu_related_content,\n}: TCFDRealAccountDisplayProps) => {\n    const financial_specs = React.useMemo(() => {\n        const should_show_eu = (is_logged_in && is_eu) || (!is_logged_in && is_eu_country);\n        const is_australian = residence === 'au';\n        if (is_australian) {\n            return specifications[platform as keyof TSpecifications].au_real_financial_specs;\n        }\n        if (should_show_eu) {\n            return specifications[platform as keyof TSpecifications].eu_real_financial_specs;\n        }\n        return specifications[platform as keyof TSpecifications].real_financial_specs;\n    }, [residence, is_logged_in, is_eu, is_eu_country, platform]);\n\n    const onSelectRealAccount = (type: string) => {\n        if (should_enable_add_button) {\n            openDerivRealAccountNeededModal();\n        } else {\n            onSelectAccount({ type, category: 'real', platform });\n        }\n    };\n\n    const onClickFundReal = (account: DetailsOfEachMT5Loginid) => {\n        if (platform === 'dxtrade') {\n            return openAccountTransfer(current_list[getAccountListKey(account, platform)], {\n                category: account.account_type as keyof TOpenAccountTransferMeta,\n                type: getCFDAccountKey({\n                    market_type: account.market_type,\n                    sub_account_type: (account as DetailsOfEachMT5Loginid).sub_account_type,\n                    platform,\n                }),\n            });\n        }\n        return openAccountTransfer(account, {\n            category: account.account_type as keyof TOpenAccountTransferMeta,\n            type: getCFDAccountKey({\n                market_type: account.market_type,\n                sub_account_type: (account as DetailsOfEachMT5Loginid).sub_account_type,\n                platform: 'mt5',\n            }),\n        });\n    };\n\n    const isMT5AccountCardDisabled = (sub_account_type: string) => {\n        if (has_cfd_account_error) return true;\n\n        if (sub_account_type === 'synthetic' && standpoint.malta) return true;\n\n        if (is_eu) {\n            const account = getAccountTypeFields({ category: 'real', type: sub_account_type });\n            return isAccountOfTypeDisabled(account?.account_type);\n        }\n\n        switch (sub_account_type) {\n            case 'synthetic':\n            case 'financial':\n                return should_enable_add_button ? false : !has_real_account;\n            default:\n                return false;\n        }\n    };\n\n    const existing_accounts_data = (acc_type: 'synthetic' | 'financial' | 'all') => {\n        // We need to check enabled property for DXTRADE accounts only.\n        const account_key =\n            acc_type === 'all' ? `${platform}.real.${platform}@${acc_type}` : `${platform}.real.${acc_type}`;\n        // TODO: This condition should be removed after separating the DXTRADE and MT5 component.\n        const should_be_enabled = (list_item: TCurrentList) =>\n            platform === 'dxtrade' ? list_item.enabled === 1 : true;\n        const acc = Object.keys(current_list).some(\n            key => key.startsWith(account_key) && should_be_enabled(current_list[key])\n        )\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(account_key))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    realSyntheticAccountsExistingData(existing_accounts_data('synthetic'));\n    realFinancialAccountsExistingData(existing_accounts_data('financial'));\n\n    const synthetic_account_items = isSyntheticCardVisible('real') && (\n        <CFDAccountCard\n            key='real.synthetic'\n            has_cfd_account_error={has_cfd_account_error}\n            title={platform === 'mt5' ? localize('Derived') : localize('Synthetic')}\n            has_real_account={has_real_account}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_disabled={isMT5AccountCardDisabled('synthetic')}\n            is_logged_in={is_logged_in}\n            type={{\n                category: 'real',\n                type: 'synthetic',\n                platform,\n            }}\n            existing_accounts_data={existing_accounts_data('synthetic')}\n            commission_message={localize('No commission')}\n            onSelectAccount={() => onSelectRealAccount('synthetic')}\n            onPasswordManager={openPasswordManager}\n            onClickFund={onClickFundReal}\n            platform={platform}\n            descriptor={\n                platform === 'mt5'\n                    ? localize('Trade CFDs on our synthetics, baskets, and derived FX.')\n                    : localize('Trade CFDs on our synthetic indices that simulate real-world market movements.')\n            }\n            specs={specifications[platform as keyof TSpecifications].real_synthetic_specs}\n            is_virtual={is_virtual}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            toggleAccountsDialog={toggleAccountsDialog}\n        />\n    );\n\n    const financial_account = isFinancialCardVisible() && (\n        <CFDAccountCard\n            key='real.financial'\n            has_real_account={has_real_account}\n            is_disabled={isMT5AccountCardDisabled('financial')}\n            title={show_eu_related_content ? localize('CFDs') : localize('Financial')}\n            type={{\n                category: 'real',\n                type: 'financial',\n                platform,\n            }}\n            existing_accounts_data={existing_accounts_data('financial')}\n            commission_message={localize('No commission')}\n            onSelectAccount={() => onSelectRealAccount('financial')}\n            onPasswordManager={openPasswordManager}\n            onClickFund={onClickFundReal}\n            platform={platform}\n            descriptor={general_messages.getFinancialAccountDescriptor(platform, show_eu_related_content)}\n            specs={financial_specs}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_logged_in={is_logged_in}\n            is_virtual={is_virtual}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            toggleAccountsDialog={toggleAccountsDialog}\n        />\n    );\n\n    const derivx_all_account = platform === 'dxtrade' && isDxtradeAllCardVisible('real') && (\n        <CFDAccountCard\n            commission_message={localize('No commission')}\n            descriptor={localize(\n                'Trade CFDs on forex, derived indices, cryptocurrencies, and commodities with high leverage.'\n            )}\n            existing_accounts_data={existing_accounts_data('all')}\n            has_real_account={has_real_account}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_disabled={has_cfd_account_error || standpoint.malta}\n            is_logged_in={is_logged_in}\n            is_virtual={is_virtual}\n            key='cfd'\n            onClickFund={onClickFundReal}\n            onPasswordManager={openPasswordManager}\n            onSelectAccount={() => onSelectRealAccount('all')}\n            platform={platform}\n            specs={specifications.dxtrade.real_all_specs}\n            title={localize('Deriv X')}\n            toggleAccountsDialog={toggleAccountsDialog}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            type={{\n                category: 'real',\n                type: 'all',\n                platform,\n            }}\n        />\n    );\n\n    const items = [synthetic_account_items, financial_account, derivx_all_account].filter(Boolean);\n\n    return (\n        <div data-testid='dt_cfd_real_accounts_display' className={classNames('cfd-real-accounts-display')}>\n            <DesktopWrapper>\n                <Carousel\n                    list={items}\n                    width={328}\n                    nav_position='middle'\n                    show_bullet={false}\n                    item_per_window={2}\n                    is_mt5={true}\n                />\n            </DesktopWrapper>\n            <MobileWrapper>{items}</MobileWrapper>\n        </div>\n    );\n};\n\nexport { CFDRealAccountDisplay };\n","import React from 'react';\nimport { RouteComponentProps, useLocation } from 'react-router';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { Icon, Tabs, PageError, Loading, Text } from '@deriv/components';\nimport {\n    isEmptyObject,\n    isMobile,\n    routes,\n    getCFDPlatformLabel,\n    getPlatformSettings,\n    CFD_PLATFORMS,\n    isLandingCompanyEnabled,\n} from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { ResetTradingPasswordModal } from '@deriv/account';\nimport MissingRealAccount from './missing-real-account';\nimport LoadingCFDRealAccountDisplay from './loading-cfd-real-account-display';\nimport CompareAccountsModal from './compare-accounts-modal';\nimport JurisdictionModal from './jurisdiction-modal/jurisdiction-modal';\nimport MT5TradeModal from './mt5-trade-modal';\nimport CFDDbviOnboarding from './cfd-dbvi-onboarding';\nimport CFDDownloadContainer from '../Components/cfd-download-container';\nimport CFDPasswordManagerModal from './cfd-password-manager-modal';\nimport CFDPasswordModal from './cfd-password-modal';\nimport CFDServerErrorDialog from './cfd-server-error-dialog';\nimport CFDTopUpDemoModal from './cfd-top-up-demo-modal';\nimport CFDResetPasswordModal from './cfd-reset-password-modal';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport SwitchToRealAccountModal from './switch-to-real-account';\nimport 'Sass/cfd-dashboard.scss';\nimport { LandingCompany, DetailsOfEachMT5Loginid } from '@deriv/api-types';\n// TODO: Change these imports after real released\nimport CFDDxtradeDemoAccountDisplay from '../Components/cfd-dxtrade-demo-account-display';\nimport CFDMT5DemoAccountDisplay from '../Components/cfd-mt5-demo-account-display';\nimport { CFDRealAccountDisplay } from '../Components/cfd-real-account-display';\nimport { observer, useStore } from '@deriv/stores';\nimport { TCFDPasswordReset } from './props.types';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { TTradingPlatformAccounts } from 'Components/props.types';\n\ndeclare module 'react' {\n    interface HTMLAttributes<T> extends React.AriaAttributes, React.DOMAttributes<T> {\n        label?: string;\n        hash?: string;\n    }\n}\n\ntype TLoadTab = {\n    children: React.ReactNode;\n    is_loading: boolean;\n    loading_component: () => JSX.Element;\n    active_index: number;\n    top: boolean;\n    center: boolean;\n    is_logged_in: boolean;\n    onTabItemClick: (index: number) => void;\n    should_update_hash: boolean;\n    landing_companies?: LandingCompany;\n};\n\nconst LoadTab = ({ children, is_loading, loading_component, ...props }: TLoadTab) => {\n    const LoadingComponent = loading_component;\n    if (is_loading) {\n        return <LoadingComponent />;\n    }\n\n    return <Tabs {...props}>{children}</Tabs>;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TMt5StatusServerType = {\n    all: number;\n    platform: number;\n    server_number: number;\n    deposits?: number;\n    withdrawals?: number;\n};\n\ntype TMt5StatusServer = Record<'demo' | 'real', TMt5StatusServerType[]>;\n\nexport type TObjectCFDAccount = { category: string; type: string; set_password?: number; platform?: string };\n\nexport type TCFDDashboardProps = RouteComponentProps & {\n    account_status: object;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    platform: 'mt5' | 'dxtrade';\n};\n\ntype TPasswordManager = {\n    is_visible: boolean;\n    selected_login: string;\n    selected_account: string;\n    selected_account_type: string;\n    selected_account_group: TCFDPasswordReset['account_group'];\n    selected_server: string;\n};\n\nconst CFDDashboard = observer((props: TCFDDashboardProps) => {\n    const { client, ui, traders_hub, notifications } = useStore();\n\n    const {\n        landing_companies,\n        isAccountOfTypeDisabled,\n        is_logged_in,\n        is_logging_in,\n        is_eu,\n        is_eu_country,\n        is_virtual,\n        is_mt5_allowed,\n        is_dxtrade_allowed,\n        mt5_disabled_signup_types,\n        dxtrade_disabled_signup_types,\n        has_maltainvest_account,\n        dxtrade_accounts_list_error,\n        residence,\n        is_populating_mt5_account_list: is_loading,\n        has_account_error_in_mt5_real_list: has_mt5_real_account_error,\n        has_account_error_in_mt5_demo_list: has_mt5_demo_account_error,\n        has_account_error_in_dxtrade_real_list: has_dxtrade_real_account_error,\n        has_account_error_in_dxtrade_demo_list: has_dxtrade_demo_account_error,\n        has_active_real_account: has_real_account,\n        standpoint,\n        verification_code: platform_verification_code,\n        website_status,\n        upgradeable_landing_companies,\n        real_account_creation_unlock_date,\n        account_settings,\n    } = client;\n\n    const {\n        trading_platform_mt5_password_reset: mt5_verification_code,\n        trading_platform_dxtrade_password_reset: dxtrade_verification_code,\n    } = platform_verification_code;\n    const { mt5_status: mt5_status_server, dx_trade_status: dxtrade_status_server } = website_status;\n    const { dxtrade_user_exception: is_user_exception, residence: country } = account_settings;\n\n    const {\n        setCFDPasswordResetModal,\n        openAccountNeededModal,\n        is_accounts_switcher_on,\n        openTopUpModal,\n        notification_messages_ui: NotificationMessages,\n        toggleAccountsDialog,\n        toggleShouldShowRealAccountsList,\n        is_dark_mode_on,\n        disableApp,\n        enableApp,\n        is_reset_trading_password_modal_visible,\n        setResetTradingPasswordModalOpen: toggleResetTradingPasswordModal,\n        openDerivRealAccountNeededModal,\n        setShouldShowCooldownModal,\n    } = ui;\n    const { show_eu_related_content } = traders_hub;\n    const { refreshNotifications } = notifications;\n\n    const {\n        onMount,\n        onUnmount,\n        setAccountType,\n        setCurrentAccount,\n        enableCFDPasswordModal,\n        getRealSyntheticAccountsExistingData,\n        getRealFinancialAccountsExistingData,\n        toggleMT5TradeModal,\n        beginRealSignupForMt5,\n        disableCFDPasswordModal,\n        checkShouldOpenAccount,\n        is_mt5_trade_modal_visible,\n        createCFDAccount,\n        current_list,\n        dxtrade_tokens,\n        derivez_tokens,\n    } = useCfdStore();\n\n    const [is_demo_enabled, setIsDemoEnabled] = React.useState<boolean>(false);\n    const [is_real_enabled, setIsRealEnabled] = React.useState<boolean>(false);\n    const [active_index, setActiveIndex] = React.useState<number>(0);\n    const [is_demo_tab, setIsDemoTab] = React.useState<boolean>(false);\n    const [is_notification_loaded, setIsNotificationLoaded] = React.useState<boolean>(false);\n    const [password_manager, setPasswordManager] = React.useState<TPasswordManager>({\n        is_visible: false,\n        selected_login: '',\n        selected_account: '',\n        selected_account_type: '',\n        selected_account_group: '',\n        selected_server: '',\n    });\n\n    const history = useHistory();\n    const location = useLocation();\n\n    React.useEffect(() => {\n        if (window.location.href.includes(routes.mt5) || window.location.href.includes(routes.dxtrade)) {\n            history.push(routes.traders_hub);\n        }\n    }, [history]);\n\n    React.useEffect(() => {\n        updateActiveIndex(getIndexToSet());\n        openResetPassword();\n        refreshNotifications();\n        onMount();\n        return () => {\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    React.useEffect(() => {\n        checkShouldOpenAccount();\n\n        if (is_logged_in) {\n            ['demo', 'real'].forEach(account_type => {\n                const should_enable_tab =\n                    isDxtradeAllCardVisible(account_type) ||\n                    isSyntheticCardVisible(account_type) ||\n                    isFinancialCardVisible();\n\n                if (account_type === 'real' && is_real_enabled !== should_enable_tab) {\n                    setIsRealEnabled(should_enable_tab);\n                }\n\n                if (account_type === 'demo' && is_demo_enabled !== should_enable_tab) {\n                    setIsDemoEnabled(should_enable_tab);\n                }\n            });\n        }\n\n        if (!is_logged_in && (!is_real_enabled || !is_demo_enabled)) {\n            setIsRealEnabled(true);\n            setIsDemoEnabled(true);\n        }\n        if (props.location.hash === '#demo') {\n            setIsDemoEnabled(true);\n            setActiveIndex(1);\n        }\n    });\n\n    React.useEffect(() => {\n        if (props.location.hash === '#real') {\n            setActiveIndex(0);\n        }\n        if (props.location.hash === '#demo-all' || props.location.hash === '#demo') {\n            setActiveIndex(1);\n        }\n    }, [props.location.hash]);\n\n    const openResetPassword = () => {\n        if (!/reset-password/.test(location.hash)) {\n            return;\n        }\n\n        setCFDPasswordResetModal(true);\n    };\n\n    const getIndexToSet = () => {\n        if (is_real_enabled) {\n            return 0;\n        }\n        if (is_demo_enabled) {\n            return 1;\n        }\n\n        const hash = location.hash;\n        if (hash) {\n            return /demo/.test(location.hash) ? 1 : 0;\n        }\n        return undefined;\n    };\n\n    const stopNotificationLoading = () => {\n        setIsNotificationLoaded(true);\n    };\n\n    const updateActiveIndex = (index?: number) => {\n        if (index === undefined) return;\n        const updated_state: { is_demo_tab?: boolean; active_index?: number } = {};\n        // updateActiveIndex is called in componentDidUpdate causing tab_index to always revert back to 0\n        if (index === 1) updated_state.is_demo_tab = true;\n        else if (index === 0) updated_state.is_demo_tab = false;\n\n        if (active_index !== index) {\n            updated_state.active_index = index;\n        }\n\n        if (!isEmptyObject(updated_state)) {\n            setActiveIndex(updated_state.active_index as number);\n            setIsDemoTab(updated_state.is_demo_tab as boolean);\n        }\n    };\n\n    const openAccountTransfer = (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => {\n        if (meta.category === 'real') {\n            if (data) {\n                if ('platform' in data && data.platform === CFD_PLATFORMS.DXTRADE)\n                    sessionStorage.setItem('cfd_transfer_to_login_id', data.account_id || '');\n                else sessionStorage.setItem('cfd_transfer_to_login_id', data.login || '');\n\n                disableCFDPasswordModal();\n                history.push(routes.cashier_acc_transfer);\n            }\n        } else {\n            if ('sub_account_type' in data) setCurrentAccount(data, meta);\n            openTopUpModal();\n        }\n    };\n\n    const togglePasswordManagerModal = (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => {\n        setPasswordManager(prev_state => ({\n            is_visible: !prev_state.is_visible,\n            selected_login: typeof login === 'string' ? login : '',\n            selected_account: typeof title === 'string' ? title : '',\n            selected_account_group: group || '',\n            selected_account_type: type || '',\n            selected_server: server || '',\n        }));\n    };\n\n    const openRealPasswordModal = (account_type: TOpenAccountTransferMeta) => {\n        setAccountType(account_type);\n        enableCFDPasswordModal();\n    };\n\n    const hasAccount = (category: string, type: string) => {\n        return Object.keys(current_list).some(key => key.startsWith(`${platform}.${category}.${type}`));\n    };\n\n    const isDxtradeAllCardVisible = (account_category: string) => {\n        const { platform } = props;\n\n        const has_synthetic_account = hasAccount(account_category, 'synthetic');\n        const has_financial_account = hasAccount(account_category, 'financial');\n\n        if (has_synthetic_account || has_financial_account) return false;\n\n        if (is_dxtrade_allowed && !is_logged_in) return true;\n\n        return isLandingCompanyEnabled({\n            landing_companies,\n            platform,\n            type: 'all',\n        });\n    };\n\n    const isSyntheticCardVisible = (account_category: string) => {\n        const { platform } = props;\n        const has_synthetic_account = hasAccount(account_category, 'synthetic');\n        const has_financial_account = hasAccount(account_category, 'financial');\n\n        // Hiding card for logged out EU users\n        if (!is_logged_in && is_eu_country) return false;\n\n        if (is_eu && !has_synthetic_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        if (!has_synthetic_account && !has_financial_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        return isLandingCompanyEnabled({ landing_companies, platform, type: 'gaming' }) || !is_logged_in;\n    };\n\n    const isFinancialCardVisible = () => {\n        const { platform } = props;\n\n        const has_synthetic_account = hasAccount('real', 'synthetic');\n        const has_financial_account = hasAccount('real', 'financial');\n\n        if (!has_synthetic_account && !has_financial_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        return (\n            !is_logged_in ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform,\n                type: 'financial',\n            })\n        );\n    };\n\n    const { account_status, platform } = props;\n\n    const isSwapFreeCardVisible = () => {\n        return (\n            !is_logged_in ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform,\n                type: 'all',\n            })\n        );\n    };\n\n    const should_show_missing_real_account =\n        is_logged_in && !has_real_account && upgradeable_landing_companies?.length > 0;\n    const should_enable_add_button = should_show_missing_real_account && CFD_PLATFORMS.MT5 && is_real_enabled;\n\n    if ((!country && is_logged_in) || is_logging_in) return <Loading />; // Wait for country name to be loaded before rendering\n\n    // all: 1 in mt5_status response means that server is suspended\n    const getIsSuspendedMt5Server = (type_server: TMt5StatusServer['demo' | 'real']) =>\n        type_server?.map((item: TMt5StatusServerType) => item.all).some((item: number) => item === 1);\n\n    const is_suspended_mt5_demo_server = getIsSuspendedMt5Server(mt5_status_server?.demo);\n    const is_suspended_mt5_real_server = getIsSuspendedMt5Server(mt5_status_server?.real);\n    const is_suspended_dxtrade_demo_server = !!dxtrade_status_server?.demo;\n    const is_suspended_dxtrade_real_server = !!dxtrade_status_server?.real;\n\n    const has_mt5_account_error = is_demo_tab\n        ? is_suspended_mt5_demo_server || has_mt5_demo_account_error || mt5_disabled_signup_types.demo\n        : is_suspended_mt5_real_server || has_mt5_real_account_error || mt5_disabled_signup_types.real;\n\n    const has_dxtrade_account_error = is_demo_tab\n        ? is_suspended_dxtrade_demo_server || has_dxtrade_demo_account_error || dxtrade_disabled_signup_types.demo\n        : is_suspended_dxtrade_real_server || has_dxtrade_real_account_error || dxtrade_disabled_signup_types.real;\n\n    // eslint-disable-next-line no-nested-ternary\n    const has_cfd_account_error = is_user_exception\n        ? !is_user_exception\n        : platform === CFD_PLATFORMS.MT5\n        ? has_mt5_account_error\n        : has_dxtrade_account_error || !!dxtrade_accounts_list_error;\n\n    const has_cfd_real_account_dxtrade_error =\n        is_suspended_dxtrade_real_server || dxtrade_disabled_signup_types.real || !!dxtrade_accounts_list_error;\n    const has_cfd_demo_account_dxtrade_error =\n        is_suspended_dxtrade_demo_server || dxtrade_disabled_signup_types.demo || !!dxtrade_accounts_list_error;\n    const has_cfd_real_account_mt5_error = is_suspended_mt5_real_server || mt5_disabled_signup_types.real;\n    const has_cfd_demo_account_mt5_error = is_suspended_mt5_demo_server || mt5_disabled_signup_types.demo;\n\n    const verification_code = platform === CFD_PLATFORMS.MT5 ? mt5_verification_code : dxtrade_verification_code;\n\n    if (platform === CFD_PLATFORMS.MT5 || platform === CFD_PLATFORMS.DXTRADE)\n        return <Redirect to={routes.traders_hub} />;\n    if (platform === CFD_PLATFORMS.DXTRADE && !is_dxtrade_allowed) return <Redirect to={routes.mt5} />;\n\n    if ((is_logged_in && !landing_companies) || is_loading) return <Loading />;\n\n    return (\n        <React.Fragment>\n            {is_mt5_allowed || platform === CFD_PLATFORMS.DXTRADE || !is_logged_in ? (\n                <div className='cfd-dashboard__container'>\n                    <NotificationMessages\n                        is_mt5\n                        is_notification_loaded={is_notification_loaded}\n                        stopNotificationLoading={stopNotificationLoading}\n                    />\n                    <div className='cfd-dashboard'>\n                        <div className='cfd-dashboard__welcome-message'>\n                            <h1 className='cfd-dashboard__welcome-message--heading'>\n                                {general_messages.getWelcomeHeader(is_logged_in, platform)}\n                            </h1>\n                        </div>\n                        {is_logged_in && has_cfd_account_error && (\n                            <div className='cfd-dashboard__accounts-error'>\n                                <Text\n                                    as='p'\n                                    className='cfd-dashboard__accounts-error-message'\n                                    line_height='l'\n                                    size='xxs'\n                                    color='prominent'\n                                    weight='normal'\n                                    align='center'\n                                >\n                                    <Localize\n                                        i18n_default_text='Due to an issue on our server, some of your {{platform}} accounts are unavailable at the moment. Please bear with us and thank you for your patience.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                        }}\n                                    />\n                                </Text>\n                            </div>\n                        )}\n                        <div className='cfd-dashboard__accounts-display'>\n                            <CFDPasswordManagerModal\n                                is_visible={password_manager.is_visible}\n                                platform={platform}\n                                selected_login={password_manager.selected_login}\n                                selected_account_group={password_manager.selected_account_group}\n                                selected_account_type={password_manager.selected_account_type}\n                                selected_server={password_manager.selected_server}\n                                toggleModal={togglePasswordManagerModal}\n                            />\n                            <LoadTab\n                                active_index={active_index}\n                                top\n                                center\n                                is_loading={is_loading}\n                                is_logged_in={is_logged_in}\n                                loading_component={LoadingCFDRealAccountDisplay}\n                                onTabItemClick={updateActiveIndex}\n                                should_update_hash\n                            >\n                                {is_real_enabled && (\n                                    <div label={localize('Real account')} data-hash='real'>\n                                        <React.Fragment>\n                                            {should_show_missing_real_account && (\n                                                <MissingRealAccount\n                                                    onClickSignup={() => {\n                                                        if (real_account_creation_unlock_date) {\n                                                            setShouldShowCooldownModal(true);\n                                                        } else {\n                                                            beginRealSignupForMt5();\n                                                        }\n                                                    }}\n                                                    platform={platform}\n                                                />\n                                            )}\n                                            <CFDRealAccountDisplay\n                                                is_accounts_switcher_on={is_accounts_switcher_on}\n                                                is_eu={is_eu}\n                                                is_eu_country={is_eu_country}\n                                                is_logged_in={is_logged_in}\n                                                has_cfd_account_error={\n                                                    // eslint-disable-next-line no-nested-ternary\n                                                    platform === CFD_PLATFORMS.MT5\n                                                        ? has_cfd_real_account_mt5_error\n                                                        : is_user_exception\n                                                        ? !is_user_exception\n                                                        : has_cfd_real_account_dxtrade_error\n                                                }\n                                                current_list={current_list}\n                                                account_status={account_status}\n                                                onSelectAccount={createCFDAccount}\n                                                realSyntheticAccountsExistingData={getRealSyntheticAccountsExistingData}\n                                                realFinancialAccountsExistingData={getRealFinancialAccountsExistingData}\n                                                is_virtual={is_virtual}\n                                                isSyntheticCardVisible={isSyntheticCardVisible}\n                                                isFinancialCardVisible={isFinancialCardVisible}\n                                                isDxtradeAllCardVisible={isDxtradeAllCardVisible}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                platform={platform}\n                                                isAccountOfTypeDisabled={isAccountOfTypeDisabled}\n                                                has_real_account={has_real_account}\n                                                standpoint={standpoint}\n                                                toggleAccountsDialog={toggleAccountsDialog}\n                                                toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n                                                residence={residence}\n                                                openDerivRealAccountNeededModal={openDerivRealAccountNeededModal}\n                                                should_enable_add_button={should_enable_add_button}\n                                                real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                                setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                                show_eu_related_content={show_eu_related_content}\n                                            />\n                                        </React.Fragment>\n                                    </div>\n                                )}\n                                {is_demo_enabled && (\n                                    <div label={localize('Demo account')} data-hash='demo'>\n                                        {platform === CFD_PLATFORMS.DXTRADE && (\n                                            <CFDDxtradeDemoAccountDisplay\n                                                is_logged_in={is_logged_in}\n                                                has_cfd_account_error={\n                                                    is_user_exception\n                                                        ? !is_user_exception\n                                                        : has_cfd_demo_account_dxtrade_error\n                                                }\n                                                standpoint={standpoint}\n                                                is_loading={is_loading}\n                                                current_list={current_list}\n                                                onSelectAccount={createCFDAccount}\n                                                landing_companies={landing_companies}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                platform={platform}\n                                            />\n                                        )}\n                                        {platform === CFD_PLATFORMS.MT5 && (\n                                            <CFDMT5DemoAccountDisplay\n                                                is_eu={is_eu}\n                                                is_eu_country={is_eu_country}\n                                                is_logged_in={is_logged_in}\n                                                has_maltainvest_account={has_maltainvest_account}\n                                                has_cfd_account_error={has_cfd_demo_account_mt5_error}\n                                                openAccountNeededModal={openAccountNeededModal}\n                                                standpoint={standpoint}\n                                                is_loading={is_loading}\n                                                isSyntheticCardVisible={isSyntheticCardVisible}\n                                                isFinancialCardVisible={isFinancialCardVisible}\n                                                isSwapFreeCardVisible={isSwapFreeCardVisible}\n                                                current_list={current_list}\n                                                onSelectAccount={createCFDAccount}\n                                                landing_companies={landing_companies}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                toggleMT5TradeModal={toggleMT5TradeModal}\n                                                platform={platform}\n                                                residence={residence}\n                                                show_eu_related_content={show_eu_related_content}\n                                            />\n                                        )}\n                                    </div>\n                                )}\n                            </LoadTab>\n                            <CompareAccountsModal\n                                platform={platform}\n                                is_demo_tab={is_demo_tab}\n                                openPasswordModal={openRealPasswordModal}\n                                is_real_enabled={is_real_enabled}\n                                real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                has_unmerged_account={\n                                    hasAccount('real', 'synthetic') || hasAccount('real', 'financial')\n                                }\n                            />\n                            <SwitchToRealAccountModal />\n                            <JurisdictionModal openPasswordModal={openRealPasswordModal} />\n                            <MT5TradeModal\n                                is_demo=''\n                                is_open={is_mt5_trade_modal_visible}\n                                onPasswordManager={togglePasswordManagerModal}\n                                toggleModal={toggleMT5TradeModal}\n                                is_eu_user={(is_logged_in && is_eu) || (!is_logged_in && is_eu_country)}\n                            />\n                            <div className='cfd-dashboard__maintenance'>\n                                <Icon\n                                    icon='IcAlertWarning'\n                                    size={isMobile() ? 28 : 16}\n                                    className='cfd-dashboard__maintenance-icon'\n                                />\n                                <div className='cfd-dashboard__maintenance-text'>\n                                    {platform === CFD_PLATFORMS.DXTRADE && (\n                                        <Localize i18n_default_text='Server maintenance starts at 06:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                                    )}\n                                    {platform === CFD_PLATFORMS.MT5 && (\n                                        <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                        <CFDDownloadContainer\n                            platform={platform}\n                            active_index={active_index}\n                            is_dark_mode_on={is_dark_mode_on}\n                            dxtrade_tokens={dxtrade_tokens}\n                            derivez_tokens={derivez_tokens}\n                        />\n                        <CFDTopUpDemoModal platform={platform} />\n                        <CFDPasswordModal platform={platform} />\n                        <CFDServerErrorDialog />\n                        {platform === CFD_PLATFORMS.MT5 && is_logged_in && <CFDDbviOnboarding />}\n                        <CFDResetPasswordModal platform={platform} />\n                        <ResetTradingPasswordModal\n                            platform={platform}\n                            enableApp={enableApp}\n                            disableApp={disableApp}\n                            toggleResetTradingPasswordModal={toggleResetTradingPasswordModal}\n                            is_visible={is_reset_trading_password_modal_visible}\n                            is_loading={is_loading}\n                            verification_code={verification_code}\n                        />\n                    </div>\n                </div>\n            ) : (\n                <PageError\n                    buttonSize={'medium'}\n                    header={\n                        <Localize\n                            i18n_default_text='{{platform_name_mt5}} is not available in {{country}}'\n                            values={{\n                                country,\n                                platform_name_mt5: getPlatformSettings('mt5').name,\n                            }}\n                            components={[<br key={0} />]}\n                        />\n                    }\n                    messages={[<Localize key={0} i18n_default_text='Please explore our other platforms.' />]}\n                    redirect_urls={[routes.trade, routes.bot]}\n                    redirect_labels={[\n                        <Localize\n                            key={0}\n                            i18n_default_text='Explore {{platform_name_trader}}'\n                            values={{ platform_name_trader: getPlatformSettings('trader').name }}\n                        />,\n                        <Localize\n                            key={1}\n                            i18n_default_text='Explore {{platform_name_dbot}}'\n                            values={{ platform_name_dbot: getPlatformSettings('dbot').name }}\n                        />,\n                    ]}\n                />\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default CFDDashboard;\n","import CFDDashboard from './cfd-dashboard';\nimport CFDPasswordModal from './cfd-password-modal';\nimport CFDServerErrorDialog from './cfd-server-error-dialog';\n\nexport { CFDPasswordModal };\nexport { CFDServerErrorDialog };\nexport default CFDDashboard;\n","import React from 'react';\nimport CFD from '../Containers';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\n// Error Routes\nconst Page404 = React.lazy(() => import(/* webpackChunkName: \"404\" */ '../Modules/Page404'));\n\n// Order matters\nconst initRoutesConfig = () => {\n    return [\n        {\n            path: routes.dxtrade,\n            // eslint-disable-next-line react/display-name\n            component: props => <CFD {...props} platform='dxtrade' />,\n            getTitle: () => localize('Deriv X'),\n            is_authenticated: false,\n        },\n        {\n            path: routes.mt5,\n            // eslint-disable-next-line react/display-name\n            component: props => <CFD {...props} platform='mt5' />,\n            getTitle: () => localize('MT5'),\n            is_authenticated: false,\n        },\n    ];\n};\n\nlet routesConfig;\n\n// For default page route if page/path is not found, must be kept at the end of routes_config array\nconst route_default = { path: routes.error404, component: Page404, getTitle: () => localize('Error 404') };\n\nconst getRoutesConfig = () => {\n    if (!routesConfig) {\n        routesConfig = initRoutesConfig();\n        routesConfig.push(route_default);\n    }\n    return routesConfig;\n};\n\nexport default getRoutesConfig;\n","import { matchPath } from 'react-router';\nimport { routes } from '@deriv/shared';\n\nexport const normalizePath = path => (/^\\//.test(path) ? path : `/${path || ''}`); // Default to '/'\n\nexport const findRouteByPath = (path, routes_config) => {\n    let result;\n\n    routes_config.some(route_info => {\n        let match_path;\n        try {\n            match_path = matchPath(path, route_info);\n        } catch (e) {\n            if (/undefined/.test(e.message)) {\n                return undefined;\n            }\n        }\n\n        if (match_path) {\n            result = route_info;\n            return true;\n        } else if (route_info.routes) {\n            result = findRouteByPath(path, route_info.routes);\n            return result;\n        }\n        return false;\n    });\n\n    return result;\n};\n\nexport const isRouteVisible = (route, is_logged_in) => !(route && route.is_authenticated && !is_logged_in);\n\nexport const getPath = (route_path, params = {}) =>\n    Object.keys(params).reduce((p, name) => p.replace(`:${name}`, params[name]), route_path);\n\nexport const getContractPath = contract_id => getPath(routes.contract, { contract_id });\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { PlatformContext } from '@deriv/shared';\nimport getRoutesConfig from '../../Constants/routes-config';\nimport { findRouteByPath, normalizePath } from './helpers';\n\nconst BinaryLink = ({ active_class, to, children, ...props }) => {\n    const { is_dashboard } = React.useContext(PlatformContext);\n    const path = normalizePath(to);\n    const route = findRouteByPath(path, getRoutesConfig({ is_dashboard }));\n\n    if (!route) {\n        throw new Error(`Route not found: ${to}`);\n    }\n\n    return to ? (\n        <NavLink to={path} activeClassName={active_class || 'active'} exact={route.exact} {...props}>\n            {children}\n        </NavLink>\n    ) : (\n        <a {...props}>{children}</a>\n    );\n};\n\nBinaryLink.propTypes = {\n    active_class: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),\n    to: PropTypes.string,\n};\n\nexport default BinaryLink;\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { redirectToLogin, isEmptyObject, routes, removeBranchName, default_title } from '@deriv/shared';\nimport { getLanguage } from '@deriv/translations';\n\nconst RouteWithSubRoutes = route => {\n    const renderFactory = props => {\n        let result = null;\n\n        if (route.component === Redirect) {\n            let to = route.to;\n\n            // This if clause has been added just to remove '/index' from url in localhost env.\n            if (route.path === routes.index) {\n                const { location } = props;\n                to = location.pathname.toLowerCase().replace(route.path, '');\n            }\n            result = <Redirect to={to} />;\n        } else if (route.is_authenticated && !route.is_logged_in && !route.is_logging_in) {\n            redirectToLogin(route.is_logged_in, getLanguage());\n        } else {\n            const default_subroute = (route.routes ?? []).reduce(\n                (acc, cur) => ({\n                    ...acc,\n                    ...cur.subroutes.find(subroute => subroute.default),\n                }),\n                {}\n            );\n            const has_default_subroute = !isEmptyObject(default_subroute);\n            const pathname = removeBranchName(location.pathname);\n\n            result = (\n                <React.Fragment>\n                    {has_default_subroute && pathname === route.path && <Redirect to={default_subroute.path} />}\n                    <route.component {...props} routes={route.routes} />\n                </React.Fragment>\n            );\n        }\n\n        const title = route.getTitle?.() || '';\n        document.title = `${title} | ${default_title}`;\n        return result;\n    };\n\n    return <Route exact={route.exact} path={route.path} render={renderFactory} />;\n};\n\nexport default RouteWithSubRoutes;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\nimport { PlatformContext } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport getRoutesConfig from '../../Constants/routes-config';\nimport RouteWithSubRoutes from './route-with-sub-routes.jsx';\n\nconst BinaryRoutes = props => {\n    const { is_dashboard } = React.useContext(PlatformContext);\n\n    return (\n        <React.Suspense\n            fallback={() => {\n                return (\n                    <div>\n                        <Localize i18n_default_text='Loading...' />\n                    </div>\n                );\n            }}\n        >\n            <Switch>\n                {getRoutesConfig({ is_dashboard }).map(route => (\n                    <RouteWithSubRoutes key={route.path} {...route} {...props} />\n                ))}\n            </Switch>\n        </React.Suspense>\n    );\n};\n\nexport default BinaryRoutes;\n","import BinaryLink from './binary-link.jsx';\nimport BinaryRoutes from './binary-routes.jsx';\nimport RouteWithSubRoutes from './route-with-sub-routes.jsx';\n\nexport { BinaryLink };\nexport default BinaryRoutes;\nexport * from './helpers';\nexport { RouteWithSubRoutes };\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dialog, PageErrorContainer } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    is_dialog,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}) => {\n    const refresh_message = should_show_refresh ? localize('Please refresh this page to continue.') : '';\n\n    if (is_dialog) {\n        return (\n            <Dialog\n                title={header || localize('There was an error')}\n                is_visible\n                confirm_button_text={redirect_label || localize('Ok')}\n                onConfirm={redirectOnClick || (() => location.reload())}\n            >\n                {message || localize('Sorry, an error occured while processing your request.')}\n            </Dialog>\n        );\n    }\n    return (\n        <PageErrorContainer\n            error_header={header ?? ''}\n            error_messages={message ? message[(message, refresh_message)] : []}\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label || localize('Refresh')]}\n            buttonOnClick={redirectOnClick || (() => location.reload())}\n        />\n    );\n};\n\nErrorComponent.propTypes = {\n    header: PropTypes.string,\n    is_dialog: PropTypes.bool,\n    message: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    redirect_label: PropTypes.string,\n    redirectOnClick: PropTypes.func,\n    should_show_refresh: PropTypes.bool,\n    type: PropTypes.string,\n};\n\nexport default ErrorComponent;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport BinaryRoutes from '../Components/Routes';\nimport ErrorComponent from '../Components/Errors/error-component.jsx';\nimport { observer, useStore } from '@deriv/stores';\n\nconst Routes = observer(({ passthrough }) => {\n    const { client, common } = useStore();\n\n    const { is_logged_in, is_logging_in } = client;\n    const { error, has_error } = common;\n\n    if (has_error) {\n        return <ErrorComponent {...error} />;\n    }\n\n    return <BinaryRoutes is_logged_in={is_logged_in} is_logging_in={is_logging_in} passthrough={passthrough} />;\n});\n\nRoutes.propTypes = {\n    passthrough: PropTypes.object,\n};\n\n// need to wrap withRouter around connect\n// to prevent updates on <BinaryRoutes /> from being blocked\nexport default withRouter(Routes);\n","import CFDStore from './CFD/cfd-store';\n\nexport default class ModulesStore {\n    constructor(root_store) {\n        this.cfd = new CFDStore({ root_store });\n    }\n}\n","import ModulesStore from './Modules';\n\nexport default class RootStore {\n    constructor(core_store) {\n        this.client = core_store.client;\n        this.common = core_store.common;\n        this.modules = new ModulesStore(this, core_store);\n        this.ui = core_store.ui;\n        this.gtm = core_store.gtm;\n        this.pushwoosh = core_store.pushwoosh;\n        this.notifications = core_store.notifications;\n        this.traders_hub = core_store.traders_hub;\n    }\n}\n","import { PromiseClass } from '../utility';\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = new PromiseClass();\n    let common_store;\n\n    const init = store => {\n        if (!clock_started) {\n            common_store = store;\n            pending.resolve(common_store.server_time);\n            clock_started = true;\n        }\n    };\n\n    const get = () => (clock_started && common_store.server_time ? common_store.server_time.clone() : undefined);\n\n    return {\n        init,\n        get,\n        timePromise: () => (clock_started ? Promise.resolve(common_store.server_time) : pending.promise),\n    };\n})();\n\nexport default ServerTime;\n","import { configure } from 'mobx';\nimport RootStore from './Stores';\nimport { setWebsocket } from '@deriv/shared';\nimport ServerTime from '_common/base/server_time';\n\nconfigure({ enforceActions: 'observed' });\n\nlet root_store;\n\nconst initStore = (core_store, websocket) => {\n    if (root_store) return root_store;\n\n    ServerTime.init(core_store.common);\n    setWebsocket(websocket);\n    root_store = new RootStore(core_store);\n\n    return root_store;\n};\n\nexport default initStore;\n","import React from 'react';\nimport { StoreProvider } from '@deriv/stores';\nimport { CFDStoreProvider } from './Stores/Modules/CFD/Helpers/useCfdStores';\nimport type { TCoreStores } from '@deriv/stores/types';\n\nconst CFDProviders = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    return (\n        <StoreProvider store={store}>\n            <CFDStoreProvider>{children}</CFDStoreProvider>\n        </StoreProvider>\n    );\n};\n\nexport default CFDProviders;\n","import React from 'react';\nimport Routes from './Containers/routes.jsx';\nimport initStore from './init-store';\nimport CFDProviders from './cfd-providers';\nimport type { TCoreStores } from '@deriv/stores/types';\n\ntype TAppProps = {\n    passthrough: {\n        root_store: TCoreStores;\n        WS: unknown;\n    };\n};\n\nconst App = ({ passthrough }: TAppProps) => {\n    initStore(passthrough.root_store, passthrough.WS);\n\n    return (\n        <CFDProviders store={passthrough.root_store}>\n            <Routes />\n        </CFDProviders>\n    );\n};\n\nexport default App;\n","import { createContext } from 'react';\nimport type { TStores } from '../types';\n\nconst StoreContext = createContext<TStores | null>(null);\n\nexport default StoreContext;\n","import React, { PropsWithChildren } from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n// import { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n\nconst queryClient = new QueryClient();\n\nconst APIProvider = ({ children }: PropsWithChildren<unknown>) => (\n    <QueryClientProvider client={queryClient}>\n        {children}\n        {/*Temporary disabled due to the problem on codecov, You can uncomment to use in development environment, DO NOT COMMIT THIS UNCOMMENTED*/}\n        {/*<ReactQueryDevtools />*/}\n    </QueryClientProvider>\n);\n\nexport default APIProvider;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useWS } from '@deriv/shared';\nimport type {\n    TSocketAcceptableProps,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nconst useSubscription = <T extends TSocketSubscribableEndpointNames>(name: T) => {\n    const [is_loading, setIsLoading] = useState(false);\n    const [is_subscribed, setSubscribed] = useState(false);\n    const [error, setError] = useState<unknown>();\n    const [data, setData] = useState<TSocketResponseData<T>>();\n    const subscriber = useRef<{ unsubscribe?: VoidFunction }>();\n    const WS = useWS();\n\n    const subscribe = useCallback(\n        (...props: TSocketAcceptableProps<T>) => {\n            const prop = props?.[0];\n            const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n            setIsLoading(true);\n            setSubscribed(true);\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const onData = (response: any) => {\n                setData(response);\n                setIsLoading(false);\n            };\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const onError = (response: any) => {\n                setError(response.error);\n                setIsLoading(false);\n            };\n\n            try {\n                subscriber.current = WS.subscribe({ [name]: 1, subscribe: 1, ...(payload || {}) }).subscribe(\n                    onData,\n                    onError\n                );\n            } catch (e) {\n                setError(e);\n            }\n        },\n        [WS, name]\n    );\n\n    const unsubscribe = useCallback(() => {\n        subscriber.current?.unsubscribe?.();\n        setSubscribed(false);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            unsubscribe();\n        };\n    }, [unsubscribe]);\n\n    return { subscribe, unsubscribe, is_loading, is_subscribed, error, data };\n};\n\nexport default useSubscription;\n","import { useContext } from 'react';\nimport StoreContext from './storeContext';\n\nconst useStore = () => {\n    const store = useContext(StoreContext);\n\n    if (!store) {\n        throw new Error('useStore must be used within StoreProvider');\n    }\n\n    return store;\n};\n\nexport default useStore;\n","import React, { useEffect } from 'react';\nimport { useSubscription } from '@deriv/api';\nimport merge from 'lodash.merge';\nimport { observer } from 'mobx-react-lite';\nimport useStore from '../useStore';\n\nconst ExchangeRatesProvider = observer(({ children }: React.PropsWithChildren<unknown>) => {\n    const { data, subscribe } = useSubscription('exchange_rates');\n    const {\n        exchange_rates: { update },\n    } = useStore();\n\n    useEffect(() => {\n        subscribe({ payload: { base_currency: 'USD' } });\n    }, [subscribe]);\n\n    useEffect(() => {\n        if (data) {\n            const { exchange_rates } = data;\n\n            if (exchange_rates) update(prev => merge(prev, exchange_rates));\n        }\n    }, [update, data]);\n\n    return <>{children}</>;\n});\n\nexport default ExchangeRatesProvider;\n","import { action, makeObservable, observable } from 'mobx';\nimport { makePersistable, stopPersisting } from 'mobx-persist-store';\n\nexport default class BaseStore<T> {\n    data: T | undefined = undefined;\n\n    constructor(name: string, onHydrationDone?: VoidFunction) {\n        makeObservable(this, {\n            data: observable,\n            update: action.bound,\n            unmount: action.bound,\n        });\n\n        makePersistable(this, { name, properties: ['data'], storage: window.localStorage }).then(() =>\n            onHydrationDone?.()\n        );\n    }\n\n    update(data: NonNullable<T> | ((previous?: T) => NonNullable<T>)) {\n        this.data = data instanceof Function ? data(this.data) : data;\n    }\n\n    unmount() {\n        stopPersisting(this);\n    }\n}\n","import BaseStore from './BaseStore';\nimport type { ExchangeRatesResponse } from '@deriv/api-types';\n\nexport default class ExchangeRatesStore extends BaseStore<ExchangeRatesResponse['exchange_rates']> {\n    constructor() {\n        super('ExchangeRatesStore');\n    }\n}\n","import BaseStore from './BaseStore';\n\nconst FLAGS = {\n    foo: false,\n    bar: false,\n    baz: false,\n    // Add your flag here 🚀\n} satisfies Record<string, boolean>;\n\nexport default class FeatureFlagsStore extends BaseStore<{ [k in keyof typeof FLAGS]: boolean }> {\n    constructor() {\n        super('FeatureFlagsStore', () => {\n            // Set the default values for the first time.\n            if (!this.data) this.update(FLAGS);\n\n            // Update the store data if a new flag was added or removed.\n            if (this.data && Object.keys(this.data).length !== Object.keys(FLAGS).length) {\n                this.update(old => {\n                    const data = FLAGS;\n\n                    Object.keys(FLAGS).forEach(flag => {\n                        // @ts-expect-error flag key is always present in the object, Hence can ignore the TS error.\n                        if (old[flag] !== undefined) data[flag] = old[flag];\n                    });\n\n                    return data;\n                });\n            }\n        });\n    }\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { ExchangeRatesProvider } from './providers';\nimport StoreContext from './storeContext';\nimport { ExchangeRatesStore, FeatureFlagsStore } from './stores';\nimport type { TCoreStores, TStores } from '../types';\n\nconst StoreProvider = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    const memoizedValue: TStores = useMemo(() => {\n        // If the store is mocked for testing purposes, then return the mocked value.\n        if ('is_mock' in store && store.is_mock) return store as unknown as TStores;\n\n        // Otherwise, instantiate store and return it.\n        return {\n            ...store,\n            exchange_rates: new ExchangeRatesStore(),\n            feature_flags: new FeatureFlagsStore(),\n        };\n    }, [store]);\n\n    useEffect(() => {\n        return () => {\n            Object.values(memoizedValue).forEach(value => {\n                if (typeof value === 'object' && 'unmount' in value) value.unmount();\n            });\n        };\n    }, [memoizedValue]);\n\n    return (\n        <StoreContext.Provider value={memoizedValue}>\n            <ExchangeRatesProvider>{children}</ExchangeRatesProvider>\n        </StoreContext.Provider>\n    );\n};\n\nexport default StoreProvider;\n"],"names":["PlatformIcons","Derived","styles","props","viewBox","fill","xmlns","d","Financial","CFDs","DerivEz","SwapFree","icon","className","size","onClick","PlatformIcon","style","width","height","CFDAccountCopy","text","Clipboard","text_copy","info_message","isMobile","localize","success_message","popoverAlignment","Checkmark","Icon","custom_color","SuccessDialog","classNameMessage","has_cancel","has_submit","message","onCancel","onSubmit","heading","icon_size","text_submit","text_cancel","is_open","toggleModal","title","has_close_icon","is_medium_button","Modal","small","classNames","Text","as","weight","Localize","i18n_default_text","React","Button","has_effect","secondary","medium","large","primary","defaultProps","propTypes","PropTypes","icon_type","confirm_label","platform","onConfirm","context","initialValues","password","isSubmitting","handleSubmit","CFD_PLATFORMS","align","values","getCFDPlatformLabel","color","FormSubmitButton","is_center","label","cancel_label","is_loading","CFDDbviOnboarding","account_status","fetchAccountSettings","is_virtual","client","updateAccountStatus","updateMT5Status","disableApp","enableApp","useCfdStore","has_created_account_for_selected_jurisdiction","has_submitted_cfd_personal_details","is_cfd_verification_modal_visible","jurisdiction_selected_shortcode","enableCFDPasswordModal","toggleCFDVerificationModal","showSubmittedModal","setShowSubmittedModal","getAccountStatusFromAPI","WS","get_account_status","response","getAuthenticationStatusInfo","poi_acknowledged_for_vanuatu_maltainvest","poi_acknowledged_for_bvi_labuan","poa_acknowledged","Jurisdiction","setIsLoading","getModalTitle","getModalContent","InputField","maxLength","name","optional","field","form","errors","touched","Input","type","required","autoComplete","error","validatePersonalDetails","residence_list","account_opening_reason","is_tin_required","tax_residence_obj","filter","res","tax_residence","tin_format","tin_regex","validations","citizen","v","map","i","includes","tax_identification_number","some","regex","match","value","place_of_birth","mappedKey","Object","entries","forEach","field_name","key","error_index","findIndex","changeable_fields","landing_company","index","form_error","config","tax_details_required","length","Loading","is_fullscreen","validateOnChange","validateOnBlur","validate","actions","idx","is_dirty","citizen_text","tax_residence_text","place_of_birth_text","item","findDefaultValuesInResidenceList","setSubmitting","submitForm","isDeepEqual","validateOnMount","handleChange","handleBlur","setFieldValue","isValid","citizenship_error","place_of_birth_error","tax_residence_error","account_opening_reason_error","is_citizenship_disabled","is_place_of_birth_disabled","is_tax_residence_disabled","is_account_opening_reason_disabled","handleItemSelection","_field","item_value","tin_field_label","find","AutoHeightWrapper","default_height","height_offset","isDesktop","setRef","ref","noValidate","Div100vhContainer","max_autoheight_offset","is_disabled","ThemedScrollbars","is_bypassed","DesktopWrapper","Autocomplete","id","disabled","list_items","onItemSelection","list_portal_id","MobileWrapper","SelectNative","placeholder","use_text","onChange","e","target","should_hide_disabled_options","onBlur","Dropdown","is_align_text_left","list","data_testid","has_separator","FormSubmitErrorMessage","keys","is_absolute","useStateCallback","poa_status","has_poi","form_state","document_upload","setDocumentUpload","hasPOAFailed","sethasPOAfailed","PoaStatusCodes","validLength","uploadables","setFormState","authorized","api_response","storage","onSave","useEffect","poa_failed_status","needs_poi","poi_status","refreshNotifications","isFormDisabled","address_line_1","address_city","address_state","address_postcode","is_form_visible","address_line_2","validateForm","onSubmitValues","is_ok","validAddress","validLetterSymbol","validation_errors","max","max_number","rules","onFileDrop","setFieldTouched","files","error_message","states_list","file_uploader_ref","df","document_file","useStore","common","notifications","fetchResidenceList","is_switching","is_high_risk","is_withdrawal_lock","should_allow_authentication","account_settings","getChangeableFields","app_routing_history","routeBackInApp","poi_state","citizen_data","onStateChange","setPOIState","status","CFDPOI","observer","setAccountSettings","setFormError","form_values","setFormValues","initiatePersonalDetails","get_settings_response","get_settings","transform","then","result","getPropertyValue","saveFormData","_index","updateValue","data","getPersonalDetailsForm","onFinish","removeNotificationMessage","removeNotificationByKey","addNotificationMessageByKey","authentication_status","email","is_fully_authenticated","fetchStatesList","storeProofOfAddress","passthroughProps","step","setStep","state_index","is_mounted","current","need_poi_for_vanuatu_maltainvest","need_poi_for_bvi_labuan","poi_config","body","form_value","forwarded_props","poa_config","CFDPOA","upload_file","personal_details_config","CFDPersonalDetailsContainer","should_show_poa","document_status","should_show_personal_details","verification_configs","items","setItems","unmount","cloned_items","getCurrent","BodyComponent","passthrough","reduce","forwarded_prop","assign","ChangePassword","PasswordReset","account_group","onClickSendEmail","redirect_to","Number","password_reset_code","url_parameters","SendEmailTemplate","subtitle","lbl_no_receive","txt_resend","txt_resend_in","multi_step_ref","steps","component","goNextStep","goPrevStep","MultiStep","CFDPasswordSuccessMessage","is_investor","InvestorPasswordManager","error_message_investor","is_submit_success_investor","setPasswordType","validatePassword","initial_values","old_password","new_password","password_type","PasswordInput","PasswordMeter","input","has_error","custom_feedback_messages","getErrorMessages","password_warnings","has_warning","hint","tertiary","CountdownComponent","count_from","onTimeout","count","setCount","interval","setTimeout","clearTimeout","CFDPasswordReset","sendVerifyEmail","account_type","server","is_resend_verification_requested","setResendVerification","is_resend_verification_sent","setResendVerificationSent","localStorage","setItem","join","components","CFDPasswordManagerTabContentWrapper","lbl_previous","CFDPasswordManagerTabContent","selected_login","onChangeActiveTabIndex","active_tab_index","setActiveTabIndex","setErrorMessageInvestor","setSubmitSuccessInvestor","container_height","min","validPassword","toLowerCase","min_number","undefined","CFDStore","login","trading_password_manager","autohide","Tabs","active_index","onTabItemClick","top","is_visible","selected_account_type","selected_account_group","selected_server","ui","setIndex","fallback","UILoader","should_header_stick_body","PageOverlay","portal_id","header","onClickClose","account_title","should_set_trading_password","element","alignment","is_password_reset_error","ReviewMessageForMT5","manual_status","is_selected_mt5_verified","MALTA_INVEST","show_eu_related_content","traders_hub","window","error_type","CreatePassword","is_real_financial_stp","handlePasswordInputChange","submitPassword","useRef","CFDPasswordForm","closeModal","has_mt5_account","onForgotPassword","useMemo","cancel_button_label","handleCancel","has_cancel_button","button_label","showJuristiction","platform_name","account","getFormattedJurisdictionCode","getAccountTitle","legal_entity_name","getLegalEntityName","landing_companies","is_logged_in","is_dxtrade_allowed","mt5_login_list","disableCFDPasswordModal","getAccountStatus","has_cfd_error","is_cfd_success_dialog_enabled","is_cfd_password_modal_enabled","setError","setCFDSuccessDialog","submitMt5Password","submitCFDPassword","new_account_response","useHistory","useState","is_password_modal_exited","setPasswordModalExited","isArray","is_password_error","is_password_reset","is_sent_email_modal_open","setIsSentEmailModalOpen","poi_verified_for_bvi_labuan","poi_verified_for_vanuatu_maltainvest","poa_verified","getVerificationStatus","setIsSelectedMT5Verified","closeDialogs","should_show_password_modal","should_show_password","category","handleForgotPassword","password_modal","cfd_password_form","should_show_password_dialog","should_show_success","getSubmitText","category_label","type_label","MT5","getMtCompanies","getDxCompanies","short_title","getDerivezCompanies","jurisdiction_label","success_modal_submit_label","should_show_sent_email_modal","CFDPasswordModal","ResetPasswordIntent","group","current_list","children","is_eu","reset_password_intent","getItem","reset_password_type","test","split","pop","CFDResetPasswordModal","is_cfd_reset_password_modal_enabled","setCFDPasswordResetModal","error_code","is_finished","changed_password_type","state","setState","clearAddressBar","removeItem","resetPassword","request","account_id","verification_code","code","getIsListFetched","is_invalid_investor_token","onMount","redirectToLogin","getLanguage","line_height","clearCFDError","should_show_error","Dialog","confirm_button_text","UnhandledErrorModal","is_top_up_virtual_open","is_top_up_virtual_in_progress","is_top_up_virtual_success","closeTopUpModal","closeSuccessTopUpModal","current_account","dxtrade_companies","derivez_companies","mt5_companies","topUpVirtual","platform_title","getTopUpConfig","minimum_amount","additional_amount","Money","amount","currency","show_currency","display_balance","has_sign","balance","getAccounts","is_uk","account_types_count","mt_gaming_company","financial","mt_financial_company","financial_stp","dxtrade_gaming_company","dxtrade_financial_company","Boolean","financial_eu_trading_instruments","attribute","mt5","synthetic","synthetic_eu","financial_au","financial_eu","footnote","dxtrade","CFDAttributeDescriber","counter","setIsVisible","compareAccountsData","is_eu_client","residence","is_australian","table","getFinancialObject","footnote_number","row","synthetic_object","financial_object","footnote_counter","filterAvailableAccounts","CFDCompareAccountHint","show_risk_message","cols","setCols","template_columns","updateColumnsStyle","financial_account_table_head_text","Table","fixed","isLandingCompanyEnabled","col","j","getEuFooterButtons","action","Row","pre_appstore_class","available_accounts_count","classname_for_demo_and_eu","is_pre_appstore_setting","content_flag","is_high_risk_for_mt5","CFDs_restricted_countries","financial_restricted_countries","is_preappstore_restricted_cr_demo_account","is_leverage_row","is_platform_row","is_instruments_row","is_other_countries","getContentSize","synthetic_bvi","derivx","financial_svg","financial_labuan","ContentFlag","rowKey","tooltip_msg","Array","options","should_show_asterick_at_end","Popover","classNameBubble","disable_message_icon","is_bubble_hover_enabled","zIndex","is_demo_tab","is_preappstore_cr_demo_account","is_real_enabled","openDerivRealAccountNeededModal","openPasswordModal","real_account_creation_unlock_date","setShouldShowCooldownModal","should_show_derivx","toggleCompareAccounts","has_real_account","has_active_real_account","should_restrict_bvi_account_creation","should_restrict_vanuatu_account_creation","trading_platform_available_accounts","upgradeable_landing_companies","openSwitchToRealAccountModal","setAppstorePlatform","no_CR_account","is_eu_user","no_MF_account","setAccountType","setJurisdictionSelectedShortcode","has_submitted_personal_details","setHasSubmittedPersonalDetails","mt5_platforms","market_type","shortcode","has_synthetic","available_accounts_keys","logged_out_available_accounts_count","synthetic_accounts_count","startsWith","financial_accounts_count","poi_or_poa_not_submitted","poa_pending","footer_button_data","modal_content","isMt5AccountAdded","market","current_account_type","landing_company_short","onButtonClick","should_show_missing_real_account","type_of_account","onSelectRealAccount","synthetic_svg","financial_maltainvest","paddingTop","padding","synthetic_vanuatu","financial_bvi","financial_vanuatu","row_data","available_accounts_values","acc","content_data","col_num","sorted_values","el","rest","shouldShowPendingStatus","primary_light","getLoggedInTypesCount","dxtrade_all_company","prev","DxtradeCompareAccountContent","has_unmerged_account","is_populating_mt5_account_list","is_compare_accounts_visible","toggleCompareAccountsModal","location","pathname","has_derivx","is_dxtrade","cfd_account_button_label","getCFDModalTitle","getModalStyle","marginTop","exit_classname","MobileDialog","portal_element_id","wrapper_classname","visible","onClose","header_classname","has_full_height","jurisdictionVerificationContents","short_description","required_verification_docs","document_number","selfie","identity_document","name_and_address","not_applicable","status_references","card_classname","is_card_selected","toggleCardFlip","verification_docs","verification_item","status_item","clickable_description","description_part","title_indicators","type_of_card","poi_pending_for_bvi_labuan","poi_resubmit_for_bvi_labuan","poi_pending_for_vanuatu_maltainvest","poi_resubmit_for_vanuatu_maltainvest","need_poa_resubmission","getVerificationIconVariant","verification_document","icon_variant","display_text_skin_color","display_text","concat","card_section_item","description","card_data","card_values","is_over_header_available","over_header","is_non_idv_design","is_synthetic","is_swapfree","svg","synthetic_contents","financial_contents","swapfree_contents","synthetic_verification_docs","financial_verification_docs","bvi","vanuatu","labuan","maltainvest","non_synthetic_card_data","is_card_flipped","setIsCardFlipped","event","stopPropagation","cardType","synthetic_available_accounts","financial_available_accounts","real_synthetic_accounts_existing_data","real_financial_accounts_existing_data","real_swapfree_accounts_existing_data","swapfree_available_accounts","disableCard","jurisdiction_cards_array","card","cardsToBeShown","class_name","is_checked","onCheck","dbvi_company_names","tnc_url","Checkbox","company","StaticUrl","href","defaultChecked","FooterNote","account_type_name","getMT5Title","is_jurisdiction_modal_visible","toggleJurisdictionModal","checked","setChecked","available_account","is_svg_selected","is_bvi_selected","is_vanuatu_selected","is_labuan_selected","is_maltainvest_selected","is_idv_country","elem","identity","services","idv","is_country_supported","has_idv_attempts","authentication","submissions_left","modal_title","SpecBox","is_bold","PasswordBox","relative_render","transparent","mt5_trade_account","onPasswordManager","getCompanyShortcode","getCFDAccountDisplay","sub_account_type","is_mt5_trade_modal","display_login","server_info","environment","getCFDAccountKey","getTitle","getMT5WebTerminalLink","loginid","server_name","rel","getPlatformMt5DownloadLink","src","getUrlBase","getPlatformSettings","is_demo","dxtrade_tokens","derivez_tokens","CFDTradeModal","PlatformsDesktopDownload","getDerivEzWebTerminalLink","getDXTradeWebTerminalLink","PlatformsDesktopDownloadLinks","platformsIcons","CTraderAndDerivEZDescription","charAt","toUpperCase","slice","platformsText","PlatformIconsAndDescriptions","platform_type","app_title","downloadCenterAppOption","downloadCenterDescription","mobileDownloadLink","acc_type","qr_code_width","OSDetect","isDesktopOs","maxWidth","getPlatformQRCode","getPlatformDXTradeDownloadLink","getPlatformDerivEZDownloadLink","token","url","all_config","leverage","synthetic_config","financial_config","demo","all","dxtrade_account_type","real","mt5_account_type","financial_stp_config","all_svg","derivez","financial_fx","financial_v","derivez_account_type","jurisdiction_code","formatted_label","CFDStoreContext","createContext","CFDStoreProvider","modules","Provider","cfd","store","useContext","Error","this","has","indexOf","push","prototype","hasOwnProperty","call","error_count","rule","is_rule_string","rule_object","validator","func","getPreBuildDVRs","template","name1","name2","add","ruleObject","Validator","getRuleObject","condition","is_valid","addFailure","check","BaseStore","validation_rules","preSwitchAccountDisposer","pre_switch_account_listener","switchAccountDisposer","switch_account_listener","logoutDisposer","logout_listener","clientInitDisposer","client_init_listener","networkStatusChangeDisposer","network_status_change_listener","themeChangeDisposer","theme_change_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","partial_fetch_time","makeObservable","observable","retrieveFromStorage","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","onUnmount","assertHasValidCache","root_store","local_storage_properties","session_storage_properties","store_name","defineProperty","enumerable","writable","setupReactionForLocalStorage","setupReactionForSessionStorage","properties","snapshot","toJS","isEmptyObject","p","reaction","saveToStorage","STORAGES","LOCAL_STORAGE","SESSION_STORAGE","JSON","stringify","getSnapshot","sessionStorage","local_storage_snapshot","parse","session_storage_snapshot","k","propertyName","messages","x","property","intercept","change","newValue","trigger","inputs","isPassed","get","listener","when","switch_broadcast","switchEndSignal","isProduction","console","pre_switch_broadcast","setPreSwitchAccount","has_logged_out","setLogout","initialized_broadcast","setInitialized","is_network_online","is_online","is_dark_mode_on","has_real_account_signup_ended","setRealAccountSignupEnd","reactions","act","freeze","Symbol","is_cfd_personal_details_modal_visible","is_mt5_trade_modal_visible","map_type","is_account_being_created","is_mt5_financial_stp_modal_open","computed","is_high_risk_client_for_mt5","override","checkShouldOpenAccount","realAccountSignupEndListener","resetFormErrors","createCFDAccount","getName","openMT5Account","openCFDAccount","beginRealSignupForMt5","enableMt5FinancialStpModal","setCurrentAccount","setMT5TradeAccount","setIsAccountBeingCreated","setCFDNewAccount","creatMT5Password","createCFDPassword","getRealSyntheticAccountsExistingData","getRealFinancialAccountsExistingData","getRealSwapfreeAccountsExistingData","toggleMT5TradeModal","disableMt5FinancialStpModal","setDxtradeToken","setDerivezToken","loadDxtradeTokens","loadDerivezTokens","derivez_accounts_list","getAccountListKey","dxtrade_accounts_list","is_cfd_page","set_password","post_signup","Promise","resolve","realCFDSignup","demoCFDSignup","trading_platform_accounts_list_response","responseTradingPlatformAccountsList","trading_platform_new_account","first_name","type_request","getAccountTypeFields","country_code","phone","mainPassword","email_address","address","city","country","zipCode","sub_account_category","openRealAccountSignup","meta","obj","cfd_new_account","setStatus","reject","msg","is_btn_loading","upload","warning","is_mt5_password_not_set","is_dxtrade_password_not_set","resetForm","success","mt5_login_list_response","responseMt5LoginList","responseMT5TradingServers","mt5_new_account","setTopUpInProgress","trading_platform_deposit","to_account","to_mt5","new_balance","runInAction","service_token","has_existing_account","pandats","every","static_hash","PromiseClass","promise","module","exports","string","content","to_replace","replace","s","createElement","tag_name","attributes","document","attr","textContent","html","setAttribute","getStaticHash","querySelector","getAttribute","onClickSignup","is_invisible","theme","invisible","from","inx","general_messages","DxtradeDesktopDownload","MT5DesktopDownload","MobileDownload","classnames","QRCodeBox","is_switch_to_deriv_account_modal_visible","is_closed_on_confirm","account_icons","AddAccountButton","onSelectAccount","displayName","CFDAccountCardAction","handleClickSwitchAccount","is_accounts_switcher_on","is_button_primary","lbl_add_account","cta_label","CFDAccountCard","commission_message","descriptor","existing_accounts_data","has_banner","has_cfd_account_error","onClickFund","specs","toggleAccountsDialog","toggleShouldShowRealAccountsList","setIsAcuityModalOpen","isEligibleForMoreRealMt5","isEligibleForMoreDemoMt5Svg","existing_data","should_show_extra_add_account_button","platform_icon","has_popular_banner","has_demo_banner","has_server_banner","wrapper_ref","button_ref","getServerName","server_region","geolocation","region","sequence","is_web_terminal_unsupported","tbody_content","spec_attribute","all_svg_acc","svg_acc","should_show_pending_button","getBannerStatus","selected_account_data","margin","mobileOSDetect","CSSTransition","in","timeout","unmountOnExit","real_synthetic_specs","real_financial_specs","real_all_specs","eu_real_financial_specs","real_financial_stp_specs","au_real_financial_specs","demo_financial_stp_specs","demo_all_specs","standpoint","openAccountTransfer","openPasswordManager","current_list_index","malta","enabled","_acc","cur","specifications","is_eu_country","has_maltainvest_account","openAccountNeededModal","isSyntheticCardVisible","isFinancialCardVisible","isSwapFreeCardVisible","openAccountTransferList","financial_specs","should_show_eu","iom","CFDRealAccountDisplay","isDxtradeAllCardVisible","realSyntheticAccountsExistingData","realFinancialAccountsExistingData","isAccountOfTypeDisabled","should_enable_add_button","onClickFundReal","isMT5AccountCardDisabled","account_key","list_item","Carousel","nav_position","show_bullet","item_per_window","is_mt5","loading_component","LoadingComponent","is_logging_in","is_mt5_allowed","mt5_disabled_signup_types","dxtrade_disabled_signup_types","dxtrade_accounts_list_error","has_mt5_real_account_error","has_account_error_in_mt5_real_list","has_mt5_demo_account_error","has_dxtrade_real_account_error","has_dxtrade_demo_account_error","platform_verification_code","website_status","dxtrade_verification_code","dxtrade_status_server","dx_trade_status","dxtrade_user_exception","openTopUpModal","NotificationMessages","notification_messages_ui","is_reset_trading_password_modal_visible","toggleResetTradingPasswordModal","is_demo_enabled","is_notification_loaded","setIsNotificationLoaded","password_manager","useLocation","history","openResetPassword","setIsRealEnabled","should_enable_tab","setIsDemoEnabled","hash","setActiveIndex","updated_state","togglePasswordManagerModal","selected_account","account_category","hasAccount","has_synthetic_account","getIsSuspendedMt5Server","type_server","is_suspended_mt5_demo_server","is_suspended_dxtrade_real_server","has_mt5_account_error","is_suspended_mt5_real_server","has_dxtrade_account_error","is_user_exception","has_cfd_real_account_mt5_error","has_cfd_demo_account_mt5_error","mt5_verification_code","DXTRADE","to","routes","stopNotificationLoading","openRealPasswordModal","platform_name_trader","platform_name_dbot","routesConfig","Page404","route_default","path","is_authenticated","findRouteByPath","routes_config","route_info","match_path","matchPath","BinaryLink","active_class","is_dashboard","PlatformContext","normalizePath","route","getRoutesConfig","NavLink","activeClassName","exact","Route","render","Redirect","default_subroute","subroutes","subroute","has_default_subroute","removeBranchName","default_title","Switch","ErrorComponent","is_dialog","redirect_label","redirectOnClick","should_show_refresh","refresh_message","reload","PageErrorContainer","error_header","error_messages","redirect_urls","redirect_labels","buttonOnClick","Routes","withRouter","ModulesStore","common_store","clock_started","pending","RootStore","core_store","gtm","pushwoosh","init","server_time","clone","timePromise","configure","enforceActions","websocket","ServerTime","setWebsocket","initStore","QueryClient","is_subscribed","setSubscribed","setData","subscriber","useWS","subscribe","useCallback","prop","payload","unsubscribe","StoreContext","ExchangeRatesProvider","useSubscription","update","exchange_rates","base_currency","merge","onHydrationDone","makePersistable","Function","stopPersisting","ExchangeRatesStore","FLAGS","foo","bar","baz","FeatureFlagsStore","old","flag","memoizedValue","is_mock","feature_flags"],"sourceRoot":""}