{"version":3,"file":"cfd/js/CFDStore.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,iBAAkBA,QAAQ,uBAAwBA,QAAQ,SAClE,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,gBAAiB,sBAAuB,QAASJ,GAC/B,iBAAZC,QACdA,QAAQ,cAAgBD,EAAQG,QAAQ,iBAAkBA,QAAQ,uBAAwBA,QAAQ,SAElGJ,EAAK,cAAgBC,EAAQD,EAAK,iBAAkBA,EAAK,uBAAwBA,EAAW,KAC7F,CATD,CASGO,MAAM,CAACC,EAA2CC,EAAiDC,4JCDzFC,sBAAiB,WAC1B,IAAMC,EAAa,CACfC,aAAc,GACdC,SAAU,IACVC,aAAaC,EAAAA,EAAAA,UAAS,SAEpBC,EAAmB,CACrBJ,aAAc,GACdC,SAAU,IACVC,aAAaC,EAAAA,EAAAA,UAAS,YAEpBE,EAAmB,CACrBL,aAAc,YACdC,SAAU,IACVC,aAAaC,EAAAA,EAAAA,UAAS,cAE1B,MAAO,CACHG,KAAM,CACFC,IAAK,CACDC,qBAAsBT,EAAWC,aACjCC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,QAChBD,YAAaH,EAAWG,aAE5BQ,UAAW,CACPF,qBAAsBJ,EAAiBJ,aACvCC,SAAUG,EAAiBH,SAC3BQ,OAAON,EAAAA,EAAAA,UAAS,gBAChBD,YAAaE,EAAiBF,aAElCS,UAAW,CACPH,qBAAsBH,EAAiBL,aACvCC,SAAUI,EAAiBJ,SAC3BQ,OAAON,EAAAA,EAAAA,UAAS,kBAChBD,YAAaG,EAAiBH,cAGtCU,KAAM,CACFL,IAAK,CACDC,qBAAsBT,EAAWC,aACjCC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,QAChBD,YAAaH,EAAWG,aAE5BW,QAAS,CACLC,iBAAkBf,EAAWC,aAC7BC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,QAChBD,YAAaH,EAAWG,aAE5BQ,UAAW,CACPF,qBAAsBJ,EAAiBJ,aACvCC,SAAUG,EAAiBH,SAC3BQ,OAAON,EAAAA,EAAAA,UAAS,WAChBD,YAAaE,EAAiBF,aAElCS,UAAW,CACPH,qBAAsBH,EAAiBL,aACvCC,SAAUI,EAAiBJ,SAC3BQ,OAAON,EAAAA,EAAAA,UAAS,aAChBD,YAAaG,EAAiBH,cAI9C,GA4Baa,EAAiB,SAACC,GAC3B,IAAMjB,EAAa,CACfC,aAAc,GACdC,SAAU,IACVC,aAAaC,EAAAA,EAAAA,UAAS,cAEpBC,EAAmB,CACrBJ,aAAc,GACdC,SAAU,IACVC,aAAaC,EAAAA,EAAAA,UAAS,YAEpBE,EAAmB,CACrBL,aAAc,YACdC,SAAU,IACVC,YAAac,GAAQb,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,cAE/Cc,EAAuB,CACzBjB,aAAc,gBACdC,SAAU,IACVC,aAAaC,EAAAA,EAAAA,UAAS,kBAE1B,MAAO,CACHG,KAAM,CACFC,IAAK,CACDO,iBAAkBf,EAAWC,aAC7BC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,kBAChBD,YAAaH,EAAWG,aAE5BgB,QAAS,CACLJ,iBAAkBf,EAAWC,aAC7BC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,sBAChBD,aAAaC,EAAAA,EAAAA,UAAS,kBAE1BgB,QAAS,CACLL,iBAAkBf,EAAWC,aAC7BC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,QAChBD,YAAaH,EAAWG,aAE5BkB,QAAS,CACLN,iBAAkBf,EAAWC,aAC7BC,SAAU,MACVQ,OAAON,EAAAA,EAAAA,UAAS,QAChBD,aAAaC,EAAAA,EAAAA,UAAS,YAE1BO,UAAW,CACPI,iBAAkBV,EAAiBJ,aACnCC,SAAUG,EAAiBH,SAC3BQ,OAAON,EAAAA,EAAAA,UAAS,gBAChBD,YAAaE,EAAiBF,aAElCS,UAAW,CACPG,iBAAkBT,EAAiBL,aACnCC,SAAUI,EAAiBJ,SAC3BQ,MAAOO,GAAQb,EAAAA,EAAAA,UAAS,cAAeA,EAAAA,EAAAA,UAAS,kBAChDD,YAAaG,EAAiBH,aAElCmB,eAAgB,CACZP,iBAAkBT,EAAiBL,aACnCC,SAAUI,EAAiBJ,SAC3BQ,MAAOO,GAAQb,EAAAA,EAAAA,UAAS,cAAeA,EAAAA,EAAAA,UAAS,kBAChDD,YAAaG,EAAiBH,aAElCoB,cAAe,CACXR,iBAAkBV,EAAiBJ,aACnCC,SAAUG,EAAiBH,SAC3BQ,OAAON,EAAAA,EAAAA,UAAS,oBAChBD,YAAaE,EAAiBF,aAGlCqB,cAAe,CACXT,iBAAkBT,EAAiBL,aACnCC,SAAUI,EAAiBJ,SAC3BQ,MAAOO,GAAQb,EAAAA,EAAAA,UAAS,cAAeA,EAAAA,EAAAA,UAAS,sBAChDD,YAAac,GAAQb,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,kBAErDqB,cAAe,CACXV,iBAAkBG,EAAqBjB,aACvCC,SAAUgB,EAAqBhB,SAC/BQ,OAAON,EAAAA,EAAAA,UAAS,sBAChBD,YAAae,EAAqBf,cAG1CU,KAAM,CACFL,IAAK,CACDO,iBAAkBf,EAAWC,aAC7BC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,aAChBD,YAAaH,EAAWG,aAE5BgB,QAAS,CACLJ,iBAAkBf,EAAWC,aAC7BC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,iBAChBD,YAAaH,EAAWG,aAE5BkB,QAAS,CACLN,iBAAkBf,EAAWC,aAC7BC,SAAU,MACVQ,OAAON,EAAAA,EAAAA,UAAS,QAChBD,aAAaC,EAAAA,EAAAA,UAAS,YAE1BU,QAAS,CACLC,iBAAkBf,EAAWC,aAC7BC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,QAChBD,YAAaH,EAAWG,aAE5BiB,QAAS,CACLL,iBAAkBf,EAAWC,aAC7BC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,QAChBD,YAAaH,EAAWG,aAE5BQ,UAAW,CACPI,iBAAkBV,EAAiBJ,aACnCC,SAAUG,EAAiBH,SAC3BQ,OAAON,EAAAA,EAAAA,UAAS,WAChBD,YAAaE,EAAiBF,aAElCoB,cAAe,CACXR,iBAAkBV,EAAiBJ,aACnCC,SAAUG,EAAiBH,SAC3BQ,OAAON,EAAAA,EAAAA,UAAS,eAChBD,YAAaE,EAAiBF,aAElCuB,cAAe,CACXX,iBAAkBV,EAAiBJ,aACnCC,SAAUG,EAAiBH,SAC3BQ,OAAON,EAAAA,EAAAA,UAAS,eAChBD,YAAaE,EAAiBF,aAElCwB,YAAa,CACTZ,iBAAkBV,EAAiBJ,aACnCC,SAAUG,EAAiBH,SAC3BQ,OAAON,EAAAA,EAAAA,UAAS,mBAChBD,YAAaE,EAAiBF,aAElCS,UAAW,CACPG,iBAAkBT,EAAiBL,aACnCC,SAAUI,EAAiBJ,SAC3BQ,MAAOO,GAAQb,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,aAC3CD,YAAaG,EAAiBH,aAElCqB,cAAe,CACXT,iBAAkBT,EAAiBL,aACnCC,SAAUI,EAAiBJ,SAC3BQ,MAAOO,GAAQb,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,iBAC3CD,YAAaG,EAAiBH,aAElCyB,cAAe,CACXb,iBAAkBT,EAAiBL,aACnCC,SAAUI,EAAiBJ,SAC3BQ,MAAOO,GAAQb,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,iBAC3CD,YAAaG,EAAiBH,aAElC0B,aAAc,CACVd,iBAAkBT,EAAiBL,aACnCC,SAAUI,EAAiBJ,SAC3BQ,MAAOO,GAAQb,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,oBAC3CD,YAAaG,EAAiBH,aAElC2B,YAAa,CACTf,iBAAkBT,EAAiBL,aACnCC,SAAUI,EAAiBJ,SAC3BQ,MAAOO,GAAQb,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,qBAC3CD,YAAaG,EAAiBH,aAElCsB,cAAe,CACXV,iBAAkBG,EAAqBjB,aACvCC,SAAUgB,EAAqBhB,SAC/BQ,OAAON,EAAAA,EAAAA,UAAS,iBAChBD,YAAae,EAAqBf,cAIlD,EAEa4B,EAAsB,WAC/B,IAAM/B,EAAa,CACfC,aAAc,GACdC,SAAU,IACVC,aAAaC,EAAAA,EAAAA,UAAS,SAE1B,MAAO,CACHG,KAAM,CACFC,IAAK,CACDwB,qBAAsBhC,EAAWC,aACjCC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,QAChBD,YAAaH,EAAWG,cAGhCU,KAAM,CACFL,IAAK,CACDwB,qBAAsBhC,EAAWC,aACjCC,SAAUF,EAAWE,SACrBQ,OAAON,EAAAA,EAAAA,UAAS,QAChBD,YAAaH,EAAWG,cAIxC,uBChTAZ,EAAOD,QAAUM,6BCAjBL,EAAOD,QAAUO,YCAjBN,EAAOD,QAAUQ,ICCbmC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAa9C,QAGrB,IAAIC,EAAS0C,EAAyBE,GAAY,CAGjD7C,QAAS,CAAC,GAOX,OAHAgD,EAAoBH,GAAU5C,EAAQA,EAAOD,QAAS4C,GAG/C3C,EAAOD,OACf,CCrBA4C,EAAoBK,EAAKhD,IACxB,IAAIiD,EAASjD,GAAUA,EAAOkD,WAC7B,IAAOlD,EAAiB,QACxB,IAAM,EAEP,OADA2C,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdN,EAAoBQ,EAAI,CAACpD,EAASsD,KACjC,IAAI,IAAIC,KAAOD,EACXV,EAAoBY,EAAEF,EAAYC,KAASX,EAAoBY,EAAExD,EAASuD,IAC5EE,OAAOC,eAAe1D,EAASuD,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDX,EAAoBY,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,uUCClF,44PAGA,IAKqBI,EAAS,WA8C1B,aAA0B,WAAdC,EAAU,UAAH,6CAAG,CAAC,GAtD3B,4FAsD4B,cArCxBC,kBAAoB,CAAC,EAAC,KAEtBC,iBAAmB,CAAC,EAAC,KAErBC,yBAA2B,KAAI,KAC/BC,4BAA8B,KAAI,KAElCC,sBAAwB,KAAI,KAC5BC,wBAA0B,KAAI,KAE9BC,eAAiB,KAAI,KACrBC,gBAAkB,KAAI,KAEtBC,mBAAqB,KAAI,KACzBC,qBAAuB,KAAI,KAE3BC,4BAA8B,KAAI,KAClCC,+BAAiC,KAAI,KAErCC,oBAAsB,KAAI,KAC1BC,sBAAwB,KAAI,KAE5BC,+BAAiC,KAAI,KACrCC,mCAAqC,KAAI,KAEzCC,mBAAqB,GAajBC,EAAAA,EAAAA,gBAAeC,KAAM,CACjBlB,kBAAmBmB,EAAAA,WACnBlB,iBAAkBkB,EAAAA,WAClBH,mBAAoBG,EAAAA,WACpBC,oBAAqBC,EAAAA,OACrBC,2BAA4BD,EAAAA,OAC5BE,mBAAoBF,EAAAA,OACpBG,QAASH,EAAAA,OACTI,iBAAkBJ,EAAAA,OAClBK,sBAAuBL,EAAAA,OACvBM,gBAAiBN,EAAAA,OAAAA,MACjBO,mBAAoBP,EAAAA,OAAAA,MACpBQ,SAAUR,EAAAA,OAAAA,MACVS,aAAcT,EAAAA,OAAAA,MACdU,sBAAuBV,EAAAA,OAAAA,MACvBW,cAAeX,EAAAA,OAAAA,MACfY,uBAAwBZ,EAAAA,OAAAA,MACxBa,wBAAyBb,EAAAA,OAAAA,MACzBc,qBAAsBd,EAAAA,OAAAA,MACtBe,cAAef,EAAAA,OAAAA,MACfgB,kBAAmBhB,EAAAA,OAAAA,MACnBiB,2BAA4BjB,EAAAA,OAAAA,MAC5BkB,mBAAoBlB,EAAAA,OAAAA,MACpBmB,4BAA6BnB,EAAAA,OAAAA,MAC7BoB,UAAWpB,EAAAA,OAAAA,MACXqB,oBAAqBrB,EAAAA,OAAAA,QAGzB,IAAQsB,EACJ5C,EADI4C,WAAYC,EAChB7C,EADgB6C,yBAA0BC,EAC1C9C,EAD0C8C,2BAA4B5C,EACtEF,EADsEE,iBAAkB6C,EACxF/C,EADwF+C,WAoB5F,GAjBAzD,OAAOC,eAAe4B,KAAM,aAAc,CACtC3B,YAAY,EACZwD,UAAU,IAEd1D,OAAOC,eAAe4B,KAAM,2BAA4B,CACpD3B,YAAY,EACZwD,UAAU,IAEd1D,OAAOC,eAAe4B,KAAM,6BAA8B,CACtD3B,YAAY,EACZwD,UAAU,IAITH,GAA4BA,EAAyBI,QACrDH,GAA8BA,EAA2BG,OAE5B,CAC9B,IAAKF,EACD,MAAM,IAAIG,MAAM,oDAGpB5D,OAAOC,eAAe4B,KAAM,aAAc,CACtCgC,MAAOJ,EACPvD,YAAY,EACZwD,UAAU,GAElB,CAEA7B,KAAKyB,WAAaA,EAClBzB,KAAK0B,yBAA2BA,GAA4B,GAC5D1B,KAAK2B,2BAA6BA,GAA8B,GAEhEM,YAAW,WACP,EAAK5B,mBAAmBtB,GAExB,EAAKmD,+BACL,EAAKC,iCACL,EAAKjC,qBACT,GAAG,EACP,CA9HJ,UA4hBK,OA5hBL,EAgII,EAhIJ,EAgII,0BAOA,SAAYkC,GACR,IAAIC,GAAWC,EAAAA,EAAAA,MAAKtC,MAUpB,OARKuC,EAAAA,EAAAA,eAAcvC,KAAKyB,cACpBY,EAASZ,WAAazB,KAAKyB,YAG3BW,GAAcA,EAAWN,SACzBO,EAAWD,EAAWI,QAAO,SAACC,EAAQC,GAAC,OAAKvE,OAAOwE,OAAOF,EAAQ,EAAF,GAAKC,EAAIL,EAASK,IAAK,GAAE,CAAC,IAGvFL,CACX,GAEA,0CAKA,WAA+B,WACvBrC,KAAK0B,yBAAyBI,SAC9Bc,EAAAA,EAAAA,WACI,kBAAM,EAAKlB,yBAAyBmB,KAAI,SAAAC,GAAC,OAAI,EAAKA,EAAE,GAAC,IACrD,kBAAM,EAAKC,cAAc,EAAKrB,yBAA0B9C,EAAUoE,SAASC,cAAc,GAGrG,GAEA,4CAKA,WAAiC,WACzBjD,KAAK2B,2BAA2BG,SAChCc,EAAAA,EAAAA,WACI,kBAAM,EAAKjB,2BAA2BkB,KAAI,SAAAC,GAAC,OAAI,EAAKA,EAAE,GAAC,IACvD,kBAAM,EAAKC,cAAc,EAAKpB,2BAA4B/C,EAAUoE,SAASE,gBAAgB,GAGzG,GAEA,2BAOA,SAAcd,EAAYe,GACtB,IAAMd,EAAWe,KAAKC,UAAUrD,KAAKsD,YAAYlB,IAAa,SAACnE,EAAK+D,GAChE,GAAc,OAAVA,EAAgB,OAAOA,CAE/B,IAEImB,IAAYvE,EAAUoE,SAASC,cAC/BM,aAAaC,QAAQxD,KAAK4B,WAAYS,GAC/Bc,IAAYvE,EAAUoE,SAASE,iBACtCO,eAAeD,QAAQxD,KAAK4B,WAAYS,EAEhD,GAEA,iCAIA,WAAsB,WACZqB,EAAyBN,KAAKO,MAAMJ,aAAaK,QAAQ5D,KAAK4B,WAAY,CAAC,IAC3EiC,EAA2BT,KAAKO,MAAMF,eAAeG,QAAQ5D,KAAK4B,WAAY,CAAC,IAE/ES,EAAW,EAAH,KAAQqB,GAA2BG,GAEjD1F,OAAO2F,KAAKzB,GAAU0B,SAAQ,SAAAC,GAAC,OAAK,EAAKA,GAAK3B,EAAS2B,EAAE,GAC7D,GAEA,wCAOA,SAA2BC,EAAcC,GAAU,WAK1ClE,KAAKlB,kBAAkBmF,KAHtB,EAAKnF,kBAAkBmF,GACpBE,QAAO,SAAAC,GAAC,OAAKF,EAASG,SAASD,EAAE,IACjCE,OAAOJ,EAASC,QAAO,SAAAC,GAAC,OAAK,EAAKtF,kBAAkBmF,GAAcI,SAASD,EAAE,KAAGtC,SAErF9B,KAAKlB,kBAAkBmF,GAAgBC,EAE/C,GAEA,gCAMA,WAA+B,WAAZK,EAAQ,UAAH,6CAAG,CAAC,EACxBpG,OAAO2F,KAAKS,GAAOR,SAAQ,SAAA9F,GACvB,EAAKqC,QAAQrC,EAAKsG,EAAMtG,GAC5B,GACJ,GAEA,qBAOA,SAAQuG,EAAUD,GAAO,WACrBvE,KAAKjB,iBAAiByF,GAAYD,GAElCE,EAAAA,EAAAA,WAAUzE,KAAMwE,GAAU,SAAAE,GAEtB,OADA,EAAKnE,iBAAiBiE,EAAUE,EAAOC,UAChCD,CACX,GACJ,GAEA,8BAOA,SAAiBF,EAAUxC,GAAO,WACxB4C,EAAU5E,KAAKjB,iBAAiByF,GAAUI,QAC1CC,EAAS,EAAH,GAAML,OAAqB/G,IAAVuE,EAAsBA,EAAQhC,KAAKwE,IAC1DzF,EAAmB,EAAH,GAAMyF,EAAWxE,KAAKjB,iBAAiByF,GAAUD,OAAS,IAE1EK,GAAWzG,OAAOO,eAAeC,KAAKqB,KAAM4E,KAC9CC,EAAOD,GAAW5E,KAAK4E,GACvB7F,EAAiB6F,GAAW5E,KAAKjB,iBAAiB6F,GAASL,OAAS,IAGxE,IAAMO,EAAY,IAAIC,EAAAA,UAAUF,EAAQ9F,EAAkBiB,MAE1D8E,EAAUE,WAEV7G,OAAO2F,KAAKe,GAAQd,SAAQ,SAAA9F,GACxB,EAAKmC,2BAA2BnC,EAAK6G,EAAUG,OAAO3G,IAAIL,GAC9D,GACJ,GAEA,mCAIA,WAAwB,WACdc,EAAmBZ,OAAO2F,KAAK9D,KAAKjB,kBACpCD,EAAoBX,OAAO2F,KAAK9D,KAAKlB,mBAE3CC,EAAiBgF,SAAQ,SAAArB,GACrB,EAAKnC,iBAAiBmC,EAAG,EAAKA,GAClC,IAGA5D,EAAkBiF,SAAQ,SAAAmB,GACjBnG,EAAiBsF,SAASa,WACpB,EAAKpG,kBAAkBoG,EAEtC,GACJ,GAAC,6BAED,SAAgBC,GAAU,WAClBA,IACAnF,KAAKb,wBAA0BgG,EAE/BnF,KAAKd,uBAAwBkG,EAAAA,EAAAA,OACzB,kBAAM,EAAK3D,WAAW4D,OAAOC,gBAAgB,IAC7C,WACI,IACI,IAAM7C,EAAS,EAAKtD,0BACpB,IAAIsD,IAAUA,EAAO8C,MAA+B,mBAAhB9C,EAAO8C,KAMvC,MAAM,IAAIxD,MAAM,iEALhBU,EAAO8C,MAAK,WACR,EAAK9D,WAAW4D,OAAOG,kBACvB,EAAK/E,gBAAgB,EAAKtB,wBAC9B,GAIR,CAAE,MAAO+F,IAGAO,EAAAA,EAAAA,iBACDC,QAAQR,MAAMA,EAEtB,CACJ,IAGZ,GAAC,gCAED,SAAmBC,GAAU,WACrBA,IACAnF,KAAKf,4BAA8BkG,EACnCnF,KAAKhB,0BAA2BoG,EAAAA,EAAAA,OAC5B,kBAAM,EAAK3D,WAAW4D,OAAOM,oBAAoB,IACjD,WACI,IAAI,MACMlD,EAAyC,QAAnC,EAAG,EAAKxD,mCAA2B,aAAhC,UACf,IAAIwD,IAAUA,EAAO8C,MAA+B,mBAAhB9C,EAAO8C,KAMvC,MAAM,IAAIxD,MAAM,kEALhBU,EAAO8C,MAAK,WACR,EAAK9D,WAAW4D,OAAOO,qBAAoB,GAC3C,EAAKlF,mBAAmB,EAAKzB,4BACjC,GAIR,CAAE,MAAOiG,IAGAO,EAAAA,EAAAA,iBACDC,QAAQR,MAAMA,EAEtB,CACJ,IAGZ,GAAC,sBAED,SAASC,GAAU,WACfnF,KAAKZ,gBAAiBgG,EAAAA,EAAAA,OAClB,kBAAM,EAAK3D,WAAW4D,OAAOQ,cAAc,eAC3C,oFAE6C,GAF7C,WAEcpD,EAAS,EAAKpD,qBACNoD,EAAO8C,MAA+B,mBAAhB9C,EAAO8C,KAAmB,gBAC1D9C,EAAO8C,MAAK,WACR,EAAK9D,WAAW4D,OAAOS,WAAU,GACjC,EAAKnF,SAAS,EAAKtB,gBACvB,IAAG,4BAEG,IAAI0C,MAAM,sDAAqD,wDAKpE0D,EAAAA,EAAAA,iBACDC,QAAQR,MAAM,EAAD,IAChB,0DAIblF,KAAKX,gBAAkB8F,CAC3B,GAAC,0BAED,SAAaA,GAAU,WACnBnF,KAAKV,oBAAqB8F,EAAAA,EAAAA,OACtB,kBAAM,EAAK3D,WAAW4D,OAAOU,qBAAqB,eAClD,oFAEkD,GAFlD,WAEctD,EAAS,EAAKlD,0BACNkD,EAAO8C,MAA+B,mBAAhB9C,EAAO8C,KAAmB,gBAC1D9C,EAAO8C,MAAK,WACR,EAAK9D,WAAW4D,OAAOW,gBAAe,GACtC,EAAKpF,aAAa,EAAKrB,qBAC3B,IAAG,4BAEG,IAAIwC,MAAM,2DAA0D,wDAKzE0D,EAAAA,EAAAA,iBACDC,QAAQR,MAAM,EAAD,IAChB,0DAIblF,KAAKT,qBAAuB4F,CAChC,GAAC,mCAED,SAAsBA,GAAU,WAC5BnF,KAAKR,6BAA8BoD,EAAAA,EAAAA,WAC/B,kBAAM,EAAKnB,WAAWwE,OAAOC,iBAAiB,IAC9C,SAAAC,GACI,IACI,EAAK1G,+BAA+B0G,EACxC,CAAE,MAAOjB,IAGAO,EAAAA,EAAAA,iBACDC,QAAQR,MAAMA,EAEtB,CACJ,IAGJlF,KAAKP,+BAAiC0F,CAC1C,GAAC,2BAED,SAAcA,GAAU,WACpBnF,KAAKN,qBAAsBkD,EAAAA,EAAAA,WACvB,kBAAM,EAAKnB,WAAW2E,GAAGC,eAAe,IACxC,SAAAA,GACI,IACI,EAAK1G,sBAAsB0G,EAC/B,CAAE,MAAOnB,IAGAO,EAAAA,EAAAA,iBACDC,QAAQR,MAAMA,EAEtB,CACJ,IAGJlF,KAAKL,sBAAwBwF,CACjC,GAAC,oCAED,SAAuBA,GAAU,WAC7BnF,KAAKJ,gCAAiCwF,EAAAA,EAAAA,OAClC,kBAAM,EAAK3D,WAAW2E,GAAGE,6BAA6B,IACtD,WACI,IACI,IAAM7D,EAAS,EAAK5C,qCACpB,IAAI4C,IAAUA,EAAO8C,MAA+B,mBAAhB9C,EAAO8C,KAMvC,MAAM,IAAIxD,MAAM,mEALhBU,EAAO8C,MAAK,WACR,EAAK9D,WAAW2E,GAAGG,yBAAwB,GAC3C,EAAKxF,uBAAuB,EAAKlB,mCACrC,GAIR,CAAE,MAAOqF,IAGAO,EAAAA,EAAAA,iBACDC,QAAQR,MAAMA,EAEtB,CACJ,IAGJlF,KAAKH,mCAAqCsF,CAC9C,GAAC,qCAED,WACiD,mBAAlCnF,KAAKhB,0BACZgB,KAAKhB,2BAETgB,KAAKf,4BAA8B,IACvC,GAAC,kCAED,WAC8C,mBAA/Be,KAAKd,uBACZc,KAAKd,wBAETc,KAAKb,wBAA0B,IACnC,GAAC,2BAED,WACuC,mBAAxBa,KAAKZ,gBACZY,KAAKZ,iBAETY,KAAKX,gBAAkB,IAC3B,GAAC,+BAED,WAC2C,mBAA5BW,KAAKV,oBACZU,KAAKV,qBAETU,KAAKT,qBAAuB,IAChC,GAAC,wCAED,WACoD,mBAArCS,KAAKR,6BACZQ,KAAKR,8BAETQ,KAAKP,+BAAiC,IAC1C,GAAC,gCAED,WAC4C,mBAA7BO,KAAKN,qBACZM,KAAKN,sBAETM,KAAKL,sBAAwB,IACjC,GAAC,yCAED,WACuD,mBAAxCK,KAAKJ,gCACZI,KAAKJ,iCAETI,KAAKH,mCAAqC,IAC9C,GAAC,uBAED,WACIG,KAAKgB,0BACLhB,KAAKiB,uBACLjB,KAAKkB,gBACLlB,KAAKmB,oBACLnB,KAAKoB,6BACLpB,KAAKqB,qBACLrB,KAAKsB,6BACT,GAAC,iCAED,SAAoBkF,GAEhB,GAAIxG,KAAKyB,WAAW4D,OAAOmB,UAAYA,EAAS,4BAFpBC,EAAS,iCAATA,EAAS,kBAGjCA,EAAU1C,SAAQ,SAAA2C,GAAG,OAAIA,GAAK,IAC9B1G,KAAKF,oBAAqB,CAC9B,CACJ,IA5hBJ,iFA4hBK,EAphByB,GAATlB,EAIVoE,SAAW7E,OAAOwI,OAAO,CAC5B1D,cAAe2D,OAAO,iBACtB1D,gBAAiB0D,OAAO,kUCdhC,8lGAAA9D,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,+kBAAAA,GAAA,gEAAAA,GAAA,0JAAAA,EAAA,6FAAAA,GAAA,mIAAAA,IAAA,4SAAAA,IAAA,2OAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,6PAAAA,EAAA,EAAAA,EAAA,iBAAAA,IAAA,uBAAAA,GAAA,UAAAA,GAAA,GAAAA,EAAA,yZAAAA,EAAA,EAAAA,EAAA,SAAAA,IAAA,SAAAA,GAAA,y4CAE2F,IAEtE+D,EAAQ,aAJ7B,qRAI6B,UAJ7B,MAgyBK,EAnMA,EA1DA,EAhBA,EA9BA,EAfA,EAVA,EApMA,EApRwB,OA8CzB,cAA4B,MAAdpF,EAAU,EAAVA,WAmGR,OArJV,4FAkD4B,UACpB,cAAM,CAAEA,WAAAA,KA9CZqF,6BAA8B,EAAK,EACnCC,uCAAwC,EAAK,EAC7CC,+BAAgC,EAAK,EACrCC,4BAA6B,EAAK,EAClCC,gCAAkC,GAAE,EAEpC7L,aAAe,CACX8L,SAAU,GACVC,KAAM,IACT,EAEDC,kBAAoB,CAAC,EAAC,EACtBC,qBAAuB,CAAC,EAAC,EACzBC,SAAW,CAAC,EAAC,EACbC,eAAgB,EAAK,EACrBC,cAAgB,GAAE,EAElBC,0BAA2B,EAAK,EAChCC,+BAAgC,EAAK,EACrCC,iCAAkC,EAAK,EACvCC,+BAAgC,EAAK,EAErCC,qBAAkBrK,EAAS,EAE3BsK,gBAAatK,EAAS,EAEtBuK,mCAAoC,EAAK,EACzCC,eAAiB,CACbtM,KAAM,GACNM,KAAM,IACT,EACDiM,eAAiB,CACbvM,KAAM,GACNM,KAAM,IACT,EAEDkM,eAAiB,CACbxM,KAAM,GACNM,KAAM,IACT,EAEDmM,sCAAwC,GAAE,EAC1CC,sCAAwC,GAAE,EAC1CC,qCAAuC,IAKnCvI,EAAAA,EAAAA,gBAAe,EAAD,GAAO,CACjB+G,4BAA6B7G,EAAAA,WAC7B8G,sCAAuC9G,EAAAA,WACvC+G,8BAA+B/G,EAAAA,WAC/BgH,2BAA4BhH,EAAAA,WAC5BiH,gCAAiCjH,EAAAA,WACjC5E,aAAc4E,EAAAA,WACdoH,kBAAmBpH,EAAAA,WACnBqH,qBAAsBrH,EAAAA,WACtBsH,SAAUtH,EAAAA,WACVuH,cAAevH,EAAAA,WACfwH,cAAexH,EAAAA,WACfyH,yBAA0BzH,EAAAA,WAC1B0H,8BAA+B1H,EAAAA,WAC/B2H,gCAAiC3H,EAAAA,WACjC4H,8BAA+B5H,EAAAA,WAC/B6H,gBAAiB7H,EAAAA,WACjB+H,kCAAmC/H,EAAAA,WACnC8H,WAAY9H,EAAAA,WACZgI,eAAgBhI,EAAAA,WAChBkI,eAAgBlI,EAAAA,WAChBiI,eAAgBjI,EAAAA,WAChBsI,cAAeC,EAAAA,SACfC,aAAcD,EAAAA,SACdE,8CAA+CF,EAAAA,SAC/CG,mCAAoCH,EAAAA,SACpCI,QAASzI,EAAAA,OAAAA,MACToB,UAAWsH,EAAAA,SACXC,uBAAwB3I,EAAAA,OAAAA,MACxB4I,6BAA8B5I,EAAAA,OAAAA,MAC9B6I,gBAAiB7I,EAAAA,OAAAA,MACjB8I,cAAe9I,EAAAA,OAAAA,MACf+I,iBAAkB/I,EAAAA,OAAAA,MAClBgJ,wBAAyBhJ,EAAAA,OAAAA,MACzBiJ,uBAAwBjJ,EAAAA,OAAAA,MACxBkJ,QAASlJ,EAAAA,OAAAA,MACTmJ,eAAgBnJ,EAAAA,OAAAA,MAChBoJ,eAAgBpJ,EAAAA,OAAAA,MAChBqJ,sBAAuBrJ,EAAAA,OAAAA,MACvBsJ,2BAA4BtJ,EAAAA,OAAAA,MAC5BuJ,eAAgBvJ,EAAAA,OAAAA,MAChBwJ,kBAAmBxJ,EAAAA,OAAAA,MACnByJ,mBAAoBzJ,EAAAA,OAAAA,MACpB0J,yBAA0B1J,EAAAA,OAAAA,MAC1B2J,SAAU3J,EAAAA,OAAAA,MACV4J,iBAAkB5J,EAAAA,OAAAA,MAClB6J,oBAAqB7J,EAAAA,OAAAA,MACrB8J,iBAAkB9J,EAAAA,OAAAA,MAClB+J,iBAAkB/J,EAAAA,OAAAA,MAClBgK,kBAAmBhK,EAAAA,OAAAA,MACnBiK,kBAAmBjK,EAAAA,OAAAA,MACnBkK,kBAAmBlK,EAAAA,OAAAA,MACnBmK,2BAA4BnK,EAAAA,OAAAA,MAC5BoK,qCAAsCpK,EAAAA,OAAAA,MACtCqK,qCAAsCrK,EAAAA,OAAAA,MACtCsK,oCAAqCtK,EAAAA,OAAAA,MACrCuK,wBAAyBvK,EAAAA,OAAAA,MACzBwK,oBAAqBxK,EAAAA,OAAAA,MACrByK,4BAA6BzK,EAAAA,OAAAA,MAC7B0K,aAAc1K,EAAAA,OAAAA,MACd2K,gBAAiB3K,EAAAA,OAAAA,MACjB4K,iCAAkC5K,EAAAA,OAAAA,MAClC6K,2BAA4B7K,EAAAA,OAAAA,MAC5B8K,gBAAiB9K,EAAAA,OAAAA,MACjB+K,gBAAiB/K,EAAAA,OAAAA,MACjBgL,kBAAmBhL,EAAAA,OAAAA,MACnBiL,kBAAmBjL,EAAAA,OAAAA,MACnBkL,gBAAiBlL,EAAAA,OAAAA,MACjBmL,kBAAmBnL,EAAAA,OAAAA,SAYvByC,EAAAA,EAAAA,WACI,iBAAM,CAAC,EAAKnB,WAAW4D,OAAOkG,sBAAsB,IACpD,WACQ,EAAK9J,WAAW4D,OAAOkG,sBAAsBzJ,OAAS,GACtD,EAAKwJ,mBAEb,KAGJ1I,EAAAA,EAAAA,WACI,iBAAM,CAAC,EAAKnB,WAAW4D,OAAOmG,sBAAsB,IACpD,WACQ,EAAK/J,WAAW4D,OAAOmG,sBAAsB1J,OAAS,GACtD,EAAKsJ,mBAEb,IACF,CACN,CAkoBC,OAxxBL,EAsJK,EAtJL,EAsJK,0BAED,WACI,OAAOpL,KAAK3E,aAAa8L,UACnB/K,EAAAA,EAAAA,IAAe4D,KAAKyB,WAAWgK,YAAYC,yBAAyB1L,KAAK3E,aAAa8L,UAClFnH,KAAK3E,aAAa+L,MACpBtL,MACF,EACV,GAAC,8CAED,WACI,MACIkE,KAAKyB,WAAW4D,OAAOsG,iBADnBC,EAAO,EAAPA,QAASC,EAAc,EAAdA,eAAgBC,EAAa,EAAbA,cAAeC,EAAyB,EAAzBA,0BAA2BC,EAAsB,EAAtBA,uBAE3E,SAAUJ,GAAWC,GAAkBC,GAAiBC,GAA6BC,EACzF,GAAC,wBAED,WACI,IAAMC,EAAO,CAAC,EACRP,EAA0B1L,KAAKyB,WAAWgK,YAAYC,wBAiC5D,OAhCA1L,KAAKyB,WAAW4D,OAAO6G,eAClB/H,QAAO,SAAAgI,GAAG,OACPT,EACoC,gBAA9BS,EAAIC,sBAC0B,gBAA9BD,EAAIC,qBAAuC,IAEpDrI,SAAQ,SAAAsI,GAELJ,GAAKK,EAAAA,EAAAA,mBAAkBD,EAASE,EAAAA,cAAAA,IAAmBF,EAAQD,wBAA0B,KAC9EC,EAEX,IAEJrM,KAAKyB,WAAW4D,OAAOmH,sBAAsBzI,SAAQ,SAAAsI,GAEjDJ,GAAKK,EAAAA,EAAAA,mBAAkBD,EAASE,EAAAA,cAAAA,UAA0B,KACnDF,EAEX,IACArM,KAAKyB,WAAW4D,OAAOmG,sBAAsBzH,SAAQ,SAAAsI,GACjDJ,GAAKK,EAAAA,EAAAA,mBAAkBD,EAASE,EAAAA,cAAAA,UAA0B,KACnDF,EAEX,IAEArM,KAAKyB,WAAW4D,OAAOkG,sBAAsBxH,SAAQ,SAAAsI,GAEjDJ,GAAKK,EAAAA,EAAAA,mBAAkBD,EAASE,EAAAA,cAAAA,UAA0B,KACnDF,EAEX,IAEOJ,CACX,GAEA,yBACA,WACI,OAAO7P,EAAAA,EAAAA,IAAe4D,KAAKyB,WAAW4D,OAAOhJ,MACjD,GAEA,6BACA,WACI,OAAOlB,EAAAA,EAAAA,KACX,GAEA,6BACA,WACI,OAAOgC,EAAAA,EAAAA,KACX,GAAC,yDAED,WAAoD,iBAChD,OAAQ6C,KAAK3E,aAAa+L,MACtB,IAAK,YACD,OAAiD,QAAjD,EAAOpH,KAAKoI,6CAAqC,aAA1C,EAA4CqE,MAC/C,SAAAJ,GAAO,OAAIA,EAAQD,wBAA0B,EAAKlF,+BAA+B,IAEzF,IAAK,MACD,OAAgD,QAAhD,EAAOlH,KAAKsI,4CAAoC,aAAzC,EAA2CmE,MAC9C,SAAAJ,GAAO,OAAIA,EAAQD,wBAA0B,EAAKlF,+BAA+B,IAEzF,QACI,OAAiD,QAAjD,EAAOlH,KAAKqI,6CAAqC,aAA1C,EAA4CoE,MAC/C,SAAAJ,GAAO,OAAIA,EAAQD,wBAA0B,EAAKlF,+BAA+B,IAGjG,GAAC,qBAED,WACIlH,KAAK8I,yBACL9I,KAAKe,uBAAuBf,KAAK+I,8BACjC/I,KAAKyB,WAAW2E,GAAGsG,aAAc,CACrC,GAAC,uBAED,WACI1M,KAAKsB,8BACLtB,KAAKyB,WAAW2E,GAAGsG,aAAc,CACrC,GAGA,oCACA,WACI,IAAMrR,EAAeoI,eAAeG,QAAQ,yBAC5C,GAAIvI,EAAc,CACd,IAAwE,IAAvBA,EAAasR,MAAM,KAAI,GAAjExF,EAAQ,KAAEyF,EAAQ,KAAExF,EAAI,KAAEyF,EAAY,KAC7C7M,KAAKkJ,iBAAiB,CAAE/B,SAAAA,EAAUyF,SAAAA,EAAUxF,KAAAA,EAAMyF,aAAAA,IAClDpJ,eAAeqJ,WAAW,wBAC9B,CACJ,GAAC,sCAED,SAAyBpF,GACrB1H,KAAK0H,yBAA2BA,CACpC,GAAC,0CAED,WACI,IAAMqF,EAAc3J,KAAKO,MAAMF,eAAeG,QAAQ,6BAKtD,OAJImJ,GAAeA,EAAY5F,UAAY4F,EAAY3F,OACnD3D,eAAeqJ,WAAW,4BAC1B9M,KAAKoJ,0BAEF4D,QAAQC,SACnB,GAAC,6BAED,WACIjN,KAAKyH,cAAgB,GACrBzH,KAAK+H,gBAAatK,EAClBuC,KAAKwH,eAAgB,CACzB,GAAC,2BAED,WACIxH,KAAKgJ,kBACLhJ,KAAK6H,+BAAgC,CACzC,GAAC,6CAED,uGAKO,GALkBV,EAAQ,EAARA,SAAUyF,EAAQ,EAARA,SAAUxF,EAAI,EAAJA,KAAMyF,EAAY,EAAZA,aAC/C7M,KAAKiJ,gBACLjJ,KAAK0J,eAAe,CAChBvC,SAAAA,EACAC,KAAAA,IAEAwF,IAAaL,EAAAA,cAAAA,QAAqB,gBACjB,SAAbpF,EACAnH,KAAKkN,cAAcL,GAEnB7M,KAAKmN,gBACR,0BACMP,IAAaL,EAAAA,cAAAA,QAAqB,iBASxC,MARkC,SAA/BvM,KAAK3E,aAAa8L,WAClBnH,KAAK+K,iCAAiC,OACtC/K,KAAK6J,0BAAyB,IAE5BuD,EAA0B,CAC5BR,SAAAA,EACAvR,aAAc2E,KAAK3E,aAAa8L,SAChCkG,YAAarN,KAAK3E,aAAa+L,MAClC,UACsBpH,KAAKuJ,eAAe6D,GAAwB,QAArD,IAARE,EAAW,EAAH,MACApI,MAAO,CAAF,gBAGgB,OAF/BlF,KAAK8J,UAAS,GACd9J,KAAKoJ,yBACLpJ,KAAKgK,qBAAoB,GAAM,UAEuBuD,EAAAA,GAAAA,4BAClDhB,EAAAA,cAAAA,SACH,QAFKiB,EAA0C,EAAH,KAG7CxN,KAAKyB,WAAW4D,OAAOoI,oCAAoCD,GAC3DD,EAAAA,GAAAA,0BACAvN,KAAK6J,0BAAyB,GAAO,wBAErC7J,KAAK8J,UAAS,EAAMwD,EAASpI,OAC7BlF,KAAK6J,0BAAyB,GAAO,mCAElC+C,IAAaL,EAAAA,cAAAA,IAAiB,iBACpB,SAAbpF,EACAnH,KAAK0K,2BAED1K,KAAKyB,WAAWgK,YAAYC,wBAC5B1L,KAAK+K,iCAAiC2C,EAAAA,aAAAA,cACnC1N,KAAK+K,iCAAiC2C,EAAAA,aAAAA,KAC7C1N,KAAKmN,iBACR,2BACMP,IAAaL,EAAAA,cAAAA,QAAqB,iBAQxC,OAPDvM,KAAK6J,0BAAyB,GAC9B7J,KAAK+K,iCAAiC,OAChC4C,EAAS,CACXf,SAAAA,EACAvR,aAAc2E,KAAK3E,aAAa8L,SAChCkG,YAAarN,KAAK3E,aAAa+L,KAC/BwG,QAAS5N,KAAKkH,iCACjB,UACsBlH,KAAKuJ,eAAeoE,GAAO,QAApC,IAARL,EAAW,EAAH,MACApI,MAAO,CAAF,gBAEgB,OAD/BlF,KAAKoJ,yBACLpJ,KAAKgK,qBAAoB,GAAM,UACuBuD,EAAAA,GAAAA,4BAA+BI,EAAOf,UAAS,QAA/FY,EAA0C,EAAH,KAC7CxN,KAAKyB,WAAW4D,OAAOoI,oCAAoCD,GAC3DxN,KAAK+J,iBAAiBuD,EAASO,8BAC/B7N,KAAK6J,0BAAyB,GAAO,wBAErC7J,KAAK8J,UAAS,EAAMwD,EAASpI,OAC7BlF,KAAK6J,0BAAyB,GAAO,iDAGhD,yEAED,WACI7J,KAAKoJ,wBACT,GAAC,qCAED,WACIpJ,KAAK6H,+BAAgC,CACzC,GAAC,oCAED,WACI7H,KAAK6H,+BAAgC,CACzC,GAAC,qBAED,WACI,IAAQiG,GAAe9N,KAAKyB,WAAW4D,OAAOsG,kBAAoB3L,KAAKyB,WAAW4D,OAAOsG,kBAAjFmC,WACFhS,EAAQkE,KAAK+N,cAAc/N,KAAK3E,aAAa8L,UAAUnH,KAAK3E,aAAa+L,MAAMtL,MAGrF,OAAOgS,EAAa,CAACA,EAAYhS,GAAOkS,KAAK,KAAOlS,CACxD,GAAC,4BAED,SAAe6R,GACX,IAAMM,EAAOjO,KAAKqJ,UACZ/N,EAAW0E,KAAK+N,cAAc/N,KAAK3E,aAAa8L,UAAUnH,KAAK3E,aAAa+L,MAAM9L,SAClF4S,GAAeC,EAAAA,EAAAA,sBAAqBnO,KAAK3E,cAC/C,EACI2E,KAAKyB,WAAW4D,OAAOsG,iBADnByC,EAAc,EAAdA,eAAgBC,EAAc,EAAdA,eAAgBC,EAAgB,EAAhBA,iBAAkBC,EAAY,EAAZA,aAAcC,EAAa,EAAbA,cAAeC,EAAY,EAAZA,aAAcC,EAAK,EAALA,MAGrG,OAAOnB,EAAAA,GAAAA,cAAiB,SACpBoB,aAAchB,EAAOiB,SACrBC,MAAO7O,KAAKyB,WAAW4D,OAAOyJ,cAC9BxT,SAAAA,EACA2S,KAAAA,EACAc,QAASX,GAAkBC,EAC3BW,KAAMT,EACNU,QAASR,EACTC,MAAAA,EACAQ,MAAOV,EACPW,QAASb,GACsB,QAA3BtO,KAAK3E,aAAa+L,KAAiB,CAAEgI,qBAAsB,aAAgB,CAAC,GAC5EzB,EAAO0B,OAAS,CAAEA,OAAQ1B,EAAO0B,QAAW,CAAC,GAC7CrP,KAAKkH,gCAAkC,CAAE0G,QAAS5N,KAAKkH,iCAAoC,CAAC,GAC5FlH,KAAKkH,kCAAoCwG,EAAAA,aAAAA,OACvCQ,EACA,CACI7S,aAAc,YACdc,iBAAkB,kBAGpC,GAAC,4BAED,SAAewR,GACX,OAAOJ,EAAAA,GAAAA,0BAA6B,CAChCqB,SAAUrC,EAAAA,cAAAA,QAAwBoB,EAAOiB,SAAW,GACpDhC,SAAUe,EAAOf,SACjBvR,aAAc2E,KAAK3E,aAAa8L,SAChCkG,YAC+B,YAA3BrN,KAAK3E,aAAa+L,MACS,YAA3BpH,KAAK3E,aAAa+L,MACS,YAA3BpH,KAAK3E,aAAa+L,KACZ,MACApH,KAAK3E,aAAa+L,KAC5BwG,QAASrB,EAAAA,cAAAA,QAAwBvM,KAAKkH,gCAAkC,IAEhF,GAAC,mCAED,WACIzD,eAAeD,QAAQ,2BAA4BJ,KAAKC,UAAUrD,KAAK3E,eACvE2E,KAAKyB,WAAW2E,GAAGkJ,sBAAsB,MAC7C,GAAC,2BAED,SAAczC,GACV,OAAQ7M,KAAK3E,aAAa+L,MACtB,IAAK,YAUL,IAAK,YACL,IAAK,UACL,IAAK,MACDpH,KAAKoJ,yBACL,MAXJ,IAAK,gBACDpJ,KAAKyB,WAAW4D,OAAOkK,qBACvBvP,KAAKyB,WAAW4D,OAAOmK,kBACvBxP,KAAKyB,WAAW4D,OAAOoK,uBACnB5C,EAAc7M,KAAKoJ,yBAClBpJ,KAAKyJ,6BACV,MAMJ,QACI,MAAM,IAAI1H,MAAM,wCAE5B,GAAC,wCAED,WACI/B,KAAK4H,iCAAkC,CAC3C,GAAC,4BAED,SAAevM,GACX2E,KAAK3E,aAAeA,CACxB,GAAC,+BAED,SAAkBqU,EAAMC,GACpB3P,KAAK8H,gBAAkB,OAChB6H,GACAD,EAEX,GAAC,gCAED,SAAmBrI,GACfrH,KAAKqH,kBAAoBA,CAC7B,GAAC,sBAED,SAAS6H,EAAO3Q,GAAK,MACjByB,KAAKwH,cAAgB0H,EACrBlP,KAAKyH,cAAgBlJ,EAAMA,EAAIqR,QAAU,GACzC5P,KAAK+H,WAAsB,QAAZ,EAAGxJ,aAAG,EAAHA,EAAKsR,YAAI,aAAIpS,CACnC,GAAC,8BAED,SAAiBqS,GACb9P,KAAKsH,qBAAuBwI,CAChC,GAAC,iCAED,SAAoB9N,GAChBhC,KAAK2H,gCAAkC3F,CAC3C,GAAC,6CAED,WAAuB4K,GAAQ,iEAGmE,KADzFA,IAAaL,EAAAA,cAAAA,KAAqBvM,KAAKyB,WAAW4D,OAAO0K,yBACzDnD,IAAaL,EAAAA,cAAAA,SAAyBvM,KAAKyB,WAAW4D,OAAO2K,6BAElC,CAAF,+BACpBzC,EAAAA,GAAAA,mBAAqB,gDAElC,2FAED,WAAuBI,EAAQsC,GAAO,uFACX1C,EAAAA,GAAAA,8BAAiC,CACpD2C,aAAcvC,EAAOiB,SACrBhC,SAAUL,EAAAA,cAAAA,MACZ,OAHY,KAARe,EAAW,EAAH,MAIDpI,MAAO,CAAF,eAIwB,OAHtClF,KAAK8J,UAAS,EAAMwD,EAASpI,OAC7B+K,EAAQE,UAAU,CAAC,GACnBF,EAAQG,eAAc,GACtBH,EAAQI,UAAU,CAAEC,SAAS,IAAS,mBAC/B,GAAI,iCAER,GAAK,iDACf,8FAED,WAAwB3C,EAAQsC,GAAO,6EAC/BjQ,KAAKyB,WAAW4D,OAAO0K,wBAAyB,CAAF,+BACtB/P,KAAKkK,iBAAiByD,EAAQsC,GAAQ,OAA/C,IAAG,EAAH,KACA,CAAF,gDAGM,OAAvBjQ,KAAKgJ,kBAAkB,SACAhJ,KAAKsJ,eAAeqE,GAAO,OAApC,IAARL,EAAW,EAAH,MACApI,MAAO,CAAF,gBAIgB,OAH/B+K,EAAQI,UAAU,CAAEC,SAAS,IAC7BL,EAAQG,eAAc,GACtBpQ,KAAK8J,UAAS,GACd9J,KAAKgK,qBAAoB,GAAM,UACzBhK,KAAKiK,iBAAiBsC,EAAAA,cAAAA,KAAkB,yBAERgB,EAAAA,GAAAA,WAAAA,eAA4B,QAI5C,OAJhBgD,EAA0B,EAAH,KAC7BvQ,KAAKyB,WAAW4D,OAAOmL,qBAAqBD,GAE5ChD,EAAAA,GAAAA,0BAA8B,KAC9BvN,KAAKyB,WAAW4D,OAAM,UAAiCkI,EAAAA,GAAAA,eAAkBhB,EAAAA,cAAAA,KAAkB,yBAApEkE,0BAAyB,gBAChDzQ,KAAK+J,iBAAiBuD,EAASoD,iBAAiB,yCAE1C1Q,KAAKiK,iBAAiBsC,EAAAA,cAAAA,KAAkB,QAC9CvM,KAAK8J,UAAS,EAAMwD,EAASpI,OAC7B+K,EAAQE,UAAU,CAAC,GACnBF,EAAQG,eAAc,GACtBH,EAAQI,UAAU,CAAEC,SAAS,IAAS,iDAE7C,8FAED,WAAwB3C,EAAQsC,GAAO,uFACZ1C,EAAAA,GAAAA,8BAAiC,CACpD2C,aAAcvC,EAAOiB,SACrBhC,SAAUL,EAAAA,cAAAA,UACZ,OAHY,KAARe,EAAW,EAAH,MAIDpI,MAAO,CAAF,eAIwB,OAHtClF,KAAK8J,UAAS,EAAMwD,EAASpI,OAC7B+K,EAAQE,UAAU,CAAC,GACnBF,EAAQG,eAAc,GACtBH,EAAQI,UAAU,CAAEC,SAAS,IAAS,mBAC/B,GAAI,iCAGR,GAAK,iDACf,8FAED,WAAwB3C,EAAQsC,GAAO,6EAC/B1D,EAAAA,cAAAA,UAAyBvM,KAAKyB,WAAW4D,OAAO2K,4BAA2B,gCACnDhQ,KAAKoK,kBAAkBuD,EAAQsC,GAAQ,OAAhD,IAAG,EAAH,KACA,CAAF,gEAGMjQ,KAAKuJ,eAAeoE,GAAO,OAApC,KAARL,EAAW,EAAH,MAEDpI,MAAO,CAAF,iCACRlF,KAAKiK,iBAAiBsC,EAAAA,cAAAA,SAAsB,QAIZ,OAHtCvM,KAAK8J,UAAS,EAAMwD,EAASpI,OAC7B+K,EAAQE,UAAU,CAAC,GACnBF,EAAQG,eAAc,GACtBH,EAAQI,UAAU,CAAEC,SAAS,IAAS,2BAOX,OAH/BL,EAAQI,UAAU,CAAEC,SAAS,IAC7BL,EAAQG,eAAc,GACtBpQ,KAAK8J,UAAS,GACd9J,KAAKgK,qBAAoB,GAAM,UACzBhK,KAAKiK,iBAAiBsC,EAAAA,cAAAA,SAAsB,yBAEIgB,EAAAA,GAAAA,4BAA+BI,EAAOf,UAAS,QAA/FY,EAA0C,EAAH,KAC7CxN,KAAKyB,WAAW4D,OAAOoI,oCAAoCD,GAE3DD,EAAAA,GAAAA,0BACAvN,KAAK+J,iBAAiBuD,EAASO,8BAA8B,iDAChE,wFAED,WACI7N,KAAK8G,6BAA+B9G,KAAK8G,2BAC7C,GAAC,kDAED,SAAqCsB,GACjCpI,KAAKoI,sCAAwCA,CACjD,GAAC,kDAED,SAAqCC,GACjCrI,KAAKqI,sCAAwCA,CACjD,GAAC,iDAED,SAAoCC,GAChCtI,KAAKsI,qCAAuCA,CAChD,GAAC,qCAED,WACItI,KAAKgH,+BAAiChH,KAAKgH,6BAC/C,GAAC,iCAED,WACIhH,KAAKiH,4BAA8BjH,KAAKiH,0BAC5C,GAAC,yCAED,WACIjH,KAAK4H,iCAAkC,CAC3C,GAAC,yCAED,WAAmBgF,GAAQ,wFACvB5M,KAAKyB,WAAW2E,GAAGuK,oBAAmB,GAAM,KAGpC/D,EAAQ,cACPL,EAAAA,cAAAA,QAAqB,SAQrBA,EAAAA,cAAAA,QAAqB,SAQrBA,EAAAA,cAAAA,IAAiB,UAMjBA,EAAAA,cAAAA,QAAqB,mCArBLgB,EAAAA,GAAAA,WAAAA,KAAmB,CAChCqD,yBAA0B,EAC1BhE,SAAAA,EACAiE,WAAY7Q,KAAK8H,gBAAgBgJ,aACnC,OAJM,OAARxD,EAAW,EAAH,kDAQSC,EAAAA,GAAAA,WAAAA,KAAmB,CAChCqD,yBAA0B,EAC1BhE,SAAUL,EAAAA,cAAAA,QACVsE,WAAY7Q,KAAK8H,gBAAgBgJ,aACnC,QAJM,OAARxD,EAAW,EAAH,mDAQSC,EAAAA,GAAAA,WAAAA,WAAyB,CACtCwD,OAAQ/Q,KAAK8H,gBAAgBkJ,QAC/B,QAFM,OAAR1D,EAAW,EAAH,mDAMSC,EAAAA,GAAAA,WAAAA,KAAmB,CAChCqD,yBAA0B,EAC1BhE,SAAUL,EAAAA,cAAAA,QACVsE,WAAY7Q,KAAK8H,gBAAgBkJ,QACnC,QAJM,OAAR1D,EAAW,EAAH,kCAQ4B,OAApCA,EAASpI,MAAQ,mBAAmB,gCAKvCoI,EAASpI,MAAO,CAAF,qBAEP0H,EAAQ,cACPL,EAAAA,cAAAA,QAAqB,UASrBA,EAAAA,cAAAA,QAAqB,UASrBA,EAAAA,cAAAA,IAAiB,UAQjBA,EAAAA,cAAAA,QAAqB,qCAzBhBgB,EAAAA,GAAAA,WAAAA,4BAC2BhB,EAAAA,cAAAA,SAC5BhH,KAAKvF,KAAKyB,WAAW4D,OAAOoI,qCAAoC,QAG1D,OAFXwD,EAEC,QAFU,EAAGjR,KAAKyB,WAAW4D,OAAOmH,sBAAsB0E,MACvD,SAAAC,GAAI,OAAIA,EAAKL,aAAe,EAAKhJ,gBAAgBgJ,UAAU,WAC9D,aAFa,EAEXM,QAAQ,8CAIL7D,EAAAA,GAAAA,WAAAA,4BAC2BhB,EAAAA,cAAAA,SAC5BhH,KAAKvF,KAAKyB,WAAW4D,OAAOoI,qCAAoC,QAG1D,OAFXwD,EAEC,QAFU,EAAGjR,KAAKyB,WAAW4D,OAAOmG,sBAAsB0F,MACvD,SAAAC,GAAI,OAAIA,EAAKL,aAAe,EAAKhJ,gBAAgBgJ,UAAU,WAC9D,aAFa,EAEXM,QAAQ,8CAIL7D,EAAAA,GAAAA,WAAAA,eAA6BhI,KAAKvF,KAAKyB,WAAW4D,OAAOmL,sBAAqB,QAIzE,OAFXS,EAEC,QAFU,EAAGjR,KAAKyB,WAAW4D,OAAO6G,eAAegF,MAChD,SAAAC,GAAI,OAAIA,EAAKH,QAAU,EAAKlJ,gBAAgBkJ,KAAK,WACpD,aAFa,EAEXI,QAAQ,8CAIL7D,EAAAA,GAAAA,WAAAA,4BAC2BhB,EAAAA,cAAAA,SAC5BhH,KAAKvF,KAAKyB,WAAW4D,OAAOoI,qCAAoC,QAG1D,OAFXwD,EAEC,QAFU,EAAGjR,KAAKyB,WAAW4D,OAAOkG,sBAAsB2F,MACvD,SAAAC,GAAI,OAAIA,EAAKL,aAAe,EAAKhJ,gBAAgBgJ,UAAU,WAC9D,aAFa,EAEXM,QAAQ,kEAOnBC,EAAAA,EAAAA,cAAY,WAER,EAAK5P,WAAW2E,GAAGkL,wBAAyB,EAC5C,EAAKxJ,gBAAgBsJ,QAAUH,CACnC,IACAhP,YAAW,YACPoP,EAAAA,EAAAA,cAAY,WACR,EAAK5P,WAAW2E,GAAGmL,2BAA4B,CACnD,GACJ,GAAG,KAAK,wBAGR7L,QAAQR,MAAMoI,GAAU,QAE5BtN,KAAKyB,WAAW2E,GAAGuK,oBAAmB,GAAO,iDAChD,2EAED,WACI,OAAOpD,EAAAA,GAAAA,YAAevN,KAAKyB,WAAW4D,OAAOwJ,MAAO,2CACxD,GAAC,6BAED,SAAgBvB,EAAU+B,GACtB,IAAK/B,EAASpI,MAAO,CACjB,IAAQhJ,EAAYoR,EAASkE,cAArBtV,QACR8D,KAAKiI,eAAeoH,GAAUnT,EAAQuV,KAC1C,CACJ,GAAC,6BAED,SAAgBnE,EAAU+B,GACtB,IAAK/B,EAASpI,MAAO,CACjB,IAAQzI,EAAY6Q,EAASkE,cAArB/U,QACRuD,KAAKmI,eAAekH,GAAU5S,EAAQgV,KAC1C,CACJ,GAAC,6BAED,SAAgBnE,EAAU+B,GACtB,IAAK/B,EAASpI,MAAO,CACjB,IAAQwM,EAAYpE,EAASkE,cAArBE,QACR1R,KAAKkI,eAAemH,GAAUqC,EAAQD,KAC1C,CACJ,GAAC,+BAED,WAAoB,WAChB,CAAC,OAAQ,QAAQ1N,SAAQ,SAAA1I,GACrB,IAAMsW,EAAuB,EAAKlQ,WAAW4D,OAAOmH,sBAAsBC,MACtE,SAAAJ,GAAO,OAAIA,EAAQhR,eAAiBA,CAAY,KAE/C,EAAK4M,eAAe5M,IAAiBsW,GACtCpE,EAAAA,GAAAA,gBAAmBhB,EAAAA,cAAAA,QAAuBlR,GAAckK,MAAK,SAAA+H,GAAQ,OACjE,EAAKrC,gBAAgBqC,EAAUjS,EAAa,GAGxD,GACJ,GAAC,+BAED,WAAoB,WAChB,CAAC,OAAQ,QAAQ0I,SAAQ,SAAA1I,GACrB,IAAMsW,EAAuB,EAAKlQ,WAAW4D,OAAOmG,sBAAsBiB,MACtE,SAAAJ,GAAO,OAAIA,EAAQhR,eAAiBA,CAAY,KAE/C,EAAK8M,eAAe9M,IAAiBsW,GACtCpE,EAAAA,GAAAA,gBAAmBhB,EAAAA,cAAAA,QAAuBlR,GAAckK,MAAK,SAAA+H,GAAQ,OACjE,EAAKpC,gBAAgBoC,EAAUjS,EAAa,GAGxD,GACJ,GAAC,+BAED,WAAoB,WAChB,CAAC,OAAQ,QAAQ0I,SAAQ,SAAA1I,GACrB,IAAMsW,EAAuB,EAAKlQ,WAAW4D,OAAOkG,sBAAsBkB,MACtE,SAAAJ,GAAO,OAAIA,EAAQhR,eAAiBA,CAAY,KAG/C,EAAK6M,eAAe7M,IAAiBsW,GACtCpE,EAAAA,GAAAA,gBAAmBhB,EAAAA,cAAAA,QAAuBlR,GAAckK,MAAK,SAAA+H,GAAQ,OACjE,EAAKjC,gBAAgBiC,EAAUjS,EAAa,GAGxD,GACJ,GAAC,8CAwBD,SAAiCuW,GAC7B5R,KAAKkH,gCAAkC0K,CAC3C,GAAC,wCAED,WACI5R,KAAKgI,mCAAqChI,KAAKgI,iCACnD,IAhyBJ,EAgyBK,4CA5BD,+FAA8E,GAAhDgJ,EAAK,EAALA,MAAOa,EAAY,EAAZA,aAAc3B,EAAY,EAAZA,aAGzB,aAHoD,EAAb4B,cAG7B,gCACXvE,EAAAA,GAAAA,WAAAA,sCAAoD,CACjEuD,WAAYE,EACZa,aAAAA,EACA3B,aAAAA,EACAtD,SAAUL,EAAAA,cAAAA,MACZ,OALFe,EAAW,EAAH,4CAOSC,EAAAA,GAAAA,WAAAA,8BAA4C,CACzDuD,WAAYE,EACZa,aAAAA,EACA3B,aAAAA,EACAtD,SAAUL,EAAAA,cAAAA,MACZ,OALFe,EAAW,EAAH,sCAQG,QARH,EAQLA,SAAQ,OAAO,QAAP,EAAR,EAAUpI,aAAK,WAAP,EAAR,EAAiB0K,SAAO,4CAClC,+CAxxBL,iFAwxBK,EApxBwB,CAAShR","sources":["webpack://@deriv/cfd/webpack/universalModuleDefinition","webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/cfd-config.ts","webpack://@deriv/cfd/external umd \"@deriv/shared\"","webpack://@deriv/cfd/external umd \"@deriv/translations\"","webpack://@deriv/cfd/external umd \"mobx\"","webpack://@deriv/cfd/webpack/bootstrap","webpack://@deriv/cfd/webpack/runtime/compat get default export","webpack://@deriv/cfd/webpack/runtime/define property getters","webpack://@deriv/cfd/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/cfd/./src/Stores/base-store.js","webpack://@deriv/cfd/./src/Stores/Modules/CFD/cfd-store.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"mobx\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/shared\", \"@deriv/translations\", \"mobx\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/cfd\"] = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"mobx\"));\n\telse\n\t\troot[\"@deriv/cfd\"] = factory(root[\"@deriv/shared\"], root[\"@deriv/translations\"], root[\"mobx\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__) => {\nreturn ","import { localize } from '@deriv/translations';\nimport { Jurisdiction } from '@deriv/shared';\n\nexport type TDxCompanies = ReturnType<typeof getDxCompanies>;\nexport type TMtCompanies = ReturnType<typeof getMtCompanies>;\nexport type TDerivezCompanies = ReturnType<typeof getDerivezCompanies>;\nexport type TCTraderCompanies = ReturnType<typeof getCTraderCompanies>;\n\nexport const getDxCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('CFDs'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: localize('Financial'),\n    };\n    return {\n        demo: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getCTraderCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('All'),\n    };\n    return {\n        demo: {\n            all: {\n                ctrader_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('All'),\n                short_title: all_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getMtCompanies = (is_eu: boolean) => {\n    const all_config = {\n        account_type: '',\n        leverage: 100,\n        short_title: localize('Swap-Free'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: is_eu ? localize('CFDs') : localize('Financial'),\n    };\n    const financial_stp_config = {\n        account_type: 'financial_stp',\n        leverage: 100,\n        short_title: localize('Financial STP'),\n    };\n    return {\n        demo: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free SVG'),\n                short_title: localize('Swap-Free SVG'),\n            },\n            derivez: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Demo'),\n                short_title: localize('cTrader'),\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            financial_demo: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial SVG'),\n                short_title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Demo Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Real'),\n                short_title: localize('cTrader'),\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            derivez: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_bvi: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived BVI'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_v: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived Vanuatu'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_bvi: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial BVI'),\n                short_title: financial_config.short_title,\n            },\n            financial_fx: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Labuan'),\n                short_title: financial_config.short_title,\n            },\n            financial_v: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Vanuatu'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getDerivezCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 1000,\n        short_title: localize('CFDs'),\n    };\n    return {\n        demo: {\n            all: {\n                derivez_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                derivez_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getFormattedJurisdictionCode = (jurisdiction_code: string) => {\n    let formatted_label = '';\n\n    switch (jurisdiction_code) {\n        case Jurisdiction.SVG:\n            formatted_label = localize('SVG');\n            break;\n        case Jurisdiction.BVI:\n            formatted_label = localize('BVI');\n            break;\n        case Jurisdiction.LABUAN:\n            formatted_label = localize('Labuan');\n            break;\n        case Jurisdiction.VANUATU:\n            formatted_label = localize('Vanuatu');\n            break;\n        default:\n            formatted_label = jurisdiction_code?.toUpperCase();\n            break;\n    }\n\n    return formatted_label;\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { action, intercept, makeObservable, observable, reaction, toJS, when } from 'mobx';\n\nimport { isEmptyObject, isProduction, Validator } from '@deriv/shared';\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n\n    validation_errors = {};\n\n    validation_rules = {};\n\n    preSwitchAccountDisposer = null;\n    pre_switch_account_listener = null;\n\n    switchAccountDisposer = null;\n    switch_account_listener = null;\n\n    logoutDisposer = null;\n    logout_listener = null;\n\n    clientInitDisposer = null;\n    client_init_listener = null;\n\n    networkStatusChangeDisposer = null;\n    network_status_change_listener = null;\n\n    themeChangeDisposer = null;\n    theme_change_listener = null;\n\n    realAccountSignupEndedDisposer = null;\n    real_account_signup_ended_listener = null;\n\n    partial_fetch_time = 0;\n\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {}) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage =\n            (local_storage_properties && local_storage_properties.length) ||\n            (session_storage_properties && session_storage_properties.length);\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties) {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties && properties.length) {\n            snapshot = properties.reduce((result, p) => Object.assign(result, { [p]: snapshot[p] }), {});\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties, storage) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n        const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName, messages) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules = {}) {\n        Object.keys(rules).forEach(key => {\n            this.addRule(key, rules[key]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule(property, rules) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty(property, value) {\n        const trigger = this.validation_rules[property].trigger;\n        const inputs = { [property]: value !== undefined ? value : this[property] };\n        const validation_rules = { [property]: this.validation_rules[property].rules || [] };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n        }\n\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener) {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener) {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener) {\n        this.logoutDisposer = when(\n            () => this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener) {\n        this.clientInitDisposer = when(\n            () => this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener) {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener) {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener) {\n        this.realAccountSignupEndedDisposer = when(\n            () => this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid, ...reactions) {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = false;\n        }\n    }\n}\n","import { action, computed, observable, reaction, runInAction, makeObservable, override } from 'mobx';\nimport { getAccountListKey, getAccountTypeFields, CFD_PLATFORMS, WS, Jurisdiction } from '@deriv/shared';\nimport BaseStore from '../../base-store';\nimport { getDxCompanies, getMtCompanies, getDerivezCompanies } from './Helpers/cfd-config';\n\nexport default class CFDStore extends BaseStore {\n    is_compare_accounts_visible = false;\n    is_cfd_personal_details_modal_visible = false;\n    is_jurisdiction_modal_visible = false;\n    is_mt5_trade_modal_visible = false;\n    jurisdiction_selected_shortcode = '';\n\n    account_type = {\n        category: '',\n        type: '',\n    };\n\n    mt5_trade_account = {};\n    new_account_response = {};\n    map_type = {};\n    has_cfd_error = false;\n    error_message = '';\n\n    is_account_being_created = false;\n    is_cfd_success_dialog_enabled = false;\n    is_mt5_financial_stp_modal_open = false;\n    is_cfd_password_modal_enabled = false;\n\n    current_account = undefined; // this is a tmp value, don't rely on it, unless you set it first.\n\n    error_type = undefined;\n\n    is_cfd_verification_modal_visible = false;\n    dxtrade_tokens = {\n        demo: '',\n        real: '',\n    };\n    derivez_tokens = {\n        demo: '',\n        real: '',\n    };\n\n    ctrader_tokens = {\n        demo: '',\n        real: '',\n    };\n\n    real_synthetic_accounts_existing_data = [];\n    real_financial_accounts_existing_data = [];\n    real_swapfree_accounts_existing_data = [];\n\n    constructor({ root_store }) {\n        super({ root_store });\n\n        makeObservable(this, {\n            is_compare_accounts_visible: observable,\n            is_cfd_personal_details_modal_visible: observable,\n            is_jurisdiction_modal_visible: observable,\n            is_mt5_trade_modal_visible: observable,\n            jurisdiction_selected_shortcode: observable,\n            account_type: observable,\n            mt5_trade_account: observable,\n            new_account_response: observable,\n            map_type: observable,\n            has_cfd_error: observable,\n            error_message: observable,\n            is_account_being_created: observable,\n            is_cfd_success_dialog_enabled: observable,\n            is_mt5_financial_stp_modal_open: observable,\n            is_cfd_password_modal_enabled: observable,\n            current_account: observable,\n            is_cfd_verification_modal_visible: observable,\n            error_type: observable,\n            dxtrade_tokens: observable,\n            ctrader_tokens: observable,\n            derivez_tokens: observable,\n            account_title: computed,\n            current_list: computed,\n            has_created_account_for_selected_jurisdiction: computed,\n            has_submitted_cfd_personal_details: computed,\n            onMount: action.bound,\n            onUnmount: override,\n            checkShouldOpenAccount: action.bound,\n            realAccountSignupEndListener: action.bound,\n            resetFormErrors: action.bound,\n            clearCFDError: action.bound,\n            createCFDAccount: action.bound,\n            disableCFDPasswordModal: action.bound,\n            enableCFDPasswordModal: action.bound,\n            getName: action.bound,\n            openMT5Account: action.bound,\n            openCFDAccount: action.bound,\n            beginRealSignupForMt5: action.bound,\n            enableMt5FinancialStpModal: action.bound,\n            setAccountType: action.bound,\n            setCurrentAccount: action.bound,\n            setMT5TradeAccount: action.bound,\n            setIsAccountBeingCreated: action.bound,\n            setError: action.bound,\n            setCFDNewAccount: action.bound,\n            setCFDSuccessDialog: action.bound,\n            getAccountStatus: action.bound,\n            creatMT5Password: action.bound,\n            submitMt5Password: action.bound,\n            createCFDPassword: action.bound,\n            submitCFDPassword: action.bound,\n            toggleCompareAccountsModal: action.bound,\n            getRealSyntheticAccountsExistingData: action.bound,\n            getRealFinancialAccountsExistingData: action.bound,\n            getRealSwapfreeAccountsExistingData: action.bound,\n            toggleJurisdictionModal: action.bound,\n            toggleMT5TradeModal: action.bound,\n            disableMt5FinancialStpModal: action.bound,\n            topUpVirtual: action.bound,\n            sendVerifyEmail: action.bound,\n            setJurisdictionSelectedShortcode: action.bound,\n            toggleCFDVerificationModal: action.bound,\n            setDxtradeToken: action.bound,\n            setCTraderToken: action.bound,\n            loadDxtradeTokens: action.bound,\n            loadCTraderTokens: action.bound,\n            setDerivezToken: action.bound,\n            loadDerivezTokens: action.bound,\n        });\n\n        // reaction(\n        //     () => [this.root_store.client.dxtrade_accounts_list],\n        //     () => {\n        //         if (this.root_store.client.dxtrade_accounts_list.length > 0) {\n        //             this.loadDxtradeTokens();\n        //         }\n        //     }\n        // );\n\n        reaction(\n            () => [this.root_store.client.derivez_accounts_list],\n            () => {\n                if (this.root_store.client.derivez_accounts_list.length > 0) {\n                    this.loadDerivezTokens();\n                }\n            }\n        );\n\n        reaction(\n            () => [this.root_store.client.ctrader_accounts_list],\n            () => {\n                if (this.root_store.client.ctrader_accounts_list.length > 0) {\n                    this.loadCTraderTokens();\n                }\n            }\n        );\n    }\n\n    get account_title() {\n        return this.account_type.category\n            ? getMtCompanies(this.root_store.traders_hub.show_eu_related_content)[this.account_type.category][\n                  this.account_type.type\n              ].title\n            : '';\n    }\n\n    get has_submitted_cfd_personal_details() {\n        const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n            this.root_store.client.account_settings;\n        return !!(citizen && place_of_birth && tax_residence && tax_identification_number && account_opening_reason);\n    }\n\n    get current_list() {\n        const list = {};\n        const show_eu_related_content = this.root_store.traders_hub.show_eu_related_content;\n        this.root_store.client.mt5_login_list\n            .filter(acc =>\n                show_eu_related_content\n                    ? acc.landing_company_short === 'maltainvest'\n                    : acc.landing_company_short !== 'maltainvest'\n            )\n            .forEach(account => {\n                // e.g. mt5.real.financial_stp\n                list[getAccountListKey(account, CFD_PLATFORMS.MT5, account.landing_company_short)] = {\n                    ...account,\n                };\n            });\n\n        this.root_store.client.dxtrade_accounts_list.forEach(account => {\n            // e.g. dxtrade.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DXTRADE)] = {\n                ...account,\n            };\n        });\n        this.root_store.client.ctrader_accounts_list.forEach(account => {\n            list[getAccountListKey(account, CFD_PLATFORMS.CTRADER)] = {\n                ...account,\n            };\n        });\n\n        this.root_store.client.derivez_accounts_list.forEach(account => {\n            // e.g. derivez.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DERIVEZ)] = {\n                ...account,\n            };\n        });\n\n        return list;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get mt5_companies() {\n        return getMtCompanies(this.root_store.client.is_eu);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get dxtrade_companies() {\n        return getDxCompanies();\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get derivez_companies() {\n        return getDerivezCompanies();\n    }\n\n    get has_created_account_for_selected_jurisdiction() {\n        switch (this.account_type.type) {\n            case 'synthetic':\n                return this.real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            case 'all':\n                return this.real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            default:\n                return this.real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n        }\n    }\n\n    onMount() {\n        this.checkShouldOpenAccount();\n        this.onRealAccountSignupEnd(this.realAccountSignupEndListener);\n        this.root_store.ui.is_cfd_page = true;\n    }\n\n    onUnmount() {\n        this.disposeRealAccountSignupEnd();\n        this.root_store.ui.is_cfd_page = false;\n    }\n\n    // other platforms can redirect to here using account switcher's `Add` account button\n    // so in that case we should open the corresponding account opening modal on load/component update\n    checkShouldOpenAccount() {\n        const account_type = sessionStorage.getItem('open_cfd_account_type');\n        if (account_type) {\n            const [category, platform, type, set_password] = account_type.split('.');\n            this.createCFDAccount({ category, platform, type, set_password });\n            sessionStorage.removeItem('open_cfd_account_type');\n        }\n    }\n\n    setIsAccountBeingCreated(is_account_being_created) {\n        this.is_account_being_created = is_account_being_created;\n    }\n\n    realAccountSignupEndListener() {\n        const post_signup = JSON.parse(sessionStorage.getItem('post_real_account_signup'));\n        if (post_signup && post_signup.category && post_signup.type) {\n            sessionStorage.removeItem('post_real_account_signup');\n            this.enableCFDPasswordModal();\n        }\n        return Promise.resolve();\n    }\n\n    resetFormErrors() {\n        this.error_message = '';\n        this.error_type = undefined;\n        this.has_cfd_error = false;\n    }\n\n    clearCFDError() {\n        this.resetFormErrors();\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    async createCFDAccount({ category, platform, type, set_password }) {\n        this.clearCFDError();\n        this.setAccountType({\n            category,\n            type,\n        });\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (category === 'real') {\n                this.realCFDSignup(set_password);\n            } else {\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.CTRADER) {\n            if (this.account_type.category === 'demo') {\n                this.setJurisdictionSelectedShortcode('svg');\n                this.setIsAccountBeingCreated(true);\n            }\n            const account_creation_values = {\n                platform,\n                account_type: this.account_type.category,\n                market_type: this.account_type.type,\n            };\n            const response = await this.openCFDAccount(account_creation_values);\n            if (!response.error) {\n                this.setError(false);\n                this.enableCFDPasswordModal();\n                this.setCFDSuccessDialog(true);\n\n                const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(\n                    CFD_PLATFORMS.CTRADER\n                );\n                this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n                WS.transferBetweenAccounts();\n                this.setIsAccountBeingCreated(false);\n            } else {\n                this.setError(true, response.error);\n                this.setIsAccountBeingCreated(false);\n            }\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (category === 'real') {\n                this.toggleJurisdictionModal();\n            } else {\n                if (this.root_store.traders_hub.show_eu_related_content) {\n                    this.setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                } else this.setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.DERIVEZ) {\n            this.setIsAccountBeingCreated(true);\n            this.setJurisdictionSelectedShortcode('svg');\n            const values = {\n                platform,\n                account_type: this.account_type.category,\n                market_type: this.account_type.type,\n                company: this.jurisdiction_selected_shortcode,\n            };\n            const response = await this.openCFDAccount(values);\n            if (!response.error) {\n                this.enableCFDPasswordModal();\n                this.setCFDSuccessDialog(true);\n                const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n                this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n                this.setCFDNewAccount(response.trading_platform_new_account);\n                this.setIsAccountBeingCreated(false);\n            } else {\n                this.setError(true, response.error);\n                this.setIsAccountBeingCreated(false);\n            }\n        }\n    }\n\n    demoCFDSignup() {\n        this.enableCFDPasswordModal();\n    }\n\n    disableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    enableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = true;\n    }\n\n    getName() {\n        const { first_name } = this.root_store.client.account_settings && this.root_store.client.account_settings;\n        const title = this.mt5_companies[this.account_type.category][this.account_type.type].title;\n\n        // First name is not set when user has no real account\n        return first_name ? [first_name, title].join(' ') : title;\n    }\n\n    openMT5Account(values) {\n        const name = this.getName();\n        const leverage = this.mt5_companies[this.account_type.category][this.account_type.type].leverage;\n        const type_request = getAccountTypeFields(this.account_type);\n        const { address_line_1, address_line_2, address_postcode, address_city, address_state, country_code, phone } =\n            this.root_store.client.account_settings;\n\n        return WS.mt5NewAccount({\n            mainPassword: values.password,\n            email: this.root_store.client.email_address,\n            leverage,\n            name,\n            address: address_line_1 || address_line_2,\n            city: address_city,\n            country: country_code,\n            phone,\n            state: address_state,\n            zipCode: address_postcode,\n            ...(this.account_type.type === 'all' ? { sub_account_category: 'swap_free' } : {}),\n            ...(values.server ? { server: values.server } : {}),\n            ...(this.jurisdiction_selected_shortcode ? { company: this.jurisdiction_selected_shortcode } : {}),\n            ...(this.jurisdiction_selected_shortcode !== Jurisdiction.LABUAN\n                ? type_request\n                : {\n                      account_type: 'financial',\n                      mt5_account_type: 'financial_stp',\n                  }),\n        });\n    }\n\n    openCFDAccount(values) {\n        return WS.tradingPlatformNewAccount({\n            password: CFD_PLATFORMS.DXTRADE ? values.password : '',\n            platform: values.platform,\n            account_type: this.account_type.category,\n            market_type:\n                this.account_type.type === 'dxtrade' ||\n                this.account_type.type === 'cTrader' ||\n                this.account_type.type === 'derivez'\n                    ? 'all'\n                    : this.account_type.type,\n            company: CFD_PLATFORMS.DERIVEZ ? this.jurisdiction_selected_shortcode : '',\n        });\n    }\n\n    beginRealSignupForMt5() {\n        sessionStorage.setItem('post_real_account_signup', JSON.stringify(this.account_type));\n        this.root_store.ui.openRealAccountSignup('svg');\n    }\n\n    realCFDSignup(set_password) {\n        switch (this.account_type.type) {\n            case 'financial':\n                this.enableCFDPasswordModal();\n                break;\n            case 'financial_stp':\n                this.root_store.client.fetchResidenceList();\n                this.root_store.client.fetchStatesList();\n                this.root_store.client.fetchAccountSettings();\n                if (set_password) this.enableCFDPasswordModal();\n                else this.enableMt5FinancialStpModal();\n                break;\n            case 'synthetic':\n            case 'dxtrade':\n            case 'all':\n                this.enableCFDPasswordModal();\n                break;\n            default:\n                throw new Error('Cannot determine mt5 account signup.');\n        }\n    }\n\n    enableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = true;\n    }\n\n    setAccountType(account_type) {\n        this.account_type = account_type;\n    }\n\n    setCurrentAccount(data, meta) {\n        this.current_account = {\n            ...meta,\n            ...data,\n        };\n    }\n\n    setMT5TradeAccount(mt5_trade_account) {\n        this.mt5_trade_account = mt5_trade_account;\n    }\n\n    setError(state, obj) {\n        this.has_cfd_error = state;\n        this.error_message = obj ? obj.message : '';\n        this.error_type = obj?.code ?? undefined;\n    }\n\n    setCFDNewAccount(cfd_new_account) {\n        this.new_account_response = cfd_new_account;\n    }\n\n    setCFDSuccessDialog(value) {\n        this.is_cfd_success_dialog_enabled = !!value;\n    }\n\n    async getAccountStatus(platform) {\n        const should_load_account_status =\n            (platform === CFD_PLATFORMS.MT5 && this.root_store.client.is_mt5_password_not_set) ||\n            (platform === CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set);\n\n        if (should_load_account_status) {\n            await WS.getAccountStatus();\n        }\n    }\n\n    async creatMT5Password(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.MT5,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n        return false;\n    }\n\n    async submitMt5Password(values, actions) {\n        if (this.root_store.client.is_mt5_password_not_set) {\n            const has_error = await this.creatMT5Password(values, actions);\n            if (has_error) return;\n        }\n\n        this.resetFormErrors();\n        const response = await this.openMT5Account(values);\n        if (!response.error) {\n            actions.setStatus({ success: true });\n            actions.setSubmitting(false);\n            this.setError(false);\n            this.setCFDSuccessDialog(true);\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n\n            const mt5_login_list_response = await WS.authorized.mt5LoginList();\n            this.root_store.client.responseMt5LoginList(mt5_login_list_response);\n\n            WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n            this.root_store.client.responseMT5TradingServers(await WS.tradingServers(CFD_PLATFORMS.MT5));\n            this.setCFDNewAccount(response.mt5_new_account);\n        } else {\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n        }\n    }\n\n    async createCFDPassword(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.DXTRADE,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n\n        return false;\n    }\n\n    async submitCFDPassword(values, actions) {\n        if (CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set) {\n            const has_error = await this.createCFDPassword(values, actions);\n            if (has_error) return;\n        }\n\n        const response = await this.openCFDAccount(values);\n\n        if (response.error) {\n            await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return;\n        }\n\n        actions.setStatus({ success: true });\n        actions.setSubmitting(false);\n        this.setError(false);\n        this.setCFDSuccessDialog(true);\n        await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n\n        const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n        this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n\n        WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n        this.setCFDNewAccount(response.trading_platform_new_account);\n    }\n\n    toggleCompareAccountsModal() {\n        this.is_compare_accounts_visible = !this.is_compare_accounts_visible;\n    }\n\n    getRealSyntheticAccountsExistingData(real_synthetic_accounts_existing_data) {\n        this.real_synthetic_accounts_existing_data = real_synthetic_accounts_existing_data;\n    }\n\n    getRealFinancialAccountsExistingData(real_financial_accounts_existing_data) {\n        this.real_financial_accounts_existing_data = real_financial_accounts_existing_data;\n    }\n\n    getRealSwapfreeAccountsExistingData(real_swapfree_accounts_existing_data) {\n        this.real_swapfree_accounts_existing_data = real_swapfree_accounts_existing_data;\n    }\n\n    toggleJurisdictionModal() {\n        this.is_jurisdiction_modal_visible = !this.is_jurisdiction_modal_visible;\n    }\n\n    toggleMT5TradeModal() {\n        this.is_mt5_trade_modal_visible = !this.is_mt5_trade_modal_visible;\n    }\n\n    disableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = false;\n    }\n\n    async topUpVirtual(platform) {\n        this.root_store.ui.setTopUpInProgress(true);\n        let response;\n\n        switch (platform) {\n            case CFD_PLATFORMS.DXTRADE: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.CTRADER: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.CTRADER,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.MT5: {\n                response = await WS.authorized.mt5Deposit({\n                    to_mt5: this.current_account.login,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.DERIVEZ: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.DERIVEZ,\n                    to_account: this.current_account.login,\n                });\n                break;\n            }\n            default: {\n                response.error = 'Invalid platform';\n                break;\n            }\n        }\n\n        if (!response.error) {\n            let new_balance;\n            switch (platform) {\n                case CFD_PLATFORMS.DXTRADE: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DXTRADE)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.dxtrade_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.CTRADER: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.CTRADER)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.ctrader_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.MT5: {\n                    await WS.authorized.mt5LoginList().then(this.root_store.client.responseMt5LoginList);\n\n                    new_balance = this.root_store.client.mt5_login_list.find(\n                        item => item.login === this.current_account.login\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.DERIVEZ: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DERIVEZ)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.derivez_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n            runInAction(() => {\n                // Get new current account\n                this.root_store.ui.is_top_up_virtual_open = false;\n                this.current_account.balance = new_balance;\n            });\n            setTimeout(() => {\n                runInAction(() => {\n                    this.root_store.ui.is_top_up_virtual_success = true;\n                });\n            }, 250);\n        } else {\n            // eslint-disable-next-line no-console\n            console.error(response);\n        }\n        this.root_store.ui.setTopUpInProgress(false);\n    }\n\n    sendVerifyEmail() {\n        return WS.verifyEmail(this.root_store.client.email, 'trading_platform_investor_password_reset');\n    }\n\n    setDxtradeToken(response, server) {\n        if (!response.error) {\n            const { dxtrade } = response.service_token;\n            this.dxtrade_tokens[server] = dxtrade.token;\n        }\n    }\n\n    setCTraderToken(response, server) {\n        if (!response.error) {\n            const { ctrader } = response.service_token;\n            this.ctrader_tokens[server] = ctrader.token;\n        }\n    }\n\n    setDerivezToken(response, server) {\n        if (!response.error) {\n            const { pandats } = response.service_token;\n            this.derivez_tokens[server] = pandats.token;\n        }\n    }\n\n    loadDxtradeTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.dxtrade_accounts_list.some(\n                account => account.account_type === account_type\n            );\n            if (!this.dxtrade_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DXTRADE, account_type).then(response =>\n                    this.setDxtradeToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    loadCTraderTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.ctrader_accounts_list.some(\n                account => account.account_type === account_type\n            );\n            if (!this.ctrader_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.CTRADER, account_type).then(response =>\n                    this.setCTraderToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    loadDerivezTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.derivez_accounts_list.some(\n                account => account.account_type === account_type\n            );\n\n            if (!this.derivez_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DERIVEZ, account_type).then(response =>\n                    this.setDerivezToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    static async changePassword({ login, old_password, new_password, password_type }) {\n        let response;\n\n        if (password_type === 'investor') {\n            response = await WS.authorized.tradingPlatformInvestorPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        } else {\n            response = await WS.authorized.tradingPlatformPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        }\n\n        return response?.error?.message;\n    }\n\n    setJurisdictionSelectedShortcode(shortcode) {\n        this.jurisdiction_selected_shortcode = shortcode;\n    }\n\n    toggleCFDVerificationModal() {\n        this.is_cfd_verification_modal_visible = !this.is_cfd_verification_modal_visible;\n    }\n}\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__WEBPACK_EXTERNAL_MODULE_mobx__","getDxCompanies","all_config","account_type","leverage","short_title","localize","synthetic_config","financial_config","demo","all","dxtrade_account_type","title","synthetic","financial","real","dxtrade","mt5_account_type","getMtCompanies","is_eu","financial_stp_config","all_svg","derivez","ctrader","financial_demo","synthetic_svg","financial_svg","financial_stp","synthetic_bvi","synthetic_v","financial_bvi","financial_fx","financial_v","getDerivezCompanies","derivez_account_type","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","BaseStore","options","validation_errors","validation_rules","preSwitchAccountDisposer","pre_switch_account_listener","switchAccountDisposer","switch_account_listener","logoutDisposer","logout_listener","clientInitDisposer","client_init_listener","networkStatusChangeDisposer","network_status_change_listener","themeChangeDisposer","theme_change_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","partial_fetch_time","makeObservable","this","observable","retrieveFromStorage","action","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","onUnmount","assertHasValidCache","root_store","local_storage_properties","session_storage_properties","store_name","writable","length","Error","value","setTimeout","setupReactionForLocalStorage","setupReactionForSessionStorage","properties","snapshot","toJS","isEmptyObject","reduce","result","p","assign","reaction","map","i","saveToStorage","STORAGES","LOCAL_STORAGE","SESSION_STORAGE","storage","JSON","stringify","getSnapshot","localStorage","setItem","sessionStorage","local_storage_snapshot","parse","getItem","session_storage_snapshot","keys","forEach","k","propertyName","messages","filter","x","includes","concat","rules","property","intercept","change","newValue","trigger","inputs","validator","Validator","isPassed","errors","error","listener","when","client","switch_broadcast","then","switchEndSignal","isProduction","console","pre_switch_broadcast","setPreSwitchAccount","has_logged_out","setLogout","initialized_broadcast","setInitialized","common","is_network_online","is_online","ui","is_dark_mode_on","has_real_account_signup_ended","setRealAccountSignupEnd","loginid","reactions","act","freeze","Symbol","CFDStore","is_compare_accounts_visible","is_cfd_personal_details_modal_visible","is_jurisdiction_modal_visible","is_mt5_trade_modal_visible","jurisdiction_selected_shortcode","category","type","mt5_trade_account","new_account_response","map_type","has_cfd_error","error_message","is_account_being_created","is_cfd_success_dialog_enabled","is_mt5_financial_stp_modal_open","is_cfd_password_modal_enabled","current_account","error_type","is_cfd_verification_modal_visible","dxtrade_tokens","derivez_tokens","ctrader_tokens","real_synthetic_accounts_existing_data","real_financial_accounts_existing_data","real_swapfree_accounts_existing_data","account_title","computed","current_list","has_created_account_for_selected_jurisdiction","has_submitted_cfd_personal_details","onMount","override","checkShouldOpenAccount","realAccountSignupEndListener","resetFormErrors","clearCFDError","createCFDAccount","disableCFDPasswordModal","enableCFDPasswordModal","getName","openMT5Account","openCFDAccount","beginRealSignupForMt5","enableMt5FinancialStpModal","setAccountType","setCurrentAccount","setMT5TradeAccount","setIsAccountBeingCreated","setError","setCFDNewAccount","setCFDSuccessDialog","getAccountStatus","creatMT5Password","submitMt5Password","createCFDPassword","submitCFDPassword","toggleCompareAccountsModal","getRealSyntheticAccountsExistingData","getRealFinancialAccountsExistingData","getRealSwapfreeAccountsExistingData","toggleJurisdictionModal","toggleMT5TradeModal","disableMt5FinancialStpModal","topUpVirtual","sendVerifyEmail","setJurisdictionSelectedShortcode","toggleCFDVerificationModal","setDxtradeToken","setCTraderToken","loadDxtradeTokens","loadCTraderTokens","setDerivezToken","loadDerivezTokens","derivez_accounts_list","ctrader_accounts_list","traders_hub","show_eu_related_content","account_settings","citizen","place_of_birth","tax_residence","tax_identification_number","account_opening_reason","list","mt5_login_list","acc","landing_company_short","account","getAccountListKey","CFD_PLATFORMS","dxtrade_accounts_list","some","is_cfd_page","split","platform","set_password","removeItem","post_signup","Promise","resolve","realCFDSignup","demoCFDSignup","account_creation_values","market_type","response","WS","trading_platform_accounts_list_response","responseTradingPlatformAccountsList","Jurisdiction","values","company","trading_platform_new_account","first_name","mt5_companies","join","name","type_request","getAccountTypeFields","address_line_1","address_line_2","address_postcode","address_city","address_state","country_code","phone","mainPassword","password","email","email_address","address","city","country","state","zipCode","sub_account_category","server","openRealAccountSignup","fetchResidenceList","fetchStatesList","fetchAccountSettings","data","meta","message","code","cfd_new_account","is_mt5_password_not_set","is_dxtrade_password_not_set","actions","new_password","resetForm","setSubmitting","setStatus","success","mt5_login_list_response","responseMt5LoginList","responseMT5TradingServers","mt5_new_account","setTopUpInProgress","trading_platform_deposit","to_account","account_id","to_mt5","login","new_balance","find","item","balance","runInAction","is_top_up_virtual_open","is_top_up_virtual_success","service_token","token","pandats","has_existing_account","shortcode","old_password","password_type"],"sourceRoot":""}