/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["main~cashier_dist_cashier_js_cashier-store_js_77e8332f"],{

/***/ "../../cashier/dist/cashier/js/cashier-store.js":
/*!******************************************************!*\
  !*** ../../cashier/dist/cashier/js/cashier-store.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.js\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.js\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! mobx */ \"../../../node_modules/mobx/lib/mobx.module.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__, __WEBPACK_EXTERNAL_MODULE_react__) {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Stores/cashier-store.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ CashierStore)\\n});\\n\\n// EXTERNAL MODULE: external \\\"mobx\\\"\\nvar external_mobx_ = __webpack_require__(\\\"mobx\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n;// CONCATENATED MODULE: ./Stores/account-prompt-dialog-store.js\\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;\\n\\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar AccountPromptDialogStore = (_dec = external_mobx_.action.bound, _dec2 = external_mobx_.action.bound, _dec3 = external_mobx_.action.bound, _dec4 = external_mobx_.action.bound, _dec5 = external_mobx_.action.bound, _dec6 = external_mobx_.action.bound, (_class = /*#__PURE__*/function () {\\n  function AccountPromptDialogStore(root_store) {\\n    _classCallCheck(this, AccountPromptDialogStore);\\n\\n    _initializerDefineProperty(this, \\\"should_show\\\", _descriptor, this);\\n\\n    _initializerDefineProperty(this, \\\"is_confirmed\\\", _descriptor2, this);\\n\\n    _initializerDefineProperty(this, \\\"last_location\\\", _descriptor3, this);\\n\\n    _initializerDefineProperty(this, \\\"current_location\\\", _descriptor4, this);\\n\\n    this.root_store = root_store;\\n  }\\n\\n  _createClass(AccountPromptDialogStore, [{\\n    key: \\\"shouldNavigateAfterPrompt\\\",\\n    value: function shouldNavigateAfterPrompt(next_location, current_location) {\\n      if (!this.is_confirmed) {\\n        this.last_location = next_location;\\n        this.should_show = true;\\n        this.current_location = current_location;\\n      }\\n    }\\n  }, {\\n    key: \\\"resetLastLocation\\\",\\n    value: function resetLastLocation() {\\n      this.last_location = null;\\n    }\\n  }, {\\n    key: \\\"resetIsConfirmed\\\",\\n    value: function resetIsConfirmed() {\\n      this.is_confirmed = false;\\n    }\\n  }, {\\n    key: \\\"onConfirm\\\",\\n    value: function () {\\n      var _onConfirm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this$root_store, client, modules, accounts_list, has_fiat_account;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store = this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                accounts_list = modules.cashier.account_transfer.accounts_list;\\n                this.should_show = false;\\n                this.is_confirmed = true;\\n                has_fiat_account = accounts_list.some(function (x) {\\n                  return !x.is_crypto;\\n                });\\n\\n                if (!((0,shared_.isCryptocurrency)(client === null || client === void 0 ? void 0 : client.currency) && has_fiat_account)) {\\n                  _context.next = 8;\\n                  break;\\n                }\\n\\n                _context.next = 8;\\n                return this.doSwitch();\\n\\n              case 8:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function onConfirm() {\\n        return _onConfirm.apply(this, arguments);\\n      }\\n\\n      return onConfirm;\\n    }()\\n  }, {\\n    key: \\\"doSwitch\\\",\\n    value: function () {\\n      var _doSwitch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _this$root_store2, client, modules, _modules$cashier, account_transfer, general_store, non_crypto_accounts, loginid;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _this$root_store2 = this.root_store, client = _this$root_store2.client, modules = _this$root_store2.modules;\\n                _modules$cashier = modules.cashier, account_transfer = _modules$cashier.account_transfer, general_store = _modules$cashier.general_store;\\n                non_crypto_accounts = account_transfer.accounts_list.filter(function (x) {\\n                  return !x.is_crypto;\\n                });\\n                loginid = non_crypto_accounts.map(function (x) {\\n                  return x.value;\\n                })[0];\\n                _context2.next = 6;\\n                return client.switchAccount(loginid);\\n\\n              case 6:\\n                if (this.current_location === 'deposit') {\\n                  general_store.setIsDeposit(true);\\n                }\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function doSwitch() {\\n        return _doSwitch.apply(this, arguments);\\n      }\\n\\n      return doSwitch;\\n    }()\\n  }, {\\n    key: \\\"onCancel\\\",\\n    value: function onCancel() {\\n      this.should_show = false;\\n    }\\n  }, {\\n    key: \\\"continueRoute\\\",\\n    value: function continueRoute() {\\n      if (this.is_confirmed && this.last_location) {\\n        this.root_store.common.routeTo(this.last_location);\\n      }\\n    }\\n  }]);\\n\\n  return AccountPromptDialogStore;\\n}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \\\"should_show\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \\\"is_confirmed\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \\\"last_location\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \\\"current_location\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _applyDecoratedDescriptor(_class.prototype, \\\"shouldNavigateAfterPrompt\\\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \\\"shouldNavigateAfterPrompt\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"resetLastLocation\\\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \\\"resetLastLocation\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"resetIsConfirmed\\\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \\\"resetIsConfirmed\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onConfirm\\\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onConfirm\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onCancel\\\", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onCancel\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"continueRoute\\\", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, \\\"continueRoute\\\"), _class.prototype)), _class));\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n;// CONCATENATED MODULE: ./Constants/constants.js\\nvar containers = {\\n  account_transfer: 'account_transfer',\\n  deposit: 'deposit',\\n  payment_agent: 'payment_agent',\\n  payment_agent_transfer: 'payment_agent_transfer',\\n  withdraw: 'withdraw'\\n};\\nvar map_action = {\\n  withdraw: 'payment_withdraw',\\n  payment_agent: 'payment_agent_withdraw'\\n};\\n/* harmony default export */ const constants = ({\\n  containers: containers,\\n  map_action: map_action\\n});\\n;// CONCATENATED MODULE: ./Stores/error-store.js\\nvar error_store_dec, error_store_dec2, error_store_dec3, error_store_dec4, error_store_dec5, error_store_dec6, _dec7, error_store_class, error_store_descriptor, error_store_descriptor2, error_store_descriptor3, error_store_descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction error_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction error_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction error_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction error_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) error_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) error_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction error_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction error_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar ErrorStore = (error_store_dec = external_mobx_.action.bound, error_store_dec2 = external_mobx_.action.bound, error_store_dec3 = external_mobx_.action.bound, error_store_dec4 = external_mobx_.action.bound, error_store_dec5 = external_mobx_.action.bound, error_store_dec6 = external_mobx_.action.bound, _dec7 = external_mobx_.action.bound, (error_store_class = /*#__PURE__*/function () {\\n  function ErrorStore() {\\n    error_store_classCallCheck(this, ErrorStore);\\n\\n    error_store_initializerDefineProperty(this, \\\"message\\\", error_store_descriptor, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"code\\\", error_store_descriptor2, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"fields\\\", error_store_descriptor3, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"is_show_full_page\\\", error_store_descriptor4, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"onClickButton\\\", _descriptor5, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"is_ask_uk_funds_protection\\\", _descriptor6, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"is_self_exclusion_max_turnover_set\\\", _descriptor7, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"is_ask_authentication\\\", _descriptor8, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"is_ask_financial_risk_approval\\\", _descriptor9, this);\\n  }\\n\\n  error_store_createClass(ErrorStore, [{\\n    key: \\\"setErrorMessage\\\",\\n    value: function setErrorMessage(error, onClickButton, is_show_full_page) {\\n      // for errors that need to show a button, reset the form\\n      var error_object = _objectSpread({\\n        onClickButton: onClickButton,\\n        code: error.code,\\n        message: error.message,\\n        is_show_full_page: is_show_full_page || /InvalidToken|WrongResponse/.test(error.code)\\n      }, (0,shared_.getPropertyValue)(error, ['details', 'fields']) && {\\n        fields: error.details.fields\\n      });\\n\\n      this.onClickButton = error_object.onClickButton;\\n      this.code = error_object.code;\\n      this.message = error_object.message;\\n      this.is_show_full_page = error_object.is_show_full_page;\\n      this.fields = error_object.fields;\\n      this.is_ask_uk_funds_protection = error_object === null || error_object === void 0 ? void 0 : error_object.is_ask_uk_funds_protection;\\n      this.is_self_exclusion_max_turnover_set = error_object === null || error_object === void 0 ? void 0 : error_object.is_self_exclusion_max_turnover_set;\\n      this.is_ask_authentication = error_object === null || error_object === void 0 ? void 0 : error_object.is_ask_authentication;\\n      this.is_ask_financial_risk_approval = error_object === null || error_object === void 0 ? void 0 : error_object.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"handleCashierError\\\",\\n    value: function handleCashierError(error) {\\n      switch (error.code) {\\n        case 'ASK_TNC_APPROVAL':\\n          this.setErrorMessage(error, null, true);\\n          break;\\n\\n        case 'ASK_FIX_DETAILS':\\n          this.setErrorMessage(error, null, true);\\n          break;\\n\\n        case 'ASK_UK_FUNDS_PROTECTION':\\n          this.setIsAskUkFundsProtection(true);\\n          break;\\n\\n        case 'ASK_SELF_EXCLUSION_MAX_TURNOVER_SET':\\n          this.setIsSelfExclusionMaxTurnoverSet(true);\\n          break;\\n\\n        case 'ASK_AUTHENTICATE':\\n        case 'ASK_AGE_VERIFICATION':\\n          this.setIsAskAuthentication(true);\\n          break;\\n\\n        case 'ASK_FINANCIAL_RISK_APPROVAL':\\n          this.setIsAskFinancialRiskApproval(true);\\n          break;\\n\\n        default:\\n          this.setErrorMessage(error);\\n          this.setIsAskUkFundsProtection(false);\\n          this.setIsSelfExclusionMaxTurnoverSet(false);\\n          this.setIsAskAuthentication(false);\\n          this.setIsAskFinancialRiskApproval(false);\\n      }\\n    }\\n  }, {\\n    key: \\\"setMessage\\\",\\n    value: function setMessage(value) {\\n      this.message = value;\\n    }\\n  }, {\\n    key: \\\"setIsAskUkFundsProtection\\\",\\n    value: function setIsAskUkFundsProtection(value) {\\n      this.is_ask_uk_funds_protection = value;\\n    }\\n  }, {\\n    key: \\\"setIsSelfExclusionMaxTurnoverSet\\\",\\n    value: function setIsSelfExclusionMaxTurnoverSet(value) {\\n      this.is_self_exclusion_max_turnover_set = value;\\n    }\\n  }, {\\n    key: \\\"setIsAskAuthentication\\\",\\n    value: function setIsAskAuthentication(value) {\\n      this.is_ask_authentication = value;\\n    }\\n  }, {\\n    key: \\\"setIsAskFinancialRiskApproval\\\",\\n    value: function setIsAskFinancialRiskApproval(value) {\\n      this.is_ask_financial_risk_approval = value;\\n    }\\n  }]);\\n\\n  return ErrorStore;\\n}(), (error_store_descriptor = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"message\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), error_store_descriptor2 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"code\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), error_store_descriptor3 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"fields\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), error_store_descriptor4 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"is_show_full_page\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor5 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"onClickButton\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor6 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"is_ask_uk_funds_protection\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor7 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"is_self_exclusion_max_turnover_set\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor8 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"is_ask_authentication\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor9 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"is_ask_financial_risk_approval\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setErrorMessage\\\", [error_store_dec], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setErrorMessage\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"handleCashierError\\\", [error_store_dec2], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"handleCashierError\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setMessage\\\", [error_store_dec3], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setMessage\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setIsAskUkFundsProtection\\\", [error_store_dec4], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setIsAskUkFundsProtection\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setIsSelfExclusionMaxTurnoverSet\\\", [error_store_dec5], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setIsSelfExclusionMaxTurnoverSet\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setIsAskAuthentication\\\", [error_store_dec6], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setIsAskAuthentication\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setIsAskFinancialRiskApproval\\\", [_dec7], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setIsAskFinancialRiskApproval\\\"), error_store_class.prototype)), error_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/account-transfer-store.js\\nvar account_transfer_store_dec, account_transfer_store_dec2, account_transfer_store_dec3, account_transfer_store_dec4, account_transfer_store_dec5, account_transfer_store_dec6, account_transfer_store_dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, account_transfer_store_class, account_transfer_store_descriptor, account_transfer_store_descriptor2, account_transfer_store_descriptor3, account_transfer_store_descriptor4, account_transfer_store_descriptor5, account_transfer_store_descriptor6, account_transfer_store_descriptor7, account_transfer_store_descriptor8, account_transfer_store_descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;\\n\\nfunction account_transfer_store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction account_transfer_store_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { account_transfer_store_ownKeys(Object(source), true).forEach(function (key) { account_transfer_store_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { account_transfer_store_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction account_transfer_store_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \\\"undefined\\\" && arr[Symbol.iterator] || arr[\\\"@@iterator\\\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction account_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction account_transfer_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { account_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { account_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction account_transfer_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction account_transfer_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction account_transfer_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction account_transfer_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) account_transfer_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) account_transfer_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction account_transfer_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction account_transfer_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\n\\n\\nvar hasTransferNotAllowedLoginid = function hasTransferNotAllowedLoginid(loginid) {\\n  return loginid.startsWith('MX');\\n};\\n\\nvar getSelectedError = function getSelectedError(selected_value, is_from_account) {\\n  if (is_from_account) {\\n    return /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n      i18n_default_text: \\\"Transfer from {{selected_value}} is not allowed, Please choose another account from dropdown\\\",\\n      values: {\\n        selected_value: selected_value\\n      }\\n    });\\n  }\\n\\n  return /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Transfer to {{selected_value}} is not allowed, Please choose another account from dropdown\\\",\\n    values: {\\n      selected_value: selected_value\\n    }\\n  });\\n};\\n\\nvar AccountTransferStore = (account_transfer_store_dec = external_mobx_.action.bound, account_transfer_store_dec2 = external_mobx_.action.bound, account_transfer_store_dec3 = external_mobx_.action.bound, account_transfer_store_dec4 = external_mobx_.action.bound, account_transfer_store_dec5 = external_mobx_.action.bound, account_transfer_store_dec6 = external_mobx_.action.bound, account_transfer_store_dec7 = external_mobx_.action.bound, _dec8 = external_mobx_.action.bound, _dec9 = external_mobx_.action.bound, _dec10 = external_mobx_.action.bound, _dec11 = external_mobx_.action.bound, _dec12 = external_mobx_.action.bound, _dec13 = external_mobx_.action.bound, _dec14 = external_mobx_.action.bound, _dec15 = external_mobx_.action.bound, _dec16 = external_mobx_.action.bound, _dec17 = external_mobx_.action.bound, _dec18 = external_mobx_.action.bound, _dec19 = external_mobx_.action.bound, _dec20 = external_mobx_.action.bound, _dec21 = external_mobx_.action.bound, _dec22 = external_mobx_.action.bound, _dec23 = external_mobx_.action.bound, _dec24 = external_mobx_.action.bound, (account_transfer_store_class = /*#__PURE__*/function () {\\n  function AccountTransferStore(_ref) {\\n    var _this = this;\\n\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    account_transfer_store_classCallCheck(this, AccountTransferStore);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"accounts_list\\\", account_transfer_store_descriptor, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"container\\\", account_transfer_store_descriptor2, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"error\\\", account_transfer_store_descriptor3, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"has_no_account\\\", account_transfer_store_descriptor4, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"has_no_accounts_balance\\\", account_transfer_store_descriptor5, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"is_transfer_confirm\\\", account_transfer_store_descriptor6, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"is_transfer_successful\\\", account_transfer_store_descriptor7, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"is_mt5_transfer_in_progress\\\", account_transfer_store_descriptor8, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"minimum_fee\\\", account_transfer_store_descriptor9, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"receipt\\\", _descriptor10, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"selected_from\\\", _descriptor11, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"selected_to\\\", _descriptor12, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"account_transfer_amount\\\", _descriptor13, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"transfer_fee\\\", _descriptor14, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"transfer_limit\\\", _descriptor15, this);\\n\\n    this.requestTransferBetweenAccounts = /*#__PURE__*/function () {\\n      var _ref3 = account_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref2) {\\n        var amount, _this$root_store, client, modules, setLoading, is_logged_in, responseMt5LoginList, responseTradingPlatformAccountsList, setAccountStatus, setBalanceOtherAccounts, is_mt_transfer, currency, transfer_between_accounts, account_status_response;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                amount = _ref2.amount;\\n                _this$root_store = _this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                setLoading = modules.cashier.general_store.setLoading;\\n                is_logged_in = client.is_logged_in, responseMt5LoginList = client.responseMt5LoginList, responseTradingPlatformAccountsList = client.responseTradingPlatformAccountsList, setAccountStatus = client.setAccountStatus, setBalanceOtherAccounts = client.setBalanceOtherAccounts;\\n\\n                if (is_logged_in) {\\n                  _context.next = 6;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\", null);\\n\\n              case 6:\\n                setLoading(true);\\n\\n                _this.error.setErrorMessage('');\\n\\n                is_mt_transfer = _this.selected_from.is_mt || _this.selected_to.is_mt;\\n                if (is_mt_transfer) _this.setIsMT5TransferInProgress(true);\\n                currency = _this.selected_from.currency;\\n                _context.next = 13;\\n                return _this.WS.authorized.transferBetweenAccounts(_this.selected_from.value, _this.selected_to.value, currency, amount);\\n\\n              case 13:\\n                transfer_between_accounts = _context.sent;\\n                if (is_mt_transfer) _this.setIsMT5TransferInProgress(false);\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context.next = 24;\\n                  break;\\n                }\\n\\n                if (!(transfer_between_accounts.error.code === 'Fiat2CryptoTransferOverLimit')) {\\n                  _context.next = 21;\\n                  break;\\n                }\\n\\n                _context.next = 19;\\n                return _this.WS.authorized.getAccountStatus();\\n\\n              case 19:\\n                account_status_response = _context.sent;\\n\\n                if (!account_status_response.error) {\\n                  setAccountStatus(account_status_response.get_account_status);\\n                }\\n\\n              case 21:\\n                _this.error.setErrorMessage(transfer_between_accounts.error);\\n\\n                _context.next = 28;\\n                break;\\n\\n              case 24:\\n                _this.setReceiptTransfer({\\n                  amount: (0,shared_.formatMoney)(currency, amount, true)\\n                });\\n\\n                transfer_between_accounts.accounts.forEach(function (account) {\\n                  _this.setBalanceByLoginId(account.loginid, account.balance);\\n\\n                  if (account.loginid === _this.selected_from.value) {\\n                    _this.setBalanceSelectedFrom(account.balance);\\n                  } else if (account.loginid === _this.selected_to.value) {\\n                    _this.setBalanceSelectedTo(account.balance);\\n                  } // if one of the accounts was mt5\\n\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.MT5) {\\n                    Promise.all([_this.WS.mt5LoginList(), _this.WS.balanceAll()]).then(function (_ref4) {\\n                      var _ref5 = _slicedToArray(_ref4, 2),\\n                          mt5_login_list_response = _ref5[0],\\n                          balance_response = _ref5[1];\\n\\n                      // update the balance for account switcher by renewing the mt5_login_list response\\n                      responseMt5LoginList(mt5_login_list_response); // update total balance since MT5 total only comes in non-stream balance call\\n\\n                      setBalanceOtherAccounts(balance_response.balance);\\n                    });\\n                  } // if one of the accounts was dxtrade\\n\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.DXTRADE) {\\n                    Promise.all([_this.WS.tradingPlatformAccountsList(shared_.CFD_PLATFORMS.DXTRADE), _this.WS.balanceAll()]).then(function (_ref6) {\\n                      var _ref7 = _slicedToArray(_ref6, 2),\\n                          dxtrade_login_list_response = _ref7[0],\\n                          balance_response = _ref7[1];\\n\\n                      // update the balance for account switcher by renewing the dxtrade_login_list_response\\n                      responseTradingPlatformAccountsList(dxtrade_login_list_response); // update total balance since Dxtrade total only comes in non-stream balance call\\n\\n                      setBalanceOtherAccounts(balance_response.balance);\\n                    });\\n                  }\\n                });\\n\\n                _this.setAccountTransferAmount(null);\\n\\n                _this.setIsTransferConfirm(true);\\n\\n              case 28:\\n                setLoading(false);\\n                return _context.abrupt(\\\"return\\\", transfer_between_accounts);\\n\\n              case 30:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee);\\n      }));\\n\\n      return function (_x) {\\n        return _ref3.apply(this, arguments);\\n      };\\n    }();\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"resetAccountTransfer\\\", _descriptor16, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  account_transfer_store_createClass(AccountTransferStore, [{\\n    key: \\\"is_account_transfer_visible\\\",\\n    get: function get() {\\n      var _this$root_store$clie = this.root_store.client,\\n          has_maltainvest_account = _this$root_store$clie.has_maltainvest_account,\\n          landing_company_shortcode = _this$root_store$clie.landing_company_shortcode,\\n          residence = _this$root_store$clie.residence; // cashier Transfer account tab is hidden for iom clients\\n      // check for residence to hide the tab before creating a real money account\\n\\n      return residence !== 'im' && (landing_company_shortcode !== 'malta' || has_maltainvest_account);\\n    }\\n  }, {\\n    key: \\\"setBalanceByLoginId\\\",\\n    value: function setBalanceByLoginId(loginid, balance) {\\n      this.accounts_list.find(function (acc) {\\n        return loginid === acc.value;\\n      }).balance = balance;\\n    }\\n  }, {\\n    key: \\\"setBalanceSelectedFrom\\\",\\n    value: function setBalanceSelectedFrom(balance) {\\n      this.selected_from.balance = balance;\\n    }\\n  }, {\\n    key: \\\"setBalanceSelectedTo\\\",\\n    value: function setBalanceSelectedTo(balance) {\\n      this.selected_to.balance = balance;\\n    } // possible transfers:\\n    // 1. fiat to crypto & vice versa\\n    // 2. fiat to mt & vice versa\\n    // 3. crypto to mt & vice versa\\n\\n  }, {\\n    key: \\\"onMountAccountTransfer\\\",\\n    value: function () {\\n      var _onMountAccountTransfer = account_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _this$root_store2, client, modules, _modules$cashier$gene, onMountCommon, setLoading, active_accounts, is_logged_in, has_updated_account_balance, _this$accounts_list, transfer_between_accounts, cfd_transfer_to_login_id, obj_values;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _this$root_store2 = this.root_store, client = _this$root_store2.client, modules = _this$root_store2.modules;\\n                _modules$cashier$gene = modules.cashier.general_store, onMountCommon = _modules$cashier$gene.onMountCommon, setLoading = _modules$cashier$gene.setLoading;\\n                active_accounts = client.active_accounts, is_logged_in = client.is_logged_in;\\n                setLoading(true);\\n                this.onRemount = this.onMountAccountTransfer;\\n                _context2.next = 7;\\n                return onMountCommon();\\n\\n              case 7:\\n                _context2.next = 9;\\n                return this.WS.wait('website_status');\\n\\n              case 9:\\n                // check if some balance update has come in since the last mount\\n                has_updated_account_balance = this.has_no_accounts_balance && Object.keys(active_accounts).find(function (account) {\\n                  return !active_accounts[account].is_virtual && active_accounts[account].balance;\\n                });\\n\\n                if (has_updated_account_balance) {\\n                  this.setHasNoAccountsBalance(false);\\n                } // various issues happen when loading from cache\\n                // e.g. new account may have been created, transfer may have been done elsewhere, etc\\n                // so on load of this page just call it again\\n\\n\\n                if (!is_logged_in) {\\n                  _context2.next = 27;\\n                  break;\\n                }\\n\\n                _context2.next = 14;\\n                return this.WS.authorized.transferBetweenAccounts();\\n\\n              case 14:\\n                transfer_between_accounts = _context2.sent;\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context2.next = 19;\\n                  break;\\n                }\\n\\n                this.error.setErrorMessage(transfer_between_accounts.error, this.onMountAccountTransfer);\\n                setLoading(false);\\n                return _context2.abrupt(\\\"return\\\");\\n\\n              case 19:\\n                if (this.canDoAccountTransfer(transfer_between_accounts.accounts)) {\\n                  _context2.next = 21;\\n                  break;\\n                }\\n\\n                return _context2.abrupt(\\\"return\\\");\\n\\n              case 21:\\n                _context2.next = 23;\\n                return this.sortAccountsTransfer(transfer_between_accounts);\\n\\n              case 23:\\n                this.setTransferFee();\\n                this.setMinimumFee();\\n                this.setTransferLimit();\\n\\n                if (((_this$accounts_list = this.accounts_list) === null || _this$accounts_list === void 0 ? void 0 : _this$accounts_list.length) > 0) {\\n                  cfd_transfer_to_login_id = sessionStorage.getItem('cfd_transfer_to_login_id');\\n                  sessionStorage.removeItem('cfd_transfer_to_login_id');\\n                  obj_values = this.accounts_list.find(function (account) {\\n                    return account.value === cfd_transfer_to_login_id;\\n                  });\\n\\n                  if (obj_values) {\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      // check if selected to is not allowed account\\n                      obj_values.error = getSelectedError(obj_values.value);\\n                    }\\n\\n                    this.setSelectedTo(obj_values);\\n                  }\\n                }\\n\\n              case 27:\\n                setLoading(false);\\n\\n              case 28:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function onMountAccountTransfer() {\\n        return _onMountAccountTransfer.apply(this, arguments);\\n      }\\n\\n      return onMountAccountTransfer;\\n    }()\\n  }, {\\n    key: \\\"canDoAccountTransfer\\\",\\n    value: function canDoAccountTransfer(accounts) {\\n      var can_transfer = true; // should have at least one account with balance\\n\\n      if (!accounts.find(function (account) {\\n        return +account.balance > 0;\\n      })) {\\n        can_transfer = false;\\n        this.setHasNoAccountsBalance(true);\\n      } else {\\n        this.setHasNoAccountsBalance(false);\\n      } // should have at least two real-money accounts\\n\\n\\n      if (accounts.length <= 1) {\\n        can_transfer = false;\\n        this.setHasNoAccount(true);\\n      } else {\\n        this.setHasNoAccount(false);\\n      }\\n\\n      if (!can_transfer) {\\n        this.root_store.modules.cashier.general_store.setLoading(false);\\n      }\\n\\n      return can_transfer;\\n    }\\n  }, {\\n    key: \\\"setHasNoAccountsBalance\\\",\\n    value: function setHasNoAccountsBalance(has_no_accounts_balance) {\\n      this.has_no_accounts_balance = has_no_accounts_balance;\\n    }\\n  }, {\\n    key: \\\"setHasNoAccount\\\",\\n    value: function setHasNoAccount(has_no_account) {\\n      this.has_no_account = has_no_account;\\n    }\\n  }, {\\n    key: \\\"setTransferFee\\\",\\n    value: function setTransferFee() {\\n      var transfer_fee = (0,shared_.getPropertyValue)((0,shared_.getCurrencies)(), [this.selected_from.currency, 'transfer_between_accounts', 'fees', this.selected_to.currency]);\\n      this.transfer_fee = Number(transfer_fee || 0);\\n    }\\n  }, {\\n    key: \\\"setMinimumFee\\\",\\n    value: function setMinimumFee() {\\n      var decimals = (0,shared_.getDecimalPlaces)(this.selected_from.currency); // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\\n\\n      this.minimum_fee = (1 / Math.pow(10, decimals)).toFixed(decimals);\\n    }\\n  }, {\\n    key: \\\"setTransferLimit\\\",\\n    value: function setTransferLimit() {\\n      var is_mt_transfer = this.selected_from.is_mt || this.selected_to.is_mt;\\n      var is_dxtrade_transfer = this.selected_from.is_dxtrade || this.selected_to.is_dxtrade;\\n      var limits_key;\\n\\n      if (is_mt_transfer) {\\n        limits_key = 'limits_mt5';\\n      } else if (is_dxtrade_transfer) {\\n        limits_key = 'limits_dxtrade';\\n      } else {\\n        limits_key = 'limits';\\n      }\\n\\n      var transfer_limit = (0,shared_.getPropertyValue)((0,shared_.getCurrencies)(), [this.selected_from.currency, 'transfer_between_accounts', limits_key]);\\n      var balance = this.selected_from.balance;\\n      var decimal_places = (0,shared_.getDecimalPlaces)(this.selected_from.currency); // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\\n\\n      this.transfer_limit = {\\n        max: !(transfer_limit !== null && transfer_limit !== void 0 && transfer_limit.max) || +balance >= ((transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.min) || 0) && +balance <= (transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.max) ? balance : transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.max.toFixed(decimal_places),\\n        min: transfer_limit !== null && transfer_limit !== void 0 && transfer_limit.min ? (+(transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.min)).toFixed(decimal_places) : null\\n      };\\n    }\\n  }, {\\n    key: \\\"sortAccountsTransfer\\\",\\n    value: function () {\\n      var _sortAccountsTransfer = account_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(response_accounts) {\\n        var _yield$this$WS$storag,\\n            _yield$this$WS$tradin,\\n            _this2 = this;\\n\\n        var transfer_between_accounts, mt5_login_list, dxtrade_accounts_list, accounts, arr_accounts;\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _context3.t0 = response_accounts;\\n\\n                if (_context3.t0) {\\n                  _context3.next = 5;\\n                  break;\\n                }\\n\\n                _context3.next = 4;\\n                return this.WS.authorized.transferBetweenAccounts();\\n\\n              case 4:\\n                _context3.t0 = _context3.sent;\\n\\n              case 5:\\n                transfer_between_accounts = _context3.t0;\\n\\n                if (this.accounts_list.length) {\\n                  _context3.next = 9;\\n                  break;\\n                }\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context3.next = 9;\\n                  break;\\n                }\\n\\n                return _context3.abrupt(\\\"return\\\");\\n\\n              case 9:\\n                _context3.next = 11;\\n                return this.WS.storage.mt5LoginList();\\n\\n              case 11:\\n                _context3.t2 = _yield$this$WS$storag = _context3.sent;\\n                _context3.t1 = _context3.t2 === null;\\n\\n                if (_context3.t1) {\\n                  _context3.next = 15;\\n                  break;\\n                }\\n\\n                _context3.t1 = _yield$this$WS$storag === void 0;\\n\\n              case 15:\\n                if (!_context3.t1) {\\n                  _context3.next = 19;\\n                  break;\\n                }\\n\\n                _context3.t3 = void 0;\\n                _context3.next = 20;\\n                break;\\n\\n              case 19:\\n                _context3.t3 = _yield$this$WS$storag.mt5_login_list;\\n\\n              case 20:\\n                mt5_login_list = _context3.t3;\\n                _context3.next = 23;\\n                return this.WS.tradingPlatformAccountsList(shared_.CFD_PLATFORMS.DXTRADE);\\n\\n              case 23:\\n                _context3.t5 = _yield$this$WS$tradin = _context3.sent;\\n                _context3.t4 = _context3.t5 === null;\\n\\n                if (_context3.t4) {\\n                  _context3.next = 27;\\n                  break;\\n                }\\n\\n                _context3.t4 = _yield$this$WS$tradin === void 0;\\n\\n              case 27:\\n                if (!_context3.t4) {\\n                  _context3.next = 31;\\n                  break;\\n                }\\n\\n                _context3.t6 = void 0;\\n                _context3.next = 32;\\n                break;\\n\\n              case 31:\\n                _context3.t6 = _yield$this$WS$tradin.trading_platform_accounts;\\n\\n              case 32:\\n                dxtrade_accounts_list = _context3.t6;\\n                // TODO: remove this temporary mapping when API adds market_type and sub_account_type to transfer_between_accounts\\n                accounts = transfer_between_accounts.accounts.map(function (account) {\\n                  if (account.account_type === shared_.CFD_PLATFORMS.MT5 && Array.isArray(mt5_login_list) && mt5_login_list.length) {\\n                    // account_type in transfer_between_accounts (mt5|binary)\\n                    // gets overridden by account_type in mt5_login_list (demo|real)\\n                    // since in cashier all these are real accounts, the mt5 account type is what we want to keep\\n                    var found_account = mt5_login_list.find(function (acc) {\\n                      return acc.login === account.loginid;\\n                    });\\n                    if (found_account === undefined) return account;\\n                    return account_transfer_store_objectSpread(account_transfer_store_objectSpread(account_transfer_store_objectSpread({}, account), found_account), {}, {\\n                      account_type: shared_.CFD_PLATFORMS.MT5\\n                    });\\n                  }\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.DXTRADE && Array.isArray(dxtrade_accounts_list) && dxtrade_accounts_list.length) {\\n                    // account_type in transfer_between_accounts (mt5|binary)\\n                    // gets overridden by account_type in dxtrade_accounts_list (demo|real)\\n                    // since in cashier all these are real accounts, the mt5 account type is what we want to keep\\n                    var _found_account = dxtrade_accounts_list.find(function (acc) {\\n                      return acc.account_id === account.loginid;\\n                    });\\n\\n                    if (_found_account === undefined) return account;\\n                    return account_transfer_store_objectSpread(account_transfer_store_objectSpread(account_transfer_store_objectSpread({}, account), _found_account), {}, {\\n                      account_type: shared_.CFD_PLATFORMS.DXTRADE\\n                    });\\n                  }\\n\\n                  return account;\\n                }); // sort accounts as follows:\\n                // for MT5, synthetic, financial, financial stp\\n                // for non-MT5, fiat, crypto (alphabetically by currency)\\n                // should have more than one account\\n\\n                if (transfer_between_accounts.accounts.length > 1) {\\n                  accounts.sort(function (a, b) {\\n                    var a_is_mt = a.account_type === shared_.CFD_PLATFORMS.MT5;\\n                    var b_is_mt = b.account_type === shared_.CFD_PLATFORMS.MT5;\\n                    var a_is_crypto = !a_is_mt && (0,shared_.isCryptocurrency)(a.currency);\\n                    var b_is_crypto = !b_is_mt && (0,shared_.isCryptocurrency)(b.currency);\\n                    var a_is_fiat = !a_is_mt && !a_is_crypto;\\n                    var b_is_fiat = !b_is_mt && !b_is_crypto;\\n\\n                    if (a_is_mt && b_is_mt) {\\n                      if (a.market_type === 'gaming' || a.market_type === 'synthetic') {\\n                        return -1;\\n                      }\\n\\n                      if (a.sub_account_type === 'financial') {\\n                        return b.market_type === 'gaming' || b.market_type === 'synthetic' ? 1 : -1;\\n                      }\\n\\n                      return 1;\\n                    } else if (a_is_crypto && b_is_crypto || a_is_fiat && b_is_fiat) {\\n                      return a.currency < b.currency ? -1 : 1;\\n                    } else if (a_is_crypto && b_is_mt || a_is_fiat && b_is_crypto || a_is_fiat && b_is_mt) {\\n                      return -1;\\n                    }\\n\\n                    return a_is_mt ? -1 : 1;\\n                  });\\n                }\\n\\n                arr_accounts = [];\\n                this.setSelectedTo({}); // set selected to empty each time so we can redetermine its value on reload\\n\\n                accounts.forEach(function (account) {\\n                  var _cfd_platforms$accoun, _cfd_platforms$accoun2;\\n\\n                  var cfd_platforms = {\\n                    mt5: {\\n                      name: 'DMT5',\\n                      icon: 'IcMt5'\\n                    },\\n                    dxtrade: {\\n                      name: 'Deriv X',\\n                      icon: 'IcDxtrade'\\n                    }\\n                  };\\n                  var is_cfd = Object.keys(cfd_platforms).includes(account.account_type);\\n                  var cfd_text_display = (_cfd_platforms$accoun = cfd_platforms[account.account_type]) === null || _cfd_platforms$accoun === void 0 ? void 0 : _cfd_platforms$accoun.name;\\n                  var cfd_icon_display = \\\"\\\".concat((_cfd_platforms$accoun2 = cfd_platforms[account.account_type]) === null || _cfd_platforms$accoun2 === void 0 ? void 0 : _cfd_platforms$accoun2.icon, \\\"-\\\").concat((0,shared_.getCFDAccount)({\\n                    market_type: account.market_type,\\n                    sub_account_type: account.sub_account_type,\\n                    platform: account.account_type,\\n                    is_eu: _this2.root_store.client.is_eu\\n                  }));\\n                  var account_text_display = is_cfd ? \\\"\\\".concat(cfd_text_display, \\\" \\\").concat((0,shared_.getCFDAccountDisplay)({\\n                    market_type: account.market_type,\\n                    sub_account_type: account.sub_account_type,\\n                    platform: account.account_type,\\n                    is_eu: _this2.root_store.client.is_eu\\n                  })) : (0,shared_.getCurrencyDisplayCode)(account.currency !== 'eUSDT' ? account.currency.toUpperCase() : account.currency);\\n\\n                  var obj_values = account_transfer_store_objectSpread({\\n                    text: account_text_display,\\n                    value: account.loginid,\\n                    balance: account.balance,\\n                    currency: account.currency,\\n                    is_crypto: (0,shared_.isCryptocurrency)(account.currency),\\n                    is_mt: account.account_type === shared_.CFD_PLATFORMS.MT5,\\n                    is_dxtrade: account.account_type === shared_.CFD_PLATFORMS.DXTRADE\\n                  }, is_cfd && {\\n                    platform_icon: cfd_icon_display,\\n                    market_type: (0,shared_.getCFDAccount)({\\n                      market_type: account.market_type,\\n                      sub_account_type: account.sub_account_type,\\n                      platform: account.account_type,\\n                      is_eu: _this2.root_store.client.is_eu\\n                    })\\n                  }); // set current logged in client as the default transfer from account\\n\\n\\n                  if (account.loginid === _this2.root_store.client.loginid) {\\n                    // check if selected from is not allowed account\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      obj_values.error = getSelectedError(obj_values.value, true);\\n                    }\\n\\n                    _this2.setSelectedFrom(obj_values);\\n                  } else if ((0,shared_.isEmptyObject)(_this2.selected_to)) {\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      // check if selected to is not allowed account\\n                      obj_values.error = getSelectedError(obj_values.value);\\n                    } // set the first available account as the default transfer to account\\n\\n\\n                    _this2.setSelectedTo(obj_values);\\n                  }\\n\\n                  arr_accounts.push(obj_values);\\n                });\\n                this.setAccounts(arr_accounts);\\n\\n              case 39:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function sortAccountsTransfer(_x2) {\\n        return _sortAccountsTransfer.apply(this, arguments);\\n      }\\n\\n      return sortAccountsTransfer;\\n    }()\\n  }, {\\n    key: \\\"setSelectedFrom\\\",\\n    value: function setSelectedFrom(obj_values) {\\n      this.selected_from = obj_values;\\n    }\\n  }, {\\n    key: \\\"setSelectedTo\\\",\\n    value: function setSelectedTo(obj_values) {\\n      this.selected_to = obj_values;\\n    }\\n  }, {\\n    key: \\\"setAccounts\\\",\\n    value: function setAccounts(arr_accounts) {\\n      this.accounts_list = arr_accounts;\\n    }\\n  }, {\\n    key: \\\"setIsTransferConfirm\\\",\\n    value: function setIsTransferConfirm(is_transfer_confirm) {\\n      this.is_transfer_confirm = is_transfer_confirm;\\n    }\\n  }, {\\n    key: \\\"setAccountTransferAmount\\\",\\n    value: function setAccountTransferAmount(amount) {\\n      this.account_transfer_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setIsTransferSuccessful\\\",\\n    value: function setIsTransferSuccessful(is_transfer_successful) {\\n      this.is_transfer_successful = is_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setIsMT5TransferInProgress\\\",\\n    value: function setIsMT5TransferInProgress(is_mt5_transfer_in_progress) {\\n      this.is_mt5_transfer_in_progress = is_mt5_transfer_in_progress;\\n    }\\n  }, {\\n    key: \\\"setReceiptTransfer\\\",\\n    value: function setReceiptTransfer(_ref8) {\\n      var amount = _ref8.amount;\\n      this.receipt = {\\n        amount_transferred: amount\\n      };\\n    }\\n  }, {\\n    key: \\\"onChangeTransferFrom\\\",\\n    value: function onChangeTransferFrom(_ref9) {\\n      var target = _ref9.target;\\n      this.error.setErrorMessage('');\\n      this.selected_from.error = '';\\n      var accounts = this.accounts_list;\\n      var selected_from = accounts.find(function (account) {\\n        return account.value === target.value;\\n      }); // if new value of selected_from is the same as the current selected_to\\n      // switch the value of selected_from and selected_to\\n\\n      if (selected_from.value === this.selected_to.value) {\\n        this.onChangeTransferTo({\\n          target: {\\n            value: this.selected_from.value\\n          }\\n        });\\n      } else if (selected_from.is_mt && this.selected_to.is_mt || selected_from.is_dxtrade && this.selected_to.is_dxtrade || selected_from.is_dxtrade && this.selected_to.is_mt || selected_from.is_mt && this.selected_to.is_dxtrade) {\\n        // not allowed to transfer from MT to MT\\n        // not allowed to transfer from Dxtrade to Dxtrade\\n        // not allowed to transfer between MT and Dxtrade\\n        var first_non_cfd = this.accounts_list.find(function (account) {\\n          return !account.is_mt && !account.is_dxtrade;\\n        });\\n        this.onChangeTransferTo({\\n          target: {\\n            value: first_non_cfd.value\\n          }\\n        });\\n      } else if (selected_from.is_crypto && this.selected_to.is_crypto) {\\n        // not allowed to transfer crypto to crypto\\n        var first_fiat = this.accounts_list.find(function (account) {\\n          return !account.is_crypto;\\n        });\\n        this.onChangeTransferTo({\\n          target: {\\n            value: first_fiat.value\\n          }\\n        });\\n      }\\n\\n      if (hasTransferNotAllowedLoginid(selected_from.value)) {\\n        selected_from.error = getSelectedError(selected_from.value, true);\\n      }\\n\\n      this.selected_from = selected_from;\\n      this.setTransferFee();\\n      this.setMinimumFee();\\n      this.setTransferLimit();\\n    }\\n  }, {\\n    key: \\\"onChangeTransferTo\\\",\\n    value: function onChangeTransferTo(_ref10) {\\n      var target = _ref10.target;\\n      this.error.setErrorMessage('');\\n      this.selected_to.error = '';\\n      var accounts = this.accounts_list;\\n      this.selected_to = accounts.find(function (account) {\\n        return account.value === target.value;\\n      }) || {};\\n\\n      if (hasTransferNotAllowedLoginid(this.selected_to.value)) {\\n        this.selected_to.error = getSelectedError(this.selected_to.value);\\n      }\\n\\n      this.setTransferFee();\\n      this.setMinimumFee();\\n      this.setTransferLimit();\\n    }\\n  }, {\\n    key: \\\"setTransferPercentageSelectorResult\\\",\\n    value: function setTransferPercentageSelectorResult(amount) {\\n      var _this$root_store$modu = this.root_store.modules.cashier,\\n          crypto_fiat_converter = _this$root_store$modu.crypto_fiat_converter,\\n          general_store = _this$root_store$modu.general_store;\\n      var selected_from_currency = this.selected_from.currency;\\n      var selected_to_currency = this.selected_to.currency;\\n\\n      if (amount > 0 || +this.selected_from.balance === 0) {\\n        crypto_fiat_converter.setConverterFromAmount(amount);\\n        this.validateTransferFromAmount();\\n        crypto_fiat_converter.onChangeConverterFromAmount({\\n          target: {\\n            value: amount\\n          }\\n        }, selected_from_currency, selected_to_currency);\\n      } else if (+this.selected_from.balance === 0) {\\n        crypto_fiat_converter.setConverterFromAmount(amount);\\n        this.validateTransferFromAmount();\\n      } else {\\n        crypto_fiat_converter.resetConverter();\\n      }\\n\\n      crypto_fiat_converter.setIsTimerVisible(false);\\n      general_store.percentageSelectorSelectionStatus(false);\\n    }\\n  }, {\\n    key: \\\"validateTransferFromAmount\\\",\\n    value: function validateTransferFromAmount() {\\n      var _this$root_store$modu2 = this.root_store.modules.cashier.crypto_fiat_converter,\\n          converter_from_amount = _this$root_store$modu2.converter_from_amount,\\n          setConverterFromError = _this$root_store$modu2.setConverterFromError;\\n\\n      if (!converter_from_amount) {\\n        setConverterFromError((0,translations_.localize)('This field is required.'));\\n      } else {\\n        var _validNumber = (0,shared_.validNumber)(converter_from_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(this.selected_from.currency),\\n          min: this.transfer_limit.min,\\n          max: this.transfer_limit.max\\n        }),\\n            is_ok = _validNumber.is_ok,\\n            message = _validNumber.message;\\n\\n        if (!is_ok) {\\n          setConverterFromError(message);\\n        } else if (+this.selected_from.balance < +converter_from_amount) {\\n          setConverterFromError((0,translations_.localize)('Insufficient funds'));\\n        } else {\\n          setConverterFromError('');\\n        }\\n      }\\n    }\\n  }, {\\n    key: \\\"validateTransferToAmount\\\",\\n    value: function validateTransferToAmount() {\\n      var _this$root_store$modu3 = this.root_store.modules.cashier.crypto_fiat_converter,\\n          converter_to_amount = _this$root_store$modu3.converter_to_amount,\\n          setConverterToError = _this$root_store$modu3.setConverterToError;\\n\\n      if (converter_to_amount) {\\n        var currency = this.selected_to.currency;\\n\\n        var _validNumber2 = (0,shared_.validNumber)(converter_to_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(currency)\\n        }),\\n            is_ok = _validNumber2.is_ok,\\n            message = _validNumber2.message;\\n\\n        if (!is_ok) {\\n          setConverterToError(message);\\n        } else {\\n          setConverterToError('');\\n        }\\n      }\\n    }\\n  }]);\\n\\n  return AccountTransferStore;\\n}(), (account_transfer_store_descriptor = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"accounts_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), account_transfer_store_descriptor2 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return constants.containers.account_transfer;\\n  }\\n}), account_transfer_store_descriptor3 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), account_transfer_store_descriptor4 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"has_no_account\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_transfer_store_descriptor5 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"has_no_accounts_balance\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_transfer_store_descriptor6 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"is_transfer_confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_transfer_store_descriptor7 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"is_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_transfer_store_descriptor8 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"is_mt5_transfer_in_progress\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_transfer_store_descriptor9 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"minimum_fee\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor10 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor11 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"selected_from\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor12 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"selected_to\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor13 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"account_transfer_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor14 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"transfer_fee\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor15 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"transfer_limit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"is_account_transfer_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"is_account_transfer_visible\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setBalanceByLoginId\\\", [account_transfer_store_dec], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setBalanceByLoginId\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setBalanceSelectedFrom\\\", [account_transfer_store_dec2], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setBalanceSelectedFrom\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setBalanceSelectedTo\\\", [account_transfer_store_dec3], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setBalanceSelectedTo\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"onMountAccountTransfer\\\", [account_transfer_store_dec4], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"onMountAccountTransfer\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setHasNoAccountsBalance\\\", [account_transfer_store_dec5], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setHasNoAccountsBalance\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setHasNoAccount\\\", [account_transfer_store_dec6], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setHasNoAccount\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setTransferFee\\\", [account_transfer_store_dec7], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setTransferFee\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setMinimumFee\\\", [_dec8], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setMinimumFee\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setTransferLimit\\\", [_dec9], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setTransferLimit\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"sortAccountsTransfer\\\", [_dec10], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"sortAccountsTransfer\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setSelectedFrom\\\", [_dec11], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setSelectedFrom\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setSelectedTo\\\", [_dec12], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setSelectedTo\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setAccounts\\\", [_dec13], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setAccounts\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setIsTransferConfirm\\\", [_dec14], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setIsTransferConfirm\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setAccountTransferAmount\\\", [_dec15], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setAccountTransferAmount\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setIsTransferSuccessful\\\", [_dec16], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setIsTransferSuccessful\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setIsMT5TransferInProgress\\\", [_dec17], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setIsMT5TransferInProgress\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setReceiptTransfer\\\", [_dec18], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setReceiptTransfer\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"onChangeTransferFrom\\\", [_dec19], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"onChangeTransferFrom\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"onChangeTransferTo\\\", [_dec20], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"onChangeTransferTo\\\"), account_transfer_store_class.prototype), _descriptor16 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"resetAccountTransfer\\\", [_dec21], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this3 = this;\\n\\n    return /*#__PURE__*/account_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n        while (1) {\\n          switch (_context4.prev = _context4.next) {\\n            case 0:\\n              _this3.setIsTransferConfirm(false);\\n\\n              _this3.setTransferLimit();\\n\\n            case 2:\\n            case \\\"end\\\":\\n              return _context4.stop();\\n          }\\n        }\\n      }, _callee4);\\n    }));\\n  }\\n}), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setTransferPercentageSelectorResult\\\", [_dec22], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setTransferPercentageSelectorResult\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"validateTransferFromAmount\\\", [_dec23], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"validateTransferFromAmount\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"validateTransferToAmount\\\", [_dec24], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"validateTransferToAmount\\\"), account_transfer_store_class.prototype)), account_transfer_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/crypto-fiat-converter-store.js\\nvar crypto_fiat_converter_store_dec, crypto_fiat_converter_store_dec2, crypto_fiat_converter_store_dec3, crypto_fiat_converter_store_dec4, crypto_fiat_converter_store_dec5, crypto_fiat_converter_store_dec6, crypto_fiat_converter_store_dec7, crypto_fiat_converter_store_dec8, crypto_fiat_converter_store_dec9, crypto_fiat_converter_store_dec10, crypto_fiat_converter_store_dec11, crypto_fiat_converter_store_dec12, crypto_fiat_converter_store_class, crypto_fiat_converter_store_descriptor, crypto_fiat_converter_store_descriptor2, crypto_fiat_converter_store_descriptor3, crypto_fiat_converter_store_descriptor4, crypto_fiat_converter_store_descriptor5;\\n\\nfunction crypto_fiat_converter_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction crypto_fiat_converter_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { crypto_fiat_converter_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { crypto_fiat_converter_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction crypto_fiat_converter_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction crypto_fiat_converter_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction crypto_fiat_converter_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction crypto_fiat_converter_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) crypto_fiat_converter_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) crypto_fiat_converter_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction crypto_fiat_converter_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction crypto_fiat_converter_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar CryptoFiatConverterStore = (crypto_fiat_converter_store_dec = external_mobx_.action.bound, crypto_fiat_converter_store_dec2 = external_mobx_.action.bound, crypto_fiat_converter_store_dec3 = external_mobx_.action.bound, crypto_fiat_converter_store_dec4 = external_mobx_.action.bound, crypto_fiat_converter_store_dec5 = external_mobx_.action.bound, crypto_fiat_converter_store_dec6 = external_mobx_.action.bound, crypto_fiat_converter_store_dec7 = external_mobx_.action.bound, crypto_fiat_converter_store_dec8 = external_mobx_.action.bound, crypto_fiat_converter_store_dec9 = external_mobx_.action.bound, crypto_fiat_converter_store_dec10 = external_mobx_.action.bound, crypto_fiat_converter_store_dec11 = external_mobx_.action.bound, crypto_fiat_converter_store_dec12 = external_mobx_.action.bound, (crypto_fiat_converter_store_class = /*#__PURE__*/function () {\\n  function CryptoFiatConverterStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    crypto_fiat_converter_store_classCallCheck(this, CryptoFiatConverterStore);\\n\\n    crypto_fiat_converter_store_initializerDefineProperty(this, \\\"converter_from_amount\\\", crypto_fiat_converter_store_descriptor, this);\\n\\n    crypto_fiat_converter_store_initializerDefineProperty(this, \\\"converter_to_amount\\\", crypto_fiat_converter_store_descriptor2, this);\\n\\n    crypto_fiat_converter_store_initializerDefineProperty(this, \\\"converter_from_error\\\", crypto_fiat_converter_store_descriptor3, this);\\n\\n    crypto_fiat_converter_store_initializerDefineProperty(this, \\\"converter_to_error\\\", crypto_fiat_converter_store_descriptor4, this);\\n\\n    crypto_fiat_converter_store_initializerDefineProperty(this, \\\"is_timer_visible\\\", crypto_fiat_converter_store_descriptor5, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  crypto_fiat_converter_store_createClass(CryptoFiatConverterStore, [{\\n    key: \\\"setConverterFromAmount\\\",\\n    value: function setConverterFromAmount(amount) {\\n      this.converter_from_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setConverterToAmount\\\",\\n    value: function setConverterToAmount(amount) {\\n      this.converter_to_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setConverterFromError\\\",\\n    value: function setConverterFromError(error) {\\n      this.converter_from_error = error;\\n    }\\n  }, {\\n    key: \\\"setConverterToError\\\",\\n    value: function setConverterToError(error) {\\n      this.converter_to_error = error;\\n    }\\n  }, {\\n    key: \\\"setIsTimerVisible\\\",\\n    value: function setIsTimerVisible(is_timer_visible) {\\n      this.is_timer_visible = is_timer_visible;\\n    }\\n  }, {\\n    key: \\\"resetTimer\\\",\\n    value: function resetTimer() {\\n      this.setIsTimerVisible(false);\\n    }\\n  }, {\\n    key: \\\"getExchangeRate\\\",\\n    value: function () {\\n      var _getExchangeRate = crypto_fiat_converter_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(from_currency, to_currency) {\\n        var _yield$this$WS$send, exchange_rates;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.next = 2;\\n                return this.WS.send({\\n                  exchange_rates: 1,\\n                  base_currency: from_currency\\n                });\\n\\n              case 2:\\n                _yield$this$WS$send = _context.sent;\\n                exchange_rates = _yield$this$WS$send.exchange_rates;\\n                return _context.abrupt(\\\"return\\\", exchange_rates.rates[to_currency]);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function getExchangeRate(_x, _x2) {\\n        return _getExchangeRate.apply(this, arguments);\\n      }\\n\\n      return getExchangeRate;\\n    }()\\n  }, {\\n    key: \\\"validateFromAmount\\\",\\n    value: function validateFromAmount() {\\n      var _this$root_store$modu = this.root_store.modules.cashier,\\n          account_transfer = _this$root_store$modu.account_transfer,\\n          general_store = _this$root_store$modu.general_store,\\n          withdraw = _this$root_store$modu.withdraw;\\n\\n      if (general_store.active_container === account_transfer.container) {\\n        account_transfer.validateTransferFromAmount();\\n      } else {\\n        withdraw.validateWithdrawFromAmount();\\n      }\\n    }\\n  }, {\\n    key: \\\"validateToAmount\\\",\\n    value: function validateToAmount() {\\n      var _this$root_store$modu2 = this.root_store.modules.cashier,\\n          account_transfer = _this$root_store$modu2.account_transfer,\\n          general_store = _this$root_store$modu2.general_store,\\n          withdraw = _this$root_store$modu2.withdraw;\\n\\n      if (general_store.active_container === account_transfer.container) {\\n        account_transfer.validateTransferToAmount();\\n      } else {\\n        withdraw.validateWithdrawToAmount();\\n      }\\n    }\\n  }, {\\n    key: \\\"onChangeConverterFromAmount\\\",\\n    value: function () {\\n      var _onChangeConverterFromAmount = crypto_fiat_converter_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, from_currency, to_currency) {\\n        var target, _this$root_store$modu3, account_transfer, general_store, rate, decimals, amount;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                target = _ref2.target;\\n                _this$root_store$modu3 = this.root_store.modules.cashier, account_transfer = _this$root_store$modu3.account_transfer, general_store = _this$root_store$modu3.general_store;\\n                this.resetTimer();\\n\\n                if (!target.value) {\\n                  _context2.next = 27;\\n                  break;\\n                }\\n\\n                this.setConverterFromAmount(target.value);\\n                this.validateFromAmount();\\n                general_store.percentageSelectorSelectionStatus(true);\\n                general_store.calculatePercentage();\\n\\n                if (!this.converter_from_error) {\\n                  _context2.next = 15;\\n                  break;\\n                }\\n\\n                this.setConverterToAmount('');\\n                this.setConverterToError('');\\n                this.setIsTimerVisible(false);\\n                account_transfer.setAccountTransferAmount('');\\n                _context2.next = 25;\\n                break;\\n\\n              case 15:\\n                _context2.next = 17;\\n                return this.getExchangeRate(from_currency, to_currency);\\n\\n              case 17:\\n                rate = _context2.sent;\\n                decimals = (0,shared_.getDecimalPlaces)(to_currency);\\n                amount = (rate * target.value).toFixed(decimals);\\n\\n                if (+amount || this.converter_from_amount) {\\n                  this.setConverterToAmount(amount);\\n                } else {\\n                  this.setConverterToAmount('');\\n                }\\n\\n                this.validateToAmount();\\n                this.setConverterToError('');\\n                this.setIsTimerVisible(true);\\n                account_transfer.setAccountTransferAmount(target.value);\\n\\n              case 25:\\n                _context2.next = 28;\\n                break;\\n\\n              case 27:\\n                this.resetConverter();\\n\\n              case 28:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function onChangeConverterFromAmount(_x3, _x4, _x5) {\\n        return _onChangeConverterFromAmount.apply(this, arguments);\\n      }\\n\\n      return onChangeConverterFromAmount;\\n    }()\\n  }, {\\n    key: \\\"onChangeConverterToAmount\\\",\\n    value: function () {\\n      var _onChangeConverterToAmount = crypto_fiat_converter_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref3, from_currency, to_currency) {\\n        var target, _this$root_store$modu4, account_transfer, general_store, rate, decimals, amount;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                target = _ref3.target;\\n                _this$root_store$modu4 = this.root_store.modules.cashier, account_transfer = _this$root_store$modu4.account_transfer, general_store = _this$root_store$modu4.general_store;\\n                this.resetTimer();\\n\\n                if (!target.value) {\\n                  _context3.next = 25;\\n                  break;\\n                }\\n\\n                this.setConverterToAmount(target.value);\\n                this.validateToAmount();\\n\\n                if (!this.converter_to_error) {\\n                  _context3.next = 13;\\n                  break;\\n                }\\n\\n                this.setConverterFromAmount('');\\n                this.setConverterFromError('');\\n                this.setIsTimerVisible(false);\\n                account_transfer.setAccountTransferAmount('');\\n                _context3.next = 23;\\n                break;\\n\\n              case 13:\\n                _context3.next = 15;\\n                return this.getExchangeRate(from_currency, to_currency);\\n\\n              case 15:\\n                rate = _context3.sent;\\n                decimals = (0,shared_.getDecimalPlaces)(to_currency);\\n                amount = (rate * target.value).toFixed(decimals);\\n\\n                if (+amount || this.converter_to_amount) {\\n                  this.setConverterFromAmount(amount);\\n                } else {\\n                  this.setConverterFromAmount('');\\n                }\\n\\n                general_store.percentageSelectorSelectionStatus(true);\\n                general_store.calculatePercentage();\\n                this.validateFromAmount();\\n\\n                if (this.converter_from_error) {\\n                  this.setIsTimerVisible(false);\\n                  account_transfer.setAccountTransferAmount('');\\n                } else {\\n                  this.setConverterFromError('');\\n                  this.setIsTimerVisible(true);\\n                  account_transfer.setAccountTransferAmount(amount);\\n                }\\n\\n              case 23:\\n                _context3.next = 26;\\n                break;\\n\\n              case 25:\\n                this.resetConverter();\\n\\n              case 26:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function onChangeConverterToAmount(_x6, _x7, _x8) {\\n        return _onChangeConverterToAmount.apply(this, arguments);\\n      }\\n\\n      return onChangeConverterToAmount;\\n    }()\\n  }, {\\n    key: \\\"resetConverter\\\",\\n    value: function resetConverter() {\\n      this.setConverterFromAmount('');\\n      this.setConverterToAmount('');\\n      this.setConverterFromError('');\\n      this.setConverterToError('');\\n      this.setIsTimerVisible(false);\\n      this.root_store.modules.cashier.general_store.percentageSelectorSelectionStatus(true);\\n    }\\n  }]);\\n\\n  return CryptoFiatConverterStore;\\n}(), (crypto_fiat_converter_store_descriptor = crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"converter_from_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), crypto_fiat_converter_store_descriptor2 = crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"converter_to_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), crypto_fiat_converter_store_descriptor3 = crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"converter_from_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), crypto_fiat_converter_store_descriptor4 = crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"converter_to_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), crypto_fiat_converter_store_descriptor5 = crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"is_timer_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterFromAmount\\\", [crypto_fiat_converter_store_dec], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterFromAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterToAmount\\\", [crypto_fiat_converter_store_dec2], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterToAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterFromError\\\", [crypto_fiat_converter_store_dec3], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterFromError\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterToError\\\", [crypto_fiat_converter_store_dec4], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterToError\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setIsTimerVisible\\\", [crypto_fiat_converter_store_dec5], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setIsTimerVisible\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"resetTimer\\\", [crypto_fiat_converter_store_dec6], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"resetTimer\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"getExchangeRate\\\", [crypto_fiat_converter_store_dec7], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"getExchangeRate\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"validateFromAmount\\\", [crypto_fiat_converter_store_dec8], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"validateFromAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"validateToAmount\\\", [crypto_fiat_converter_store_dec9], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"validateToAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"onChangeConverterFromAmount\\\", [crypto_fiat_converter_store_dec10], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"onChangeConverterFromAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"onChangeConverterToAmount\\\", [crypto_fiat_converter_store_dec11], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"onChangeConverterToAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"resetConverter\\\", [crypto_fiat_converter_store_dec12], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"resetConverter\\\"), crypto_fiat_converter_store_class.prototype)), crypto_fiat_converter_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/deposit-store.js\\nvar deposit_store_dec, deposit_store_dec2, deposit_store_class, deposit_store_descriptor, deposit_store_descriptor2;\\n\\nfunction deposit_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction deposit_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { deposit_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { deposit_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction deposit_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction deposit_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction deposit_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction deposit_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) deposit_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) deposit_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction deposit_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction deposit_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\nvar DepositStore = (deposit_store_dec = external_mobx_.action.bound, deposit_store_dec2 = external_mobx_.action.bound, (deposit_store_class = /*#__PURE__*/function () {\\n  function DepositStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    deposit_store_classCallCheck(this, DepositStore);\\n\\n    deposit_store_initializerDefineProperty(this, \\\"container\\\", deposit_store_descriptor, this);\\n\\n    deposit_store_initializerDefineProperty(this, \\\"error\\\", deposit_store_descriptor2, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  deposit_store_createClass(DepositStore, [{\\n    key: \\\"onMountDeposit\\\",\\n    value: function () {\\n      var _onMountDeposit = deposit_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this$root_store, client, modules, _modules$cashier$gene, active_container, is_crypto, onMountCommon, setLoading, setOnRemount, _modules$cashier$ifra, checkIframeLoaded, clearTimeoutCashierUrl, is_session_timeout, setContainerHeight, setIframeUrl, setSessionTimeout, setTimeoutCashierUrl, is_virtual, current_container, response_cashier;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store = this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                _modules$cashier$gene = modules.cashier.general_store, active_container = _modules$cashier$gene.active_container, is_crypto = _modules$cashier$gene.is_crypto, onMountCommon = _modules$cashier$gene.onMountCommon, setLoading = _modules$cashier$gene.setLoading, setOnRemount = _modules$cashier$gene.setOnRemount;\\n                _modules$cashier$ifra = modules.cashier.iframe, checkIframeLoaded = _modules$cashier$ifra.checkIframeLoaded, clearTimeoutCashierUrl = _modules$cashier$ifra.clearTimeoutCashierUrl, is_session_timeout = _modules$cashier$ifra.is_session_timeout, setContainerHeight = _modules$cashier$ifra.setContainerHeight, setIframeUrl = _modules$cashier$ifra.setIframeUrl, setSessionTimeout = _modules$cashier$ifra.setSessionTimeout, setTimeoutCashierUrl = _modules$cashier$ifra.setTimeoutCashierUrl;\\n                is_virtual = client.is_virtual;\\n                current_container = active_container;\\n                setOnRemount(this.onMountDeposit);\\n                _context.next = 8;\\n                return onMountCommon();\\n\\n              case 8:\\n                this.error.setErrorMessage('');\\n                setContainerHeight(0);\\n                setLoading(true);\\n\\n                if (is_session_timeout) {\\n                  _context.next = 14;\\n                  break;\\n                }\\n\\n                checkIframeLoaded();\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 14:\\n                // if session has timed out reset everything\\n                setIframeUrl('');\\n\\n                if (!is_virtual) {\\n                  _context.next = 18;\\n                  break;\\n                }\\n\\n                setLoading(false); // if virtual, clear everything and don't proceed further\\n                // if no verification code, we should request again\\n\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 18:\\n                if (is_crypto) {\\n                  _context.next = 36;\\n                  break;\\n                }\\n\\n                _context.next = 21;\\n                return this.WS.authorized.cashier(active_container, {\\n                  verification_code: 'undefined'\\n                });\\n\\n              case 21:\\n                response_cashier = _context.sent;\\n\\n                if (!(current_container !== active_container)) {\\n                  _context.next = 25;\\n                  break;\\n                }\\n\\n                setLoading(false);\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 25:\\n                if (!response_cashier.error) {\\n                  _context.next = 31;\\n                  break;\\n                }\\n\\n                this.error.handleCashierError(response_cashier.error);\\n                setSessionTimeout(true);\\n                clearTimeoutCashierUrl();\\n                _context.next = 36;\\n                break;\\n\\n              case 31:\\n                _context.next = 33;\\n                return checkIframeLoaded();\\n\\n              case 33:\\n                setIframeUrl(response_cashier.cashier);\\n                setSessionTimeout(false);\\n                setTimeoutCashierUrl();\\n\\n              case 36:\\n                setLoading(false);\\n\\n              case 37:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function onMountDeposit() {\\n        return _onMountDeposit.apply(this, arguments);\\n      }\\n\\n      return onMountDeposit;\\n    }()\\n  }, {\\n    key: \\\"is_deposit_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie = this.root_store.client,\\n          is_authentication_needed = _this$root_store$clie.is_authentication_needed,\\n          is_tnc_needed = _this$root_store$clie.is_tnc_needed,\\n          is_financial_account = _this$root_store$clie.is_financial_account,\\n          is_financial_information_incomplete = _this$root_store$clie.is_financial_information_incomplete,\\n          is_trading_experience_incomplete = _this$root_store$clie.is_trading_experience_incomplete,\\n          account_status = _this$root_store$clie.account_status,\\n          is_eu = _this$root_store$clie.is_eu,\\n          mt5_login_list = _this$root_store$clie.mt5_login_list,\\n          is_deposit_lock = _this$root_store$clie.is_deposit_lock;\\n      if (!(account_status !== null && account_status !== void 0 && account_status.status)) return false;\\n      var need_authentication = this.error.is_ask_authentication || is_authentication_needed && is_eu;\\n      var need_financial_assessment = is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete); // CR can deposit without accepting latest tnc except those with Financial STP\\n\\n      var need_tnc = (is_eu || mt5_login_list.some(function (item) {\\n        return item.account_type === 'real' && item.sub_account_type === 'financial_stp';\\n      })) && is_tnc_needed;\\n      return is_deposit_lock || need_authentication || need_tnc || need_financial_assessment || this.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"submitFundsProtection\\\",\\n    value: function submitFundsProtection() {\\n      var _this = this;\\n\\n      this.WS.send({\\n        ukgc_funds_protection: 1,\\n        tnc_approval: 1\\n      }).then(function (response) {\\n        if (response.error) {\\n          _this.error.setMessage(response.error.message);\\n        } else {\\n          location.reload();\\n        }\\n      });\\n    }\\n  }]);\\n\\n  return DepositStore;\\n}(), (deposit_store_descriptor = deposit_store_applyDecoratedDescriptor(deposit_store_class.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return constants.containers.deposit;\\n  }\\n}), deposit_store_descriptor2 = deposit_store_applyDecoratedDescriptor(deposit_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), deposit_store_applyDecoratedDescriptor(deposit_store_class.prototype, \\\"onMountDeposit\\\", [deposit_store_dec], Object.getOwnPropertyDescriptor(deposit_store_class.prototype, \\\"onMountDeposit\\\"), deposit_store_class.prototype), deposit_store_applyDecoratedDescriptor(deposit_store_class.prototype, \\\"is_deposit_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(deposit_store_class.prototype, \\\"is_deposit_locked\\\"), deposit_store_class.prototype), deposit_store_applyDecoratedDescriptor(deposit_store_class.prototype, \\\"submitFundsProtection\\\", [deposit_store_dec2], Object.getOwnPropertyDescriptor(deposit_store_class.prototype, \\\"submitFundsProtection\\\"), deposit_store_class.prototype)), deposit_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/error-dialog-store.js\\nvar error_dialog_store_dec, error_dialog_store_dec2, error_dialog_store_class, error_dialog_store_descriptor, error_dialog_store_descriptor2;\\n\\nfunction error_dialog_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction error_dialog_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction error_dialog_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction error_dialog_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) error_dialog_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) error_dialog_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction error_dialog_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction error_dialog_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\nvar ErrorDialogStore = (error_dialog_store_dec = external_mobx_.action.bound, error_dialog_store_dec2 = external_mobx_.action.bound, (error_dialog_store_class = /*#__PURE__*/function () {\\n  function ErrorDialogStore() {\\n    error_dialog_store_classCallCheck(this, ErrorDialogStore);\\n\\n    error_dialog_store_initializerDefineProperty(this, \\\"error_message\\\", error_dialog_store_descriptor, this);\\n\\n    error_dialog_store_initializerDefineProperty(this, \\\"should_show\\\", error_dialog_store_descriptor2, this);\\n  }\\n\\n  error_dialog_store_createClass(ErrorDialogStore, [{\\n    key: \\\"setShouldShow\\\",\\n    value: function setShouldShow(value) {\\n      this.should_show = value;\\n    }\\n  }, {\\n    key: \\\"setErrorMessage\\\",\\n    value: function setErrorMessage(message) {\\n      this.error_message = message;\\n      this.setShouldShow(true);\\n    }\\n  }]);\\n\\n  return ErrorDialogStore;\\n}(), (error_dialog_store_descriptor = error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"error_message\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), error_dialog_store_descriptor2 = error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"should_show\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"setShouldShow\\\", [error_dialog_store_dec], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"setShouldShow\\\"), error_dialog_store_class.prototype), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"setErrorMessage\\\", [error_dialog_store_dec2], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"setErrorMessage\\\"), error_dialog_store_class.prototype)), error_dialog_store_class));\\n\\n// EXTERNAL MODULE: ../../../node_modules/prop-types/index.js\\nvar prop_types = __webpack_require__(\\\"../../../node_modules/prop-types/index.js\\\");\\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n;// CONCATENATED MODULE: ./Containers/cashier-notifications.jsx\\n\\n\\n\\n\\nvar CashierNotifications = function CashierNotifications(_ref) {\\n  var p2p_notification_count = _ref.p2p_notification_count;\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcCashier\\\",\\n    className: \\\"header__icon\\\"\\n  }), !!p2p_notification_count && /*#__PURE__*/external_react_default().createElement(components_.Counter, {\\n    className: \\\"cashier__counter\\\",\\n    count: p2p_notification_count\\n  }));\\n};\\n\\nCashierNotifications.propTypes = {\\n  p2p_notification_count: (prop_types_default()).number\\n};\\n/* harmony default export */ const cashier_notifications = (CashierNotifications);\\n;// CONCATENATED MODULE: ./_common/utility.js\\nfunction utility_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n\\n\\nvar template = function template(string, content) {\\n  var to_replace = content;\\n\\n  if (content && !Array.isArray(content)) {\\n    to_replace = [content];\\n  }\\n\\n  return string.replace(/\\\\[_(\\\\d+)]/g, function (s, index) {\\n    return to_replace[+index - 1];\\n  });\\n};\\n/**\\n * Creates a DOM element and adds any attributes to it.\\n *\\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\\n * @return the created DOM element\\n */\\n\\n\\nvar createElement = function createElement(tag_name) {\\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n  var el = document.createElement(tag_name);\\n  Object.keys(attributes).forEach(function (attr) {\\n    var value = attributes[attr];\\n\\n    if (attr === 'text') {\\n      el.textContent = value;\\n    } else if (attr === 'html') {\\n      el.html(value);\\n    } else {\\n      el.setAttribute(attr, value);\\n    }\\n  });\\n  return el;\\n};\\n\\nvar static_hash;\\n\\nvar getStaticHash = function getStaticHash() {\\n  static_hash = static_hash || (document.querySelector('script[src*=\\\"main\\\"]').getAttribute('src') || '').split('.')[1];\\n  return static_hash;\\n};\\n\\nvar PromiseClass = function PromiseClass() {\\n  var _this = this;\\n\\n  utility_classCallCheck(this, PromiseClass);\\n\\n  this.promise = new Promise(function (resolve, reject) {\\n    _this.reject = reject;\\n    _this.resolve = resolve;\\n  });\\n};\\n\\nvar copyToClipboard = function copyToClipboard(text) {\\n  var textField = document.createElement('textarea');\\n  textField.innerText = text;\\n  document.body.appendChild(textField);\\n  textField.select();\\n  document.execCommand('copy');\\n  textField.remove();\\n}; // eu countries to support\\n\\n\\nvar eu_countries = (/* unused pure expression or super */ null && (['it', 'de', 'fr', 'lu', 'gr', 'mf', 'es', 'sk', 'lt', 'nl', 'at', 'bg', 'si', 'cy', 'be', 'ro', 'hr', 'pt', 'pl', 'lv', 'ee', 'cz', 'fi', 'hu', 'dk', 'se', 'ie', 'im', 'gb', 'mt'])); // check if client is from EU\\n\\nvar isEuCountry = function isEuCountry(country) {\\n  return eu_countries.includes(country);\\n}; // check if mlt or dxtrade for account text\\n\\n\\nvar getAccountText = function getAccountText(account) {\\n  var account_text = '';\\n\\n  if (account.is_dxtrade || account.is_mt) {\\n    account_text = account.text;\\n  } else {\\n    account_text = getCurrencyDisplayCode(account.text);\\n  }\\n\\n  return account_text;\\n};\\n\\n\\n;// CONCATENATED MODULE: ./Utils/Validator/errors.js\\nfunction errors_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction errors_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction errors_createClass(Constructor, protoProps, staticProps) { if (protoProps) errors_defineProperties(Constructor.prototype, protoProps); if (staticProps) errors_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nvar Errors = /*#__PURE__*/function () {\\n  function Errors() {\\n    errors_classCallCheck(this, Errors);\\n\\n    this.errors = {};\\n  }\\n\\n  errors_createClass(Errors, [{\\n    key: \\\"add\\\",\\n    value: function add(attribute, message) {\\n      if (!this.has(attribute)) {\\n        this.errors[attribute] = [];\\n      }\\n\\n      if (this.errors[attribute].indexOf(message) === -1) {\\n        this.errors[attribute].push(message);\\n      }\\n    }\\n  }, {\\n    key: \\\"all\\\",\\n    value: function all() {\\n      return this.errors;\\n    }\\n  }, {\\n    key: \\\"first\\\",\\n    value: function first(attribute) {\\n      if (this.has(attribute)) {\\n        return this.errors[attribute][0];\\n      }\\n\\n      return null;\\n    }\\n  }, {\\n    key: \\\"get\\\",\\n    value: function get(attribute) {\\n      if (this.has(attribute)) {\\n        return this.errors[attribute];\\n      }\\n\\n      return [];\\n    }\\n  }, {\\n    key: \\\"has\\\",\\n    value: function has(attribute) {\\n      return Object.prototype.hasOwnProperty.call(this.errors, attribute);\\n    }\\n  }]);\\n\\n  return Errors;\\n}();\\n\\n/* harmony default export */ const errors = (Errors);\\n;// CONCATENATED MODULE: ./Utils/Validator/validator.js\\nfunction validator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction validator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction validator_createClass(Constructor, protoProps, staticProps) { if (protoProps) validator_defineProperties(Constructor.prototype, protoProps); if (staticProps) validator_defineProperties(Constructor, staticProps); return Constructor; }\\n\\n\\n\\n\\n\\nvar Validator = /*#__PURE__*/function () {\\n  function Validator(input, rules) {\\n    var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\\n\\n    validator_classCallCheck(this, Validator);\\n\\n    this.input = input;\\n    this.rules = rules;\\n    this.store = store;\\n    this.errors = new errors();\\n    this.error_count = 0;\\n  }\\n  /**\\n   * Add failure and error message for given rule\\n   *\\n   * @param {string} attribute\\n   * @param {object} rule\\n   */\\n\\n\\n  validator_createClass(Validator, [{\\n    key: \\\"addFailure\\\",\\n    value: function addFailure(attribute, rule, error_message) {\\n      var message = error_message || rule.options.message || (0,shared_.getPreBuildDVRs)()[rule.name].message();\\n\\n      if (rule.name === 'length') {\\n        message = template(message, [rule.options.min === rule.options.max ? rule.options.min : \\\"\\\".concat(rule.options.min, \\\"-\\\").concat(rule.options.max)]);\\n      } else if (rule.name === 'min') {\\n        message = template(message, [rule.options.min]);\\n      } else if (rule.name === 'not_equal') {\\n        message = template(message, [rule.options.name1, rule.options.name2]);\\n      }\\n\\n      this.errors.add(attribute, message);\\n      this.error_count++;\\n    }\\n    /**\\n     * Runs validator\\n     *\\n     * @return {boolean} Whether it passes; true = passes, false = fails\\n     */\\n\\n  }, {\\n    key: \\\"check\\\",\\n    value: function check() {\\n      var _this = this;\\n\\n      Object.keys(this.input).forEach(function (attribute) {\\n        if (!Object.prototype.hasOwnProperty.call(_this.rules, attribute)) {\\n          return;\\n        }\\n\\n        _this.rules[attribute].forEach(function (rule) {\\n          var ruleObject = Validator.getRuleObject(rule);\\n\\n          if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\\n            return;\\n          }\\n\\n          if (ruleObject.options.condition && !ruleObject.options.condition(_this.store)) {\\n            return;\\n          }\\n\\n          if (_this.input[attribute] === '' && ruleObject.name !== 'req') {\\n            return;\\n          }\\n\\n          var is_valid, error_message;\\n\\n          if (ruleObject.name === 'number') {\\n            var _ruleObject$validator = ruleObject.validator(_this.input[attribute], ruleObject.options, _this.store, _this.input),\\n                is_ok = _ruleObject$validator.is_ok,\\n                message = _ruleObject$validator.message;\\n\\n            is_valid = is_ok;\\n            error_message = message;\\n          } else {\\n            is_valid = ruleObject.validator(_this.input[attribute], ruleObject.options, _this.store, _this.input);\\n          }\\n\\n          if (!is_valid) {\\n            _this.addFailure(attribute, ruleObject, error_message);\\n          }\\n        });\\n      });\\n      return !this.error_count;\\n    }\\n    /**\\n     * Determine if validation passes\\n     *\\n     * @return {boolean}\\n     */\\n\\n  }, {\\n    key: \\\"isPassed\\\",\\n    value: function isPassed() {\\n      return this.check();\\n    }\\n    /**\\n     * Converts the rule array to an object\\n     *\\n     * @param {array} rule\\n     * @return {object}\\n     */\\n\\n  }], [{\\n    key: \\\"getRuleObject\\\",\\n    value: function getRuleObject(rule) {\\n      var is_rule_string = typeof rule === 'string';\\n      var rule_object = {\\n        name: is_rule_string ? rule : rule[0],\\n        options: is_rule_string ? {} : rule[1] || {}\\n      };\\n      rule_object.validator = rule_object.name === 'custom' ? rule[1].func : (0,shared_.getPreBuildDVRs)()[rule_object.name].func;\\n      return rule_object;\\n    }\\n  }]);\\n\\n  return Validator;\\n}();\\n\\n/* harmony default export */ const Validator_validator = (Validator);\\n;// CONCATENATED MODULE: ./Utils/Validator/index.js\\n\\n\\n;// CONCATENATED MODULE: ./Stores/base-store.js\\nvar base_store_dec, base_store_dec2, base_store_dec3, base_store_dec4, base_store_dec5, base_store_dec6, base_store_dec7, base_store_dec8, base_store_dec9, base_store_dec10, base_store_dec11, base_store_dec12, base_store_dec13, base_store_dec14, base_store_dec15, base_store_dec16, base_store_class, base_store_descriptor, base_store_descriptor2, base_store_descriptor3, _class2, _temp;\\n\\nfunction base_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction base_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { base_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { base_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction base_store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction base_store_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { base_store_ownKeys(Object(source), true).forEach(function (key) { base_store_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { base_store_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction base_store_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction base_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction base_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction base_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction base_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction base_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction base_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n/**\\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\\n *  1. Creating snapshot object from the store.\\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\\n */\\n\\nvar BaseStore = (base_store_dec = external_mobx_.action.bound, base_store_dec2 = external_mobx_.action.bound, base_store_dec3 = external_mobx_.action.bound, base_store_dec4 = external_mobx_.action.bound, base_store_dec5 = external_mobx_.action.bound, base_store_dec6 = external_mobx_.action.bound, base_store_dec7 = external_mobx_.action.bound, base_store_dec8 = external_mobx_.action.bound, base_store_dec9 = external_mobx_.action.bound, base_store_dec10 = external_mobx_.action.bound, base_store_dec11 = external_mobx_.action.bound, base_store_dec12 = external_mobx_.action.bound, base_store_dec13 = external_mobx_.action.bound, base_store_dec14 = external_mobx_.action.bound, base_store_dec15 = external_mobx_.action.bound, base_store_dec16 = external_mobx_.action.bound, (base_store_class = (_temp = _class2 = /*#__PURE__*/function () {\\n  /**\\n   * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\\n   */\\n\\n  /**\\n   * Constructor of the base class that gets properties' name of child which should be saved in storages\\n   *\\n   * @param {Object} options - An object that contains the following properties:\\n   *     @property {Object}   root_store - An object that contains the root store of the app.\\n   *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\\n   *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\\n   *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\\n   *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\\n   */\\n  function BaseStore() {\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n    base_store_classCallCheck(this, BaseStore);\\n\\n    base_store_initializerDefineProperty(this, \\\"validation_errors\\\", base_store_descriptor, this);\\n\\n    base_store_initializerDefineProperty(this, \\\"validation_rules\\\", base_store_descriptor2, this);\\n\\n    this.preSwitchAccountDisposer = null;\\n    this.pre_switch_account_listener = null;\\n    this.switchAccountDisposer = null;\\n    this.switch_account_listener = null;\\n    this.logoutDisposer = null;\\n    this.logout_listener = null;\\n    this.clientInitDisposer = null;\\n    this.client_init_listener = null;\\n    this.networkStatusChangeDisposer = null;\\n    this.network_status_change_listener = null;\\n    this.themeChangeDisposer = null;\\n    this.theme_change_listener = null;\\n    this.realAccountSignupEndedDisposer = null;\\n    this.real_account_signup_ended_listener = null;\\n\\n    base_store_initializerDefineProperty(this, \\\"partial_fetch_time\\\", base_store_descriptor3, this);\\n\\n    var root_store = options.root_store,\\n        local_storage_properties = options.local_storage_properties,\\n        session_storage_properties = options.session_storage_properties,\\n        validation_rules = options.validation_rules,\\n        store_name = options.store_name;\\n    Object.defineProperty(this, 'root_store', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    Object.defineProperty(this, 'local_storage_properties', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    Object.defineProperty(this, 'session_storage_properties', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    var has_local_or_session_storage = local_storage_properties && local_storage_properties.length || session_storage_properties && session_storage_properties.length;\\n\\n    if (has_local_or_session_storage) {\\n      if (!store_name) {\\n        throw new Error('store_name is required for local/session storage');\\n      }\\n\\n      Object.defineProperty(this, 'store_name', {\\n        value: store_name,\\n        enumerable: false,\\n        writable: false\\n      });\\n    }\\n\\n    this.root_store = root_store;\\n    this.local_storage_properties = local_storage_properties || [];\\n    this.session_storage_properties = session_storage_properties || [];\\n    this.setValidationRules(validation_rules);\\n    this.setupReactionForLocalStorage();\\n    this.setupReactionForSessionStorage();\\n    this.retrieveFromStorage();\\n  }\\n  /**\\n   * Returns an snapshot of the current store\\n   *\\n   * @param {String[]} properties - A list of properties' names that should be in the snapshot.\\n   *\\n   * @return {Object} Returns a cloned object of the store.\\n   */\\n\\n\\n  base_store_createClass(BaseStore, [{\\n    key: \\\"getSnapshot\\\",\\n    value: function getSnapshot(properties) {\\n      var snapshot = (0,external_mobx_.toJS)(this);\\n\\n      if (!(0,shared_.isEmptyObject)(this.root_store)) {\\n        snapshot.root_store = this.root_store;\\n      }\\n\\n      if (properties && properties.length) {\\n        snapshot = properties.reduce(function (result, p) {\\n          return Object.assign(result, base_store_defineProperty({}, p, snapshot[p]));\\n        }, {});\\n      }\\n\\n      return snapshot;\\n    }\\n    /**\\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\\n     *  and invokes `saveToStorage` when there are any changes on them.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setupReactionForLocalStorage\\\",\\n    value: function setupReactionForLocalStorage() {\\n      var _this = this;\\n\\n      if (this.local_storage_properties.length) {\\n        (0,external_mobx_.reaction)(function () {\\n          return _this.local_storage_properties.map(function (i) {\\n            return _this[i];\\n          });\\n        }, function () {\\n          return _this.saveToStorage(_this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE);\\n        });\\n      }\\n    }\\n    /**\\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\\n     *  and invokes `saveToStorage` when there are any changes on them.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setupReactionForSessionStorage\\\",\\n    value: function setupReactionForSessionStorage() {\\n      var _this2 = this;\\n\\n      if (this.session_storage_properties.length) {\\n        (0,external_mobx_.reaction)(function () {\\n          return _this2.session_storage_properties.map(function (i) {\\n            return _this2[i];\\n          });\\n        }, function () {\\n          return _this2.saveToStorage(_this2.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE);\\n        });\\n      }\\n    }\\n    /**\\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\\n     *\\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"saveToStorage\\\",\\n    value: function saveToStorage(properties, storage) {\\n      var snapshot = JSON.stringify(this.getSnapshot(properties), function (key, value) {\\n        if (value !== null) return value;\\n        return undefined;\\n      });\\n\\n      if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\\n        localStorage.setItem(this.store_name, snapshot);\\n      } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\\n        sessionStorage.setItem(this.store_name, snapshot);\\n      }\\n    }\\n    /**\\n     * Retrieves saved snapshot of the store and assigns to the current instance.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"retrieveFromStorage\\\",\\n    value: function retrieveFromStorage() {\\n      var _this3 = this;\\n\\n      var local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\\n      var session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\\n\\n      var snapshot = base_store_objectSpread(base_store_objectSpread({}, local_storage_snapshot), session_storage_snapshot);\\n\\n      Object.keys(snapshot).forEach(function (k) {\\n        return _this3[k] = snapshot[k];\\n      });\\n    }\\n    /**\\n     * Sets validation error messages for an observable property of the store\\n     *\\n     * @param {String} propertyName - The observable property's name\\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setValidationErrorMessages\\\",\\n    value: function setValidationErrorMessages(propertyName, messages) {\\n      var _this4 = this;\\n\\n      var is_different = function is_different() {\\n        return !!_this4.validation_errors[propertyName].filter(function (x) {\\n          return !messages.includes(x);\\n        }).concat(messages.filter(function (x) {\\n          return !_this4.validation_errors[propertyName].includes(x);\\n        })).length;\\n      };\\n\\n      if (!this.validation_errors[propertyName] || is_different()) {\\n        this.validation_errors[propertyName] = messages;\\n      }\\n    }\\n    /**\\n     * Sets validation rules\\n     *\\n     * @param {object} rules\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setValidationRules\\\",\\n    value: function setValidationRules() {\\n      var _this5 = this;\\n\\n      var rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      Object.keys(rules).forEach(function (key) {\\n        _this5.addRule(key, rules[key]);\\n      });\\n    }\\n    /**\\n     * Adds rules to the particular property\\n     *\\n     * @param {String} property\\n     * @param {String} rules\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"addRule\\\",\\n    value: function addRule(property, rules) {\\n      var _this6 = this;\\n\\n      this.validation_rules[property] = rules;\\n      (0,external_mobx_.intercept)(this, property, function (change) {\\n        _this6.validateProperty(property, change.newValue);\\n\\n        return change;\\n      });\\n    }\\n    /**\\n     * Validates a particular property of the store\\n     *\\n     * @param {String} property - The name of the property in the store\\n     * @param {object} value    - The value of the property, it can be undefined.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"validateProperty\\\",\\n    value: function validateProperty(property, value) {\\n      var _this7 = this;\\n\\n      var trigger = this.validation_rules[property].trigger;\\n\\n      var inputs = base_store_defineProperty({}, property, value !== undefined ? value : this[property]);\\n\\n      var validation_rules = base_store_defineProperty({}, property, this.validation_rules[property].rules || []);\\n\\n      if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\\n        inputs[trigger] = this[trigger];\\n        validation_rules[trigger] = this.validation_rules[trigger].rules || [];\\n      }\\n\\n      var validator = new Validator_validator(inputs, validation_rules, this);\\n      validator.isPassed();\\n      Object.keys(inputs).forEach(function (key) {\\n        _this7.setValidationErrorMessages(key, validator.errors.get(key));\\n      });\\n    }\\n    /**\\n     * Validates all properties which validation rule has been set for.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"validateAllProperties\\\",\\n    value: function validateAllProperties() {\\n      var _this8 = this;\\n\\n      var validation_rules = Object.keys(this.validation_rules);\\n      var validation_errors = Object.keys(this.validation_errors);\\n      validation_rules.forEach(function (p) {\\n        _this8.validateProperty(p, _this8[p]);\\n      }); // Remove keys that are present in error, but not in rules:\\n\\n      validation_errors.forEach(function (error) {\\n        if (!validation_rules.includes(error)) {\\n          delete _this8.validation_errors[error];\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"onSwitchAccount\\\",\\n    value: function onSwitchAccount(listener) {\\n      var _this9 = this;\\n\\n      if (listener) {\\n        this.switch_account_listener = listener;\\n        this.switchAccountDisposer = (0,external_mobx_.when)(function () {\\n          return _this9.root_store.client.switch_broadcast;\\n        }, function () {\\n          try {\\n            var result = _this9.switch_account_listener();\\n\\n            if (result && result.then && typeof result.then === 'function') {\\n              result.then(function () {\\n                _this9.root_store.client.switchEndSignal();\\n\\n                _this9.onSwitchAccount(_this9.switch_account_listener);\\n              });\\n            } else {\\n              throw new Error('Switching account listeners are required to return a promise.');\\n            }\\n          } catch (error) {\\n            // there is no listener currently active. so we can just ignore the error raised from treating\\n            // a null object as a function. Although, in development mode, we throw a console error.\\n            if (!(0,shared_.isProduction)()) {\\n              console.error(error); // eslint-disable-line\\n            }\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"onPreSwitchAccount\\\",\\n    value: function onPreSwitchAccount(listener) {\\n      var _this10 = this;\\n\\n      if (listener) {\\n        this.pre_switch_account_listener = listener;\\n        this.preSwitchAccountDisposer = (0,external_mobx_.when)(function () {\\n          return _this10.root_store.client.pre_switch_broadcast;\\n        }, function () {\\n          try {\\n            var result = _this10.pre_switch_account_listener();\\n\\n            if (result && result.then && typeof result.then === 'function') {\\n              result.then(function () {\\n                _this10.root_store.client.setPreSwitchAccount(false);\\n\\n                _this10.onPreSwitchAccount(_this10.pre_switch_account_listener);\\n              });\\n            } else {\\n              throw new Error('Pre-switch account listeners are required to return a promise.');\\n            }\\n          } catch (error) {\\n            // there is no listener currently active. so we can just ignore the error raised from treating\\n            // a null object as a function. Although, in development mode, we throw a console error.\\n            if (!(0,shared_.isProduction)()) {\\n              console.error(error); // eslint-disable-line\\n            }\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"onLogout\\\",\\n    value: function onLogout(listener) {\\n      var _this11 = this;\\n\\n      this.logoutDisposer = (0,external_mobx_.when)(function () {\\n        return _this11.root_store.client.has_logged_out;\\n      }, /*#__PURE__*/base_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var result;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.prev = 0;\\n                result = _this11.logout_listener();\\n\\n                if (!(result && result.then && typeof result.then === 'function')) {\\n                  _context.next = 6;\\n                  break;\\n                }\\n\\n                result.then(function () {\\n                  _this11.root_store.client.setLogout(false);\\n\\n                  _this11.onLogout(_this11.logout_listener);\\n                });\\n                _context.next = 7;\\n                break;\\n\\n              case 6:\\n                throw new Error('Logout listeners are required to return a promise.');\\n\\n              case 7:\\n                _context.next = 12;\\n                break;\\n\\n              case 9:\\n                _context.prev = 9;\\n                _context.t0 = _context[\\\"catch\\\"](0);\\n\\n                // there is no listener currently active. so we can just ignore the error raised from treating\\n                // a null object as a function. Although, in development mode, we throw a console error.\\n                if (!(0,shared_.isProduction)()) {\\n                  console.error(_context.t0); // eslint-disable-line\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, null, [[0, 9]]);\\n      })));\\n      this.logout_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onClientInit\\\",\\n    value: function onClientInit(listener) {\\n      var _this12 = this;\\n\\n      this.clientInitDisposer = (0,external_mobx_.when)(function () {\\n        return _this12.root_store.client.initialized_broadcast;\\n      }, /*#__PURE__*/base_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var result;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.prev = 0;\\n                result = _this12.client_init_listener();\\n\\n                if (!(result && result.then && typeof result.then === 'function')) {\\n                  _context2.next = 6;\\n                  break;\\n                }\\n\\n                result.then(function () {\\n                  _this12.root_store.client.setInitialized(false);\\n\\n                  _this12.onClientInit(_this12.client_init_listener);\\n                });\\n                _context2.next = 7;\\n                break;\\n\\n              case 6:\\n                throw new Error('Client init listeners are required to return a promise.');\\n\\n              case 7:\\n                _context2.next = 12;\\n                break;\\n\\n              case 9:\\n                _context2.prev = 9;\\n                _context2.t0 = _context2[\\\"catch\\\"](0);\\n\\n                // there is no listener currently active. so we can just ignore the error raised from treating\\n                // a null object as a function. Although, in development mode, we throw a console error.\\n                if (!(0,shared_.isProduction)()) {\\n                  console.error(_context2.t0); // eslint-disable-line\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, null, [[0, 9]]);\\n      })));\\n      this.client_init_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onNetworkStatusChange\\\",\\n    value: function onNetworkStatusChange(listener) {\\n      var _this13 = this;\\n\\n      this.networkStatusChangeDisposer = (0,external_mobx_.reaction)(function () {\\n        return _this13.root_store.common.is_network_online;\\n      }, function (is_online) {\\n        try {\\n          _this13.network_status_change_listener(is_online);\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.network_status_change_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onThemeChange\\\",\\n    value: function onThemeChange(listener) {\\n      var _this14 = this;\\n\\n      this.themeChangeDisposer = (0,external_mobx_.reaction)(function () {\\n        return _this14.root_store.ui.is_dark_mode_on;\\n      }, function (is_dark_mode_on) {\\n        try {\\n          _this14.theme_change_listener(is_dark_mode_on);\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.theme_change_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onRealAccountSignupEnd\\\",\\n    value: function onRealAccountSignupEnd(listener) {\\n      var _this15 = this;\\n\\n      this.realAccountSignupEndedDisposer = (0,external_mobx_.when)(function () {\\n        return _this15.root_store.ui.has_real_account_signup_ended;\\n      }, function () {\\n        try {\\n          var result = _this15.real_account_signup_ended_listener();\\n\\n          if (result && result.then && typeof result.then === 'function') {\\n            result.then(function () {\\n              _this15.root_store.ui.setRealAccountSignupEnd(false);\\n\\n              _this15.onRealAccountSignupEnd(_this15.real_account_signup_ended_listener);\\n            });\\n          } else {\\n            throw new Error('Real account signup listeners are required to return a promise.');\\n          }\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.real_account_signup_ended_listener = listener;\\n    }\\n  }, {\\n    key: \\\"disposePreSwitchAccount\\\",\\n    value: function disposePreSwitchAccount() {\\n      if (typeof this.preSwitchAccountDisposer === 'function') {\\n        this.preSwitchAccountDisposer();\\n      }\\n\\n      this.pre_switch_account_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeSwitchAccount\\\",\\n    value: function disposeSwitchAccount() {\\n      if (typeof this.switchAccountDisposer === 'function') {\\n        this.switchAccountDisposer();\\n      }\\n\\n      this.switch_account_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeLogout\\\",\\n    value: function disposeLogout() {\\n      if (typeof this.logoutDisposer === 'function') {\\n        this.logoutDisposer();\\n      }\\n\\n      this.logout_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeClientInit\\\",\\n    value: function disposeClientInit() {\\n      if (typeof this.clientInitDisposer === 'function') {\\n        this.clientInitDisposer();\\n      }\\n\\n      this.client_init_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeNetworkStatusChange\\\",\\n    value: function disposeNetworkStatusChange() {\\n      if (typeof this.networkStatusChangeDisposer === 'function') {\\n        this.networkStatusChangeDisposer();\\n      }\\n\\n      this.network_status_change_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeThemeChange\\\",\\n    value: function disposeThemeChange() {\\n      if (typeof this.themeChangeDisposer === 'function') {\\n        this.themeChangeDisposer();\\n      }\\n\\n      this.theme_change_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeRealAccountSignupEnd\\\",\\n    value: function disposeRealAccountSignupEnd() {\\n      if (typeof this.realAccountSignupEndedDisposer === 'function') {\\n        this.realAccountSignupEndedDisposer();\\n      }\\n\\n      this.real_account_signup_ended_listener = null;\\n    }\\n  }, {\\n    key: \\\"onUnmount\\\",\\n    value: function onUnmount() {\\n      this.disposePreSwitchAccount();\\n      this.disposeSwitchAccount();\\n      this.disposeLogout();\\n      this.disposeClientInit();\\n      this.disposeNetworkStatusChange();\\n      this.disposeThemeChange();\\n      this.disposeRealAccountSignupEnd();\\n    }\\n  }, {\\n    key: \\\"assertHasValidCache\\\",\\n    value: function assertHasValidCache(loginid) {\\n      // account was changed when this was unmounted.\\n      if (this.root_store.client.loginid !== loginid) {\\n        for (var _len = arguments.length, reactions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n          reactions[_key - 1] = arguments[_key];\\n        }\\n\\n        reactions.forEach(function (act) {\\n          return act();\\n        });\\n        this.partial_fetch_time = false;\\n      }\\n    }\\n  }]);\\n\\n  return BaseStore;\\n}(), _class2.STORAGES = Object.freeze({\\n  LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\\n  SESSION_STORAGE: Symbol('SESSION_STORAGE')\\n}), _temp), (base_store_descriptor = base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"validation_errors\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), base_store_descriptor2 = base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"validation_rules\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), base_store_descriptor3 = base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"partial_fetch_time\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"retrieveFromStorage\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"retrieveFromStorage\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"setValidationErrorMessages\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"setValidationErrorMessages\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"setValidationRules\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"setValidationRules\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"addRule\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"addRule\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"validateProperty\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"validateProperty\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"validateAllProperties\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"validateAllProperties\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onSwitchAccount\\\", [base_store_dec], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onSwitchAccount\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onPreSwitchAccount\\\", [base_store_dec2], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onPreSwitchAccount\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onLogout\\\", [base_store_dec3], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onLogout\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onClientInit\\\", [base_store_dec4], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onClientInit\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onNetworkStatusChange\\\", [base_store_dec5], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onNetworkStatusChange\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onThemeChange\\\", [base_store_dec6], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onThemeChange\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onRealAccountSignupEnd\\\", [base_store_dec7], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onRealAccountSignupEnd\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposePreSwitchAccount\\\", [base_store_dec8], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposePreSwitchAccount\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeSwitchAccount\\\", [base_store_dec9], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeSwitchAccount\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeLogout\\\", [base_store_dec10], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeLogout\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeClientInit\\\", [base_store_dec11], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeClientInit\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeNetworkStatusChange\\\", [base_store_dec12], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeNetworkStatusChange\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeThemeChange\\\", [base_store_dec13], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeThemeChange\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeRealAccountSignupEnd\\\", [base_store_dec14], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeRealAccountSignupEnd\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onUnmount\\\", [base_store_dec15], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onUnmount\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"assertHasValidCache\\\", [base_store_dec16], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"assertHasValidCache\\\"), base_store_class.prototype)), base_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/general-store.js\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nvar general_store_dec, general_store_dec2, general_store_dec3, general_store_dec4, general_store_dec5, general_store_dec6, general_store_dec7, general_store_dec8, general_store_dec9, general_store_dec10, general_store_dec11, general_store_dec12, general_store_dec13, general_store_dec14, general_store_dec15, general_store_dec16, general_store_dec17, general_store_dec18, general_store_dec19, general_store_dec20, general_store_dec21, general_store_dec22, general_store_dec23, general_store_dec24, _dec25, general_store_class, general_store_descriptor, general_store_descriptor2, general_store_descriptor3, general_store_descriptor4, general_store_descriptor5, general_store_descriptor6, general_store_descriptor7, general_store_descriptor8, general_store_descriptor9, general_store_descriptor10, general_store_descriptor11, general_store_descriptor12, general_store_descriptor13, general_store_descriptor14, general_store_descriptor15;\\n\\nfunction general_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction general_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { general_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { general_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction general_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction general_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction general_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction general_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) general_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) general_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction general_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction general_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\n\\n\\nvar GeneralStore = (general_store_dec = external_mobx_.action.bound, general_store_dec2 = external_mobx_.action.bound, general_store_dec3 = external_mobx_.action.bound, general_store_dec4 = external_mobx_.action.bound, general_store_dec5 = external_mobx_.action.bound, general_store_dec6 = external_mobx_.action.bound, general_store_dec7 = external_mobx_.action.bound, general_store_dec8 = external_mobx_.action.bound, general_store_dec9 = external_mobx_.action.bound, general_store_dec10 = external_mobx_.action.bound, general_store_dec11 = external_mobx_.action.bound, general_store_dec12 = external_mobx_.action.bound, general_store_dec13 = external_mobx_.action.bound, general_store_dec14 = external_mobx_.action.bound, general_store_dec15 = external_mobx_.action.bound, general_store_dec16 = external_mobx_.action.bound, general_store_dec17 = external_mobx_.action.bound, general_store_dec18 = external_mobx_.action.bound, general_store_dec19 = external_mobx_.action.bound, general_store_dec20 = external_mobx_.action.bound, general_store_dec21 = external_mobx_.action.bound, general_store_dec22 = external_mobx_.action.bound, general_store_dec23 = external_mobx_.action.bound, general_store_dec24 = external_mobx_.action.bound, _dec25 = external_mobx_.action.bound, (general_store_class = /*#__PURE__*/function (_BaseStore) {\\n  _inherits(GeneralStore, _BaseStore);\\n\\n  var _super = _createSuper(GeneralStore);\\n\\n  function GeneralStore(_ref) {\\n    var _this;\\n\\n    var root_store = _ref.root_store,\\n        WS = _ref.WS;\\n\\n    general_store_classCallCheck(this, GeneralStore);\\n\\n    _this = _super.call(this, {\\n      root_store: root_store\\n    });\\n\\n    general_store_initializerDefineProperty(_this, \\\"is_loading\\\", general_store_descriptor, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"is_p2p_visible\\\", general_store_descriptor2, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"p2p_notification_count\\\", general_store_descriptor3, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"cashier_route_tab_index\\\", general_store_descriptor4, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"is_deposit\\\", general_store_descriptor5, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"should_show_all_available_currencies\\\", general_store_descriptor6, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"is_cashier_default\\\", general_store_descriptor7, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"deposit_target\\\", general_store_descriptor8, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"should_set_currency_modal_title_change\\\", general_store_descriptor9, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"p2p_advertiser_error\\\", general_store_descriptor10, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"has_set_currency\\\", general_store_descriptor11, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"should_percentage_reset\\\", general_store_descriptor12, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"percentage\\\", general_store_descriptor13, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"show_p2p_in_cashier_default\\\", general_store_descriptor14, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"onRemount\\\", general_store_descriptor15, _assertThisInitialized(_this));\\n\\n    _this.active_container = constants.containers.deposit;\\n    _this.is_populating_values = false;\\n    _this.WS = WS;\\n    _this.root_store = root_store;\\n    (0,external_mobx_.when)(function () {\\n      return _this.root_store.client.is_logged_in;\\n    }, function () {\\n      _this.setHasSetCurrency();\\n\\n      _this.attachCashierToMenu();\\n    });\\n\\n    if (!_this.has_set_currency) {\\n      _this.changeSetCurrencyModalTitle();\\n    }\\n\\n    (0,external_mobx_.reaction)(function () {\\n      return [_this.root_store.client.switched, _this.root_store.client.is_logged_in, _this.root_store.client.currency];\\n    }, function () {\\n      _this.init();\\n    });\\n    return _this;\\n  }\\n\\n  general_store_createClass(GeneralStore, [{\\n    key: \\\"setOnRemount\\\",\\n    value: function setOnRemount(func) {\\n      this.onRemount = func;\\n    }\\n  }, {\\n    key: \\\"is_crypto\\\",\\n    get: function get() {\\n      var currency = this.root_store.client.currency;\\n      return !!currency && (0,shared_.isCryptocurrency)(currency);\\n    }\\n  }, {\\n    key: \\\"is_p2p_enabled\\\",\\n    get: function get() {\\n      return this.is_p2p_visible && !this.root_store.client.is_eu;\\n    }\\n  }, {\\n    key: \\\"showP2pInCashierDefault\\\",\\n    value: function showP2pInCashierDefault() {\\n      var _this$root_store$clie = this.root_store.client,\\n          account_list = _this$root_store$clie.account_list,\\n          is_virtual = _this$root_store$clie.is_virtual;\\n      var is_p2p_restricted = this.p2p_advertiser_error === 'RestrictedCountry';\\n      var has_usd_currency = account_list.some(function (account) {\\n        return account.title === 'USD';\\n      });\\n      var has_user_fiat_currency = account_list.some(function (account) {\\n        return !(0,shared_.isCryptocurrency)(account.title) && account.title !== 'Real';\\n      });\\n\\n      if (is_p2p_restricted || is_virtual || has_user_fiat_currency && !has_usd_currency) {\\n        this.show_p2p_in_cashier_default = false;\\n      } else {\\n        this.show_p2p_in_cashier_default = true;\\n      }\\n    }\\n  }, {\\n    key: \\\"attachCashierToMenu\\\",\\n    value: function attachCashierToMenu() {\\n      var _this$root_store = this.root_store,\\n          menu = _this$root_store.menu,\\n          ui = _this$root_store.ui;\\n\\n      if (!this.has_set_currency) {\\n        this.setHasSetCurrency();\\n      }\\n\\n      menu.attach({\\n        id: 'dt_cashier_tab',\\n        icon: /*#__PURE__*/external_react_default().createElement(cashier_notifications, {\\n          p2p_notification_count: this.p2p_notification_count\\n        }),\\n        text: function text() {\\n          return (0,translations_.localize)('Cashier');\\n        },\\n        link_to: this.has_set_currency && shared_.routes.cashier,\\n        onClick: !this.has_set_currency && ui.toggleSetCurrencyModal,\\n        login_only: true\\n      });\\n    }\\n  }, {\\n    key: \\\"replaceCashierMenuOnclick\\\",\\n    value: function replaceCashierMenuOnclick() {\\n      var _this$root_store2 = this.root_store,\\n          menu = _this$root_store2.menu,\\n          ui = _this$root_store2.ui;\\n      this.setHasSetCurrency();\\n      menu.update({\\n        id: 'dt_cashier_tab',\\n        icon: /*#__PURE__*/external_react_default().createElement(cashier_notifications, {\\n          p2p_notification_count: this.p2p_notification_count\\n        }),\\n        text: function text() {\\n          return (0,translations_.localize)('Cashier');\\n        },\\n        link_to: this.has_set_currency && shared_.routes.cashier,\\n        onClick: !this.has_set_currency ? ui.toggleSetCurrencyModal : false,\\n        login_only: true\\n      }, 1);\\n    }\\n  }, {\\n    key: \\\"setHasSetCurrency\\\",\\n    value: function setHasSetCurrency() {\\n      var _this$root_store$clie2 = this.root_store.client,\\n          account_list = _this$root_store$clie2.account_list,\\n          has_active_real_account = _this$root_store$clie2.has_active_real_account;\\n      this.has_set_currency = account_list.filter(function (account) {\\n        return !account.is_virtual;\\n      }).some(function (account) {\\n        return account.title !== 'Real';\\n      }) || !has_active_real_account;\\n    }\\n  }, {\\n    key: \\\"changeSetCurrencyModalTitle\\\",\\n    value: function changeSetCurrencyModalTitle() {\\n      this.should_set_currency_modal_title_change = true;\\n    }\\n  }, {\\n    key: \\\"onMountCashierDefault\\\",\\n    value: function () {\\n      var _onMountCashierDefault = general_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _payment_agent$all_pa, _payment_agent$all_pa2;\\n\\n        var _this$root_store$modu, account_prompt_dialog, payment_agent, agent_list;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store$modu = this.root_store.modules.cashier, account_prompt_dialog = _this$root_store$modu.account_prompt_dialog, payment_agent = _this$root_store$modu.payment_agent;\\n\\n                if (!this.has_set_currency) {\\n                  this.setHasSetCurrency();\\n                }\\n\\n                this.setIsCashierDefault(true);\\n                account_prompt_dialog.resetIsConfirmed();\\n                this.setLoading(true);\\n\\n                if ((_payment_agent$all_pa = payment_agent.all_payment_agent_list) !== null && _payment_agent$all_pa !== void 0 && (_payment_agent$all_pa2 = _payment_agent$all_pa.paymentagent_list) !== null && _payment_agent$all_pa2 !== void 0 && _payment_agent$all_pa2.list) {\\n                  _context.next = 10;\\n                  break;\\n                }\\n\\n                _context.next = 8;\\n                return payment_agent.getAllPaymentAgentList();\\n\\n              case 8:\\n                agent_list = _context.sent;\\n                payment_agent.setAllPaymentAgentList(agent_list);\\n\\n              case 10:\\n                this.setLoading(false);\\n\\n              case 11:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function onMountCashierDefault() {\\n        return _onMountCashierDefault.apply(this, arguments);\\n      }\\n\\n      return onMountCashierDefault;\\n    }()\\n  }, {\\n    key: \\\"calculatePercentage\\\",\\n    value: function calculatePercentage() {\\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root_store.modules.cashier.crypto_fiat_converter.converter_from_amount;\\n      var _this$root_store3 = this.root_store,\\n          client = _this$root_store3.client,\\n          modules = _this$root_store3.modules;\\n      var account_transfer = modules.cashier.account_transfer;\\n\\n      if (this.active_container === account_transfer.container) {\\n        this.percentage = +(amount / +account_transfer.selected_from.balance * 100).toFixed(0);\\n      } else {\\n        this.percentage = +(amount / +client.balance * 100).toFixed(0);\\n      }\\n\\n      if (!isFinite(this.percentage)) {\\n        this.percentage = 0;\\n      }\\n    }\\n  }, {\\n    key: \\\"percentageSelectorSelectionStatus\\\",\\n    value: function percentageSelectorSelectionStatus(should_percentage_reset) {\\n      this.should_percentage_reset = should_percentage_reset;\\n\\n      if (should_percentage_reset) {\\n        this.percentage = 0;\\n      }\\n    }\\n  }, {\\n    key: \\\"setIsDeposit\\\",\\n    value: function setIsDeposit(is_deposit) {\\n      this.is_deposit = is_deposit;\\n    }\\n  }, {\\n    key: \\\"setShouldShowAllAvailableCurrencies\\\",\\n    value: function setShouldShowAllAvailableCurrencies(value) {\\n      this.should_show_all_available_currencies = value;\\n    }\\n  }, {\\n    key: \\\"setIsCashierDefault\\\",\\n    value: function setIsCashierDefault(is_cashier_default) {\\n      this.is_cashier_default = is_cashier_default;\\n    }\\n  }, {\\n    key: \\\"setDepositTarget\\\",\\n    value: function setDepositTarget(target) {\\n      this.deposit_target = target;\\n    }\\n  }, {\\n    key: \\\"continueRoute\\\",\\n    value: function continueRoute() {\\n      this.root_store.common.routeTo(this.deposit_target);\\n    }\\n  }, {\\n    key: \\\"setAccountSwitchListener\\\",\\n    value: function setAccountSwitchListener() {\\n      // cashier inits once and tries to stay active until switching account\\n      // since cashier calls take a long time to respond or display in iframe\\n      // so we don't have any unmount function here and everything gets reset on switch instead\\n      this.disposeSwitchAccount();\\n      this.onSwitchAccount(this.accountSwitcherListener);\\n    } // Initialise P2P attributes on app load without mounting the entire cashier\\n\\n  }, {\\n    key: \\\"init\\\",\\n    value: function init() {\\n      var _this2 = this;\\n\\n      if (this.root_store.modules.cashier) {\\n        var _this$root_store4 = this.root_store,\\n            client = _this$root_store4.client,\\n            modules = _this$root_store4.modules;\\n        var _modules$cashier = modules.cashier,\\n            account_prompt_dialog = _modules$cashier.account_prompt_dialog,\\n            withdraw = _modules$cashier.withdraw;\\n        var currency = client.currency,\\n            is_logged_in = client.is_logged_in,\\n            switched = client.switched;\\n        (0,external_mobx_.when)(function () {\\n          return is_logged_in;\\n        }, /*#__PURE__*/general_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n            while (1) {\\n              switch (_context2.prev = _context2.next) {\\n                case 0:\\n                  _context2.next = 2;\\n                  return _this2.getAdvertizerError();\\n\\n                case 2:\\n                  _this2.checkP2pStatus();\\n\\n                  _context2.next = 5;\\n                  return withdraw.check10kLimit();\\n\\n                case 5:\\n                case \\\"end\\\":\\n                  return _context2.stop();\\n              }\\n            }\\n          }, _callee2);\\n        })));\\n        (0,external_mobx_.reaction)(function () {\\n          return [switched, is_logged_in, currency];\\n        }, /*#__PURE__*/general_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n            while (1) {\\n              switch (_context3.prev = _context3.next) {\\n                case 0:\\n                  _context3.next = 2;\\n                  return _this2.WS.wait('get_settings');\\n\\n                case 2:\\n                  if (!is_logged_in) {\\n                    _context3.next = 10;\\n                    break;\\n                  }\\n\\n                  _context3.next = 5;\\n                  return _this2.getAdvertizerError();\\n\\n                case 5:\\n                  account_prompt_dialog.resetLastLocation();\\n\\n                  if (switched) {\\n                    _context3.next = 10;\\n                    break;\\n                  }\\n\\n                  _this2.checkP2pStatus(); // check if withdrawal limit is reached\\n                  // if yes, this will trigger to show a notification\\n\\n\\n                  _context3.next = 10;\\n                  return _this2.check10kLimit();\\n\\n                case 10:\\n                case \\\"end\\\":\\n                  return _context3.stop();\\n              }\\n            }\\n          }, _callee3);\\n        })));\\n        (0,external_mobx_.reaction)(function () {\\n          return currency;\\n        }, function () {\\n          withdraw.setIsWithdrawConfirmed(false);\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"getAdvertizerError\\\",\\n    value: function () {\\n      var _getAdvertizerError = general_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\\n        var advertiser_info;\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                _context4.next = 2;\\n                return this.WS.authorized.p2pAdvertiserInfo();\\n\\n              case 2:\\n                advertiser_info = _context4.sent;\\n                this.setP2pAdvertiserError((0,shared_.getPropertyValue)(advertiser_info, ['error', 'code']));\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function getAdvertizerError() {\\n        return _getAdvertizerError.apply(this, arguments);\\n      }\\n\\n      return getAdvertizerError;\\n    }()\\n  }, {\\n    key: \\\"setP2pAdvertiserError\\\",\\n    value: function setP2pAdvertiserError(value) {\\n      this.p2p_advertiser_error = value;\\n    }\\n  }, {\\n    key: \\\"checkP2pStatus\\\",\\n    value: function checkP2pStatus() {\\n      var advertiser_error = this.p2p_advertiser_error;\\n      var is_p2p_restricted = advertiser_error === 'RestrictedCountry' || advertiser_error === 'RestrictedCurrency';\\n      this.setIsP2pVisible(!(is_p2p_restricted || this.root_store.client.is_virtual));\\n    }\\n  }, {\\n    key: \\\"onMountCommon\\\",\\n    value: function () {\\n      var _onMountCommon = general_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(should_remount) {\\n        var _this$root_store5, client, common, modules, _modules$cashier2, account_transfer, onramp, payment_agent, payment_agent_transfer, transaction_history;\\n\\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\\n          while (1) {\\n            switch (_context5.prev = _context5.next) {\\n              case 0:\\n                _this$root_store5 = this.root_store, client = _this$root_store5.client, common = _this$root_store5.common, modules = _this$root_store5.modules;\\n                _modules$cashier2 = modules.cashier, account_transfer = _modules$cashier2.account_transfer, onramp = _modules$cashier2.onramp, payment_agent = _modules$cashier2.payment_agent, payment_agent_transfer = _modules$cashier2.payment_agent_transfer, transaction_history = _modules$cashier2.transaction_history;\\n\\n                if (!client.is_logged_in) {\\n                  _context5.next = 12;\\n                  break;\\n                }\\n\\n                if (!this.is_populating_values) {\\n                  _context5.next = 5;\\n                  break;\\n                }\\n\\n                return _context5.abrupt(\\\"return\\\");\\n\\n              case 5:\\n                this.is_populating_values = true;\\n\\n                if (should_remount) {\\n                  this.setOnRemount(this.onMountCommon);\\n                } // we need to see if client's country has PA\\n                // if yes, we can show the PA tab in cashier\\n\\n\\n                payment_agent.setPaymentAgentList().then(payment_agent.filterPaymentAgentList);\\n\\n                if (!payment_agent_transfer.is_payment_agent) {\\n                  payment_agent_transfer.checkIsPaymentAgent();\\n                }\\n\\n                if (!account_transfer.accounts_list.length) {\\n                  account_transfer.sortAccountsTransfer();\\n                }\\n\\n                if (!onramp.is_onramp_tab_visible && window.location.pathname.endsWith(shared_.routes.cashier_onramp)) {\\n                  common.routeTo(shared_.routes.cashier_deposit);\\n                }\\n\\n                if (!transaction_history.is_crypto_transactions_visible && window.location.pathname.endsWith(shared_.routes.cashier_crypto_transactions)) {\\n                  common.routeTo(shared_.routes.cashier_deposit);\\n                  transaction_history.setIsCryptoTransactionsVisible(true);\\n                  transaction_history.onMount();\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context5.stop();\\n            }\\n          }\\n        }, _callee5, this);\\n      }));\\n\\n      function onMountCommon(_x) {\\n        return _onMountCommon.apply(this, arguments);\\n      }\\n\\n      return onMountCommon;\\n    }()\\n  }, {\\n    key: \\\"setCashierTabIndex\\\",\\n    value: function setCashierTabIndex(index) {\\n      this.cashier_route_tab_index = index;\\n    }\\n  }, {\\n    key: \\\"setNotificationCount\\\",\\n    value: function setNotificationCount(notification_count) {\\n      this.p2p_notification_count = notification_count;\\n    }\\n  }, {\\n    key: \\\"setIsP2pVisible\\\",\\n    value: function setIsP2pVisible(is_p2p_visible) {\\n      this.is_p2p_visible = is_p2p_visible;\\n\\n      if (!is_p2p_visible && window.location.pathname.endsWith(shared_.routes.cashier_p2p)) {\\n        var _this$root_store$modu2;\\n\\n        this.root_store.common.routeTo((_this$root_store$modu2 = this.root_store.modules.cashier.account_prompt_dialog.last_location) !== null && _this$root_store$modu2 !== void 0 ? _this$root_store$modu2 : shared_.routes.cashier_deposit);\\n      }\\n    }\\n  }, {\\n    key: \\\"is_cashier_locked\\\",\\n    get: function get() {\\n      var account_status = this.root_store.client.account_status;\\n      if (!(account_status !== null && account_status !== void 0 && account_status.status)) return false;\\n      return account_status.status.some(function (status_name) {\\n        return status_name === 'cashier_locked';\\n      });\\n    }\\n  }, {\\n    key: \\\"is_system_maintenance\\\",\\n    get: function get() {\\n      var account_status = this.root_store.client.account_status;\\n      if (!(account_status !== null && account_status !== void 0 && account_status.cashier_validation)) return false;\\n      return account_status.cashier_validation.some(function (validation) {\\n        return validation === 'system_maintenance';\\n      });\\n    }\\n  }, {\\n    key: \\\"setLoading\\\",\\n    value: function setLoading(is_loading) {\\n      this.is_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setActiveTab\\\",\\n    value: function setActiveTab(container) {\\n      this.active_container = container;\\n    }\\n  }, {\\n    key: \\\"accountSwitcherListener\\\",\\n    value: function accountSwitcherListener() {\\n      var _this$root_store$modu3 = this.root_store.modules.cashier,\\n          iframe = _this$root_store$modu3.iframe,\\n          payment_agent = _this$root_store$modu3.payment_agent,\\n          withdraw = _this$root_store$modu3.withdraw;\\n      withdraw.verification.clearVerification();\\n      payment_agent.verification.clearVerification();\\n      iframe.clearIframe();\\n      this.payment_agent = payment_agent;\\n      this.is_populating_values = false;\\n      this.onRemount();\\n      return Promise.resolve();\\n    }\\n  }]);\\n\\n  return GeneralStore;\\n}(BaseStore), (general_store_descriptor = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor2 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_p2p_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor3 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"p2p_notification_count\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), general_store_descriptor4 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"cashier_route_tab_index\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), general_store_descriptor5 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_deposit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor6 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"should_show_all_available_currencies\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor7 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_cashier_default\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), general_store_descriptor8 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"deposit_target\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), general_store_descriptor9 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"should_set_currency_modal_title_change\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor10 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"p2p_advertiser_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return undefined;\\n  }\\n}), general_store_descriptor11 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"has_set_currency\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor12 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"should_percentage_reset\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor13 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"percentage\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), general_store_descriptor14 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"show_p2p_in_cashier_default\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor15 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"onRemount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return function () {};\\n  }\\n}), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setOnRemount\\\", [general_store_dec], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setOnRemount\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_crypto\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"is_crypto\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_p2p_enabled\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"is_p2p_enabled\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"showP2pInCashierDefault\\\", [general_store_dec2], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"showP2pInCashierDefault\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"attachCashierToMenu\\\", [general_store_dec3], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"attachCashierToMenu\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"replaceCashierMenuOnclick\\\", [general_store_dec4], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"replaceCashierMenuOnclick\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setHasSetCurrency\\\", [general_store_dec5], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setHasSetCurrency\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"changeSetCurrencyModalTitle\\\", [general_store_dec6], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"changeSetCurrencyModalTitle\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"onMountCashierDefault\\\", [general_store_dec7], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"onMountCashierDefault\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"calculatePercentage\\\", [general_store_dec8], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"calculatePercentage\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"percentageSelectorSelectionStatus\\\", [general_store_dec9], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"percentageSelectorSelectionStatus\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setIsDeposit\\\", [general_store_dec10], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setIsDeposit\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setShouldShowAllAvailableCurrencies\\\", [general_store_dec11], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setShouldShowAllAvailableCurrencies\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setIsCashierDefault\\\", [general_store_dec12], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setIsCashierDefault\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setDepositTarget\\\", [general_store_dec13], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setDepositTarget\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"continueRoute\\\", [general_store_dec14], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"continueRoute\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setAccountSwitchListener\\\", [general_store_dec15], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setAccountSwitchListener\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"init\\\", [general_store_dec16], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"init\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"getAdvertizerError\\\", [general_store_dec17], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"getAdvertizerError\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setP2pAdvertiserError\\\", [general_store_dec18], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setP2pAdvertiserError\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"checkP2pStatus\\\", [general_store_dec19], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"checkP2pStatus\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"onMountCommon\\\", [general_store_dec20], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"onMountCommon\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setCashierTabIndex\\\", [general_store_dec21], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setCashierTabIndex\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setNotificationCount\\\", [general_store_dec22], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setNotificationCount\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setIsP2pVisible\\\", [general_store_dec23], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setIsP2pVisible\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_cashier_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"is_cashier_locked\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_system_maintenance\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"is_system_maintenance\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setLoading\\\", [general_store_dec24], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setLoading\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setActiveTab\\\", [_dec25], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setActiveTab\\\"), general_store_class.prototype)), general_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/iframe-store.js\\nvar iframe_store_dec, iframe_store_dec2, iframe_store_dec3, iframe_store_dec4, iframe_store_dec5, iframe_store_dec6, iframe_store_dec7, iframe_store_class, iframe_store_descriptor, iframe_store_descriptor2, iframe_store_descriptor3, iframe_store_descriptor4;\\n\\nfunction iframe_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction iframe_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { iframe_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { iframe_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction iframe_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction iframe_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction iframe_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction iframe_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) iframe_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) iframe_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction iframe_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction iframe_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar IframeStore = (iframe_store_dec = external_mobx_.action.bound, iframe_store_dec2 = external_mobx_.action.bound, iframe_store_dec3 = external_mobx_.action.bound, iframe_store_dec4 = external_mobx_.action.bound, iframe_store_dec5 = external_mobx_.action.bound, iframe_store_dec6 = external_mobx_.action.bound, iframe_store_dec7 = external_mobx_.action.bound, (iframe_store_class = /*#__PURE__*/function () {\\n  function IframeStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    iframe_store_classCallCheck(this, IframeStore);\\n\\n    iframe_store_initializerDefineProperty(this, \\\"iframe_height\\\", iframe_store_descriptor, this);\\n\\n    iframe_store_initializerDefineProperty(this, \\\"iframe_url\\\", iframe_store_descriptor2, this);\\n\\n    iframe_store_initializerDefineProperty(this, \\\"is_session_timeout\\\", iframe_store_descriptor3, this);\\n\\n    this.onIframeLoaded = '';\\n\\n    iframe_store_initializerDefineProperty(this, \\\"timeout_session\\\", iframe_store_descriptor4, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  iframe_store_createClass(IframeStore, [{\\n    key: \\\"setSessionTimeout\\\",\\n    value: function setSessionTimeout(is_session_time_out) {\\n      this.is_session_timeout = is_session_time_out;\\n\\n      if (is_session_time_out) {\\n        this.removeOnIframeLoaded();\\n      }\\n    }\\n  }, {\\n    key: \\\"checkIframeLoaded\\\",\\n    value: function () {\\n      var _checkIframeLoaded = iframe_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this$root_store, modules, ui;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store = this.root_store, modules = _this$root_store.modules, ui = _this$root_store.ui;\\n                this.removeOnIframeLoaded();\\n\\n                this.onIframeLoaded = function (e) {\\n                  if (/cashier|doughflow/.test(e.origin)) {\\n                    modules.cashier.general_store.setLoading(false); // set the height of the container after content loads so that the\\n                    // loading bar stays vertically centered until the end\\n\\n                    if (ui.is_mobile) {\\n                      this.setContainerHeight(window.innerHeight - 100);\\n                    } else {\\n                      this.setContainerHeight(window.innerHeight - 190);\\n                    } // do not remove the listener\\n                    // on every iframe screen change we need to update the height to more/less to match the new content\\n\\n                  }\\n                }.bind(this);\\n\\n                window.addEventListener('message', this.onIframeLoaded, false);\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function checkIframeLoaded() {\\n        return _checkIframeLoaded.apply(this, arguments);\\n      }\\n\\n      return checkIframeLoaded;\\n    }()\\n  }, {\\n    key: \\\"removeOnIframeLoaded\\\",\\n    value: function removeOnIframeLoaded() {\\n      if (this.onIframeLoaded) {\\n        window.removeEventListener('message', this.onIframeLoaded, false);\\n        this.onIframeLoaded = '';\\n      }\\n    }\\n  }, {\\n    key: \\\"clearTimeoutCashierUrl\\\",\\n    value: function clearTimeoutCashierUrl() {\\n      if (this.timeout_session) {\\n        clearTimeout(this.timeout_session);\\n      }\\n    }\\n  }, {\\n    key: \\\"setTimeoutCashierUrl\\\",\\n    value: function setTimeoutCashierUrl() {\\n      var _this = this;\\n\\n      this.clearTimeoutCashierUrl();\\n      this.timeout_session = setTimeout(function () {\\n        _this.setSessionTimeout(true);\\n      }, 60000);\\n    }\\n  }, {\\n    key: \\\"setIframeUrl\\\",\\n    value: function setIframeUrl(url) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root_store.modules.cashier.general_store.active_container;\\n      var _this$root_store2 = this.root_store,\\n          client = _this$root_store2.client,\\n          ui = _this$root_store2.ui;\\n\\n      if (url) {\\n        this.iframe_url = \\\"\\\".concat(url, \\\"&theme=\\\").concat(ui.is_dark_mode_on ? 'dark' : 'light'); // after we set iframe url we can clear verification code\\n\\n        client.setVerificationCode('', constants.map_action[container]);\\n      } else {\\n        this.iframe_url = url;\\n      }\\n    }\\n  }, {\\n    key: \\\"setContainerHeight\\\",\\n    value: function setContainerHeight(height) {\\n      this.iframe_height = height;\\n    }\\n  }, {\\n    key: \\\"clearIframe\\\",\\n    value: function clearIframe() {\\n      this.setIframeUrl('');\\n      this.clearTimeoutCashierUrl();\\n      this.setSessionTimeout(true);\\n    }\\n  }]);\\n\\n  return IframeStore;\\n}(), (iframe_store_descriptor = iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"iframe_height\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), iframe_store_descriptor2 = iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"iframe_url\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), iframe_store_descriptor3 = iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"is_session_timeout\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), iframe_store_descriptor4 = iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"timeout_session\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"setSessionTimeout\\\", [iframe_store_dec], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"setSessionTimeout\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"checkIframeLoaded\\\", [iframe_store_dec2], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"checkIframeLoaded\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"clearTimeoutCashierUrl\\\", [iframe_store_dec3], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"clearTimeoutCashierUrl\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"setTimeoutCashierUrl\\\", [iframe_store_dec4], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"setTimeoutCashierUrl\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"setIframeUrl\\\", [iframe_store_dec5], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"setIframeUrl\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"setContainerHeight\\\", [iframe_store_dec6], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"setContainerHeight\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"clearIframe\\\", [iframe_store_dec7], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"clearIframe\\\"), iframe_store_class.prototype)), iframe_store_class));\\n\\n;// CONCATENATED MODULE: ./Config/on-ramp-providers.js\\n\\n\\nvar createBanxaProvider = function createBanxaProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierBanxaDark',\\n      light: 'IcCashierBanxaLight'\\n    },\\n    name: 'Banxa',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('A fast and secure fiat-to-crypto payment service. Deposit cryptocurrencies from anywhere in the world using your credit/debit cards and bank transfers.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierVisaDark',\\n        light: 'IcCashierVisaLight'\\n      }, {\\n        dark: 'IcCashierMastercardDark',\\n        light: 'IcCashierMastercardLight'\\n      }, {\\n        dark: 'IcCashierBpayDark',\\n        light: 'IcCashierBpayLight'\\n      }, {\\n        dark: 'IcCashierSepaDark',\\n        light: 'IcCashierSepaLight'\\n      }, {\\n        dark: 'IcCashierBlueshyftDark',\\n        light: 'IcCashierBlueshyftLight'\\n      }, {\\n        dark: 'IcCashierFlexepinDark',\\n        light: 'IcCashierFlexepinLight'\\n      }, {\\n        dark: 'IcCashierPayIdDark',\\n        light: 'IcCashierPayIdLight'\\n      }, {\\n        dark: 'IcCashierPoliDark',\\n        light: 'IcCashierPoliLight'\\n      }, {\\n        dark: 'IcCashierApplePay',\\n        light: 'IcCashierApplePay'\\n      }, {\\n        dark: 'IcCashierInteracEtransfer',\\n        light: 'IcCashierInteracEtransfer'\\n      }, {\\n        dark: 'IcCashierIdeal',\\n        light: 'IcCashierIdeal'\\n      }, {\\n        dark: 'IcCashierPostBillPayDark',\\n        light: 'IcCashierPostBillPayLight'\\n      }, {\\n        dark: 'IcCashierSofort',\\n        light: 'IcCashierSofort'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    // None.\\n    getDefaultFromCurrency: function getDefaultFromCurrency() {\\n      return '';\\n    },\\n    getFromCurrencies: function getFromCurrencies() {\\n      return ['*'];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['*'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      return new Promise(function (resolve, reject) {\\n        store.WS.serviceToken({\\n          service_token: 1,\\n          service: 'banxa',\\n          referrer: window.location.href\\n        }).then(function (response) {\\n          if (response.error) {\\n            reject(response.error.message);\\n          } else {\\n            var url = response.service_token.banxa.url;\\n\\n            if (url) {\\n              window.open(url);\\n            } // Resolving empty will/should redirect user.\\n\\n\\n            resolve();\\n          }\\n        });\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: false\\n  };\\n};\\n\\nvar createChangellyProvider = function createChangellyProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierChangellyDark',\\n      light: 'IcCashierChangellyLight'\\n    },\\n    name: 'Changelly',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('Your simple access to crypto. Fast and secure way to exchange and purchase cryptocurrencies. 24/7 live chat support.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierVisaDark',\\n        light: 'IcCashierVisaLight'\\n      }, {\\n        dark: 'IcCashierMastercardDark',\\n        light: 'IcCashierMastercardLight'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    getDefaultFromCurrency: function getDefaultFromCurrency() {\\n      return 'usd';\\n    },\\n    getFromCurrencies: function getFromCurrencies() {\\n      return ['usd', 'eur', 'gbp'];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['bch', 'btc', 'etc', 'eth', 'ltc', 'ust'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      var _this = this;\\n\\n      return new Promise(function (resolve) {\\n        var url = new URL('https://widget.changelly.com/?v=3&theme=default');\\n        url.searchParams.append('fromDefault', _this.getDefaultFromCurrency());\\n        var currency = store.root_store.client.currency.toLowerCase();\\n\\n        if (_this.getToCurrencies().includes(currency)) {\\n          var to_currency = currency === 'ust' ? 'usdt' : currency;\\n          url.searchParams.append('to', to_currency);\\n          url.searchParams.append('toDefault', to_currency);\\n        }\\n\\n        url.searchParams.append('amount', 1);\\n        url.searchParams.append('merchant_id', 'iiq3jdt2p44yrfbx');\\n        window.open(url);\\n        resolve();\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: true\\n  };\\n};\\n\\nvar createXanPoolProvider = function createXanPoolProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierXanpoolDark',\\n      light: 'IcCashierXanpoolLight'\\n    },\\n    name: 'XanPool',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('Buy cryptocurrencies in an instant. Enjoy easy, quick, and secure exchanges using your local payment methods.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierFpsDark',\\n        light: 'IcCashierFpsLight'\\n      }, {\\n        dark: 'IcCashierAliPayDark',\\n        light: 'IcCashierAliPayLight'\\n      }, {\\n        dark: 'IcCashierGoPayDark',\\n        light: 'IcCashierGoPayLight'\\n      }, {\\n        dark: 'IcCashierMandiriPay',\\n        light: 'IcCashierMandiriPay'\\n      }, {\\n        dark: 'IcCashierInstaPayLight',\\n        light: 'IcCashierInstaPayDark'\\n      }, {\\n        dark: 'IcCashierCebuanaLhuillierDark',\\n        light: 'IcCashierCebuanaLhuillierLight'\\n      }, {\\n        dark: 'IcCashierPayNowDark',\\n        light: 'IcCashierPayNowLight'\\n      }, {\\n        dark: 'IcCashierUpiDark',\\n        light: 'IcCashierUpiLight'\\n      }, {\\n        dark: 'IcCashierPromptPayDark',\\n        light: 'IcCashierPromptPayLight'\\n      }, {\\n        dark: 'IcCashierViettlePay',\\n        light: 'IcCashierViettlePay'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['btc', 'eth', 'ust', 'zil', 'nem'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      return new Promise(function (resolve) {\\n        var currency = store.root_store.client.currency;\\n        var url = 'https://checkout.xanpool.com/';\\n        url += \\\"?apiKey=db4ec638dff9a68abda1ef6b7638c220\\\";\\n        url += \\\"&redirectUrl=\\\".concat(window.location.href);\\n        url += \\\"&wallet=\\\".concat(store.deposit_address);\\n        url += \\\"&cryptoCurrency=\\\".concat(currency === 'UST' ? 'USDT' : currency);\\n        url += \\\"&transactionType=buy\\\";\\n        window.open(url);\\n        resolve();\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: false\\n  };\\n};\\n\\n/* harmony default export */ const on_ramp_providers = ({\\n  createBanxaProvider: createBanxaProvider,\\n  createChangellyProvider: createChangellyProvider,\\n  createXanPoolProvider: createXanPoolProvider\\n});\\n;// CONCATENATED MODULE: ./Stores/on-ramp-store.js\\nfunction on_ramp_store_typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { on_ramp_store_typeof = function _typeof(obj) { return typeof obj; }; } else { on_ramp_store_typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return on_ramp_store_typeof(obj); }\\n\\nvar on_ramp_store_dec, on_ramp_store_dec2, on_ramp_store_dec3, on_ramp_store_dec4, on_ramp_store_dec5, on_ramp_store_dec6, on_ramp_store_dec7, on_ramp_store_dec8, on_ramp_store_dec9, on_ramp_store_dec10, on_ramp_store_dec11, on_ramp_store_dec12, on_ramp_store_dec13, on_ramp_store_dec14, on_ramp_store_dec15, on_ramp_store_dec16, on_ramp_store_dec17, on_ramp_store_dec18, on_ramp_store_dec19, on_ramp_store_dec20, on_ramp_store_dec21, on_ramp_store_dec22, on_ramp_store_class, on_ramp_store_descriptor, on_ramp_store_descriptor2, on_ramp_store_descriptor3, on_ramp_store_descriptor4, on_ramp_store_descriptor5, on_ramp_store_descriptor6, on_ramp_store_descriptor7, on_ramp_store_descriptor8, on_ramp_store_descriptor9, on_ramp_store_descriptor10, on_ramp_store_descriptor11;\\n\\nfunction on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction on_ramp_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction on_ramp_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction on_ramp_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction on_ramp_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction on_ramp_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) on_ramp_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) on_ramp_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction on_ramp_store_inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) on_ramp_store_setPrototypeOf(subClass, superClass); }\\n\\nfunction on_ramp_store_setPrototypeOf(o, p) { on_ramp_store_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return on_ramp_store_setPrototypeOf(o, p); }\\n\\nfunction on_ramp_store_createSuper(Derived) { var hasNativeReflectConstruct = on_ramp_store_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = on_ramp_store_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = on_ramp_store_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return on_ramp_store_possibleConstructorReturn(this, result); }; }\\n\\nfunction on_ramp_store_possibleConstructorReturn(self, call) { if (call && (on_ramp_store_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return on_ramp_store_assertThisInitialized(self); }\\n\\nfunction on_ramp_store_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction on_ramp_store_isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction on_ramp_store_getPrototypeOf(o) { on_ramp_store_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return on_ramp_store_getPrototypeOf(o); }\\n\\nfunction on_ramp_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction on_ramp_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\nvar OnRampStore = (on_ramp_store_dec = external_mobx_.observable.shallow, on_ramp_store_dec2 = external_mobx_.observable.ref, on_ramp_store_dec3 = external_mobx_.action.bound, on_ramp_store_dec4 = external_mobx_.action.bound, on_ramp_store_dec5 = external_mobx_.action.bound, on_ramp_store_dec6 = external_mobx_.action.bound, on_ramp_store_dec7 = external_mobx_.action.bound, on_ramp_store_dec8 = external_mobx_.action.bound, on_ramp_store_dec9 = external_mobx_.action.bound, on_ramp_store_dec10 = external_mobx_.action.bound, on_ramp_store_dec11 = external_mobx_.action.bound, on_ramp_store_dec12 = external_mobx_.action.bound, on_ramp_store_dec13 = external_mobx_.action.bound, on_ramp_store_dec14 = external_mobx_.action.bound, on_ramp_store_dec15 = external_mobx_.action.bound, on_ramp_store_dec16 = external_mobx_.action.bound, on_ramp_store_dec17 = external_mobx_.action.bound, on_ramp_store_dec18 = external_mobx_.action.bound, on_ramp_store_dec19 = external_mobx_.action.bound, on_ramp_store_dec20 = external_mobx_.action.bound, on_ramp_store_dec21 = external_mobx_.action.bound, on_ramp_store_dec22 = external_mobx_.action.bound, (on_ramp_store_class = /*#__PURE__*/function (_BaseStore) {\\n  on_ramp_store_inherits(OnRampStore, _BaseStore);\\n\\n  var _super = on_ramp_store_createSuper(OnRampStore);\\n\\n  function OnRampStore(_ref) {\\n    var _this;\\n\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    on_ramp_store_classCallCheck(this, OnRampStore);\\n\\n    _this = _super.call(this, {\\n      root_store: root_store\\n    });\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"api_error\\\", on_ramp_store_descriptor, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"deposit_address\\\", on_ramp_store_descriptor2, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_deposit_address_loading\\\", on_ramp_store_descriptor3, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_deposit_address_popover_open\\\", on_ramp_store_descriptor4, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_onramp_modal_open\\\", on_ramp_store_descriptor5, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_requesting_widget_html\\\", on_ramp_store_descriptor6, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"onramp_providers\\\", on_ramp_store_descriptor7, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"selected_provider\\\", on_ramp_store_descriptor8, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"should_show_widget\\\", on_ramp_store_descriptor9, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"widget_error\\\", on_ramp_store_descriptor10, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"widget_html\\\", on_ramp_store_descriptor11, on_ramp_store_assertThisInitialized(_this));\\n\\n    _this.deposit_address_ref = null;\\n    _this.WS = WS;\\n\\n    _this.onClientInit( /*#__PURE__*/on_ramp_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n      return regeneratorRuntime.wrap(function _callee$(_context) {\\n        while (1) {\\n          switch (_context.prev = _context.next) {\\n            case 0:\\n              _this.setOnrampProviders([on_ramp_providers.createChangellyProvider(on_ramp_store_assertThisInitialized(_this)), on_ramp_providers.createXanPoolProvider(on_ramp_store_assertThisInitialized(_this)), on_ramp_providers.createBanxaProvider(on_ramp_store_assertThisInitialized(_this))]);\\n\\n            case 1:\\n            case \\\"end\\\":\\n              return _context.stop();\\n          }\\n        }\\n      }, _callee);\\n    })));\\n\\n    return _this;\\n  }\\n\\n  on_ramp_store_createClass(OnRampStore, [{\\n    key: \\\"is_onramp_tab_visible\\\",\\n    get: function get() {\\n      var client = this.root_store.client;\\n      return client.is_virtual === false && (0,shared_.isCryptocurrency)(client.currency) && this.filtered_onramp_providers.length > 0;\\n    }\\n  }, {\\n    key: \\\"filtered_onramp_providers\\\",\\n    get: function get() {\\n      var client = this.root_store.client;\\n      return this.onramp_providers // Ensure provider supports this user's account currency.\\n      .filter(function (provider) {\\n        var to_currencies = provider.getToCurrencies();\\n        return to_currencies.includes('*') || to_currencies.includes(client.currency.toLowerCase());\\n      }) // Ensure provider supports this user's residency.\\n      .filter(function (provider) {\\n        var allowed_residencies = provider.getAllowedResidencies();\\n        return allowed_residencies.includes('*') || allowed_residencies.includes(client.residence);\\n      });\\n    }\\n  }, {\\n    key: \\\"onramp_popup_modal_title\\\",\\n    get: function get() {\\n      if (this.should_show_widget) {\\n        return (0,translations_.localize)('Payment channel');\\n      } else if (this.selected_provider) {\\n        if (this.should_show_dialog) {\\n          return (0,translations_.localize)('Our server cannot retrieve an address.');\\n        }\\n\\n        return ' '; // Empty string to render header + close icon.\\n      }\\n\\n      return undefined;\\n    }\\n  }, {\\n    key: \\\"should_show_dialog\\\",\\n    get: function get() {\\n      return this.api_error;\\n    }\\n  }, {\\n    key: \\\"onMountOnramp\\\",\\n    value: function onMountOnramp() {\\n      var _this2 = this;\\n\\n      this.disposeThirdPartyJsReaction = (0,external_mobx_.reaction)(function () {\\n        return _this2.selected_provider;\\n      }, /*#__PURE__*/function () {\\n        var _ref3 = on_ramp_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(provider) {\\n          var dependencies, _yield$import, loadjs, script_name;\\n\\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n            while (1) {\\n              switch (_context2.prev = _context2.next) {\\n                case 0:\\n                  if (provider) {\\n                    _context2.next = 2;\\n                    break;\\n                  }\\n\\n                  return _context2.abrupt(\\\"return\\\");\\n\\n                case 2:\\n                  dependencies = provider.getScriptDependencies();\\n\\n                  if (!(dependencies.length === 0)) {\\n                    _context2.next = 5;\\n                    break;\\n                  }\\n\\n                  return _context2.abrupt(\\\"return\\\");\\n\\n                case 5:\\n                  _context2.next = 7;\\n                  return __webpack_require__.e(/* import() | loadjs */ \\\"loadjs\\\").then(__webpack_require__.t.bind(__webpack_require__, \\\"../../../node_modules/loadjs/dist/loadjs.umd.js\\\", 23));\\n\\n                case 7:\\n                  _yield$import = _context2.sent;\\n                  loadjs = _yield$import[\\\"default\\\"];\\n                  script_name = \\\"\\\".concat((0,shared_.getKebabCase)(provider.name), \\\"-onramp\\\");\\n\\n                  if (!loadjs.isDefined(script_name)) {\\n                    loadjs(dependencies, script_name, {\\n                      error: function error() {\\n                        // eslint-disable-next-line no-console\\n                        console.warn(\\\"Dependencies for onramp provider \\\".concat(provider.name, \\\" could not be loaded.\\\"));\\n\\n                        _this2.setSelectedProvider(null);\\n                      }\\n                    });\\n                  }\\n\\n                case 11:\\n                case \\\"end\\\":\\n                  return _context2.stop();\\n              }\\n            }\\n          }, _callee2);\\n        }));\\n\\n        return function (_x) {\\n          return _ref3.apply(this, arguments);\\n        };\\n      }()); // When \\\"should_show_widget\\\", attempt to fetch \\\"selected_provider\\\"'s \\\"widget_html\\\".\\n\\n      this.disposeGetWidgetHtmlReaction = (0,external_mobx_.reaction)(function () {\\n        return _this2.should_show_widget;\\n      }, function (should_show_widget) {\\n        if (should_show_widget) {\\n          if (_this2.is_requesting_widget_html) {\\n            return;\\n          }\\n\\n          _this2.setIsRequestingWidgetHtml(true);\\n\\n          _this2.selected_provider.getWidgetHtml().then(function (widget_html) {\\n            if (widget_html) {\\n              // Regular providers (iframe/JS embed)\\n              _this2.setWidgetHtml(widget_html);\\n            } else {\\n              // An empty resolve (widget_html) identifies a redirect.\\n              _this2.setShouldShowWidget(false);\\n            }\\n          })[\\\"catch\\\"](function (error) {\\n            _this2.setWidgetError(error);\\n          })[\\\"finally\\\"](function () {\\n            return _this2.setIsRequestingWidgetHtml(false);\\n          });\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"onUnmountOnramp\\\",\\n    value: function onUnmountOnramp() {\\n      if (typeof this.disposeThirdPartyJsReaction === 'function') {\\n        this.disposeThirdPartyJsReaction();\\n      }\\n\\n      if (typeof this.disposeGetWidgetHtmlReaction === 'function') {\\n        this.disposeGetWidgetHtmlReaction();\\n      }\\n    }\\n  }, {\\n    key: \\\"onClickCopyDepositAddress\\\",\\n    value: function onClickCopyDepositAddress() {\\n      var _this3 = this;\\n\\n      var range = document.createRange();\\n      range.selectNodeContents(this.deposit_address_ref);\\n      var selections = window.getSelection();\\n      selections.removeAllRanges();\\n      selections.addRange(range);\\n      navigator.clipboard.writeText(this.deposit_address).then(function () {\\n        _this3.setIsDepositAddressPopoverOpen(true);\\n\\n        setTimeout(function () {\\n          return _this3.setIsDepositAddressPopoverOpen(false);\\n        }, 500);\\n      });\\n    }\\n  }, {\\n    key: \\\"onClickDisclaimerContinue\\\",\\n    value: function onClickDisclaimerContinue() {\\n      this.setShouldShowWidget(true);\\n    }\\n  }, {\\n    key: \\\"onClickGoToDepositPage\\\",\\n    value: function onClickGoToDepositPage() {\\n      this.pollApiForDepositAddress(false);\\n      window.open((0,shared_.websiteUrl)() + shared_.routes.cashier_deposit.substring(1));\\n    }\\n  }, {\\n    key: \\\"pollApiForDepositAddress\\\",\\n    value: function pollApiForDepositAddress(should_allow_empty_address) {\\n      var _this4 = this;\\n\\n      // should_allow_empty_address: API returns empty deposit address for legacy accounts\\n      // that have never generated a deposit address. Setting this to \\\"true\\\" will allow\\n      // the user to be redirected to the Deposit page (where an address will be generated).\\n      // Setting this to \\\"false\\\" will start polling the API for this deposit address.\\n      this.setIsDepositAddressLoading(true);\\n      this.setApiError(null);\\n      var deposit_address_interval = setInterval(function () {\\n        return getDepositAddressFromApi;\\n      }, 3000);\\n\\n      var getDepositAddressFromApi = function getDepositAddressFromApi() {\\n        _this4.WS.authorized.cashier('deposit', {\\n          provider: 'crypto',\\n          type: 'api'\\n        }).then(function (response) {\\n          var should_clear_interval = false;\\n\\n          if (response.error) {\\n            _this4.setApiError(response.error);\\n\\n            should_clear_interval = true;\\n          } else {\\n            var address = response.cashier.deposit.address;\\n\\n            if (address || should_allow_empty_address) {\\n              _this4.setDepositAddress(address);\\n\\n              should_clear_interval = true;\\n            }\\n          }\\n\\n          if (should_clear_interval) {\\n            clearInterval(deposit_address_interval);\\n\\n            _this4.setIsDepositAddressLoading(false);\\n          }\\n        });\\n      };\\n\\n      getDepositAddressFromApi();\\n      setTimeout(function () {\\n        clearInterval(deposit_address_interval);\\n\\n        _this4.setIsDepositAddressLoading(false);\\n      }, 30000);\\n    }\\n  }, {\\n    key: \\\"resetPopup\\\",\\n    value: function resetPopup() {\\n      this.setApiError(null);\\n      this.setDepositAddress(null);\\n      this.setDepositAddressRef(null);\\n      this.setIsDepositAddressLoading(true);\\n      this.setSelectedProvider(null);\\n      this.setShouldShowWidget(false);\\n      this.setWidgetError(null);\\n      this.setWidgetHtml(null);\\n    }\\n  }, {\\n    key: \\\"setApiError\\\",\\n    value: function setApiError(api_error) {\\n      this.api_error = api_error;\\n    }\\n  }, {\\n    key: \\\"setCopyIconRef\\\",\\n    value: function setCopyIconRef(ref) {\\n      this.copy_icon_ref = ref;\\n    }\\n  }, {\\n    key: \\\"setDepositAddress\\\",\\n    value: function setDepositAddress(deposit_address) {\\n      this.deposit_address = deposit_address;\\n    }\\n  }, {\\n    key: \\\"setDepositAddressRef\\\",\\n    value: function setDepositAddressRef(ref) {\\n      this.deposit_address_ref = ref;\\n    }\\n  }, {\\n    key: \\\"setIsDepositAddressLoading\\\",\\n    value: function setIsDepositAddressLoading(is_loading) {\\n      this.is_deposit_address_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setIsDepositAddressPopoverOpen\\\",\\n    value: function setIsDepositAddressPopoverOpen(is_open) {\\n      this.is_deposit_address_popover_open = is_open;\\n    }\\n  }, {\\n    key: \\\"setIsOnRampModalOpen\\\",\\n    value: function setIsOnRampModalOpen(is_open) {\\n      this.is_onramp_modal_open = is_open;\\n    }\\n  }, {\\n    key: \\\"setIsRequestingWidgetHtml\\\",\\n    value: function setIsRequestingWidgetHtml(is_requesting_widget_html) {\\n      this.is_requesting_widget_html = is_requesting_widget_html;\\n    }\\n  }, {\\n    key: \\\"setSelectedProvider\\\",\\n    value: function setSelectedProvider(provider) {\\n      if (provider) {\\n        this.selected_provider = provider;\\n        this.setIsOnRampModalOpen(true);\\n        this.pollApiForDepositAddress(true);\\n      } else {\\n        this.setIsOnRampModalOpen(false);\\n        this.selected_provider = null;\\n      }\\n    }\\n  }, {\\n    key: \\\"setShouldShowWidget\\\",\\n    value: function setShouldShowWidget(should_show) {\\n      this.should_show_widget = should_show;\\n    }\\n  }, {\\n    key: \\\"setOnrampProviders\\\",\\n    value: function setOnrampProviders(onramp_providers) {\\n      this.onramp_providers = onramp_providers.slice();\\n    }\\n  }, {\\n    key: \\\"setWidgetError\\\",\\n    value: function setWidgetError(widget_error) {\\n      this.widget_error = widget_error;\\n    }\\n  }, {\\n    key: \\\"setWidgetHtml\\\",\\n    value: function setWidgetHtml(widget_html) {\\n      this.widget_html = widget_html;\\n    }\\n  }]);\\n\\n  return OnRampStore;\\n}(BaseStore), (on_ramp_store_descriptor = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"api_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor2 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"deposit_address\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor3 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_deposit_address_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), on_ramp_store_descriptor4 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_deposit_address_popover_open\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), on_ramp_store_descriptor5 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_modal_open\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), on_ramp_store_descriptor6 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_requesting_widget_html\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), on_ramp_store_descriptor7 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onramp_providers\\\", [on_ramp_store_dec], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), on_ramp_store_descriptor8 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"selected_provider\\\", [on_ramp_store_dec2], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor9 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"should_show_widget\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), on_ramp_store_descriptor10 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"widget_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor11 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"widget_html\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_tab_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_tab_visible\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"filtered_onramp_providers\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"filtered_onramp_providers\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onramp_popup_modal_title\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onramp_popup_modal_title\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"should_show_dialog\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"should_show_dialog\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onMountOnramp\\\", [on_ramp_store_dec3], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onMountOnramp\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onUnmountOnramp\\\", [on_ramp_store_dec4], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onUnmountOnramp\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickCopyDepositAddress\\\", [on_ramp_store_dec5], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickCopyDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickDisclaimerContinue\\\", [on_ramp_store_dec6], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickDisclaimerContinue\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickGoToDepositPage\\\", [on_ramp_store_dec7], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickGoToDepositPage\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"pollApiForDepositAddress\\\", [on_ramp_store_dec8], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"pollApiForDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"resetPopup\\\", [on_ramp_store_dec9], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"resetPopup\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setApiError\\\", [on_ramp_store_dec10], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setApiError\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setCopyIconRef\\\", [on_ramp_store_dec11], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setCopyIconRef\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddress\\\", [on_ramp_store_dec12], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddressRef\\\", [on_ramp_store_dec13], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddressRef\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressLoading\\\", [on_ramp_store_dec14], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressLoading\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressPopoverOpen\\\", [on_ramp_store_dec15], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressPopoverOpen\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsOnRampModalOpen\\\", [on_ramp_store_dec16], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsOnRampModalOpen\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsRequestingWidgetHtml\\\", [on_ramp_store_dec17], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsRequestingWidgetHtml\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setSelectedProvider\\\", [on_ramp_store_dec18], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setSelectedProvider\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setShouldShowWidget\\\", [on_ramp_store_dec19], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setShouldShowWidget\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setOnrampProviders\\\", [on_ramp_store_dec20], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setOnrampProviders\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setWidgetError\\\", [on_ramp_store_dec21], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setWidgetError\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setWidgetHtml\\\", [on_ramp_store_dec22], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setWidgetHtml\\\"), on_ramp_store_class.prototype)), on_ramp_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/verification-store.js\\nvar verification_store_dec, verification_store_dec2, verification_store_dec3, verification_store_dec4, verification_store_dec5, verification_store_dec6, verification_store_dec7, verification_store_dec8, verification_store_class, verification_store_descriptor, verification_store_descriptor2, verification_store_descriptor3, verification_store_descriptor4, verification_store_descriptor5, verification_store_descriptor6;\\n\\nfunction verification_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction verification_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { verification_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { verification_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction verification_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction verification_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction verification_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction verification_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) verification_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) verification_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction verification_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction verification_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\nvar VerificationStore = (verification_store_dec = external_mobx_.action.bound, verification_store_dec2 = external_mobx_.action.bound, verification_store_dec3 = external_mobx_.action.bound, verification_store_dec4 = external_mobx_.action.bound, verification_store_dec5 = external_mobx_.action.bound, verification_store_dec6 = external_mobx_.action.bound, verification_store_dec7 = external_mobx_.action.bound, verification_store_dec8 = external_mobx_.action.bound, (verification_store_class = /*#__PURE__*/function () {\\n  function VerificationStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    verification_store_classCallCheck(this, VerificationStore);\\n\\n    verification_store_initializerDefineProperty(this, \\\"is_button_clicked\\\", verification_store_descriptor, this);\\n\\n    verification_store_initializerDefineProperty(this, \\\"timeout_button\\\", verification_store_descriptor2, this);\\n\\n    verification_store_initializerDefineProperty(this, \\\"error\\\", verification_store_descriptor3, this);\\n\\n    verification_store_initializerDefineProperty(this, \\\"is_email_sent\\\", verification_store_descriptor4, this);\\n\\n    verification_store_initializerDefineProperty(this, \\\"is_resend_clicked\\\", verification_store_descriptor5, this);\\n\\n    verification_store_initializerDefineProperty(this, \\\"resend_timeout\\\", verification_store_descriptor6, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  verification_store_createClass(VerificationStore, [{\\n    key: \\\"setIsButtonClicked\\\",\\n    value: function setIsButtonClicked(value) {\\n      this.is_button_clicked = value;\\n    }\\n  }, {\\n    key: \\\"setTimeoutButton\\\",\\n    value: function setTimeoutButton(value) {\\n      this.timeout_button = value;\\n    }\\n  }, {\\n    key: \\\"setIsEmailSent\\\",\\n    value: function setIsEmailSent(value) {\\n      this.is_email_sent = value;\\n    }\\n  }, {\\n    key: \\\"setIsResendClicked\\\",\\n    value: function setIsResendClicked(value) {\\n      this.is_resend_clicked = value;\\n    }\\n  }, {\\n    key: \\\"setResendTimeout\\\",\\n    value: function setResendTimeout(value) {\\n      this.resend_timeout = value;\\n    }\\n  }, {\\n    key: \\\"clearTimeoutVerification\\\",\\n    value: function clearTimeoutVerification() {\\n      if (this.timeout_button) {\\n        clearTimeout(this.timeout_button);\\n      }\\n    }\\n  }, {\\n    key: \\\"setTimeoutVerification\\\",\\n    value: function setTimeoutVerification() {\\n      var _this = this;\\n\\n      this.clearTimeoutVerification();\\n      this.setTimeoutButton(setTimeout(function () {\\n        _this.clearVerification();\\n      }, 3600000));\\n    }\\n  }, {\\n    key: \\\"sendVerificationEmail\\\",\\n    value: function () {\\n      var _sendVerificationEmail = verification_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this2 = this;\\n\\n        var _this$root_store, client, modules, resetPaymentAgent, active_container, container, withdrawal_type, response_verify_email;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store = this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                resetPaymentAgent = modules.cashier.payment_agent.resetPaymentAgent;\\n                active_container = modules.cashier.general_store.active_container;\\n                container = constants.map_action[active_container];\\n\\n                if (!(this.is_button_clicked || !client.email)) {\\n                  _context.next = 6;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 6:\\n                this.error.setErrorMessage('');\\n                this.setIsButtonClicked(true);\\n                withdrawal_type = container === 'payment_agent_withdraw' ? 'paymentagent_withdraw' : 'payment_withdraw';\\n                _context.next = 11;\\n                return this.WS.verifyEmail(client.email, withdrawal_type);\\n\\n              case 11:\\n                response_verify_email = _context.sent;\\n\\n                if (response_verify_email.error) {\\n                  this.clearVerification();\\n\\n                  if (response_verify_email.error.code === 'PaymentAgentWithdrawError') {\\n                    this.error.setErrorMessage(response_verify_email.error, resetPaymentAgent, null);\\n                  } else {\\n                    this.error.setErrorMessage(response_verify_email.error, function () {\\n                      _this2.error.setErrorMessage('', null, null);\\n                    }, null);\\n                  }\\n                } else {\\n                  this.setIsEmailSent(true);\\n                  this.setTimeoutVerification();\\n                }\\n\\n              case 13:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function sendVerificationEmail() {\\n        return _sendVerificationEmail.apply(this, arguments);\\n      }\\n\\n      return sendVerificationEmail;\\n    }()\\n  }, {\\n    key: \\\"resendVerificationEmail\\\",\\n    value: function resendVerificationEmail() {\\n      // don't allow clicking while ongoing timeout\\n      if (this.resend_timeout < 60) {\\n        return;\\n      }\\n\\n      this.setIsButtonClicked(false);\\n      this.setCountDownResendVerification();\\n      this.sendVerificationEmail();\\n    }\\n  }, {\\n    key: \\\"setCountDownResendVerification\\\",\\n    value: function setCountDownResendVerification() {\\n      var _this3 = this;\\n\\n      this.setResendTimeout(this.resend_timeout - 1);\\n      var resend_interval = setInterval(function () {\\n        if (_this3.resend_timeout === 1) {\\n          _this3.setResendTimeout(60);\\n\\n          clearInterval(resend_interval);\\n        } else {\\n          _this3.setResendTimeout(_this3.resend_timeout - 1);\\n        }\\n      }, 1000);\\n    }\\n  }, {\\n    key: \\\"clearVerification\\\",\\n    value: function clearVerification() {\\n      var _this$root_store2 = this.root_store,\\n          client = _this$root_store2.client,\\n          modules = _this$root_store2.modules;\\n      var active_container = modules.cashier.general_store.active_container;\\n      var container = constants.map_action[active_container];\\n      this.clearTimeoutVerification();\\n      this.setIsButtonClicked(false);\\n      this.setIsEmailSent(false);\\n      this.setIsResendClicked(false);\\n      this.setResendTimeout(60);\\n      this.error.setErrorMessage('', null, null);\\n      client.setVerificationCode('', container);\\n    }\\n  }]);\\n\\n  return VerificationStore;\\n}(), (verification_store_descriptor = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"is_button_clicked\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), verification_store_descriptor2 = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"timeout_button\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), verification_store_descriptor3 = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), verification_store_descriptor4 = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"is_email_sent\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), verification_store_descriptor5 = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"is_resend_clicked\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), verification_store_descriptor6 = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"resend_timeout\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 60;\\n  }\\n}), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setIsButtonClicked\\\", [verification_store_dec], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setIsButtonClicked\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setTimeoutButton\\\", [verification_store_dec2], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setTimeoutButton\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setIsEmailSent\\\", [verification_store_dec3], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setIsEmailSent\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setIsResendClicked\\\", [verification_store_dec4], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setIsResendClicked\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setResendTimeout\\\", [verification_store_dec5], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setResendTimeout\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setTimeoutVerification\\\", [verification_store_dec6], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setTimeoutVerification\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"sendVerificationEmail\\\", [verification_store_dec7], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"sendVerificationEmail\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"resendVerificationEmail\\\", [verification_store_dec8], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"resendVerificationEmail\\\"), verification_store_class.prototype)), verification_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/payment-agent-store.js\\nvar payment_agent_store_dec, payment_agent_store_dec2, payment_agent_store_dec3, payment_agent_store_dec4, payment_agent_store_dec5, payment_agent_store_dec6, payment_agent_store_dec7, payment_agent_store_dec8, payment_agent_store_dec9, payment_agent_store_dec10, payment_agent_store_dec11, payment_agent_store_dec12, payment_agent_store_dec13, payment_agent_store_dec14, payment_agent_store_dec15, payment_agent_store_dec16, payment_agent_store_dec17, payment_agent_store_dec18, payment_agent_store_dec19, payment_agent_store_dec20, payment_agent_store_dec21, payment_agent_store_dec22, payment_agent_store_dec23, payment_agent_store_dec24, payment_agent_store_class, payment_agent_store_descriptor, payment_agent_store_descriptor2, payment_agent_store_descriptor3, payment_agent_store_descriptor4, payment_agent_store_descriptor5, payment_agent_store_descriptor6, payment_agent_store_descriptor7, payment_agent_store_descriptor8, payment_agent_store_descriptor9, payment_agent_store_descriptor10, payment_agent_store_descriptor11, payment_agent_store_descriptor12, payment_agent_store_descriptor13, payment_agent_store_descriptor14, payment_agent_store_descriptor15, payment_agent_store_descriptor16, _descriptor17;\\n\\nfunction payment_agent_store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction payment_agent_store_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { payment_agent_store_ownKeys(Object(source), true).forEach(function (key) { payment_agent_store_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { payment_agent_store_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction payment_agent_store_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction payment_agent_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction payment_agent_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { payment_agent_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { payment_agent_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction payment_agent_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction payment_agent_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction payment_agent_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction payment_agent_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) payment_agent_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) payment_agent_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction payment_agent_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction payment_agent_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\nvar PaymentAgentStore = (payment_agent_store_dec = external_mobx_.action.bound, payment_agent_store_dec2 = external_mobx_.action.bound, payment_agent_store_dec3 = external_mobx_.action.bound, payment_agent_store_dec4 = external_mobx_.action.bound, payment_agent_store_dec5 = external_mobx_.action.bound, payment_agent_store_dec6 = external_mobx_.action.bound, payment_agent_store_dec7 = external_mobx_.action.bound, payment_agent_store_dec8 = external_mobx_.action.bound, payment_agent_store_dec9 = external_mobx_.action.bound, payment_agent_store_dec10 = external_mobx_.action.bound, payment_agent_store_dec11 = external_mobx_.action.bound, payment_agent_store_dec12 = external_mobx_.action.bound, payment_agent_store_dec13 = external_mobx_.action.bound, payment_agent_store_dec14 = external_mobx_.action.bound, payment_agent_store_dec15 = external_mobx_.action.bound, payment_agent_store_dec16 = external_mobx_.action.bound, payment_agent_store_dec17 = external_mobx_.action.bound, payment_agent_store_dec18 = external_mobx_.action.bound, payment_agent_store_dec19 = external_mobx_.action.bound, payment_agent_store_dec20 = external_mobx_.action.bound, payment_agent_store_dec21 = external_mobx_.action.bound, payment_agent_store_dec22 = external_mobx_.action.bound, payment_agent_store_dec23 = external_mobx_.action.bound, payment_agent_store_dec24 = external_mobx_.action.bound, (payment_agent_store_class = /*#__PURE__*/function () {\\n  function PaymentAgentStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    payment_agent_store_classCallCheck(this, PaymentAgentStore);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"list\\\", payment_agent_store_descriptor, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"agents\\\", payment_agent_store_descriptor2, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"container\\\", payment_agent_store_descriptor3, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"error\\\", payment_agent_store_descriptor4, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"filtered_list\\\", payment_agent_store_descriptor5, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"is_name_selected\\\", payment_agent_store_descriptor6, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"is_withdraw\\\", payment_agent_store_descriptor7, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"is_try_withdraw_successful\\\", payment_agent_store_descriptor8, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"is_withdraw_successful\\\", payment_agent_store_descriptor9, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"confirm\\\", payment_agent_store_descriptor10, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"receipt\\\", payment_agent_store_descriptor11, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"selected_bank\\\", payment_agent_store_descriptor12, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"supported_banks\\\", payment_agent_store_descriptor13, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"verification\\\", payment_agent_store_descriptor14, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"active_tab_index\\\", payment_agent_store_descriptor15, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"all_payment_agent_list\\\", payment_agent_store_descriptor16, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"resetPaymentAgent\\\", _descriptor17, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  payment_agent_store_createClass(PaymentAgentStore, [{\\n    key: \\\"setActiveTabIndex\\\",\\n    value: function setActiveTabIndex(index) {\\n      this.active_tab_index = index;\\n    }\\n  }, {\\n    key: \\\"setActiveTab\\\",\\n    value: function setActiveTab(index) {\\n      this.setActiveTabIndex(index);\\n\\n      if (index === 1) {\\n        this.verification.sendVerificationEmail();\\n      }\\n    }\\n  }, {\\n    key: \\\"is_payment_agent_visible\\\",\\n    get: function get() {\\n      return !!(this.filtered_list.length || this.agents.length);\\n    }\\n  }, {\\n    key: \\\"getPaymentAgentList\\\",\\n    value: function () {\\n      var _getPaymentAgentList = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this$root_store$clie, residence, currency;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.next = 2;\\n                return this.WS.wait('get_settings');\\n\\n              case 2:\\n                _this$root_store$clie = this.root_store.client, residence = _this$root_store$clie.residence, currency = _this$root_store$clie.currency;\\n                return _context.abrupt(\\\"return\\\", this.WS.authorized.paymentAgentList(residence, currency));\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function getPaymentAgentList() {\\n        return _getPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return getPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"getPaymentAgentDetails\\\",\\n    value: function () {\\n      var _getPaymentAgentDetails = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _yield$this$WS$author, paymentagent_details;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.next = 2;\\n                return this.WS.authorized.paymentAgentDetails();\\n\\n              case 2:\\n                _yield$this$WS$author = _context2.sent;\\n                paymentagent_details = _yield$this$WS$author.paymentagent_details;\\n                return _context2.abrupt(\\\"return\\\", paymentagent_details);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function getPaymentAgentDetails() {\\n        return _getPaymentAgentDetails.apply(this, arguments);\\n      }\\n\\n      return getPaymentAgentDetails;\\n    }()\\n  }, {\\n    key: \\\"addSupportedBank\\\",\\n    value: function addSupportedBank(bank) {\\n      var supported_bank_exists = this.supported_banks.find(function (supported_bank) {\\n        return supported_bank.value === bank.toLowerCase();\\n      });\\n\\n      if (!supported_bank_exists) {\\n        this.supported_banks.push({\\n          text: bank,\\n          value: bank.toLowerCase()\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"clearSuppertedBanks\\\",\\n    value: function clearSuppertedBanks() {\\n      this.supported_banks = [];\\n    }\\n  }, {\\n    key: \\\"sortSupportedBanks\\\",\\n    value: function sortSupportedBanks() {\\n      // sort supported banks alphabetically by value, the option 'All payment agents' with value 0 should be on top\\n      this.supported_banks.replace(this.supported_banks.slice().sort(function (a, b) {\\n        if (a.value < b.value) {\\n          return -1;\\n        }\\n\\n        if (a.value > b.value) {\\n          return 1;\\n        }\\n\\n        return 0;\\n      }));\\n    }\\n  }, {\\n    key: \\\"setList\\\",\\n    value: function setList(pa_list) {\\n      this.list.push(pa_list);\\n    }\\n  }, {\\n    key: \\\"clearList\\\",\\n    value: function clearList() {\\n      this.list = [];\\n    }\\n  }, {\\n    key: \\\"setPaymentAgentList\\\",\\n    value: function () {\\n      var _setPaymentAgentList = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(pa_list) {\\n        var _this = this;\\n\\n        var payment_agent_list;\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _context3.t0 = pa_list;\\n\\n                if (_context3.t0) {\\n                  _context3.next = 5;\\n                  break;\\n                }\\n\\n                _context3.next = 4;\\n                return this.getPaymentAgentList();\\n\\n              case 4:\\n                _context3.t0 = _context3.sent;\\n\\n              case 5:\\n                payment_agent_list = _context3.t0;\\n                this.clearList();\\n                this.clearSuppertedBanks(); // TODO: Once telephone, url and supported_banks removed from paymentagent_list.list we can remove them and just use the plural ones\\n\\n                payment_agent_list.paymentagent_list.list.forEach(function (payment_agent) {\\n                  _this.setList({\\n                    email: payment_agent.email,\\n                    phones: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.phone_numbers) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.telephone),\\n                    name: payment_agent.name,\\n                    supported_banks: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.supported_payment_methods) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.supported_banks),\\n                    urls: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.urls) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.url)\\n                  });\\n\\n                  if (payment_agent.supported_banks) {\\n                    var supported_banks_array = payment_agent !== null && payment_agent !== void 0 && payment_agent.supported_payment_methods ? payment_agent.supported_payment_methods.map(function (bank) {\\n                      return bank.payment_method;\\n                    }) : payment_agent.supported_banks.split(',');\\n                    supported_banks_array.forEach(function (bank) {\\n                      _this.addSupportedBank(bank);\\n                    });\\n                  }\\n                });\\n                this.sortSupportedBanks();\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function setPaymentAgentList(_x) {\\n        return _setPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return setPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"filterPaymentAgentList\\\",\\n    value: function filterPaymentAgentList(bank) {\\n      var _this2 = this;\\n\\n      var common = this.root_store.common;\\n\\n      if (bank) {\\n        this.filtered_list = [];\\n        this.list.forEach(function (payment_agent) {\\n          if (payment_agent.supported_banks && payment_agent.supported_banks.toLowerCase().split(',').indexOf(bank) !== -1) {\\n            _this2.filtered_list.push(payment_agent);\\n          }\\n        });\\n      } else {\\n        this.filtered_list = this.list;\\n      }\\n\\n      if (!this.is_payment_agent_visible && window.location.pathname.endsWith(shared_.routes.cashier_pa)) {\\n        common.routeTo(shared_.routes.cashier_deposit);\\n      }\\n    }\\n  }, {\\n    key: \\\"onChangePaymentMethod\\\",\\n    value: function onChangePaymentMethod(_ref2) {\\n      var target = _ref2.target;\\n      var value = target.value === '0' ? parseInt(target.value) : target.value;\\n      this.selected_bank = value;\\n      this.filterPaymentAgentList(value);\\n    }\\n  }, {\\n    key: \\\"setIsWithdraw\\\",\\n    value: function setIsWithdraw() {\\n      var is_withdraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.is_withdraw;\\n      this.is_withdraw = is_withdraw;\\n    }\\n  }, {\\n    key: \\\"setIsTryWithdrawSuccessful\\\",\\n    value: function setIsTryWithdrawSuccessful(is_try_withdraw_successful) {\\n      this.error.setErrorMessage('');\\n      this.is_try_withdraw_successful = is_try_withdraw_successful;\\n    }\\n  }, {\\n    key: \\\"setIsWithdrawSuccessful\\\",\\n    value: function setIsWithdrawSuccessful(is_withdraw_successful) {\\n      this.is_withdraw_successful = is_withdraw_successful;\\n    }\\n  }, {\\n    key: \\\"setConfirmation\\\",\\n    value: function setConfirmation(_ref3) {\\n      var amount = _ref3.amount,\\n          currency = _ref3.currency,\\n          loginid = _ref3.loginid,\\n          payment_agent_name = _ref3.payment_agent_name;\\n      this.confirm = {\\n        amount: amount,\\n        currency: currency,\\n        loginid: loginid,\\n        payment_agent_name: payment_agent_name\\n      };\\n    }\\n  }, {\\n    key: \\\"setReceipt\\\",\\n    value: function setReceipt(_ref4) {\\n      var amount_transferred = _ref4.amount_transferred,\\n          payment_agent_email = _ref4.payment_agent_email,\\n          payment_agent_id = _ref4.payment_agent_id,\\n          payment_agent_name = _ref4.payment_agent_name,\\n          payment_agent_phone = _ref4.payment_agent_phone,\\n          payment_agent_url = _ref4.payment_agent_url;\\n      this.receipt = {\\n        amount_transferred: amount_transferred,\\n        payment_agent_email: payment_agent_email,\\n        payment_agent_id: payment_agent_id,\\n        payment_agent_name: payment_agent_name,\\n        payment_agent_phone: payment_agent_phone,\\n        payment_agent_url: payment_agent_url\\n      };\\n    }\\n  }, {\\n    key: \\\"addPaymentAgent\\\",\\n    value: function addPaymentAgent(payment_agent) {\\n      this.agents.push({\\n        text: payment_agent.name,\\n        value: payment_agent.paymentagent_loginid,\\n        max_withdrawal: payment_agent.max_withdrawal,\\n        min_withdrawal: payment_agent.min_withdrawal,\\n        email: payment_agent.email,\\n        phone: payment_agent.telephone,\\n        url: payment_agent.url\\n      });\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _onMountPaymentAgentWithdraw = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\\n        var _this3 = this;\\n\\n        var _this$root_store, common, modules, _modules$cashier$gene, setLoading, onMountCommon, payment_agent_list;\\n\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                _this$root_store = this.root_store, common = _this$root_store.common, modules = _this$root_store.modules;\\n                _modules$cashier$gene = modules.cashier.general_store, setLoading = _modules$cashier$gene.setLoading, onMountCommon = _modules$cashier$gene.onMountCommon;\\n                setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentWithdraw;\\n                onMountCommon();\\n                this.setIsWithdraw(true);\\n                this.setIsWithdrawSuccessful(false);\\n                this.setReceipt({});\\n\\n                if (this.agents.length) {\\n                  _context4.next = 14;\\n                  break;\\n                }\\n\\n                _context4.next = 11;\\n                return this.getPaymentAgentList();\\n\\n              case 11:\\n                payment_agent_list = _context4.sent;\\n                payment_agent_list.paymentagent_list.list.forEach(function (payment_agent) {\\n                  _this3.addPaymentAgent(payment_agent);\\n                });\\n\\n                if (!payment_agent_list.paymentagent_list.list.length && window.location.pathname.endsWith(shared_.routes.cashier_pa)) {\\n                  common.routeTo(shared_.routes.cashier_deposit);\\n                }\\n\\n              case 14:\\n                setLoading(false);\\n\\n              case 15:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function onMountPaymentAgentWithdraw() {\\n        return _onMountPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"requestTryPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _requestTryPaymentAgentWithdraw = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref5) {\\n        var loginid, currency, amount, verification_code, payment_agent_withdraw, selected_agent;\\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\\n          while (1) {\\n            switch (_context5.prev = _context5.next) {\\n              case 0:\\n                loginid = _ref5.loginid, currency = _ref5.currency, amount = _ref5.amount, verification_code = _ref5.verification_code;\\n                this.error.setErrorMessage('');\\n                _context5.next = 4;\\n                return this.WS.authorized.paymentAgentWithdraw({\\n                  loginid: loginid,\\n                  currency: currency,\\n                  amount: amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                });\\n\\n              case 4:\\n                payment_agent_withdraw = _context5.sent;\\n\\n                if (+payment_agent_withdraw.paymentagent_withdraw === 2) {\\n                  selected_agent = this.agents.find(function (agent) {\\n                    return agent.value === loginid;\\n                  });\\n                  this.setConfirmation(payment_agent_store_objectSpread({\\n                    amount: amount,\\n                    currency: currency,\\n                    loginid: loginid\\n                  }, selected_agent && {\\n                    payment_agent_name: selected_agent.text\\n                  }));\\n                  this.setIsTryWithdrawSuccessful(true);\\n                } else {\\n                  this.error.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\\n                }\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context5.stop();\\n            }\\n          }\\n        }, _callee5, this);\\n      }));\\n\\n      function requestTryPaymentAgentWithdraw(_x2) {\\n        return _requestTryPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestTryPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"onMountPaymentAgentList\\\",\\n    value: function () {\\n      var _onMountPaymentAgentList = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\\n        var _this$root_store$modu, setLoading, onMountCommon;\\n\\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\\n          while (1) {\\n            switch (_context6.prev = _context6.next) {\\n              case 0:\\n                _this$root_store$modu = this.root_store.modules.cashier.general_store, setLoading = _this$root_store$modu.setLoading, onMountCommon = _this$root_store$modu.onMountCommon;\\n                setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentList;\\n                _context6.next = 5;\\n                return onMountCommon();\\n\\n              case 5:\\n                _context6.next = 7;\\n                return this.getPaymentAgentList();\\n\\n              case 7:\\n                setLoading(false);\\n\\n              case 8:\\n              case \\\"end\\\":\\n                return _context6.stop();\\n            }\\n          }\\n        }, _callee6, this);\\n      }));\\n\\n      function onMountPaymentAgentList() {\\n        return _onMountPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"getAllPaymentAgentList\\\",\\n    value: function () {\\n      var _getAllPaymentAgentList = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\\n          while (1) {\\n            switch (_context7.prev = _context7.next) {\\n              case 0:\\n                _context7.next = 2;\\n                return this.WS.wait('get_settings');\\n\\n              case 2:\\n                return _context7.abrupt(\\\"return\\\", this.WS.allPaymentAgentList(this.root_store.client.residence));\\n\\n              case 3:\\n              case \\\"end\\\":\\n                return _context7.stop();\\n            }\\n          }\\n        }, _callee7, this);\\n      }));\\n\\n      function getAllPaymentAgentList() {\\n        return _getAllPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return getAllPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"setAllPaymentAgentList\\\",\\n    value: function setAllPaymentAgentList(list) {\\n      this.all_payment_agent_list = list;\\n    }\\n  }, {\\n    key: \\\"is_payment_agent_visible_in_onboarding\\\",\\n    get: function get() {\\n      var _this$all_payment_age, _this$all_payment_age2, _this$all_payment_age3;\\n\\n      return !!((_this$all_payment_age = this.all_payment_agent_list) !== null && _this$all_payment_age !== void 0 && (_this$all_payment_age2 = _this$all_payment_age.paymentagent_list) !== null && _this$all_payment_age2 !== void 0 && (_this$all_payment_age3 = _this$all_payment_age2.list) !== null && _this$all_payment_age3 !== void 0 && _this$all_payment_age3.length);\\n    }\\n  }, {\\n    key: \\\"requestPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _requestPaymentAgentWithdraw = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(_ref6) {\\n        var loginid, currency, amount, verification_code, payment_agent_withdraw, selected_agent;\\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\\n          while (1) {\\n            switch (_context8.prev = _context8.next) {\\n              case 0:\\n                loginid = _ref6.loginid, currency = _ref6.currency, amount = _ref6.amount, verification_code = _ref6.verification_code;\\n                this.error.setErrorMessage('');\\n                _context8.next = 4;\\n                return this.WS.authorized.paymentAgentWithdraw({\\n                  loginid: loginid,\\n                  currency: currency,\\n                  amount: amount,\\n                  verification_code: verification_code\\n                });\\n\\n              case 4:\\n                payment_agent_withdraw = _context8.sent;\\n\\n                if (+payment_agent_withdraw.paymentagent_withdraw === 1) {\\n                  selected_agent = this.agents.find(function (agent) {\\n                    return agent.value === loginid;\\n                  });\\n                  this.setReceipt(payment_agent_store_objectSpread(payment_agent_store_objectSpread({\\n                    amount_transferred: (0,shared_.formatMoney)(currency, amount, true)\\n                  }, selected_agent && {\\n                    payment_agent_email: selected_agent.email,\\n                    payment_agent_id: selected_agent.value,\\n                    payment_agent_name: selected_agent.text,\\n                    payment_agent_phone: selected_agent.phone,\\n                    payment_agent_url: selected_agent.url\\n                  }), !selected_agent && {\\n                    payment_agent_id: loginid\\n                  }));\\n                  this.setIsWithdrawSuccessful(true);\\n                  this.setIsTryWithdrawSuccessful(false);\\n                  this.setConfirmation({});\\n                } else {\\n                  this.error.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\\n                }\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context8.stop();\\n            }\\n          }\\n        }, _callee8, this);\\n      }));\\n\\n      function requestPaymentAgentWithdraw(_x3) {\\n        return _requestPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestPaymentAgentWithdraw;\\n    }()\\n  }]);\\n\\n  return PaymentAgentStore;\\n}(), (payment_agent_store_descriptor = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), payment_agent_store_descriptor2 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"agents\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), payment_agent_store_descriptor3 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return constants.containers.payment_agent;\\n  }\\n}), payment_agent_store_descriptor4 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), payment_agent_store_descriptor5 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"filtered_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), payment_agent_store_descriptor6 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_name_selected\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), payment_agent_store_descriptor7 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_withdraw\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_store_descriptor8 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_try_withdraw_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_store_descriptor9 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_withdraw_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_store_descriptor10 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), payment_agent_store_descriptor11 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), payment_agent_store_descriptor12 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"selected_bank\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), payment_agent_store_descriptor13 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"supported_banks\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), payment_agent_store_descriptor14 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"verification\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new VerificationStore({\\n      root_store: this.root_store,\\n      WS: this.WS\\n    });\\n  }\\n}), payment_agent_store_descriptor15 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"active_tab_index\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), payment_agent_store_descriptor16 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"all_payment_agent_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setActiveTabIndex\\\", [payment_agent_store_dec], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setActiveTabIndex\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setActiveTab\\\", [payment_agent_store_dec2], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setActiveTab\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_payment_agent_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"is_payment_agent_visible\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"getPaymentAgentList\\\", [payment_agent_store_dec3], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"getPaymentAgentList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"getPaymentAgentDetails\\\", [payment_agent_store_dec4], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"getPaymentAgentDetails\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"addSupportedBank\\\", [payment_agent_store_dec5], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"addSupportedBank\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"clearSuppertedBanks\\\", [payment_agent_store_dec6], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"clearSuppertedBanks\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"sortSupportedBanks\\\", [payment_agent_store_dec7], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"sortSupportedBanks\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setList\\\", [payment_agent_store_dec8], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"clearList\\\", [payment_agent_store_dec9], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"clearList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setPaymentAgentList\\\", [payment_agent_store_dec10], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setPaymentAgentList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"filterPaymentAgentList\\\", [payment_agent_store_dec11], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"filterPaymentAgentList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"onChangePaymentMethod\\\", [payment_agent_store_dec12], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"onChangePaymentMethod\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setIsWithdraw\\\", [payment_agent_store_dec13], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setIsWithdraw\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setIsTryWithdrawSuccessful\\\", [payment_agent_store_dec14], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setIsTryWithdrawSuccessful\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setIsWithdrawSuccessful\\\", [payment_agent_store_dec15], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setIsWithdrawSuccessful\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setConfirmation\\\", [payment_agent_store_dec16], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setConfirmation\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setReceipt\\\", [payment_agent_store_dec17], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setReceipt\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"addPaymentAgent\\\", [payment_agent_store_dec18], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"addPaymentAgent\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"onMountPaymentAgentWithdraw\\\", [payment_agent_store_dec19], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"onMountPaymentAgentWithdraw\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"requestTryPaymentAgentWithdraw\\\", [payment_agent_store_dec20], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"requestTryPaymentAgentWithdraw\\\"), payment_agent_store_class.prototype), _descriptor17 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"resetPaymentAgent\\\", [payment_agent_store_dec21], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this4 = this;\\n\\n    return function () {\\n      _this4.error.setErrorMessage('');\\n\\n      _this4.setIsWithdraw(false);\\n\\n      _this4.verification.clearVerification();\\n\\n      _this4.setActiveTabIndex(0);\\n    };\\n  }\\n}), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"onMountPaymentAgentList\\\", [payment_agent_store_dec22], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"onMountPaymentAgentList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setAllPaymentAgentList\\\", [payment_agent_store_dec23], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setAllPaymentAgentList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_payment_agent_visible_in_onboarding\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"is_payment_agent_visible_in_onboarding\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"requestPaymentAgentWithdraw\\\", [payment_agent_store_dec24], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"requestPaymentAgentWithdraw\\\"), payment_agent_store_class.prototype)), payment_agent_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/payment-agent-transfer-store.js\\nvar payment_agent_transfer_store_dec, payment_agent_transfer_store_dec2, payment_agent_transfer_store_dec3, payment_agent_transfer_store_dec4, payment_agent_transfer_store_dec5, payment_agent_transfer_store_dec6, payment_agent_transfer_store_dec7, payment_agent_transfer_store_dec8, payment_agent_transfer_store_dec9, payment_agent_transfer_store_dec10, payment_agent_transfer_store_class, payment_agent_transfer_store_descriptor, payment_agent_transfer_store_descriptor2, payment_agent_transfer_store_descriptor3, payment_agent_transfer_store_descriptor4, payment_agent_transfer_store_descriptor5, payment_agent_transfer_store_descriptor6, payment_agent_transfer_store_descriptor7, payment_agent_transfer_store_descriptor8, payment_agent_transfer_store_descriptor9, payment_agent_transfer_store_descriptor10, payment_agent_transfer_store_descriptor11;\\n\\nfunction payment_agent_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction payment_agent_transfer_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { payment_agent_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { payment_agent_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction payment_agent_transfer_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction payment_agent_transfer_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction payment_agent_transfer_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction payment_agent_transfer_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) payment_agent_transfer_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) payment_agent_transfer_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction payment_agent_transfer_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction payment_agent_transfer_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\nvar PaymentAgentTransferStore = (payment_agent_transfer_store_dec = external_mobx_.action.bound, payment_agent_transfer_store_dec2 = external_mobx_.action.bound, payment_agent_transfer_store_dec3 = external_mobx_.action.bound, payment_agent_transfer_store_dec4 = external_mobx_.action.bound, payment_agent_transfer_store_dec5 = external_mobx_.action.bound, payment_agent_transfer_store_dec6 = external_mobx_.action.bound, payment_agent_transfer_store_dec7 = external_mobx_.action.bound, payment_agent_transfer_store_dec8 = external_mobx_.action.bound, payment_agent_transfer_store_dec9 = external_mobx_.action.bound, payment_agent_transfer_store_dec10 = external_mobx_.action.bound, (payment_agent_transfer_store_class = /*#__PURE__*/function () {\\n  function PaymentAgentTransferStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    payment_agent_transfer_store_classCallCheck(this, PaymentAgentTransferStore);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"container\\\", payment_agent_transfer_store_descriptor, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"error\\\", payment_agent_transfer_store_descriptor2, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"is_payment_agent\\\", payment_agent_transfer_store_descriptor3, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"is_try_transfer_successful\\\", payment_agent_transfer_store_descriptor4, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"is_transfer_successful\\\", payment_agent_transfer_store_descriptor5, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"confirm\\\", payment_agent_transfer_store_descriptor6, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"receipt\\\", payment_agent_transfer_store_descriptor7, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"transfer_limit\\\", payment_agent_transfer_store_descriptor8, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"requestTryPaymentAgentTransfer\\\", payment_agent_transfer_store_descriptor9, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"requestPaymentAgentTransfer\\\", payment_agent_transfer_store_descriptor10, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"resetPaymentAgentTransfer\\\", payment_agent_transfer_store_descriptor11, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  payment_agent_transfer_store_createClass(PaymentAgentTransferStore, [{\\n    key: \\\"is_payment_agent_transfer_visible\\\",\\n    get: function get() {\\n      return this.is_payment_agent;\\n    }\\n  }, {\\n    key: \\\"checkIsPaymentAgent\\\",\\n    value: function () {\\n      var _checkIsPaymentAgent = payment_agent_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _get_settings$is_auth;\\n\\n        var get_settings;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.next = 2;\\n                return this.WS.authorized.storage.getSettings();\\n\\n              case 2:\\n                get_settings = _context.sent.get_settings;\\n                this.setIsPaymentAgent((_get_settings$is_auth = get_settings === null || get_settings === void 0 ? void 0 : get_settings.is_authenticated_payment_agent) !== null && _get_settings$is_auth !== void 0 ? _get_settings$is_auth : false);\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function checkIsPaymentAgent() {\\n        return _checkIsPaymentAgent.apply(this, arguments);\\n      }\\n\\n      return checkIsPaymentAgent;\\n    }()\\n  }, {\\n    key: \\\"setIsPaymentAgent\\\",\\n    value: function setIsPaymentAgent(is_payment_agent) {\\n      if (!is_payment_agent && window.location.pathname.endsWith(shared_.routes.cashier_pa_transfer)) {\\n        this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n      }\\n\\n      this.is_payment_agent = !!is_payment_agent;\\n    }\\n  }, {\\n    key: \\\"setIsTryTransferSuccessful\\\",\\n    value: function setIsTryTransferSuccessful(is_try_transfer_successful) {\\n      this.error.setErrorMessage('');\\n      this.is_try_transfer_successful = is_try_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setIsTransferSuccessful\\\",\\n    value: function setIsTransferSuccessful(is_transfer_successful) {\\n      this.is_transfer_successful = is_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setConfirmationPaymentAgentTransfer\\\",\\n    value: function setConfirmationPaymentAgentTransfer(_ref2) {\\n      var amount = _ref2.amount,\\n          client_id = _ref2.client_id,\\n          client_name = _ref2.client_name,\\n          description = _ref2.description;\\n      this.confirm = {\\n        amount: amount,\\n        client_id: client_id,\\n        client_name: client_name,\\n        description: description\\n      };\\n    }\\n  }, {\\n    key: \\\"setReceiptPaymentAgentTransfer\\\",\\n    value: function setReceiptPaymentAgentTransfer(_ref3) {\\n      var amount_transferred = _ref3.amount_transferred,\\n          client_id = _ref3.client_id,\\n          client_name = _ref3.client_name;\\n      this.receipt = {\\n        amount_transferred: amount_transferred,\\n        client_id: client_id,\\n        client_name: client_name\\n      };\\n    }\\n  }, {\\n    key: \\\"getCurrentPaymentAgent\\\",\\n    value: function () {\\n      var _getCurrentPaymentAgent = payment_agent_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(response_payment_agent) {\\n        var _this$root_store, client, modules, payment_agent_listed, current_payment_agent;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _this$root_store = this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                payment_agent_listed = response_payment_agent.paymentagent_list.list.find(function (agent) {\\n                  return agent.paymentagent_loginid === client.loginid;\\n                });\\n                _context2.t0 = payment_agent_listed;\\n\\n                if (_context2.t0) {\\n                  _context2.next = 7;\\n                  break;\\n                }\\n\\n                _context2.next = 6;\\n                return modules.cashier.payment_agent.getPaymentAgentDetails();\\n\\n              case 6:\\n                _context2.t0 = _context2.sent;\\n\\n              case 7:\\n                current_payment_agent = _context2.t0;\\n                return _context2.abrupt(\\\"return\\\", current_payment_agent !== null && current_payment_agent !== void 0 ? current_payment_agent : {});\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function getCurrentPaymentAgent(_x) {\\n        return _getCurrentPaymentAgent.apply(this, arguments);\\n      }\\n\\n      return getCurrentPaymentAgent;\\n    }()\\n  }, {\\n    key: \\\"setMinMaxPaymentAgentTransfer\\\",\\n    value: function setMinMaxPaymentAgentTransfer(_ref4) {\\n      var min_withdrawal = _ref4.min_withdrawal,\\n          max_withdrawal = _ref4.max_withdrawal;\\n      this.transfer_limit = {\\n        min: min_withdrawal,\\n        max: max_withdrawal\\n      };\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentTransfer\\\",\\n    value: function () {\\n      var _onMountPaymentAgentTransfer = payment_agent_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\\n        var _this$root_store$modu, general_store, payment_agent, response, current_payment_agent;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _this$root_store$modu = this.root_store.modules.cashier, general_store = _this$root_store$modu.general_store, payment_agent = _this$root_store$modu.payment_agent;\\n                general_store.setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentTransfer;\\n                _context3.next = 5;\\n                return general_store.onMountCommon();\\n\\n              case 5:\\n                if (this.transfer_limit.min_withdrawal) {\\n                  _context3.next = 13;\\n                  break;\\n                }\\n\\n                _context3.next = 8;\\n                return payment_agent.getPaymentAgentList();\\n\\n              case 8:\\n                response = _context3.sent;\\n                _context3.next = 11;\\n                return this.getCurrentPaymentAgent(response);\\n\\n              case 11:\\n                current_payment_agent = _context3.sent;\\n                this.setMinMaxPaymentAgentTransfer(current_payment_agent);\\n\\n              case 13:\\n                general_store.setLoading(false);\\n\\n              case 14:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function onMountPaymentAgentTransfer() {\\n        return _onMountPaymentAgentTransfer.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentTransfer;\\n    }()\\n  }]);\\n\\n  return PaymentAgentTransferStore;\\n}(), (payment_agent_transfer_store_descriptor = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return constants.containers.payment_agent_transfer;\\n  }\\n}), payment_agent_transfer_store_descriptor2 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), payment_agent_transfer_store_descriptor3 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"is_payment_agent\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_transfer_store_descriptor4 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"is_try_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_transfer_store_descriptor5 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"is_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_transfer_store_descriptor6 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), payment_agent_transfer_store_descriptor7 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), payment_agent_transfer_store_descriptor8 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"transfer_limit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"is_payment_agent_transfer_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"is_payment_agent_transfer_visible\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsPaymentAgent\\\", [payment_agent_transfer_store_dec], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsPaymentAgent\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsTryTransferSuccessful\\\", [payment_agent_transfer_store_dec2], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsTryTransferSuccessful\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsTransferSuccessful\\\", [payment_agent_transfer_store_dec3], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsTransferSuccessful\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setConfirmationPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec4], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setConfirmationPaymentAgentTransfer\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setReceiptPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec5], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setReceiptPaymentAgentTransfer\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setMinMaxPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec6], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setMinMaxPaymentAgentTransfer\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"onMountPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec7], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"onMountPaymentAgentTransfer\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_descriptor9 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"requestTryPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec8], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this = this;\\n\\n    return /*#__PURE__*/function () {\\n      var _ref6 = payment_agent_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref5) {\\n        var amount, currency, description, transfer_to, payment_agent_transfer;\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                amount = _ref5.amount, currency = _ref5.currency, description = _ref5.description, transfer_to = _ref5.transfer_to;\\n\\n                _this.error.setErrorMessage('');\\n\\n                _context4.next = 4;\\n                return _this.WS.authorized.paymentAgentTransfer({\\n                  amount: amount,\\n                  currency: currency,\\n                  description: description,\\n                  transfer_to: transfer_to,\\n                  dry_run: 1\\n                });\\n\\n              case 4:\\n                payment_agent_transfer = _context4.sent;\\n\\n                if (+payment_agent_transfer.paymentagent_transfer === 2) {\\n                  // show confirmation screen\\n                  _this.setConfirmationPaymentAgentTransfer({\\n                    client_id: transfer_to,\\n                    client_name: payment_agent_transfer.client_to_full_name,\\n                    amount: amount,\\n                    description: description\\n                  });\\n\\n                  _this.setIsTryTransferSuccessful(true);\\n                } else {\\n                  _this.error.setErrorMessage(payment_agent_transfer.error, _this.resetPaymentAgentTransfer);\\n                }\\n\\n                return _context4.abrupt(\\\"return\\\", payment_agent_transfer);\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4);\\n      }));\\n\\n      return function (_x2) {\\n        return _ref6.apply(this, arguments);\\n      };\\n    }();\\n  }\\n}), payment_agent_transfer_store_descriptor10 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"requestPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec9], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this2 = this;\\n\\n    return /*#__PURE__*/function () {\\n      var _ref8 = payment_agent_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref7) {\\n        var amount, currency, description, transfer_to, payment_agent_transfer;\\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\\n          while (1) {\\n            switch (_context5.prev = _context5.next) {\\n              case 0:\\n                amount = _ref7.amount, currency = _ref7.currency, description = _ref7.description, transfer_to = _ref7.transfer_to;\\n\\n                _this2.error.setErrorMessage('');\\n\\n                _context5.next = 4;\\n                return _this2.WS.authorized.paymentAgentTransfer({\\n                  amount: amount,\\n                  currency: currency,\\n                  description: description,\\n                  transfer_to: transfer_to\\n                });\\n\\n              case 4:\\n                payment_agent_transfer = _context5.sent;\\n\\n                if (+payment_agent_transfer.paymentagent_transfer === 1) {\\n                  _this2.setReceiptPaymentAgentTransfer({\\n                    amount_transferred: amount,\\n                    client_id: transfer_to,\\n                    client_name: payment_agent_transfer.client_to_full_name\\n                  });\\n\\n                  _this2.setIsTransferSuccessful(true);\\n\\n                  _this2.setIsTryTransferSuccessful(false);\\n\\n                  _this2.setConfirmationPaymentAgentTransfer({});\\n                } else {\\n                  _this2.error.setErrorMessage(payment_agent_transfer.error, _this2.resetPaymentAgentTransfer);\\n                }\\n\\n                return _context5.abrupt(\\\"return\\\", payment_agent_transfer);\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context5.stop();\\n            }\\n          }\\n        }, _callee5);\\n      }));\\n\\n      return function (_x3) {\\n        return _ref8.apply(this, arguments);\\n      };\\n    }();\\n  }\\n}), payment_agent_transfer_store_descriptor11 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"resetPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec10], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this3 = this;\\n\\n    return function () {\\n      _this3.setIsTransferSuccessful(false);\\n\\n      _this3.error.setErrorMessage('');\\n    };\\n  }\\n})), payment_agent_transfer_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/transaction-history-store.js\\nvar transaction_history_store_dec, transaction_history_store_dec2, transaction_history_store_dec3, transaction_history_store_dec4, transaction_history_store_dec5, transaction_history_store_dec6, transaction_history_store_dec7, transaction_history_store_dec8, transaction_history_store_dec9, transaction_history_store_dec10, transaction_history_store_dec11, transaction_history_store_dec12, transaction_history_store_dec13, transaction_history_store_dec14, transaction_history_store_dec15, transaction_history_store_dec16, transaction_history_store_class, transaction_history_store_descriptor, transaction_history_store_descriptor2, transaction_history_store_descriptor3, transaction_history_store_descriptor4, transaction_history_store_descriptor5, transaction_history_store_descriptor6, transaction_history_store_descriptor7, transaction_history_store_descriptor8;\\n\\nfunction transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction transaction_history_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction transaction_history_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction transaction_history_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction transaction_history_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction transaction_history_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) transaction_history_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) transaction_history_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction transaction_history_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction transaction_history_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar TransactionHistoryStore = (transaction_history_store_dec = external_mobx_.action.bound, transaction_history_store_dec2 = external_mobx_.action.bound, transaction_history_store_dec3 = external_mobx_.action.bound, transaction_history_store_dec4 = external_mobx_.action.bound, transaction_history_store_dec5 = external_mobx_.action.bound, transaction_history_store_dec6 = external_mobx_.action.bound, transaction_history_store_dec7 = external_mobx_.action.bound, transaction_history_store_dec8 = external_mobx_.action.bound, transaction_history_store_dec9 = external_mobx_.action.bound, transaction_history_store_dec10 = external_mobx_.action.bound, transaction_history_store_dec11 = external_mobx_.action.bound, transaction_history_store_dec12 = external_mobx_.action.bound, transaction_history_store_dec13 = external_mobx_.action.bound, transaction_history_store_dec14 = external_mobx_.action.bound, transaction_history_store_dec15 = external_mobx_.action.bound, transaction_history_store_dec16 = external_mobx_.action.bound, (transaction_history_store_class = /*#__PURE__*/function () {\\n  function TransactionHistoryStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    transaction_history_store_classCallCheck(this, TransactionHistoryStore);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"crypto_transactions\\\", transaction_history_store_descriptor, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_cancel_modal_visible\\\", transaction_history_store_descriptor2, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_status_modal_visible\\\", transaction_history_store_descriptor3, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_visible\\\", transaction_history_store_descriptor4, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_loading\\\", transaction_history_store_descriptor5, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_transaction_id\\\", transaction_history_store_descriptor6, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_status\\\", transaction_history_store_descriptor7, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_status_description\\\", transaction_history_store_descriptor8, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  transaction_history_store_createClass(TransactionHistoryStore, [{\\n    key: \\\"onMount\\\",\\n    value: function () {\\n      var _onMount = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this$root_store$clie, currency, switched, is_crypto;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store$clie = this.root_store.client, currency = _this$root_store$clie.currency, switched = _this$root_store$clie.switched;\\n                is_crypto = !!currency && (0,shared_.isCryptocurrency)(currency);\\n\\n                if (!(is_crypto && !switched)) {\\n                  _context.next = 7;\\n                  break;\\n                }\\n\\n                this.setLoading(true);\\n                _context.next = 6;\\n                return this.getCryptoTransactions();\\n\\n              case 6:\\n                this.setLoading(false);\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function onMount() {\\n        return _onMount.apply(this, arguments);\\n      }\\n\\n      return onMount;\\n    }()\\n  }, {\\n    key: \\\"getCryptoTransactions\\\",\\n    value: function () {\\n      var _getCryptoTransactions = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _this = this;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.next = 2;\\n                return this.WS.subscribeCashierPayments(function (response) {\\n                  if (!response.error) {\\n                    var crypto = response.cashier_payments.crypto;\\n\\n                    _this.updateCryptoTransactions(crypto);\\n                  }\\n                });\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function getCryptoTransactions() {\\n        return _getCryptoTransactions.apply(this, arguments);\\n      }\\n\\n      return getCryptoTransactions;\\n    }()\\n  }, {\\n    key: \\\"updateCryptoTransactions\\\",\\n    value: function updateCryptoTransactions(transactions) {\\n      var _this2 = this;\\n\\n      transactions.forEach(function (transaction) {\\n        var index = _this2.crypto_transactions.findIndex(function (crypto) {\\n          return crypto.id === transaction.id;\\n        });\\n\\n        if (index === -1) {\\n          _this2.crypto_transactions.push(transaction);\\n        } else {\\n          Object.assign(_this2.crypto_transactions[index], transaction);\\n        }\\n      });\\n      this.sortCryptoTransactions();\\n    }\\n  }, {\\n    key: \\\"sortCryptoTransactions\\\",\\n    value: function sortCryptoTransactions() {\\n      this.crypto_transactions = this.crypto_transactions.sort(function (a, b) {\\n        return b.submit_date - a.submit_date;\\n      });\\n    }\\n  }, {\\n    key: \\\"cancelCryptoTransaction\\\",\\n    value: function () {\\n      var _cancelCryptoTransaction = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(transaction_id) {\\n        var _this3 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _context3.next = 2;\\n                return this.WS.cancelCryptoTransaction(transaction_id).then(function (response) {\\n                  if (!response.error) {\\n                    _this3.setSelectedCryptoTransactionId('');\\n\\n                    _this3.setIsCryptoTransactionsCancelModalVisible(false);\\n\\n                    return Promise.resolve(response);\\n                  }\\n\\n                  return Promise.reject(response.error);\\n                });\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function cancelCryptoTransaction(_x) {\\n        return _cancelCryptoTransaction.apply(this, arguments);\\n      }\\n\\n      return cancelCryptoTransaction;\\n    }()\\n  }, {\\n    key: \\\"setSelectedCryptoTransactionId\\\",\\n    value: function setSelectedCryptoTransactionId(id) {\\n      this.selected_crypto_transaction_id = id;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsCancelModalVisible\\\",\\n    value: function setIsCryptoTransactionsCancelModalVisible(is_visible) {\\n      this.is_crypto_transactions_cancel_modal_visible = is_visible;\\n    }\\n  }, {\\n    key: \\\"showCryptoTransactionsCancelModal\\\",\\n    value: function showCryptoTransactionsCancelModal(id) {\\n      this.setSelectedCryptoTransactionId(id);\\n      this.setIsCryptoTransactionsCancelModalVisible(true);\\n    }\\n  }, {\\n    key: \\\"hideCryptoTransactionsCancelModal\\\",\\n    value: function hideCryptoTransactionsCancelModal() {\\n      this.setSelectedCryptoTransactionId('');\\n      this.setIsCryptoTransactionsCancelModalVisible(false);\\n    }\\n  }, {\\n    key: \\\"setSelectedCryptoStatus\\\",\\n    value: function setSelectedCryptoStatus(status) {\\n      this.selected_crypto_status = status;\\n    }\\n  }, {\\n    key: \\\"setSelectedCryptoStatusDescription\\\",\\n    value: function setSelectedCryptoStatusDescription(description) {\\n      this.selected_crypto_status_description = description;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsStatusModalVisible\\\",\\n    value: function setIsCryptoTransactionsStatusModalVisible(is_visible) {\\n      this.is_crypto_transactions_status_modal_visible = is_visible;\\n    }\\n  }, {\\n    key: \\\"showCryptoTransactionsStatusModal\\\",\\n    value: function showCryptoTransactionsStatusModal(description, name) {\\n      this.setSelectedCryptoStatusDescription(description);\\n      this.setSelectedCryptoStatus(name);\\n      this.setIsCryptoTransactionsStatusModalVisible(true);\\n    }\\n  }, {\\n    key: \\\"hideCryptoTransactionsStatusModal\\\",\\n    value: function hideCryptoTransactionsStatusModal() {\\n      this.setIsCryptoTransactionsStatusModalVisible(false);\\n    }\\n  }, {\\n    key: \\\"setLoading\\\",\\n    value: function setLoading(is_loading) {\\n      this.is_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsVisible\\\",\\n    value: function setIsCryptoTransactionsVisible(is_visible) {\\n      this.is_crypto_transactions_visible = is_visible;\\n    }\\n  }]);\\n\\n  return TransactionHistoryStore;\\n}(), (transaction_history_store_descriptor = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"crypto_transactions\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), transaction_history_store_descriptor2 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_cancel_modal_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor3 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_status_modal_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor4 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor5 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor6 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_transaction_id\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_descriptor7 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_status\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_descriptor8 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_status_description\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"onMount\\\", [transaction_history_store_dec], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"onMount\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"getCryptoTransactions\\\", [transaction_history_store_dec2], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"getCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"updateCryptoTransactions\\\", [transaction_history_store_dec3], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"updateCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"sortCryptoTransactions\\\", [transaction_history_store_dec4], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"sortCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"cancelCryptoTransaction\\\", [transaction_history_store_dec5], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"cancelCryptoTransaction\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoTransactionId\\\", [transaction_history_store_dec6], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoTransactionId\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsCancelModalVisible\\\", [transaction_history_store_dec7], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsCancelModalVisible\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsCancelModal\\\", [transaction_history_store_dec8], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsCancelModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsCancelModal\\\", [transaction_history_store_dec9], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsCancelModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatus\\\", [transaction_history_store_dec10], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatus\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatusDescription\\\", [transaction_history_store_dec11], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatusDescription\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsStatusModalVisible\\\", [transaction_history_store_dec12], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsStatusModalVisible\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsStatusModal\\\", [transaction_history_store_dec13], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsStatusModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsStatusModal\\\", [transaction_history_store_dec14], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsStatusModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setLoading\\\", [transaction_history_store_dec15], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setLoading\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsVisible\\\", [transaction_history_store_dec16], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsVisible\\\"), transaction_history_store_class.prototype)), transaction_history_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/withdraw-store.js\\nvar withdraw_store_dec, withdraw_store_dec2, withdraw_store_dec3, withdraw_store_dec4, withdraw_store_dec5, withdraw_store_dec6, withdraw_store_dec7, withdraw_store_dec8, withdraw_store_dec9, withdraw_store_dec10, withdraw_store_dec11, withdraw_store_dec12, withdraw_store_dec13, withdraw_store_dec14, withdraw_store_dec15, withdraw_store_class, withdraw_store_descriptor, withdraw_store_descriptor2, withdraw_store_descriptor3, withdraw_store_descriptor4, withdraw_store_descriptor5, withdraw_store_descriptor6, withdraw_store_descriptor7, withdraw_store_descriptor8;\\n\\nfunction withdraw_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction withdraw_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { withdraw_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { withdraw_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction withdraw_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction withdraw_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction withdraw_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction withdraw_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) withdraw_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) withdraw_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction withdraw_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction withdraw_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\n\\n\\nvar WithdrawStore = (withdraw_store_dec = external_mobx_.action.bound, withdraw_store_dec2 = external_mobx_.action.bound, withdraw_store_dec3 = external_mobx_.action.bound, withdraw_store_dec4 = external_mobx_.action.bound, withdraw_store_dec5 = external_mobx_.action.bound, withdraw_store_dec6 = external_mobx_.action.bound, withdraw_store_dec7 = external_mobx_.action.bound, withdraw_store_dec8 = external_mobx_.action.bound, withdraw_store_dec9 = external_mobx_.action.bound, withdraw_store_dec10 = external_mobx_.action.bound, withdraw_store_dec11 = external_mobx_.action.bound, withdraw_store_dec12 = external_mobx_.action.bound, withdraw_store_dec13 = external_mobx_.action.bound, withdraw_store_dec14 = external_mobx_.action.bound, withdraw_store_dec15 = external_mobx_.action.bound, (withdraw_store_class = /*#__PURE__*/function () {\\n  function WithdrawStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    withdraw_store_classCallCheck(this, WithdrawStore);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"blockchain_address\\\", withdraw_store_descriptor, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"container\\\", withdraw_store_descriptor2, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"error\\\", withdraw_store_descriptor3, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"is_10k_withdrawal_limit_reached\\\", withdraw_store_descriptor4, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"is_withdraw_confirmed\\\", withdraw_store_descriptor5, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"verification\\\", withdraw_store_descriptor6, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"withdraw_amount\\\", withdraw_store_descriptor7, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"max_withdraw_amount\\\", withdraw_store_descriptor8, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  withdraw_store_createClass(WithdrawStore, [{\\n    key: \\\"setIsWithdrawConfirmed\\\",\\n    value: function setIsWithdrawConfirmed(is_withdraw_confirmed) {\\n      var converter_from_amount = this.root_store.modules.cashier.crypto_fiat_converter.converter_from_amount;\\n      this.is_withdraw_confirmed = is_withdraw_confirmed;\\n      if (is_withdraw_confirmed) this.setWithdrawAmount(converter_from_amount);\\n\\n      if (!is_withdraw_confirmed && this.verification) {\\n        this.verification.clearVerification();\\n      }\\n    }\\n  }, {\\n    key: \\\"setWithdrawAmount\\\",\\n    value: function setWithdrawAmount(amount) {\\n      this.withdraw_amount = amount;\\n    }\\n  }, {\\n    key: \\\"requestWithdraw\\\",\\n    value: function () {\\n      var _requestWithdraw = withdraw_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(verification_code) {\\n        var _this = this;\\n\\n        var _this$root_store, client, modules, _modules$cashier, crypto_fiat_converter, error_dialog;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store = this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                _modules$cashier = modules.cashier, crypto_fiat_converter = _modules$cashier.crypto_fiat_converter, error_dialog = _modules$cashier.error_dialog;\\n\\n                if (client.is_logged_in) {\\n                  _context.next = 4;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 4:\\n                if (crypto_fiat_converter.converter_from_amount) {\\n                  _context.next = 7;\\n                  break;\\n                }\\n\\n                crypto_fiat_converter.setConverterFromError((0,translations_.localize)('This field is required.'));\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 7:\\n                _context.next = 9;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +crypto_fiat_converter.converter_from_amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                }).then(function (response) {\\n                  if (response.error) {\\n                    error_dialog.setErrorMessage(response.error.message);\\n                  } else {\\n                    _this.saveWithdraw(verification_code);\\n                  }\\n                });\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function requestWithdraw(_x) {\\n        return _requestWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestWithdraw;\\n    }()\\n  }, {\\n    key: \\\"saveWithdraw\\\",\\n    value: function () {\\n      var _saveWithdraw = withdraw_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(verification_code) {\\n        var _this2 = this;\\n\\n        var converter_from_amount;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                converter_from_amount = this.root_store.modules.cashier.crypto_fiat_converter.converter_from_amount;\\n                this.error.setErrorMessage('');\\n                _context2.next = 4;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +converter_from_amount,\\n                  verification_code: verification_code\\n                }).then(function (response) {\\n                  if (response.error) {\\n                    _this2.error.setErrorMessage(response.error);\\n\\n                    if (verification_code) {\\n                      // clear verification code on error\\n                      _this2.verification.clearVerification();\\n                    }\\n\\n                    _this2.resetWithrawForm();\\n                  } else {\\n                    _this2.setIsWithdrawConfirmed(true);\\n                  }\\n                });\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function saveWithdraw(_x2) {\\n        return _saveWithdraw.apply(this, arguments);\\n      }\\n\\n      return saveWithdraw;\\n    }()\\n  }, {\\n    key: \\\"resetWithrawForm\\\",\\n    value: function resetWithrawForm() {\\n      var _this$root_store$modu = this.root_store.modules.cashier.crypto_fiat_converter,\\n          setConverterFromAmount = _this$root_store$modu.setConverterFromAmount,\\n          setConverterToAmount = _this$root_store$modu.setConverterToAmount;\\n      this.setBlockchainAddress('');\\n      setConverterFromAmount('');\\n      setConverterToAmount('');\\n      this.verification.clearVerification();\\n    }\\n  }, {\\n    key: \\\"setBlockchainAddress\\\",\\n    value: function setBlockchainAddress(address) {\\n      this.blockchain_address = address;\\n    }\\n  }, {\\n    key: \\\"willMountWithdraw\\\",\\n    value: function willMountWithdraw(verification_code) {\\n      if (verification_code) {\\n        this.verification.clearVerification();\\n      }\\n    }\\n  }, {\\n    key: \\\"onMountWithdraw\\\",\\n    value: function () {\\n      var _onMountWithdraw = withdraw_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(verification_code) {\\n        var _this$root_store2, client, modules, _modules$cashier$gene, active_container, is_crypto, onMountCommon, setLoading, setOnRemount, _modules$cashier$ifra, checkIframeLoaded, clearTimeoutCashierUrl, clearIframe, is_session_timeout, setContainerHeight, setIframeUrl, setSessionTimeout, setTimeoutCashierUrl, is_virtual, current_container, response_cashier;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _this$root_store2 = this.root_store, client = _this$root_store2.client, modules = _this$root_store2.modules;\\n                _modules$cashier$gene = modules.cashier.general_store, active_container = _modules$cashier$gene.active_container, is_crypto = _modules$cashier$gene.is_crypto, onMountCommon = _modules$cashier$gene.onMountCommon, setLoading = _modules$cashier$gene.setLoading, setOnRemount = _modules$cashier$gene.setOnRemount;\\n                _modules$cashier$ifra = modules.cashier.iframe, checkIframeLoaded = _modules$cashier$ifra.checkIframeLoaded, clearTimeoutCashierUrl = _modules$cashier$ifra.clearTimeoutCashierUrl, clearIframe = _modules$cashier$ifra.clearIframe, is_session_timeout = _modules$cashier$ifra.is_session_timeout, setContainerHeight = _modules$cashier$ifra.setContainerHeight, setIframeUrl = _modules$cashier$ifra.setIframeUrl, setSessionTimeout = _modules$cashier$ifra.setSessionTimeout, setTimeoutCashierUrl = _modules$cashier$ifra.setTimeoutCashierUrl;\\n                is_virtual = client.is_virtual;\\n                current_container = active_container;\\n                setOnRemount(this.onMountWithdraw);\\n                _context3.next = 8;\\n                return onMountCommon();\\n\\n              case 8:\\n                this.error.setErrorMessage('');\\n                setContainerHeight(0);\\n                clearIframe();\\n                setLoading(true);\\n\\n                if (is_session_timeout) {\\n                  _context3.next = 15;\\n                  break;\\n                }\\n\\n                checkIframeLoaded();\\n                return _context3.abrupt(\\\"return\\\");\\n\\n              case 15:\\n                // if session has timed out reset everything\\n                setIframeUrl('');\\n\\n                if (!(!verification_code || is_virtual)) {\\n                  _context3.next = 19;\\n                  break;\\n                }\\n\\n                setLoading(false); // if virtual, clear everything and don't proceed further\\n                // if no verification code, we should request again\\n\\n                return _context3.abrupt(\\\"return\\\");\\n\\n              case 19:\\n                _context3.next = 21;\\n                return this.WS.authorized.cashier(active_container, {\\n                  verification_code: verification_code\\n                });\\n\\n              case 21:\\n                response_cashier = _context3.sent;\\n\\n                if (!(current_container !== active_container)) {\\n                  _context3.next = 25;\\n                  break;\\n                }\\n\\n                setLoading(false);\\n                return _context3.abrupt(\\\"return\\\");\\n\\n              case 25:\\n                if (!response_cashier.error) {\\n                  _context3.next = 33;\\n                  break;\\n                }\\n\\n                this.error.handleCashierError(response_cashier.error);\\n                setLoading(false);\\n                setSessionTimeout(true);\\n                clearTimeoutCashierUrl();\\n\\n                if (verification_code) {\\n                  // clear verification code on error\\n                  this.verification.clearVerification();\\n                }\\n\\n                _context3.next = 43;\\n                break;\\n\\n              case 33:\\n                if (!is_crypto) {\\n                  _context3.next = 37;\\n                  break;\\n                }\\n\\n                setLoading(false);\\n                _context3.next = 43;\\n                break;\\n\\n              case 37:\\n                _context3.next = 39;\\n                return checkIframeLoaded();\\n\\n              case 39:\\n                setLoading(false);\\n                setIframeUrl(response_cashier.cashier);\\n                setSessionTimeout(false);\\n                setTimeoutCashierUrl();\\n\\n              case 43:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function onMountWithdraw(_x3) {\\n        return _onMountWithdraw.apply(this, arguments);\\n      }\\n\\n      return onMountWithdraw;\\n    }()\\n  }, {\\n    key: \\\"onMountCryptoWithdraw\\\",\\n    value: function () {\\n      var _onMountCryptoWithdraw = withdraw_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(verification_code) {\\n        var _this$root_store$modu2, crypto_fiat_converter, general_store, iframe, str_reg_exp, response_cashier;\\n\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                _this$root_store$modu2 = this.root_store.modules.cashier, crypto_fiat_converter = _this$root_store$modu2.crypto_fiat_converter, general_store = _this$root_store$modu2.general_store, iframe = _this$root_store$modu2.iframe;\\n                general_store.setLoading(true);\\n                str_reg_exp = /^\\\\w{8,128}$/;\\n\\n                if (!str_reg_exp.test(verification_code)) {\\n                  _context4.next = 9;\\n                  break;\\n                }\\n\\n                _context4.next = 6;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +crypto_fiat_converter.converter_from_amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                });\\n\\n              case 6:\\n                response_cashier = _context4.sent;\\n                _context4.next = 10;\\n                break;\\n\\n              case 9:\\n                response_cashier = {\\n                  error: {\\n                    code: 'InvalidToken',\\n                    message: 'Your token has expired or is invalid.'\\n                  }\\n                };\\n\\n              case 10:\\n                if (response_cashier.error.code === 'InvalidToken') {\\n                  this.error.handleCashierError(response_cashier.error);\\n                  general_store.setLoading(false);\\n                  iframe.setSessionTimeout(true);\\n                  iframe.clearTimeoutCashierUrl();\\n\\n                  if (verification_code) {\\n                    // clear verification code on error\\n                    this.verification.clearVerification();\\n                  }\\n                } else {\\n                  general_store.setLoading(false);\\n                }\\n\\n              case 11:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function onMountCryptoWithdraw(_x4) {\\n        return _onMountCryptoWithdraw.apply(this, arguments);\\n      }\\n\\n      return onMountCryptoWithdraw;\\n    }()\\n  }, {\\n    key: \\\"is_withdrawal_locked\\\",\\n    get: function get() {\\n      var _client$account_statu;\\n\\n      var client = this.root_store.client;\\n      var authentication = client.account_status.authentication;\\n      if (!((_client$account_statu = client.account_status) !== null && _client$account_statu !== void 0 && _client$account_statu.status)) return false;\\n      var need_poi = authentication.needs_verification.includes('identity');\\n      var need_authentication = this.error.is_ask_authentication && need_poi;\\n      return client.is_withdrawal_lock || need_authentication || this.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"setMaxWithdrawAmount\\\",\\n    value: function setMaxWithdrawAmount(amount) {\\n      this.max_withdraw_amount = amount;\\n    }\\n  }, {\\n    key: \\\"check10kLimit\\\",\\n    value: function () {\\n      var _check10kLimit = withdraw_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\\n        var _yield$client$getLimi, _yield$client$getLimi2;\\n\\n        var client, remainder, min_withdrawal, is_limit_reached;\\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\\n          while (1) {\\n            switch (_context5.prev = _context5.next) {\\n              case 0:\\n                client = this.root_store.client;\\n                _context5.next = 3;\\n                return client.getLimits();\\n\\n              case 3:\\n                _context5.t1 = _yield$client$getLimi = _context5.sent;\\n                _context5.t0 = _context5.t1 === null;\\n\\n                if (_context5.t0) {\\n                  _context5.next = 7;\\n                  break;\\n                }\\n\\n                _context5.t0 = _yield$client$getLimi === void 0;\\n\\n              case 7:\\n                if (!_context5.t0) {\\n                  _context5.next = 11;\\n                  break;\\n                }\\n\\n                _context5.t2 = void 0;\\n                _context5.next = 12;\\n                break;\\n\\n              case 11:\\n                _context5.t2 = (_yield$client$getLimi2 = _yield$client$getLimi.get_limits) === null || _yield$client$getLimi2 === void 0 ? void 0 : _yield$client$getLimi2.remainder;\\n\\n              case 12:\\n                remainder = _context5.t2;\\n                this.setMaxWithdrawAmount(remainder);\\n                min_withdrawal = (0,shared_.getMinWithdrawal)(client.currency);\\n                is_limit_reached = !!(typeof remainder !== 'undefined' && +remainder < min_withdrawal);\\n                this.set10kLimitation(is_limit_reached);\\n\\n              case 17:\\n              case \\\"end\\\":\\n                return _context5.stop();\\n            }\\n          }\\n        }, _callee5, this);\\n      }));\\n\\n      function check10kLimit() {\\n        return _check10kLimit.apply(this, arguments);\\n      }\\n\\n      return check10kLimit;\\n    }()\\n  }, {\\n    key: \\\"set10kLimitation\\\",\\n    value: function set10kLimitation(is_limit_reached) {\\n      this.is_10k_withdrawal_limit_reached = is_limit_reached;\\n    }\\n  }, {\\n    key: \\\"setWithdrawPercentageSelectorResult\\\",\\n    value: function setWithdrawPercentageSelectorResult(amount) {\\n      var _this$root_store3 = this.root_store,\\n          client = _this$root_store3.client,\\n          modules = _this$root_store3.modules;\\n      var _modules$cashier2 = modules.cashier,\\n          crypto_fiat_converter = _modules$cashier2.crypto_fiat_converter,\\n          general_store = _modules$cashier2.general_store;\\n      var currency = client.currency,\\n          current_fiat_currency = client.current_fiat_currency;\\n\\n      if (amount > 0) {\\n        crypto_fiat_converter.setConverterFromAmount(amount);\\n        this.validateWithdrawFromAmount();\\n        crypto_fiat_converter.onChangeConverterFromAmount({\\n          target: {\\n            value: amount\\n          }\\n        }, currency, current_fiat_currency || 'USD');\\n      } else {\\n        crypto_fiat_converter.resetConverter();\\n      }\\n\\n      crypto_fiat_converter.setIsTimerVisible(false);\\n      general_store.percentageSelectorSelectionStatus(false);\\n    }\\n  }, {\\n    key: \\\"validateWithdrawFromAmount\\\",\\n    value: function validateWithdrawFromAmount() {\\n      var error_message = '';\\n      var _this$root_store4 = this.root_store,\\n          client = _this$root_store4.client,\\n          modules = _this$root_store4.modules;\\n      var balance = client.balance,\\n          currency = client.currency,\\n          website_status = client.website_status;\\n      var _modules$cashier$cryp = modules.cashier.crypto_fiat_converter,\\n          converter_from_amount = _modules$cashier$cryp.converter_from_amount,\\n          setConverterFromError = _modules$cashier$cryp.setConverterFromError;\\n      var min_withdraw_amount = website_status.crypto_config[currency].minimum_withdrawal;\\n      var max_withdraw_amount = +this.max_withdraw_amount > +balance ? +balance : +this.max_withdraw_amount;\\n\\n      if (converter_from_amount) {\\n        var _validNumber = (0,shared_.validNumber)(converter_from_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(currency)\\n        }),\\n            is_ok = _validNumber.is_ok,\\n            message = _validNumber.message;\\n\\n        if (!is_ok) error_message = message;\\n        if (+balance < +converter_from_amount) error_message = (0,translations_.localize)('Insufficient funds');\\n\\n        if (+converter_from_amount < +min_withdraw_amount || +converter_from_amount > +max_withdraw_amount) {\\n          error_message = /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n            i18n_default_text: \\\"The allowed withdraw amount is {{min_withdraw_amount}} to {{max_withdraw_amount}} {{currency}}\\\",\\n            values: {\\n              min_withdraw_amount: min_withdraw_amount,\\n              max_withdraw_amount: max_withdraw_amount,\\n              currency: currency\\n            }\\n          });\\n        }\\n      }\\n\\n      setConverterFromError(error_message);\\n    }\\n  }, {\\n    key: \\\"validateWithdrawToAmount\\\",\\n    value: function validateWithdrawToAmount() {\\n      var error_message = '';\\n      var _this$root_store5 = this.root_store,\\n          client = _this$root_store5.client,\\n          modules = _this$root_store5.modules;\\n      var current_fiat_currency = client.current_fiat_currency;\\n      var _modules$cashier$cryp2 = modules.cashier.crypto_fiat_converter,\\n          converter_to_amount = _modules$cashier$cryp2.converter_to_amount,\\n          setConverterToError = _modules$cashier$cryp2.setConverterToError;\\n\\n      if (converter_to_amount) {\\n        var _validNumber2 = (0,shared_.validNumber)(converter_to_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(current_fiat_currency)\\n        }),\\n            is_ok = _validNumber2.is_ok,\\n            message = _validNumber2.message;\\n\\n        if (!is_ok) error_message = message;\\n      }\\n\\n      setConverterToError(error_message);\\n    }\\n  }, {\\n    key: \\\"account_platform_icon\\\",\\n    get: function get() {\\n      var _this$root_store$clie = this.root_store.client,\\n          account_list = _this$root_store$clie.account_list,\\n          loginid = _this$root_store$clie.loginid;\\n      var platform_icon = account_list.find(function (acc) {\\n        return loginid === acc.loginid;\\n      }).icon;\\n      return platform_icon;\\n    }\\n  }]);\\n\\n  return WithdrawStore;\\n}(), (withdraw_store_descriptor = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"blockchain_address\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), withdraw_store_descriptor2 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return constants.containers.withdraw;\\n  }\\n}), withdraw_store_descriptor3 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), withdraw_store_descriptor4 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"is_10k_withdrawal_limit_reached\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return undefined;\\n  }\\n}), withdraw_store_descriptor5 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"is_withdraw_confirmed\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), withdraw_store_descriptor6 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"verification\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new VerificationStore({\\n      root_store: this.root_store,\\n      WS: this.WS\\n    });\\n  }\\n}), withdraw_store_descriptor7 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"withdraw_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), withdraw_store_descriptor8 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"max_withdraw_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"setIsWithdrawConfirmed\\\", [withdraw_store_dec], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"setIsWithdrawConfirmed\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"setWithdrawAmount\\\", [withdraw_store_dec2], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"setWithdrawAmount\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"requestWithdraw\\\", [withdraw_store_dec3], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"requestWithdraw\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"saveWithdraw\\\", [withdraw_store_dec4], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"saveWithdraw\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"resetWithrawForm\\\", [withdraw_store_dec5], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"resetWithrawForm\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"setBlockchainAddress\\\", [withdraw_store_dec6], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"setBlockchainAddress\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"willMountWithdraw\\\", [withdraw_store_dec7], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"willMountWithdraw\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"onMountWithdraw\\\", [withdraw_store_dec8], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"onMountWithdraw\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"onMountCryptoWithdraw\\\", [withdraw_store_dec9], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"onMountCryptoWithdraw\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"is_withdrawal_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"is_withdrawal_locked\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"setMaxWithdrawAmount\\\", [withdraw_store_dec10], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"setMaxWithdrawAmount\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"check10kLimit\\\", [withdraw_store_dec11], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"check10kLimit\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"set10kLimitation\\\", [withdraw_store_dec12], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"set10kLimitation\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"setWithdrawPercentageSelectorResult\\\", [withdraw_store_dec13], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"setWithdrawPercentageSelectorResult\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"validateWithdrawFromAmount\\\", [withdraw_store_dec14], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"validateWithdrawFromAmount\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"validateWithdrawToAmount\\\", [withdraw_store_dec15], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"validateWithdrawToAmount\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"account_platform_icon\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"account_platform_icon\\\"), withdraw_store_class.prototype)), withdraw_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/cashier-store.js\\nfunction cashier_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar CashierStore = function CashierStore(_ref) {\\n  var root_store = _ref.root_store,\\n      WS = _ref.WS;\\n\\n  cashier_store_classCallCheck(this, CashierStore);\\n\\n  this.account_prompt_dialog = new AccountPromptDialogStore(root_store);\\n  this.account_transfer = new AccountTransferStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.crypto_fiat_converter = new CryptoFiatConverterStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.deposit = new DepositStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.error_dialog = new ErrorDialogStore();\\n  this.error = new ErrorStore();\\n  this.general_store = new GeneralStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.iframe = new IframeStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.onramp = new OnRampStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.payment_agent = new PaymentAgentStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.payment_agent_transfer = new PaymentAgentTransferStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.transaction_history = new TransactionHistoryStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.verification = new VerificationStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.withdraw = new WithdrawStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n};\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Stores/cashier-store.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/factoryWithThrowingShims.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = __webpack_require__(\\\"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\\");\\n\\nfunction emptyFunction() {}\\nfunction emptyFunctionWithReset() {}\\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\\n\\nmodule.exports = function() {\\n  function shim(props, propName, componentName, location, propFullName, secret) {\\n    if (secret === ReactPropTypesSecret) {\\n      // It is still safe when called from React.\\n      return;\\n    }\\n    var err = new Error(\\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\\n      'Use PropTypes.checkPropTypes() to call them. ' +\\n      'Read more at http://fb.me/use-check-prop-types'\\n    );\\n    err.name = 'Invariant Violation';\\n    throw err;\\n  };\\n  shim.isRequired = shim;\\n  function getShim() {\\n    return shim;\\n  };\\n  // Important!\\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\\n  var ReactPropTypes = {\\n    array: shim,\\n    bool: shim,\\n    func: shim,\\n    number: shim,\\n    object: shim,\\n    string: shim,\\n    symbol: shim,\\n\\n    any: shim,\\n    arrayOf: getShim,\\n    element: shim,\\n    elementType: shim,\\n    instanceOf: getShim,\\n    node: shim,\\n    objectOf: getShim,\\n    oneOf: getShim,\\n    oneOfType: getShim,\\n    shape: getShim,\\n    exact: getShim,\\n\\n    checkPropTypes: emptyFunctionWithReset,\\n    resetWarningCache: emptyFunction\\n  };\\n\\n  ReactPropTypes.PropTypes = ReactPropTypes;\\n\\n  return ReactPropTypes;\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzP2RjMDciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/factoryWithThrowingShims.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/index.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nif (false) { var throwOnDirectAccess, ReactIs; } else {\\n  // By explicitly using `prop-types` you are opting into new production behavior.\\n  // http://fb.me/prop-types-in-prod\\n  module.exports = __webpack_require__(\\\"../../../node_modules/prop-types/factoryWithThrowingShims.js\\\")();\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanM/NzBkNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\":\n/***/ ((module) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\\n\\nmodule.exports = ReactPropTypesSecret;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jYXNoaWVyLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcz9hZDgzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"mobx\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_635673__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_635673__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_635673__.m = __webpack_modules__;\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_635673__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_635673__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/create fake namespace object */\n/******/ \t(() => {\n/******/ \t\tvar getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\n/******/ \t\tvar leafPrototypes;\n/******/ \t\t// create a fake namespace object\n/******/ \t\t// mode & 1: value is a module id, require it\n/******/ \t\t// mode & 2: merge all properties of value into the ns\n/******/ \t\t// mode & 4: return value when already ns object\n/******/ \t\t// mode & 16: return value when it's Promise-like\n/******/ \t\t// mode & 8|1: behave like require\n/******/ \t\t__nested_webpack_require_635673__.t = function(value, mode) {\n/******/ \t\t\tif(mode & 1) value = this(value);\n/******/ \t\t\tif(mode & 8) return value;\n/******/ \t\t\tif(typeof value === 'object' && value) {\n/******/ \t\t\t\tif((mode & 4) && value.__esModule) return value;\n/******/ \t\t\t\tif((mode & 16) && typeof value.then === 'function') return value;\n/******/ \t\t\t}\n/******/ \t\t\tvar ns = Object.create(null);\n/******/ \t\t\t__nested_webpack_require_635673__.r(ns);\n/******/ \t\t\tvar def = {};\n/******/ \t\t\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n/******/ \t\t\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n/******/ \t\t\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n/******/ \t\t\t}\n/******/ \t\t\tdef['default'] = () => (value);\n/******/ \t\t\t__nested_webpack_require_635673__.d(ns, def);\n/******/ \t\t\treturn ns;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_635673__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_635673__.o(definition, key) && !__nested_webpack_require_635673__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/ensure chunk */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_635673__.f = {};\n/******/ \t\t// This file contains only the entry chunk.\n/******/ \t\t// The chunk loading function for additional chunks\n/******/ \t\t__nested_webpack_require_635673__.e = (chunkId) => {\n/******/ \t\t\treturn Promise.all(Object.keys(__nested_webpack_require_635673__.f).reduce((promises, key) => {\n/******/ \t\t\t\t__nested_webpack_require_635673__.f[key](chunkId, promises);\n/******/ \t\t\t\treturn promises;\n/******/ \t\t\t}, []));\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get javascript chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference async chunks\n/******/ \t\t__nested_webpack_require_635673__.u = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"cashier/js/cashier.\" + chunkId + \".\" + \"a007a79dd7345a890a13\" + \".js\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get mini-css chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference all chunks\n/******/ \t\t__nested_webpack_require_635673__.miniCssF = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn undefined;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_635673__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/load script */\n/******/ \t(() => {\n/******/ \t\tvar inProgress = {};\n/******/ \t\tvar dataWebpackPrefix = \"@deriv/cashier:\";\n/******/ \t\t// loadScript function to load a script via script tag\n/******/ \t\t__nested_webpack_require_635673__.l = (url, done, key, chunkId) => {\n/******/ \t\t\tif(inProgress[url]) { inProgress[url].push(done); return; }\n/******/ \t\t\tvar script, needAttach;\n/******/ \t\t\tif(key !== undefined) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n/******/ \t\t\t\tfor(var i = 0; i < scripts.length; i++) {\n/******/ \t\t\t\t\tvar s = scripts[i];\n/******/ \t\t\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(!script) {\n/******/ \t\t\t\tneedAttach = true;\n/******/ \t\t\t\tscript = document.createElement('script');\n/******/ \t\t\n/******/ \t\t\t\tscript.charset = 'utf-8';\n/******/ \t\t\t\tscript.timeout = 120;\n/******/ \t\t\t\tif (__nested_webpack_require_635673__.nc) {\n/******/ \t\t\t\t\tscript.setAttribute(\"nonce\", __nested_webpack_require_635673__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n/******/ \t\t\t\tscript.src = url;\n/******/ \t\t\t}\n/******/ \t\t\tinProgress[url] = [done];\n/******/ \t\t\tvar onScriptComplete = (prev, event) => {\n/******/ \t\t\t\t// avoid mem leaks in IE.\n/******/ \t\t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\t\tclearTimeout(timeout);\n/******/ \t\t\t\tvar doneFns = inProgress[url];\n/******/ \t\t\t\tdelete inProgress[url];\n/******/ \t\t\t\tscript.parentNode && script.parentNode.removeChild(script);\n/******/ \t\t\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n/******/ \t\t\t\tif(prev) return prev(event);\n/******/ \t\t\t}\n/******/ \t\t\t;\n/******/ \t\t\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n/******/ \t\t\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n/******/ \t\t\tscript.onload = onScriptComplete.bind(null, script.onload);\n/******/ \t\t\tneedAttach && document.head.appendChild(script);\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_635673__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_635673__.p = \"/\";\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/jsonp chunk loading */\n/******/ \t(() => {\n/******/ \t\t// no baseURI\n/******/ \t\t\n/******/ \t\t// object to store loaded and loading chunks\n/******/ \t\t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n/******/ \t\t// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\n/******/ \t\tvar installedChunks = {\n/******/ \t\t\t\"cashier-store\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_635673__.f.j = (chunkId, promises) => {\n/******/ \t\t\t\t// JSONP chunk loading for javascript\n/******/ \t\t\t\tvar installedChunkData = __nested_webpack_require_635673__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n/******/ \t\t\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n/******/ \t\t\n/******/ \t\t\t\t\t// a Promise means \"currently loading\".\n/******/ \t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\tpromises.push(installedChunkData[2]);\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tif(true) { // all chunks have JS\n/******/ \t\t\t\t\t\t\t// setup Promise in chunk cache\n/******/ \t\t\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n/******/ \t\t\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n/******/ \t\t\n/******/ \t\t\t\t\t\t\t// start chunk loading\n/******/ \t\t\t\t\t\t\tvar url = __nested_webpack_require_635673__.p + __nested_webpack_require_635673__.u(chunkId);\n/******/ \t\t\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\t\t\t\tvar error = new Error();\n/******/ \t\t\t\t\t\t\tvar loadingEnded = (event) => {\n/******/ \t\t\t\t\t\t\t\tif(__nested_webpack_require_635673__.o(installedChunks, chunkId)) {\n/******/ \t\t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n/******/ \t\t\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n/******/ \t\t\t\t\t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t\t\t__nested_webpack_require_635673__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n/******/ \t\t\t\t\t\t} else {}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no prefetching\n/******/ \t\t\n/******/ \t\t// no preloaded\n/******/ \t\t\n/******/ \t\t// no HMR\n/******/ \t\t\n/******/ \t\t// no HMR manifest\n/******/ \t\t\n/******/ \t\t// no on chunks loaded\n/******/ \t\t\n/******/ \t\t// install a JSONP callback for chunk loading\n/******/ \t\tvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n/******/ \t\t\tvar [chunkIds, moreModules, runtime] = data;\n/******/ \t\t\t// add \"moreModules\" to the modules object,\n/******/ \t\t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\t\tvar moduleId, chunkId, i = 0;\n/******/ \t\t\tfor(moduleId in moreModules) {\n/******/ \t\t\t\tif(__nested_webpack_require_635673__.o(moreModules, moduleId)) {\n/******/ \t\t\t\t\t__nested_webpack_require_635673__.m[moduleId] = moreModules[moduleId];\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(runtime) var result = runtime(__nested_webpack_require_635673__);\n/******/ \t\t\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n/******/ \t\t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\t\tchunkId = chunkIds[i];\n/******/ \t\t\t\tif(__nested_webpack_require_635673__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n/******/ \t\t\t\t\tinstalledChunks[chunkId][0]();\n/******/ \t\t\t\t}\n/******/ \t\t\t\tinstalledChunks[chunkIds[i]] = 0;\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tvar chunkLoadingGlobal = self[\"webpackChunk_deriv_cashier\"] = self[\"webpackChunk_deriv_cashier\"] || [];\n/******/ \t\tchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n/******/ \t\tchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_635673__(\"./Stores/cashier-store.js\");\n/******/ \t__webpack_exports__ = __webpack_exports__.default;\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY2FzaGllci9kaXN0L2Nhc2hpZXIvanMvY2FzaGllci1zdG9yZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vY2FzaGllci9kaXN0L2Nhc2hpZXIvanMvY2FzaGllci1zdG9yZS5qcz83N2U4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBBVFRFTlRJT046IEFuIFwiZXZhbC1zb3VyY2UtbWFwXCIgZGV2dG9vbCBoYXMgYmVlbiB1c2VkLlxuICogVGhpcyBkZXZ0b29sIGlzIG5laXRoZXIgbWFkZSBmb3IgcHJvZHVjdGlvbiBub3IgZm9yIHJlYWRhYmxlIG91dHB1dCBmaWxlcy5cbiAqIEl0IHVzZXMgXCJldmFsKClcIiBjYWxscyB0byBjcmVhdGUgYSBzZXBhcmF0ZSBzb3VyY2UgZmlsZSB3aXRoIGF0dGFjaGVkIFNvdXJjZU1hcHMgaW4gdGhlIGJyb3dzZXIgZGV2dG9vbHMuXG4gKiBJZiB5b3UgYXJlIHRyeWluZyB0byByZWFkIHRoZSBvdXRwdXQgZmlsZSwgc2VsZWN0IGEgZGlmZmVyZW50IGRldnRvb2wgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9kZXZ0b29sLylcbiAqIG9yIGRpc2FibGUgdGhlIGRlZmF1bHQgZGV2dG9vbCB3aXRoIFwiZGV2dG9vbDogZmFsc2VcIi5cbiAqIElmIHlvdSBhcmUgbG9va2luZyBmb3IgcHJvZHVjdGlvbi1yZWFkeSBvdXRwdXQgZmlsZXMsIHNlZSBtb2RlOiBcInByb2R1Y3Rpb25cIiAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL21vZGUvKS5cbiAqL1xuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiQGRlcml2L2NvbXBvbmVudHNcIiksIHJlcXVpcmUoXCJAZGVyaXYvc2hhcmVkXCIpLCByZXF1aXJlKFwiQGRlcml2L3RyYW5zbGF0aW9uc1wiKSwgcmVxdWlyZShcIm1vYnhcIiksIHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJAZGVyaXYvY29tcG9uZW50c1wiLCBcIkBkZXJpdi9zaGFyZWRcIiwgXCJAZGVyaXYvdHJhbnNsYXRpb25zXCIsIFwibW9ieFwiLCBcInJlYWN0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkBkZXJpdi9jYXNoaWVyXCJdID0gZmFjdG9yeShyZXF1aXJlKFwiQGRlcml2L2NvbXBvbmVudHNcIiksIHJlcXVpcmUoXCJAZGVyaXYvc2hhcmVkXCIpLCByZXF1aXJlKFwiQGRlcml2L3RyYW5zbGF0aW9uc1wiKSwgcmVxdWlyZShcIm1vYnhcIiksIHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiQGRlcml2L2Nhc2hpZXJcIl0gPSBmYWN0b3J5KHJvb3RbXCJAZGVyaXYvY29tcG9uZW50c1wiXSwgcm9vdFtcIkBkZXJpdi9zaGFyZWRcIl0sIHJvb3RbXCJAZGVyaXYvdHJhbnNsYXRpb25zXCJdLCByb290W1wibW9ieFwiXSwgcm9vdFtcInJlYWN0XCJdKTtcbn0pKHNlbGYsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X2NvbXBvbmVudHNfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fZGVyaXZfc2hhcmVkX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X3RyYW5zbGF0aW9uc19fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX21vYnhfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9fKSB7XG5yZXR1cm4gLyoqKioqKi8gKCgpID0+IHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7XG5cbi8qKiovIFwiLi9TdG9yZXMvY2FzaGllci1zdG9yZS5qc1wiOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG4vLyBFWFBPUlRTXFxuX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcXG4gIFxcXCJkZWZhdWx0XFxcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ2FzaGllclN0b3JlKVxcbn0pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXFxcIm1vYnhcXFwiXFxudmFyIGV4dGVybmFsX21vYnhfID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcXFwibW9ieFxcXCIpO1xcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXFxcIkBkZXJpdi9zaGFyZWRcXFwiXFxudmFyIHNoYXJlZF8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFxcXCJAZGVyaXYvc2hhcmVkXFxcIik7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vU3RvcmVzL2FjY291bnQtcHJvbXB0LWRpYWxvZy1zdG9yZS5qc1xcbnZhciBfZGVjLCBfZGVjMiwgX2RlYzMsIF9kZWM0LCBfZGVjNSwgX2RlYzYsIF9jbGFzcywgX2Rlc2NyaXB0b3IsIF9kZXNjcmlwdG9yMiwgX2Rlc2NyaXB0b3IzLCBfZGVzY3JpcHRvcjQ7XFxuXFxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxcblxcbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJuZXh0XFxcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcXFwidGhyb3dcXFwiLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9XFxuXFxuZnVuY3Rpb24gX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkgeyBpZiAoIWRlc2NyaXB0b3IpIHJldHVybjsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHsgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLCBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLCB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSwgdmFsdWU6IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDAgfSk7IH1cXG5cXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblxcXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcXFwidmFsdWVcXFwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7IHZhciBkZXNjID0ge307IE9iamVjdC5rZXlzKGRlc2NyaXB0b3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBkZXNjW2tleV0gPSBkZXNjcmlwdG9yW2tleV07IH0pOyBkZXNjLmVudW1lcmFibGUgPSAhIWRlc2MuZW51bWVyYWJsZTsgZGVzYy5jb25maWd1cmFibGUgPSAhIWRlc2MuY29uZmlndXJhYmxlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjIHx8IGRlc2MuaW5pdGlhbGl6ZXIpIHsgZGVzYy53cml0YWJsZSA9IHRydWU7IH0gZGVzYyA9IGRlY29yYXRvcnMuc2xpY2UoKS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChkZXNjLCBkZWNvcmF0b3IpIHsgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5LCBkZXNjKSB8fCBkZXNjOyB9LCBkZXNjKTsgaWYgKGNvbnRleHQgJiYgZGVzYy5pbml0aWFsaXplciAhPT0gdm9pZCAwKSB7IGRlc2MudmFsdWUgPSBkZXNjLmluaXRpYWxpemVyID8gZGVzYy5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwOyBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkOyB9IGlmIChkZXNjLmluaXRpYWxpemVyID09PSB2b2lkIDApIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2MpOyBkZXNjID0gbnVsbDsgfSByZXR1cm4gZGVzYzsgfVxcblxcbmZ1bmN0aW9uIF9pbml0aWFsaXplcldhcm5pbmdIZWxwZXIoZGVzY3JpcHRvciwgY29udGV4dCkgeyB0aHJvdyBuZXcgRXJyb3IoJ0RlY29yYXRpbmcgY2xhc3MgcHJvcGVydHkgZmFpbGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgJyArICdwcm9wb3NhbC1jbGFzcy1wcm9wZXJ0aWVzIGlzIGVuYWJsZWQgYW5kIHJ1bnMgYWZ0ZXIgdGhlIGRlY29yYXRvcnMgdHJhbnNmb3JtLicpOyB9XFxuXFxuXFxuXFxudmFyIEFjY291bnRQcm9tcHREaWFsb2dTdG9yZSA9IChfZGVjID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBfZGVjMiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgX2RlYzMgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIF9kZWM0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBfZGVjNSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgX2RlYzYgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIChfY2xhc3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xcbiAgZnVuY3Rpb24gQWNjb3VudFByb21wdERpYWxvZ1N0b3JlKHJvb3Rfc3RvcmUpIHtcXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjY291bnRQcm9tcHREaWFsb2dTdG9yZSk7XFxuXFxuICAgIF9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJzaG91bGRfc2hvd1xcXCIsIF9kZXNjcmlwdG9yLCB0aGlzKTtcXG5cXG4gICAgX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImlzX2NvbmZpcm1lZFxcXCIsIF9kZXNjcmlwdG9yMiwgdGhpcyk7XFxuXFxuICAgIF9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJsYXN0X2xvY2F0aW9uXFxcIiwgX2Rlc2NyaXB0b3IzLCB0aGlzKTtcXG5cXG4gICAgX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImN1cnJlbnRfbG9jYXRpb25cXFwiLCBfZGVzY3JpcHRvcjQsIHRoaXMpO1xcblxcbiAgICB0aGlzLnJvb3Rfc3RvcmUgPSByb290X3N0b3JlO1xcbiAgfVxcblxcbiAgX2NyZWF0ZUNsYXNzKEFjY291bnRQcm9tcHREaWFsb2dTdG9yZSwgW3tcXG4gICAga2V5OiBcXFwic2hvdWxkTmF2aWdhdGVBZnRlclByb21wdFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGROYXZpZ2F0ZUFmdGVyUHJvbXB0KG5leHRfbG9jYXRpb24sIGN1cnJlbnRfbG9jYXRpb24pIHtcXG4gICAgICBpZiAoIXRoaXMuaXNfY29uZmlybWVkKSB7XFxuICAgICAgICB0aGlzLmxhc3RfbG9jYXRpb24gPSBuZXh0X2xvY2F0aW9uO1xcbiAgICAgICAgdGhpcy5zaG91bGRfc2hvdyA9IHRydWU7XFxuICAgICAgICB0aGlzLmN1cnJlbnRfbG9jYXRpb24gPSBjdXJyZW50X2xvY2F0aW9uO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJyZXNldExhc3RMb2NhdGlvblxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldExhc3RMb2NhdGlvbigpIHtcXG4gICAgICB0aGlzLmxhc3RfbG9jYXRpb24gPSBudWxsO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInJlc2V0SXNDb25maXJtZWRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRJc0NvbmZpcm1lZCgpIHtcXG4gICAgICB0aGlzLmlzX2NvbmZpcm1lZCA9IGZhbHNlO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcIm9uQ29uZmlybVxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIF9vbkNvbmZpcm0gPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XFxuICAgICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSwgY2xpZW50LCBtb2R1bGVzLCBhY2NvdW50c19saXN0LCBoYXNfZmlhdF9hY2NvdW50O1xcblxcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBfdGhpcyRyb290X3N0b3JlID0gdGhpcy5yb290X3N0b3JlLCBjbGllbnQgPSBfdGhpcyRyb290X3N0b3JlLmNsaWVudCwgbW9kdWxlcyA9IF90aGlzJHJvb3Rfc3RvcmUubW9kdWxlcztcXG4gICAgICAgICAgICAgICAgYWNjb3VudHNfbGlzdCA9IG1vZHVsZXMuY2FzaGllci5hY2NvdW50X3RyYW5zZmVyLmFjY291bnRzX2xpc3Q7XFxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkX3Nob3cgPSBmYWxzZTtcXG4gICAgICAgICAgICAgICAgdGhpcy5pc19jb25maXJtZWQgPSB0cnVlO1xcbiAgICAgICAgICAgICAgICBoYXNfZmlhdF9hY2NvdW50ID0gYWNjb3VudHNfbGlzdC5zb21lKGZ1bmN0aW9uICh4KSB7XFxuICAgICAgICAgICAgICAgICAgcmV0dXJuICF4LmlzX2NyeXB0bztcXG4gICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICAgIGlmICghKCgwLHNoYXJlZF8uaXNDcnlwdG9jdXJyZW5jeSkoY2xpZW50ID09PSBudWxsIHx8IGNsaWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xpZW50LmN1cnJlbmN5KSAmJiBoYXNfZmlhdF9hY2NvdW50KSkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb1N3aXRjaCgpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA4OlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBvbkNvbmZpcm0oKSB7XFxuICAgICAgICByZXR1cm4gX29uQ29uZmlybS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gb25Db25maXJtO1xcbiAgICB9KClcXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZG9Td2l0Y2hcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfZG9Td2l0Y2ggPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkge1xcbiAgICAgICAgdmFyIF90aGlzJHJvb3Rfc3RvcmUyLCBjbGllbnQsIG1vZHVsZXMsIF9tb2R1bGVzJGNhc2hpZXIsIGFjY291bnRfdHJhbnNmZXIsIGdlbmVyYWxfc3RvcmUsIG5vbl9jcnlwdG9fYWNjb3VudHMsIGxvZ2luaWQ7XFxuXFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBfdGhpcyRyb290X3N0b3JlMiA9IHRoaXMucm9vdF9zdG9yZSwgY2xpZW50ID0gX3RoaXMkcm9vdF9zdG9yZTIuY2xpZW50LCBtb2R1bGVzID0gX3RoaXMkcm9vdF9zdG9yZTIubW9kdWxlcztcXG4gICAgICAgICAgICAgICAgX21vZHVsZXMkY2FzaGllciA9IG1vZHVsZXMuY2FzaGllciwgYWNjb3VudF90cmFuc2ZlciA9IF9tb2R1bGVzJGNhc2hpZXIuYWNjb3VudF90cmFuc2ZlciwgZ2VuZXJhbF9zdG9yZSA9IF9tb2R1bGVzJGNhc2hpZXIuZ2VuZXJhbF9zdG9yZTtcXG4gICAgICAgICAgICAgICAgbm9uX2NyeXB0b19hY2NvdW50cyA9IGFjY291bnRfdHJhbnNmZXIuYWNjb3VudHNfbGlzdC5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcXG4gICAgICAgICAgICAgICAgICByZXR1cm4gIXguaXNfY3J5cHRvO1xcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgbG9naW5pZCA9IG5vbl9jcnlwdG9fYWNjb3VudHMubWFwKGZ1bmN0aW9uICh4KSB7XFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHgudmFsdWU7XFxuICAgICAgICAgICAgICAgIH0pWzBdO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7XFxuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQuc3dpdGNoQWNjb3VudChsb2dpbmlkKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNjpcXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudF9sb2NhdGlvbiA9PT0gJ2RlcG9zaXQnKSB7XFxuICAgICAgICAgICAgICAgICAgZ2VuZXJhbF9zdG9yZS5zZXRJc0RlcG9zaXQodHJ1ZSk7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGNhc2UgNzpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBkb1N3aXRjaCgpIHtcXG4gICAgICAgIHJldHVybiBfZG9Td2l0Y2guYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGRvU3dpdGNoO1xcbiAgICB9KClcXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25DYW5jZWxcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DYW5jZWwoKSB7XFxuICAgICAgdGhpcy5zaG91bGRfc2hvdyA9IGZhbHNlO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImNvbnRpbnVlUm91dGVcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29udGludWVSb3V0ZSgpIHtcXG4gICAgICBpZiAodGhpcy5pc19jb25maXJtZWQgJiYgdGhpcy5sYXN0X2xvY2F0aW9uKSB7XFxuICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY29tbW9uLnJvdXRlVG8odGhpcy5sYXN0X2xvY2F0aW9uKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBBY2NvdW50UHJvbXB0RGlhbG9nU3RvcmU7XFxufSgpLCAoX2Rlc2NyaXB0b3IgPSBfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKF9jbGFzcy5wcm90b3R5cGUsIFxcXCJzaG91bGRfc2hvd1xcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIF9kZXNjcmlwdG9yMiA9IF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX2NvbmZpcm1lZFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIF9kZXNjcmlwdG9yMyA9IF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgXFxcImxhc3RfbG9jYXRpb25cXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIG51bGw7XFxuICB9XFxufSksIF9kZXNjcmlwdG9yNCA9IF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgXFxcImN1cnJlbnRfbG9jYXRpb25cXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIG51bGw7XFxuICB9XFxufSksIF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgXFxcInNob3VsZE5hdmlnYXRlQWZ0ZXJQcm9tcHRcXFwiLCBbX2RlY10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgXFxcInNob3VsZE5hdmlnYXRlQWZ0ZXJQcm9tcHRcXFwiKSwgX2NsYXNzLnByb3RvdHlwZSksIF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgXFxcInJlc2V0TGFzdExvY2F0aW9uXFxcIiwgW19kZWMyXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihfY2xhc3MucHJvdG90eXBlLCBcXFwicmVzZXRMYXN0TG9jYXRpb25cXFwiKSwgX2NsYXNzLnByb3RvdHlwZSksIF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgXFxcInJlc2V0SXNDb25maXJtZWRcXFwiLCBbX2RlYzNdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKF9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXNldElzQ29uZmlybWVkXFxcIiksIF9jbGFzcy5wcm90b3R5cGUpLCBfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKF9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbkNvbmZpcm1cXFwiLCBbX2RlYzRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKF9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbkNvbmZpcm1cXFwiKSwgX2NsYXNzLnByb3RvdHlwZSksIF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uQ2FuY2VsXFxcIiwgW19kZWM1XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihfY2xhc3MucHJvdG90eXBlLCBcXFwib25DYW5jZWxcXFwiKSwgX2NsYXNzLnByb3RvdHlwZSksIF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgXFxcImNvbnRpbnVlUm91dGVcXFwiLCBbX2RlYzZdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKF9jbGFzcy5wcm90b3R5cGUsIFxcXCJjb250aW51ZVJvdXRlXFxcIiksIF9jbGFzcy5wcm90b3R5cGUpKSwgX2NsYXNzKSk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcXFwicmVhY3RcXFwiXFxudmFyIGV4dGVybmFsX3JlYWN0XyA9IF9fd2VicGFja19yZXF1aXJlX18oXFxcInJlYWN0XFxcIik7XFxudmFyIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3JlYWN0Xyk7XFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcXFwiQGRlcml2L3RyYW5zbGF0aW9uc1xcXCJcXG52YXIgdHJhbnNsYXRpb25zXyA9IF9fd2VicGFja19yZXF1aXJlX18oXFxcIkBkZXJpdi90cmFuc2xhdGlvbnNcXFwiKTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9Db25zdGFudHMvY29uc3RhbnRzLmpzXFxudmFyIGNvbnRhaW5lcnMgPSB7XFxuICBhY2NvdW50X3RyYW5zZmVyOiAnYWNjb3VudF90cmFuc2ZlcicsXFxuICBkZXBvc2l0OiAnZGVwb3NpdCcsXFxuICBwYXltZW50X2FnZW50OiAncGF5bWVudF9hZ2VudCcsXFxuICBwYXltZW50X2FnZW50X3RyYW5zZmVyOiAncGF5bWVudF9hZ2VudF90cmFuc2ZlcicsXFxuICB3aXRoZHJhdzogJ3dpdGhkcmF3J1xcbn07XFxudmFyIG1hcF9hY3Rpb24gPSB7XFxuICB3aXRoZHJhdzogJ3BheW1lbnRfd2l0aGRyYXcnLFxcbiAgcGF5bWVudF9hZ2VudDogJ3BheW1lbnRfYWdlbnRfd2l0aGRyYXcnXFxufTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IGNvbnN0YW50cyA9ICh7XFxuICBjb250YWluZXJzOiBjb250YWluZXJzLFxcbiAgbWFwX2FjdGlvbjogbWFwX2FjdGlvblxcbn0pO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL1N0b3Jlcy9lcnJvci1zdG9yZS5qc1xcbnZhciBlcnJvcl9zdG9yZV9kZWMsIGVycm9yX3N0b3JlX2RlYzIsIGVycm9yX3N0b3JlX2RlYzMsIGVycm9yX3N0b3JlX2RlYzQsIGVycm9yX3N0b3JlX2RlYzUsIGVycm9yX3N0b3JlX2RlYzYsIF9kZWM3LCBlcnJvcl9zdG9yZV9jbGFzcywgZXJyb3Jfc3RvcmVfZGVzY3JpcHRvciwgZXJyb3Jfc3RvcmVfZGVzY3JpcHRvcjIsIGVycm9yX3N0b3JlX2Rlc2NyaXB0b3IzLCBlcnJvcl9zdG9yZV9kZXNjcmlwdG9yNCwgX2Rlc2NyaXB0b3I1LCBfZGVzY3JpcHRvcjYsIF9kZXNjcmlwdG9yNywgX2Rlc2NyaXB0b3I4LCBfZGVzY3JpcHRvcjk7XFxuXFxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XFxuXFxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XFxuXFxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cXG5cXG5mdW5jdGlvbiBlcnJvcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgaWYgKCFkZXNjcmlwdG9yKSByZXR1cm47IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB7IGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSwgY29uZmlndXJhYmxlOiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSwgd3JpdGFibGU6IGRlc2NyaXB0b3Iud3JpdGFibGUsIHZhbHVlOiBkZXNjcmlwdG9yLmluaXRpYWxpemVyID8gZGVzY3JpcHRvci5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwIH0pOyB9XFxuXFxuZnVuY3Rpb24gZXJyb3Jfc3RvcmVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblxcXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBlcnJvcl9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFxcXCJ2YWx1ZVxcXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gZXJyb3Jfc3RvcmVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBlcnJvcl9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZXJyb3Jfc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBlcnJvcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVjb3JhdG9ycywgZGVzY3JpcHRvciwgY29udGV4dCkgeyB2YXIgZGVzYyA9IHt9OyBPYmplY3Qua2V5cyhkZXNjcmlwdG9yKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgZGVzY1trZXldID0gZGVzY3JpcHRvcltrZXldOyB9KTsgZGVzYy5lbnVtZXJhYmxlID0gISFkZXNjLmVudW1lcmFibGU7IGRlc2MuY29uZmlndXJhYmxlID0gISFkZXNjLmNvbmZpZ3VyYWJsZTsgaWYgKCd2YWx1ZScgaW4gZGVzYyB8fCBkZXNjLmluaXRpYWxpemVyKSB7IGRlc2Mud3JpdGFibGUgPSB0cnVlOyB9IGRlc2MgPSBkZWNvcmF0b3JzLnNsaWNlKCkucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbiAoZGVzYywgZGVjb3JhdG9yKSB7IHJldHVybiBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYykgfHwgZGVzYzsgfSwgZGVzYyk7IGlmIChjb250ZXh0ICYmIGRlc2MuaW5pdGlhbGl6ZXIgIT09IHZvaWQgMCkgeyBkZXNjLnZhbHVlID0gZGVzYy5pbml0aWFsaXplciA/IGRlc2MuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMDsgZGVzYy5pbml0aWFsaXplciA9IHVuZGVmaW5lZDsgfSBpZiAoZGVzYy5pbml0aWFsaXplciA9PT0gdm9pZCAwKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjKTsgZGVzYyA9IG51bGw7IH0gcmV0dXJuIGRlc2M7IH1cXG5cXG5mdW5jdGlvbiBlcnJvcl9zdG9yZV9pbml0aWFsaXplcldhcm5pbmdIZWxwZXIoZGVzY3JpcHRvciwgY29udGV4dCkgeyB0aHJvdyBuZXcgRXJyb3IoJ0RlY29yYXRpbmcgY2xhc3MgcHJvcGVydHkgZmFpbGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgJyArICdwcm9wb3NhbC1jbGFzcy1wcm9wZXJ0aWVzIGlzIGVuYWJsZWQgYW5kIHJ1bnMgYWZ0ZXIgdGhlIGRlY29yYXRvcnMgdHJhbnNmb3JtLicpOyB9XFxuXFxuXFxuXFxudmFyIEVycm9yU3RvcmUgPSAoZXJyb3Jfc3RvcmVfZGVjID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBlcnJvcl9zdG9yZV9kZWMyID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBlcnJvcl9zdG9yZV9kZWMzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBlcnJvcl9zdG9yZV9kZWM0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBlcnJvcl9zdG9yZV9kZWM1ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBlcnJvcl9zdG9yZV9kZWM2ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBfZGVjNyA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgKGVycm9yX3N0b3JlX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIEVycm9yU3RvcmUoKSB7XFxuICAgIGVycm9yX3N0b3JlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVycm9yU3RvcmUpO1xcblxcbiAgICBlcnJvcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJtZXNzYWdlXFxcIiwgZXJyb3Jfc3RvcmVfZGVzY3JpcHRvciwgdGhpcyk7XFxuXFxuICAgIGVycm9yX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImNvZGVcXFwiLCBlcnJvcl9zdG9yZV9kZXNjcmlwdG9yMiwgdGhpcyk7XFxuXFxuICAgIGVycm9yX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImZpZWxkc1xcXCIsIGVycm9yX3N0b3JlX2Rlc2NyaXB0b3IzLCB0aGlzKTtcXG5cXG4gICAgZXJyb3Jfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiaXNfc2hvd19mdWxsX3BhZ2VcXFwiLCBlcnJvcl9zdG9yZV9kZXNjcmlwdG9yNCwgdGhpcyk7XFxuXFxuICAgIGVycm9yX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcIm9uQ2xpY2tCdXR0b25cXFwiLCBfZGVzY3JpcHRvcjUsIHRoaXMpO1xcblxcbiAgICBlcnJvcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJpc19hc2tfdWtfZnVuZHNfcHJvdGVjdGlvblxcXCIsIF9kZXNjcmlwdG9yNiwgdGhpcyk7XFxuXFxuICAgIGVycm9yX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImlzX3NlbGZfZXhjbHVzaW9uX21heF90dXJub3Zlcl9zZXRcXFwiLCBfZGVzY3JpcHRvcjcsIHRoaXMpO1xcblxcbiAgICBlcnJvcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJpc19hc2tfYXV0aGVudGljYXRpb25cXFwiLCBfZGVzY3JpcHRvcjgsIHRoaXMpO1xcblxcbiAgICBlcnJvcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJpc19hc2tfZmluYW5jaWFsX3Jpc2tfYXBwcm92YWxcXFwiLCBfZGVzY3JpcHRvcjksIHRoaXMpO1xcbiAgfVxcblxcbiAgZXJyb3Jfc3RvcmVfY3JlYXRlQ2xhc3MoRXJyb3JTdG9yZSwgW3tcXG4gICAga2V5OiBcXFwic2V0RXJyb3JNZXNzYWdlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEVycm9yTWVzc2FnZShlcnJvciwgb25DbGlja0J1dHRvbiwgaXNfc2hvd19mdWxsX3BhZ2UpIHtcXG4gICAgICAvLyBmb3IgZXJyb3JzIHRoYXQgbmVlZCB0byBzaG93IGEgYnV0dG9uLCByZXNldCB0aGUgZm9ybVxcbiAgICAgIHZhciBlcnJvcl9vYmplY3QgPSBfb2JqZWN0U3ByZWFkKHtcXG4gICAgICAgIG9uQ2xpY2tCdXR0b246IG9uQ2xpY2tCdXR0b24sXFxuICAgICAgICBjb2RlOiBlcnJvci5jb2RlLFxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcXG4gICAgICAgIGlzX3Nob3dfZnVsbF9wYWdlOiBpc19zaG93X2Z1bGxfcGFnZSB8fCAvSW52YWxpZFRva2VufFdyb25nUmVzcG9uc2UvLnRlc3QoZXJyb3IuY29kZSlcXG4gICAgICB9LCAoMCxzaGFyZWRfLmdldFByb3BlcnR5VmFsdWUpKGVycm9yLCBbJ2RldGFpbHMnLCAnZmllbGRzJ10pICYmIHtcXG4gICAgICAgIGZpZWxkczogZXJyb3IuZGV0YWlscy5maWVsZHNcXG4gICAgICB9KTtcXG5cXG4gICAgICB0aGlzLm9uQ2xpY2tCdXR0b24gPSBlcnJvcl9vYmplY3Qub25DbGlja0J1dHRvbjtcXG4gICAgICB0aGlzLmNvZGUgPSBlcnJvcl9vYmplY3QuY29kZTtcXG4gICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcl9vYmplY3QubWVzc2FnZTtcXG4gICAgICB0aGlzLmlzX3Nob3dfZnVsbF9wYWdlID0gZXJyb3Jfb2JqZWN0LmlzX3Nob3dfZnVsbF9wYWdlO1xcbiAgICAgIHRoaXMuZmllbGRzID0gZXJyb3Jfb2JqZWN0LmZpZWxkcztcXG4gICAgICB0aGlzLmlzX2Fza191a19mdW5kc19wcm90ZWN0aW9uID0gZXJyb3Jfb2JqZWN0ID09PSBudWxsIHx8IGVycm9yX29iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3Jfb2JqZWN0LmlzX2Fza191a19mdW5kc19wcm90ZWN0aW9uO1xcbiAgICAgIHRoaXMuaXNfc2VsZl9leGNsdXNpb25fbWF4X3R1cm5vdmVyX3NldCA9IGVycm9yX29iamVjdCA9PT0gbnVsbCB8fCBlcnJvcl9vYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yX29iamVjdC5pc19zZWxmX2V4Y2x1c2lvbl9tYXhfdHVybm92ZXJfc2V0O1xcbiAgICAgIHRoaXMuaXNfYXNrX2F1dGhlbnRpY2F0aW9uID0gZXJyb3Jfb2JqZWN0ID09PSBudWxsIHx8IGVycm9yX29iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3Jfb2JqZWN0LmlzX2Fza19hdXRoZW50aWNhdGlvbjtcXG4gICAgICB0aGlzLmlzX2Fza19maW5hbmNpYWxfcmlza19hcHByb3ZhbCA9IGVycm9yX29iamVjdCA9PT0gbnVsbCB8fCBlcnJvcl9vYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yX29iamVjdC5pc19hc2tfZmluYW5jaWFsX3Jpc2tfYXBwcm92YWw7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiaGFuZGxlQ2FzaGllckVycm9yXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNhc2hpZXJFcnJvcihlcnJvcikge1xcbiAgICAgIHN3aXRjaCAoZXJyb3IuY29kZSkge1xcbiAgICAgICAgY2FzZSAnQVNLX1ROQ19BUFBST1ZBTCc6XFxuICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKGVycm9yLCBudWxsLCB0cnVlKTtcXG4gICAgICAgICAgYnJlYWs7XFxuXFxuICAgICAgICBjYXNlICdBU0tfRklYX0RFVEFJTFMnOlxcbiAgICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZShlcnJvciwgbnVsbCwgdHJ1ZSk7XFxuICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgY2FzZSAnQVNLX1VLX0ZVTkRTX1BST1RFQ1RJT04nOlxcbiAgICAgICAgICB0aGlzLnNldElzQXNrVWtGdW5kc1Byb3RlY3Rpb24odHJ1ZSk7XFxuICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgY2FzZSAnQVNLX1NFTEZfRVhDTFVTSU9OX01BWF9UVVJOT1ZFUl9TRVQnOlxcbiAgICAgICAgICB0aGlzLnNldElzU2VsZkV4Y2x1c2lvbk1heFR1cm5vdmVyU2V0KHRydWUpO1xcbiAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgIGNhc2UgJ0FTS19BVVRIRU5USUNBVEUnOlxcbiAgICAgICAgY2FzZSAnQVNLX0FHRV9WRVJJRklDQVRJT04nOlxcbiAgICAgICAgICB0aGlzLnNldElzQXNrQXV0aGVudGljYXRpb24odHJ1ZSk7XFxuICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgY2FzZSAnQVNLX0ZJTkFOQ0lBTF9SSVNLX0FQUFJPVkFMJzpcXG4gICAgICAgICAgdGhpcy5zZXRJc0Fza0ZpbmFuY2lhbFJpc2tBcHByb3ZhbCh0cnVlKTtcXG4gICAgICAgICAgYnJlYWs7XFxuXFxuICAgICAgICBkZWZhdWx0OlxcbiAgICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZShlcnJvcik7XFxuICAgICAgICAgIHRoaXMuc2V0SXNBc2tVa0Z1bmRzUHJvdGVjdGlvbihmYWxzZSk7XFxuICAgICAgICAgIHRoaXMuc2V0SXNTZWxmRXhjbHVzaW9uTWF4VHVybm92ZXJTZXQoZmFsc2UpO1xcbiAgICAgICAgICB0aGlzLnNldElzQXNrQXV0aGVudGljYXRpb24oZmFsc2UpO1xcbiAgICAgICAgICB0aGlzLnNldElzQXNrRmluYW5jaWFsUmlza0FwcHJvdmFsKGZhbHNlKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0TWVzc2FnZVxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNZXNzYWdlKHZhbHVlKSB7XFxuICAgICAgdGhpcy5tZXNzYWdlID0gdmFsdWU7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0SXNBc2tVa0Z1bmRzUHJvdGVjdGlvblxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc0Fza1VrRnVuZHNQcm90ZWN0aW9uKHZhbHVlKSB7XFxuICAgICAgdGhpcy5pc19hc2tfdWtfZnVuZHNfcHJvdGVjdGlvbiA9IHZhbHVlO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldElzU2VsZkV4Y2x1c2lvbk1heFR1cm5vdmVyU2V0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldElzU2VsZkV4Y2x1c2lvbk1heFR1cm5vdmVyU2V0KHZhbHVlKSB7XFxuICAgICAgdGhpcy5pc19zZWxmX2V4Y2x1c2lvbl9tYXhfdHVybm92ZXJfc2V0ID0gdmFsdWU7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0SXNBc2tBdXRoZW50aWNhdGlvblxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc0Fza0F1dGhlbnRpY2F0aW9uKHZhbHVlKSB7XFxuICAgICAgdGhpcy5pc19hc2tfYXV0aGVudGljYXRpb24gPSB2YWx1ZTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRJc0Fza0ZpbmFuY2lhbFJpc2tBcHByb3ZhbFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc0Fza0ZpbmFuY2lhbFJpc2tBcHByb3ZhbCh2YWx1ZSkge1xcbiAgICAgIHRoaXMuaXNfYXNrX2ZpbmFuY2lhbF9yaXNrX2FwcHJvdmFsID0gdmFsdWU7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBFcnJvclN0b3JlO1xcbn0oKSwgKGVycm9yX3N0b3JlX2Rlc2NyaXB0b3IgPSBlcnJvcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZXJyb3Jfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwibWVzc2FnZVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gJyc7XFxuICB9XFxufSksIGVycm9yX3N0b3JlX2Rlc2NyaXB0b3IyID0gZXJyb3Jfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGVycm9yX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNvZGVcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuICcnO1xcbiAgfVxcbn0pLCBlcnJvcl9zdG9yZV9kZXNjcmlwdG9yMyA9IGVycm9yX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihlcnJvcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJmaWVsZHNcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuICcnO1xcbiAgfVxcbn0pLCBlcnJvcl9zdG9yZV9kZXNjcmlwdG9yNCA9IGVycm9yX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihlcnJvcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19zaG93X2Z1bGxfcGFnZVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIF9kZXNjcmlwdG9yNSA9IGVycm9yX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihlcnJvcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbkNsaWNrQnV0dG9uXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBudWxsO1xcbiAgfVxcbn0pLCBfZGVzY3JpcHRvcjYgPSBlcnJvcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZXJyb3Jfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfYXNrX3VrX2Z1bmRzX3Byb3RlY3Rpb25cXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbn0pLCBfZGVzY3JpcHRvcjcgPSBlcnJvcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZXJyb3Jfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfc2VsZl9leGNsdXNpb25fbWF4X3R1cm5vdmVyX3NldFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIF9kZXNjcmlwdG9yOCA9IGVycm9yX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihlcnJvcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19hc2tfYXV0aGVudGljYXRpb25cXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbn0pLCBfZGVzY3JpcHRvcjkgPSBlcnJvcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZXJyb3Jfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfYXNrX2ZpbmFuY2lhbF9yaXNrX2FwcHJvdmFsXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgZXJyb3Jfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGVycm9yX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEVycm9yTWVzc2FnZVxcXCIsIFtlcnJvcl9zdG9yZV9kZWNdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVycm9yX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEVycm9yTWVzc2FnZVxcXCIpLCBlcnJvcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBlcnJvcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZXJyb3Jfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaGFuZGxlQ2FzaGllckVycm9yXFxcIiwgW2Vycm9yX3N0b3JlX2RlYzJdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVycm9yX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImhhbmRsZUNhc2hpZXJFcnJvclxcXCIpLCBlcnJvcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBlcnJvcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZXJyb3Jfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0TWVzc2FnZVxcXCIsIFtlcnJvcl9zdG9yZV9kZWMzXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlcnJvcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRNZXNzYWdlXFxcIiksIGVycm9yX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGVycm9yX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihlcnJvcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc0Fza1VrRnVuZHNQcm90ZWN0aW9uXFxcIiwgW2Vycm9yX3N0b3JlX2RlYzRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVycm9yX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzQXNrVWtGdW5kc1Byb3RlY3Rpb25cXFwiKSwgZXJyb3Jfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZXJyb3Jfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGVycm9yX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzU2VsZkV4Y2x1c2lvbk1heFR1cm5vdmVyU2V0XFxcIiwgW2Vycm9yX3N0b3JlX2RlYzVdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVycm9yX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzU2VsZkV4Y2x1c2lvbk1heFR1cm5vdmVyU2V0XFxcIiksIGVycm9yX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGVycm9yX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihlcnJvcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc0Fza0F1dGhlbnRpY2F0aW9uXFxcIiwgW2Vycm9yX3N0b3JlX2RlYzZdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVycm9yX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzQXNrQXV0aGVudGljYXRpb25cXFwiKSwgZXJyb3Jfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZXJyb3Jfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGVycm9yX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzQXNrRmluYW5jaWFsUmlza0FwcHJvdmFsXFxcIiwgW19kZWM3XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlcnJvcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc0Fza0ZpbmFuY2lhbFJpc2tBcHByb3ZhbFxcXCIpLCBlcnJvcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpKSwgZXJyb3Jfc3RvcmVfY2xhc3MpKTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9TdG9yZXMvYWNjb3VudC10cmFuc2Zlci1zdG9yZS5qc1xcbnZhciBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2RlYywgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZWMyLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2RlYzMsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVjNCwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZWM1LCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2RlYzYsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVjNywgX2RlYzgsIF9kZWM5LCBfZGVjMTAsIF9kZWMxMSwgX2RlYzEyLCBfZGVjMTMsIF9kZWMxNCwgX2RlYzE1LCBfZGVjMTYsIF9kZWMxNywgX2RlYzE4LCBfZGVjMTksIF9kZWMyMCwgX2RlYzIxLCBfZGVjMjIsIF9kZWMyMywgX2RlYzI0LCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3IsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjIsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjMsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjQsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjUsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjYsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjcsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjgsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjksIF9kZXNjcmlwdG9yMTAsIF9kZXNjcmlwdG9yMTEsIF9kZXNjcmlwdG9yMTIsIF9kZXNjcmlwdG9yMTMsIF9kZXNjcmlwdG9yMTQsIF9kZXNjcmlwdG9yMTUsIF9kZXNjcmlwdG9yMTY7XFxuXFxuZnVuY3Rpb24gYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9vd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSB7IHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgfSBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cXG5cXG5mdW5jdGlvbiBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX293bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IGFjY291bnRfdHJhbnNmZXJfc3RvcmVfb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cXG5cXG5mdW5jdGlvbiBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cXG5cXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxcblxcbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxcXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXFxcIik7IH1cXG5cXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFxcXCJzdHJpbmdcXFwiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXFxcIk9iamVjdFxcXCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFxcXCJNYXBcXFwiIHx8IG4gPT09IFxcXCJTZXRcXFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFxcXCJBcmd1bWVudHNcXFwiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxcblxcbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxcblxcbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXFxcInVuZGVmaW5lZFxcXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1xcXCJAQGl0ZXJhdG9yXFxcIl07IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcXFwicmV0dXJuXFxcIl0gIT0gbnVsbCkgX2lbXFxcInJldHVyblxcXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxcblxcbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxcblxcbmZ1bmN0aW9uIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxcblxcbmZ1bmN0aW9uIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJuZXh0XFxcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJ0aHJvd1xcXCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cXG5cXG5mdW5jdGlvbiBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkgeyBpZiAoIWRlc2NyaXB0b3IpIHJldHVybjsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHsgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLCBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLCB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSwgdmFsdWU6IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDAgfSk7IH1cXG5cXG5mdW5jdGlvbiBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFxcXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cXFwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFxcXCJ2YWx1ZVxcXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7IHZhciBkZXNjID0ge307IE9iamVjdC5rZXlzKGRlc2NyaXB0b3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBkZXNjW2tleV0gPSBkZXNjcmlwdG9yW2tleV07IH0pOyBkZXNjLmVudW1lcmFibGUgPSAhIWRlc2MuZW51bWVyYWJsZTsgZGVzYy5jb25maWd1cmFibGUgPSAhIWRlc2MuY29uZmlndXJhYmxlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjIHx8IGRlc2MuaW5pdGlhbGl6ZXIpIHsgZGVzYy53cml0YWJsZSA9IHRydWU7IH0gZGVzYyA9IGRlY29yYXRvcnMuc2xpY2UoKS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChkZXNjLCBkZWNvcmF0b3IpIHsgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5LCBkZXNjKSB8fCBkZXNjOyB9LCBkZXNjKTsgaWYgKGNvbnRleHQgJiYgZGVzYy5pbml0aWFsaXplciAhPT0gdm9pZCAwKSB7IGRlc2MudmFsdWUgPSBkZXNjLmluaXRpYWxpemVyID8gZGVzYy5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwOyBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkOyB9IGlmIChkZXNjLmluaXRpYWxpemVyID09PSB2b2lkIDApIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2MpOyBkZXNjID0gbnVsbDsgfSByZXR1cm4gZGVzYzsgfVxcblxcbmZ1bmN0aW9uIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyKGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgdGhyb3cgbmV3IEVycm9yKCdEZWNvcmF0aW5nIGNsYXNzIHByb3BlcnR5IGZhaWxlZC4gUGxlYXNlIGVuc3VyZSB0aGF0ICcgKyAncHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpcyBlbmFibGVkIGFuZCBydW5zIGFmdGVyIHRoZSBkZWNvcmF0b3JzIHRyYW5zZm9ybS4nKTsgfVxcblxcblxcblxcblxcblxcblxcblxcblxcbnZhciBoYXNUcmFuc2Zlck5vdEFsbG93ZWRMb2dpbmlkID0gZnVuY3Rpb24gaGFzVHJhbnNmZXJOb3RBbGxvd2VkTG9naW5pZChsb2dpbmlkKSB7XFxuICByZXR1cm4gbG9naW5pZC5zdGFydHNXaXRoKCdNWCcpO1xcbn07XFxuXFxudmFyIGdldFNlbGVjdGVkRXJyb3IgPSBmdW5jdGlvbiBnZXRTZWxlY3RlZEVycm9yKHNlbGVjdGVkX3ZhbHVlLCBpc19mcm9tX2FjY291bnQpIHtcXG4gIGlmIChpc19mcm9tX2FjY291bnQpIHtcXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudCh0cmFuc2xhdGlvbnNfLkxvY2FsaXplLCB7XFxuICAgICAgaTE4bl9kZWZhdWx0X3RleHQ6IFxcXCJUcmFuc2ZlciBmcm9tIHt7c2VsZWN0ZWRfdmFsdWV9fSBpcyBub3QgYWxsb3dlZCwgUGxlYXNlIGNob29zZSBhbm90aGVyIGFjY291bnQgZnJvbSBkcm9wZG93blxcXCIsXFxuICAgICAgdmFsdWVzOiB7XFxuICAgICAgICBzZWxlY3RlZF92YWx1ZTogc2VsZWN0ZWRfdmFsdWVcXG4gICAgICB9XFxuICAgIH0pO1xcbiAgfVxcblxcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudCh0cmFuc2xhdGlvbnNfLkxvY2FsaXplLCB7XFxuICAgIGkxOG5fZGVmYXVsdF90ZXh0OiBcXFwiVHJhbnNmZXIgdG8ge3tzZWxlY3RlZF92YWx1ZX19IGlzIG5vdCBhbGxvd2VkLCBQbGVhc2UgY2hvb3NlIGFub3RoZXIgYWNjb3VudCBmcm9tIGRyb3Bkb3duXFxcIixcXG4gICAgdmFsdWVzOiB7XFxuICAgICAgc2VsZWN0ZWRfdmFsdWU6IHNlbGVjdGVkX3ZhbHVlXFxuICAgIH1cXG4gIH0pO1xcbn07XFxuXFxudmFyIEFjY291bnRUcmFuc2ZlclN0b3JlID0gKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVjID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2RlYzIgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVjMyA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZWM0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2RlYzUgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVjNiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZWM3ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBfZGVjOCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgX2RlYzkgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIF9kZWMxMCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgX2RlYzExID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBfZGVjMTIgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIF9kZWMxMyA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgX2RlYzE0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBfZGVjMTUgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIF9kZWMxNiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgX2RlYzE3ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBfZGVjMTggPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIF9kZWMxOSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgX2RlYzIwID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBfZGVjMjEgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIF9kZWMyMiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgX2RlYzIzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBfZGVjMjQgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIChhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIEFjY291bnRUcmFuc2ZlclN0b3JlKF9yZWYpIHtcXG4gICAgdmFyIF90aGlzID0gdGhpcztcXG5cXG4gICAgdmFyIFdTID0gX3JlZi5XUyxcXG4gICAgICAgIHJvb3Rfc3RvcmUgPSBfcmVmLnJvb3Rfc3RvcmU7XFxuXFxuICAgIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjb3VudFRyYW5zZmVyU3RvcmUpO1xcblxcbiAgICBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImFjY291bnRzX2xpc3RcXFwiLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3IsIHRoaXMpO1xcblxcbiAgICBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImNvbnRhaW5lclxcXCIsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjIsIHRoaXMpO1xcblxcbiAgICBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImVycm9yXFxcIiwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yMywgdGhpcyk7XFxuXFxuICAgIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiaGFzX25vX2FjY291bnRcXFwiLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I0LCB0aGlzKTtcXG5cXG4gICAgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJoYXNfbm9fYWNjb3VudHNfYmFsYW5jZVxcXCIsIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjUsIHRoaXMpO1xcblxcbiAgICBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImlzX3RyYW5zZmVyX2NvbmZpcm1cXFwiLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I2LCB0aGlzKTtcXG5cXG4gICAgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJpc190cmFuc2Zlcl9zdWNjZXNzZnVsXFxcIiwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yNywgdGhpcyk7XFxuXFxuICAgIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiaXNfbXQ1X3RyYW5zZmVyX2luX3Byb2dyZXNzXFxcIiwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yOCwgdGhpcyk7XFxuXFxuICAgIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwibWluaW11bV9mZWVcXFwiLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I5LCB0aGlzKTtcXG5cXG4gICAgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJyZWNlaXB0XFxcIiwgX2Rlc2NyaXB0b3IxMCwgdGhpcyk7XFxuXFxuICAgIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwic2VsZWN0ZWRfZnJvbVxcXCIsIF9kZXNjcmlwdG9yMTEsIHRoaXMpO1xcblxcbiAgICBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcInNlbGVjdGVkX3RvXFxcIiwgX2Rlc2NyaXB0b3IxMiwgdGhpcyk7XFxuXFxuICAgIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiYWNjb3VudF90cmFuc2Zlcl9hbW91bnRcXFwiLCBfZGVzY3JpcHRvcjEzLCB0aGlzKTtcXG5cXG4gICAgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJ0cmFuc2Zlcl9mZWVcXFwiLCBfZGVzY3JpcHRvcjE0LCB0aGlzKTtcXG5cXG4gICAgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJ0cmFuc2Zlcl9saW1pdFxcXCIsIF9kZXNjcmlwdG9yMTUsIHRoaXMpO1xcblxcbiAgICB0aGlzLnJlcXVlc3RUcmFuc2ZlckJldHdlZW5BY2NvdW50cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIF9yZWYzID0gYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShfcmVmMikge1xcbiAgICAgICAgdmFyIGFtb3VudCwgX3RoaXMkcm9vdF9zdG9yZSwgY2xpZW50LCBtb2R1bGVzLCBzZXRMb2FkaW5nLCBpc19sb2dnZWRfaW4sIHJlc3BvbnNlTXQ1TG9naW5MaXN0LCByZXNwb25zZVRyYWRpbmdQbGF0Zm9ybUFjY291bnRzTGlzdCwgc2V0QWNjb3VudFN0YXR1cywgc2V0QmFsYW5jZU90aGVyQWNjb3VudHMsIGlzX210X3RyYW5zZmVyLCBjdXJyZW5jeSwgdHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cywgYWNjb3VudF9zdGF0dXNfcmVzcG9uc2U7XFxuXFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIGFtb3VudCA9IF9yZWYyLmFtb3VudDtcXG4gICAgICAgICAgICAgICAgX3RoaXMkcm9vdF9zdG9yZSA9IF90aGlzLnJvb3Rfc3RvcmUsIGNsaWVudCA9IF90aGlzJHJvb3Rfc3RvcmUuY2xpZW50LCBtb2R1bGVzID0gX3RoaXMkcm9vdF9zdG9yZS5tb2R1bGVzO1xcbiAgICAgICAgICAgICAgICBzZXRMb2FkaW5nID0gbW9kdWxlcy5jYXNoaWVyLmdlbmVyYWxfc3RvcmUuc2V0TG9hZGluZztcXG4gICAgICAgICAgICAgICAgaXNfbG9nZ2VkX2luID0gY2xpZW50LmlzX2xvZ2dlZF9pbiwgcmVzcG9uc2VNdDVMb2dpbkxpc3QgPSBjbGllbnQucmVzcG9uc2VNdDVMb2dpbkxpc3QsIHJlc3BvbnNlVHJhZGluZ1BsYXRmb3JtQWNjb3VudHNMaXN0ID0gY2xpZW50LnJlc3BvbnNlVHJhZGluZ1BsYXRmb3JtQWNjb3VudHNMaXN0LCBzZXRBY2NvdW50U3RhdHVzID0gY2xpZW50LnNldEFjY291bnRTdGF0dXMsIHNldEJhbGFuY2VPdGhlckFjY291bnRzID0gY2xpZW50LnNldEJhbGFuY2VPdGhlckFjY291bnRzO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoaXNfbG9nZ2VkX2luKSB7XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcXFwicmV0dXJuXFxcIiwgbnVsbCk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDY6XFxuICAgICAgICAgICAgICAgIHNldExvYWRpbmcodHJ1ZSk7XFxuXFxuICAgICAgICAgICAgICAgIF90aGlzLmVycm9yLnNldEVycm9yTWVzc2FnZSgnJyk7XFxuXFxuICAgICAgICAgICAgICAgIGlzX210X3RyYW5zZmVyID0gX3RoaXMuc2VsZWN0ZWRfZnJvbS5pc19tdCB8fCBfdGhpcy5zZWxlY3RlZF90by5pc19tdDtcXG4gICAgICAgICAgICAgICAgaWYgKGlzX210X3RyYW5zZmVyKSBfdGhpcy5zZXRJc01UNVRyYW5zZmVySW5Qcm9ncmVzcyh0cnVlKTtcXG4gICAgICAgICAgICAgICAgY3VycmVuY3kgPSBfdGhpcy5zZWxlY3RlZF9mcm9tLmN1cnJlbmN5O1xcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7XFxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5XUy5hdXRob3JpemVkLnRyYW5zZmVyQmV0d2VlbkFjY291bnRzKF90aGlzLnNlbGVjdGVkX2Zyb20udmFsdWUsIF90aGlzLnNlbGVjdGVkX3RvLnZhbHVlLCBjdXJyZW5jeSwgYW1vdW50KTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTM6XFxuICAgICAgICAgICAgICAgIHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMgPSBfY29udGV4dC5zZW50O1xcbiAgICAgICAgICAgICAgICBpZiAoaXNfbXRfdHJhbnNmZXIpIF90aGlzLnNldElzTVQ1VHJhbnNmZXJJblByb2dyZXNzKGZhbHNlKTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCF0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmVycm9yKSB7XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI0O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGlmICghKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMuZXJyb3IuY29kZSA9PT0gJ0ZpYXQyQ3J5cHRvVHJhbnNmZXJPdmVyTGltaXQnKSkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMTtcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5XUy5hdXRob3JpemVkLmdldEFjY291bnRTdGF0dXMoKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTk6XFxuICAgICAgICAgICAgICAgIGFjY291bnRfc3RhdHVzX3Jlc3BvbnNlID0gX2NvbnRleHQuc2VudDtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCFhY2NvdW50X3N0YXR1c19yZXNwb25zZS5lcnJvcikge1xcbiAgICAgICAgICAgICAgICAgIHNldEFjY291bnRTdGF0dXMoYWNjb3VudF9zdGF0dXNfcmVzcG9uc2UuZ2V0X2FjY291bnRfc3RhdHVzKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgY2FzZSAyMTpcXG4gICAgICAgICAgICAgICAgX3RoaXMuZXJyb3Iuc2V0RXJyb3JNZXNzYWdlKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMuZXJyb3IpO1xcblxcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjg7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAyNDpcXG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0UmVjZWlwdFRyYW5zZmVyKHtcXG4gICAgICAgICAgICAgICAgICBhbW91bnQ6ICgwLHNoYXJlZF8uZm9ybWF0TW9uZXkpKGN1cnJlbmN5LCBhbW91bnQsIHRydWUpXFxuICAgICAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgICAgICB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmFjY291bnRzLmZvckVhY2goZnVuY3Rpb24gKGFjY291bnQpIHtcXG4gICAgICAgICAgICAgICAgICBfdGhpcy5zZXRCYWxhbmNlQnlMb2dpbklkKGFjY291bnQubG9naW5pZCwgYWNjb3VudC5iYWxhbmNlKTtcXG5cXG4gICAgICAgICAgICAgICAgICBpZiAoYWNjb3VudC5sb2dpbmlkID09PSBfdGhpcy5zZWxlY3RlZF9mcm9tLnZhbHVlKSB7XFxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRCYWxhbmNlU2VsZWN0ZWRGcm9tKGFjY291bnQuYmFsYW5jZSk7XFxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY2NvdW50LmxvZ2luaWQgPT09IF90aGlzLnNlbGVjdGVkX3RvLnZhbHVlKSB7XFxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRCYWxhbmNlU2VsZWN0ZWRUbyhhY2NvdW50LmJhbGFuY2UpO1xcbiAgICAgICAgICAgICAgICAgIH0gLy8gaWYgb25lIG9mIHRoZSBhY2NvdW50cyB3YXMgbXQ1XFxuXFxuXFxuICAgICAgICAgICAgICAgICAgaWYgKGFjY291bnQuYWNjb3VudF90eXBlID09PSBzaGFyZWRfLkNGRF9QTEFURk9STVMuTVQ1KSB7XFxuICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChbX3RoaXMuV1MubXQ1TG9naW5MaXN0KCksIF90aGlzLldTLmJhbGFuY2VBbGwoKV0pLnRoZW4oZnVuY3Rpb24gKF9yZWY0KSB7XFxuICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmNSA9IF9zbGljZWRUb0FycmF5KF9yZWY0LCAyKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG10NV9sb2dpbl9saXN0X3Jlc3BvbnNlID0gX3JlZjVbMF0sXFxuICAgICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlX3Jlc3BvbnNlID0gX3JlZjVbMV07XFxuXFxuICAgICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgYmFsYW5jZSBmb3IgYWNjb3VudCBzd2l0Y2hlciBieSByZW5ld2luZyB0aGUgbXQ1X2xvZ2luX2xpc3QgcmVzcG9uc2VcXG4gICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VNdDVMb2dpbkxpc3QobXQ1X2xvZ2luX2xpc3RfcmVzcG9uc2UpOyAvLyB1cGRhdGUgdG90YWwgYmFsYW5jZSBzaW5jZSBNVDUgdG90YWwgb25seSBjb21lcyBpbiBub24tc3RyZWFtIGJhbGFuY2UgY2FsbFxcblxcbiAgICAgICAgICAgICAgICAgICAgICBzZXRCYWxhbmNlT3RoZXJBY2NvdW50cyhiYWxhbmNlX3Jlc3BvbnNlLmJhbGFuY2UpO1xcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgfSAvLyBpZiBvbmUgb2YgdGhlIGFjY291bnRzIHdhcyBkeHRyYWRlXFxuXFxuXFxuICAgICAgICAgICAgICAgICAgaWYgKGFjY291bnQuYWNjb3VudF90eXBlID09PSBzaGFyZWRfLkNGRF9QTEFURk9STVMuRFhUUkFERSkge1xcbiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwoW190aGlzLldTLnRyYWRpbmdQbGF0Zm9ybUFjY291bnRzTGlzdChzaGFyZWRfLkNGRF9QTEFURk9STVMuRFhUUkFERSksIF90aGlzLldTLmJhbGFuY2VBbGwoKV0pLnRoZW4oZnVuY3Rpb24gKF9yZWY2KSB7XFxuICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmNyA9IF9zbGljZWRUb0FycmF5KF9yZWY2LCAyKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGR4dHJhZGVfbG9naW5fbGlzdF9yZXNwb25zZSA9IF9yZWY3WzBdLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZV9yZXNwb25zZSA9IF9yZWY3WzFdO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGJhbGFuY2UgZm9yIGFjY291bnQgc3dpdGNoZXIgYnkgcmVuZXdpbmcgdGhlIGR4dHJhZGVfbG9naW5fbGlzdF9yZXNwb25zZVxcbiAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVRyYWRpbmdQbGF0Zm9ybUFjY291bnRzTGlzdChkeHRyYWRlX2xvZ2luX2xpc3RfcmVzcG9uc2UpOyAvLyB1cGRhdGUgdG90YWwgYmFsYW5jZSBzaW5jZSBEeHRyYWRlIHRvdGFsIG9ubHkgY29tZXMgaW4gbm9uLXN0cmVhbSBiYWxhbmNlIGNhbGxcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgc2V0QmFsYW5jZU90aGVyQWNjb3VudHMoYmFsYW5jZV9yZXNwb25zZS5iYWxhbmNlKTtcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICAgIF90aGlzLnNldEFjY291bnRUcmFuc2ZlckFtb3VudChudWxsKTtcXG5cXG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0SXNUcmFuc2ZlckNvbmZpcm0odHJ1ZSk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDI4OlxcbiAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcXFwicmV0dXJuXFxcIiwgdHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cyk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDMwOlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7XFxuICAgICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9O1xcbiAgICB9KCk7XFxuXFxuICAgIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwicmVzZXRBY2NvdW50VHJhbnNmZXJcXFwiLCBfZGVzY3JpcHRvcjE2LCB0aGlzKTtcXG5cXG4gICAgdGhpcy5yb290X3N0b3JlID0gcm9vdF9zdG9yZTtcXG4gICAgdGhpcy5XUyA9IFdTO1xcbiAgfVxcblxcbiAgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jcmVhdGVDbGFzcyhBY2NvdW50VHJhbnNmZXJTdG9yZSwgW3tcXG4gICAga2V5OiBcXFwiaXNfYWNjb3VudF90cmFuc2Zlcl92aXNpYmxlXFxcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgdmFyIF90aGlzJHJvb3Rfc3RvcmUkY2xpZSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQsXFxuICAgICAgICAgIGhhc19tYWx0YWludmVzdF9hY2NvdW50ID0gX3RoaXMkcm9vdF9zdG9yZSRjbGllLmhhc19tYWx0YWludmVzdF9hY2NvdW50LFxcbiAgICAgICAgICBsYW5kaW5nX2NvbXBhbnlfc2hvcnRjb2RlID0gX3RoaXMkcm9vdF9zdG9yZSRjbGllLmxhbmRpbmdfY29tcGFueV9zaG9ydGNvZGUsXFxuICAgICAgICAgIHJlc2lkZW5jZSA9IF90aGlzJHJvb3Rfc3RvcmUkY2xpZS5yZXNpZGVuY2U7IC8vIGNhc2hpZXIgVHJhbnNmZXIgYWNjb3VudCB0YWIgaXMgaGlkZGVuIGZvciBpb20gY2xpZW50c1xcbiAgICAgIC8vIGNoZWNrIGZvciByZXNpZGVuY2UgdG8gaGlkZSB0aGUgdGFiIGJlZm9yZSBjcmVhdGluZyBhIHJlYWwgbW9uZXkgYWNjb3VudFxcblxcbiAgICAgIHJldHVybiByZXNpZGVuY2UgIT09ICdpbScgJiYgKGxhbmRpbmdfY29tcGFueV9zaG9ydGNvZGUgIT09ICdtYWx0YScgfHwgaGFzX21hbHRhaW52ZXN0X2FjY291bnQpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldEJhbGFuY2VCeUxvZ2luSWRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QmFsYW5jZUJ5TG9naW5JZChsb2dpbmlkLCBiYWxhbmNlKSB7XFxuICAgICAgdGhpcy5hY2NvdW50c19saXN0LmZpbmQoZnVuY3Rpb24gKGFjYykge1xcbiAgICAgICAgcmV0dXJuIGxvZ2luaWQgPT09IGFjYy52YWx1ZTtcXG4gICAgICB9KS5iYWxhbmNlID0gYmFsYW5jZTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRCYWxhbmNlU2VsZWN0ZWRGcm9tXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEJhbGFuY2VTZWxlY3RlZEZyb20oYmFsYW5jZSkge1xcbiAgICAgIHRoaXMuc2VsZWN0ZWRfZnJvbS5iYWxhbmNlID0gYmFsYW5jZTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRCYWxhbmNlU2VsZWN0ZWRUb1xcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRCYWxhbmNlU2VsZWN0ZWRUbyhiYWxhbmNlKSB7XFxuICAgICAgdGhpcy5zZWxlY3RlZF90by5iYWxhbmNlID0gYmFsYW5jZTtcXG4gICAgfSAvLyBwb3NzaWJsZSB0cmFuc2ZlcnM6XFxuICAgIC8vIDEuIGZpYXQgdG8gY3J5cHRvICYgdmljZSB2ZXJzYVxcbiAgICAvLyAyLiBmaWF0IHRvIG10ICYgdmljZSB2ZXJzYVxcbiAgICAvLyAzLiBjcnlwdG8gdG8gbXQgJiB2aWNlIHZlcnNhXFxuXFxuICB9LCB7XFxuICAgIGtleTogXFxcIm9uTW91bnRBY2NvdW50VHJhbnNmZXJcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfb25Nb3VudEFjY291bnRUcmFuc2ZlciA9IGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkge1xcbiAgICAgICAgdmFyIF90aGlzJHJvb3Rfc3RvcmUyLCBjbGllbnQsIG1vZHVsZXMsIF9tb2R1bGVzJGNhc2hpZXIkZ2VuZSwgb25Nb3VudENvbW1vbiwgc2V0TG9hZGluZywgYWN0aXZlX2FjY291bnRzLCBpc19sb2dnZWRfaW4sIGhhc191cGRhdGVkX2FjY291bnRfYmFsYW5jZSwgX3RoaXMkYWNjb3VudHNfbGlzdCwgdHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cywgY2ZkX3RyYW5zZmVyX3RvX2xvZ2luX2lkLCBvYmpfdmFsdWVzO1xcblxcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgX3RoaXMkcm9vdF9zdG9yZTIgPSB0aGlzLnJvb3Rfc3RvcmUsIGNsaWVudCA9IF90aGlzJHJvb3Rfc3RvcmUyLmNsaWVudCwgbW9kdWxlcyA9IF90aGlzJHJvb3Rfc3RvcmUyLm1vZHVsZXM7XFxuICAgICAgICAgICAgICAgIF9tb2R1bGVzJGNhc2hpZXIkZ2VuZSA9IG1vZHVsZXMuY2FzaGllci5nZW5lcmFsX3N0b3JlLCBvbk1vdW50Q29tbW9uID0gX21vZHVsZXMkY2FzaGllciRnZW5lLm9uTW91bnRDb21tb24sIHNldExvYWRpbmcgPSBfbW9kdWxlcyRjYXNoaWVyJGdlbmUuc2V0TG9hZGluZztcXG4gICAgICAgICAgICAgICAgYWN0aXZlX2FjY291bnRzID0gY2xpZW50LmFjdGl2ZV9hY2NvdW50cywgaXNfbG9nZ2VkX2luID0gY2xpZW50LmlzX2xvZ2dlZF9pbjtcXG4gICAgICAgICAgICAgICAgc2V0TG9hZGluZyh0cnVlKTtcXG4gICAgICAgICAgICAgICAgdGhpcy5vblJlbW91bnQgPSB0aGlzLm9uTW91bnRBY2NvdW50VHJhbnNmZXI7XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNztcXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9uTW91bnRDb21tb24oKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNzpcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XUy53YWl0KCd3ZWJzaXRlX3N0YXR1cycpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA5OlxcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBzb21lIGJhbGFuY2UgdXBkYXRlIGhhcyBjb21lIGluIHNpbmNlIHRoZSBsYXN0IG1vdW50XFxuICAgICAgICAgICAgICAgIGhhc191cGRhdGVkX2FjY291bnRfYmFsYW5jZSA9IHRoaXMuaGFzX25vX2FjY291bnRzX2JhbGFuY2UgJiYgT2JqZWN0LmtleXMoYWN0aXZlX2FjY291bnRzKS5maW5kKGZ1bmN0aW9uIChhY2NvdW50KSB7XFxuICAgICAgICAgICAgICAgICAgcmV0dXJuICFhY3RpdmVfYWNjb3VudHNbYWNjb3VudF0uaXNfdmlydHVhbCAmJiBhY3RpdmVfYWNjb3VudHNbYWNjb3VudF0uYmFsYW5jZTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICAgIGlmIChoYXNfdXBkYXRlZF9hY2NvdW50X2JhbGFuY2UpIHtcXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldEhhc05vQWNjb3VudHNCYWxhbmNlKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgfSAvLyB2YXJpb3VzIGlzc3VlcyBoYXBwZW4gd2hlbiBsb2FkaW5nIGZyb20gY2FjaGVcXG4gICAgICAgICAgICAgICAgLy8gZS5nLiBuZXcgYWNjb3VudCBtYXkgaGF2ZSBiZWVuIGNyZWF0ZWQsIHRyYW5zZmVyIG1heSBoYXZlIGJlZW4gZG9uZSBlbHNld2hlcmUsIGV0Y1xcbiAgICAgICAgICAgICAgICAvLyBzbyBvbiBsb2FkIG9mIHRoaXMgcGFnZSBqdXN0IGNhbGwgaXQgYWdhaW5cXG5cXG5cXG4gICAgICAgICAgICAgICAgaWYgKCFpc19sb2dnZWRfaW4pIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI3O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTQ7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLldTLmF1dGhvcml6ZWQudHJhbnNmZXJCZXR3ZWVuQWNjb3VudHMoKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTQ6XFxuICAgICAgICAgICAgICAgIHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMgPSBfY29udGV4dDIuc2VudDtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCF0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmVycm9yKSB7XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxOTtcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yLnNldEVycm9yTWVzc2FnZSh0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmVycm9yLCB0aGlzLm9uTW91bnRBY2NvdW50VHJhbnNmZXIpO1xcbiAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXFxcInJldHVyblxcXCIpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAxOTpcXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FuRG9BY2NvdW50VHJhbnNmZXIodHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cy5hY2NvdW50cykpIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIxO1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFxcXCJyZXR1cm5cXFwiKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjE6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjM7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNvcnRBY2NvdW50c1RyYW5zZmVyKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAyMzpcXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2ZlckZlZSgpO1xcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1pbmltdW1GZWUoKTtcXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2ZlckxpbWl0KCk7XFxuXFxuICAgICAgICAgICAgICAgIGlmICgoKF90aGlzJGFjY291bnRzX2xpc3QgPSB0aGlzLmFjY291bnRzX2xpc3QpID09PSBudWxsIHx8IF90aGlzJGFjY291bnRzX2xpc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJGFjY291bnRzX2xpc3QubGVuZ3RoKSA+IDApIHtcXG4gICAgICAgICAgICAgICAgICBjZmRfdHJhbnNmZXJfdG9fbG9naW5faWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdjZmRfdHJhbnNmZXJfdG9fbG9naW5faWQnKTtcXG4gICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKCdjZmRfdHJhbnNmZXJfdG9fbG9naW5faWQnKTtcXG4gICAgICAgICAgICAgICAgICBvYmpfdmFsdWVzID0gdGhpcy5hY2NvdW50c19saXN0LmZpbmQoZnVuY3Rpb24gKGFjY291bnQpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2NvdW50LnZhbHVlID09PSBjZmRfdHJhbnNmZXJfdG9fbG9naW5faWQ7XFxuICAgICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICAgICAgaWYgKG9ial92YWx1ZXMpIHtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNUcmFuc2Zlck5vdEFsbG93ZWRMb2dpbmlkKG9ial92YWx1ZXMudmFsdWUpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHNlbGVjdGVkIHRvIGlzIG5vdCBhbGxvd2VkIGFjY291bnRcXG4gICAgICAgICAgICAgICAgICAgICAgb2JqX3ZhbHVlcy5lcnJvciA9IGdldFNlbGVjdGVkRXJyb3Iob2JqX3ZhbHVlcy52YWx1ZSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkVG8ob2JqX3ZhbHVlcyk7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBjYXNlIDI3OlxcbiAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjg6XFxuICAgICAgICAgICAgICBjYXNlIFxcXCJlbmRcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTtcXG4gICAgICB9KSk7XFxuXFxuICAgICAgZnVuY3Rpb24gb25Nb3VudEFjY291bnRUcmFuc2ZlcigpIHtcXG4gICAgICAgIHJldHVybiBfb25Nb3VudEFjY291bnRUcmFuc2Zlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gb25Nb3VudEFjY291bnRUcmFuc2ZlcjtcXG4gICAgfSgpXFxuICB9LCB7XFxuICAgIGtleTogXFxcImNhbkRvQWNjb3VudFRyYW5zZmVyXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbkRvQWNjb3VudFRyYW5zZmVyKGFjY291bnRzKSB7XFxuICAgICAgdmFyIGNhbl90cmFuc2ZlciA9IHRydWU7IC8vIHNob3VsZCBoYXZlIGF0IGxlYXN0IG9uZSBhY2NvdW50IHdpdGggYmFsYW5jZVxcblxcbiAgICAgIGlmICghYWNjb3VudHMuZmluZChmdW5jdGlvbiAoYWNjb3VudCkge1xcbiAgICAgICAgcmV0dXJuICthY2NvdW50LmJhbGFuY2UgPiAwO1xcbiAgICAgIH0pKSB7XFxuICAgICAgICBjYW5fdHJhbnNmZXIgPSBmYWxzZTtcXG4gICAgICAgIHRoaXMuc2V0SGFzTm9BY2NvdW50c0JhbGFuY2UodHJ1ZSk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHRoaXMuc2V0SGFzTm9BY2NvdW50c0JhbGFuY2UoZmFsc2UpO1xcbiAgICAgIH0gLy8gc2hvdWxkIGhhdmUgYXQgbGVhc3QgdHdvIHJlYWwtbW9uZXkgYWNjb3VudHNcXG5cXG5cXG4gICAgICBpZiAoYWNjb3VudHMubGVuZ3RoIDw9IDEpIHtcXG4gICAgICAgIGNhbl90cmFuc2ZlciA9IGZhbHNlO1xcbiAgICAgICAgdGhpcy5zZXRIYXNOb0FjY291bnQodHJ1ZSk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHRoaXMuc2V0SGFzTm9BY2NvdW50KGZhbHNlKTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKCFjYW5fdHJhbnNmZXIpIHtcXG4gICAgICAgIHRoaXMucm9vdF9zdG9yZS5tb2R1bGVzLmNhc2hpZXIuZ2VuZXJhbF9zdG9yZS5zZXRMb2FkaW5nKGZhbHNlKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGNhbl90cmFuc2ZlcjtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRIYXNOb0FjY291bnRzQmFsYW5jZVxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRIYXNOb0FjY291bnRzQmFsYW5jZShoYXNfbm9fYWNjb3VudHNfYmFsYW5jZSkge1xcbiAgICAgIHRoaXMuaGFzX25vX2FjY291bnRzX2JhbGFuY2UgPSBoYXNfbm9fYWNjb3VudHNfYmFsYW5jZTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRIYXNOb0FjY291bnRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SGFzTm9BY2NvdW50KGhhc19ub19hY2NvdW50KSB7XFxuICAgICAgdGhpcy5oYXNfbm9fYWNjb3VudCA9IGhhc19ub19hY2NvdW50O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldFRyYW5zZmVyRmVlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRyYW5zZmVyRmVlKCkge1xcbiAgICAgIHZhciB0cmFuc2Zlcl9mZWUgPSAoMCxzaGFyZWRfLmdldFByb3BlcnR5VmFsdWUpKCgwLHNoYXJlZF8uZ2V0Q3VycmVuY2llcykoKSwgW3RoaXMuc2VsZWN0ZWRfZnJvbS5jdXJyZW5jeSwgJ3RyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMnLCAnZmVlcycsIHRoaXMuc2VsZWN0ZWRfdG8uY3VycmVuY3ldKTtcXG4gICAgICB0aGlzLnRyYW5zZmVyX2ZlZSA9IE51bWJlcih0cmFuc2Zlcl9mZWUgfHwgMCk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0TWluaW11bUZlZVxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNaW5pbXVtRmVlKCkge1xcbiAgICAgIHZhciBkZWNpbWFscyA9ICgwLHNoYXJlZF8uZ2V0RGVjaW1hbFBsYWNlcykodGhpcy5zZWxlY3RlZF9mcm9tLmN1cnJlbmN5KTsgLy8gd2UgbmVlZCAudG9GaXhlZCgpIHNvIHRoYXQgaXQgZG9lc24ndCBkaXNwbGF5IGluIHNjaWVudGlmaWMgbm90YXRpb24sIGUuZy4gMWUtOCBmb3IgY3VycmVuY2llcyB3aXRoIDggZGVjaW1hbCBwbGFjZXNcXG5cXG4gICAgICB0aGlzLm1pbmltdW1fZmVlID0gKDEgLyBNYXRoLnBvdygxMCwgZGVjaW1hbHMpKS50b0ZpeGVkKGRlY2ltYWxzKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRUcmFuc2ZlckxpbWl0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRyYW5zZmVyTGltaXQoKSB7XFxuICAgICAgdmFyIGlzX210X3RyYW5zZmVyID0gdGhpcy5zZWxlY3RlZF9mcm9tLmlzX210IHx8IHRoaXMuc2VsZWN0ZWRfdG8uaXNfbXQ7XFxuICAgICAgdmFyIGlzX2R4dHJhZGVfdHJhbnNmZXIgPSB0aGlzLnNlbGVjdGVkX2Zyb20uaXNfZHh0cmFkZSB8fCB0aGlzLnNlbGVjdGVkX3RvLmlzX2R4dHJhZGU7XFxuICAgICAgdmFyIGxpbWl0c19rZXk7XFxuXFxuICAgICAgaWYgKGlzX210X3RyYW5zZmVyKSB7XFxuICAgICAgICBsaW1pdHNfa2V5ID0gJ2xpbWl0c19tdDUnO1xcbiAgICAgIH0gZWxzZSBpZiAoaXNfZHh0cmFkZV90cmFuc2Zlcikge1xcbiAgICAgICAgbGltaXRzX2tleSA9ICdsaW1pdHNfZHh0cmFkZSc7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIGxpbWl0c19rZXkgPSAnbGltaXRzJztcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIHRyYW5zZmVyX2xpbWl0ID0gKDAsc2hhcmVkXy5nZXRQcm9wZXJ0eVZhbHVlKSgoMCxzaGFyZWRfLmdldEN1cnJlbmNpZXMpKCksIFt0aGlzLnNlbGVjdGVkX2Zyb20uY3VycmVuY3ksICd0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzJywgbGltaXRzX2tleV0pO1xcbiAgICAgIHZhciBiYWxhbmNlID0gdGhpcy5zZWxlY3RlZF9mcm9tLmJhbGFuY2U7XFxuICAgICAgdmFyIGRlY2ltYWxfcGxhY2VzID0gKDAsc2hhcmVkXy5nZXREZWNpbWFsUGxhY2VzKSh0aGlzLnNlbGVjdGVkX2Zyb20uY3VycmVuY3kpOyAvLyB3ZSBuZWVkIC50b0ZpeGVkKCkgc28gdGhhdCBpdCBkb2Vzbid0IGRpc3BsYXkgaW4gc2NpZW50aWZpYyBub3RhdGlvbiwgZS5nLiAxZS04IGZvciBjdXJyZW5jaWVzIHdpdGggOCBkZWNpbWFsIHBsYWNlc1xcblxcbiAgICAgIHRoaXMudHJhbnNmZXJfbGltaXQgPSB7XFxuICAgICAgICBtYXg6ICEodHJhbnNmZXJfbGltaXQgIT09IG51bGwgJiYgdHJhbnNmZXJfbGltaXQgIT09IHZvaWQgMCAmJiB0cmFuc2Zlcl9saW1pdC5tYXgpIHx8ICtiYWxhbmNlID49ICgodHJhbnNmZXJfbGltaXQgPT09IG51bGwgfHwgdHJhbnNmZXJfbGltaXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRyYW5zZmVyX2xpbWl0Lm1pbikgfHwgMCkgJiYgK2JhbGFuY2UgPD0gKHRyYW5zZmVyX2xpbWl0ID09PSBudWxsIHx8IHRyYW5zZmVyX2xpbWl0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0cmFuc2Zlcl9saW1pdC5tYXgpID8gYmFsYW5jZSA6IHRyYW5zZmVyX2xpbWl0ID09PSBudWxsIHx8IHRyYW5zZmVyX2xpbWl0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0cmFuc2Zlcl9saW1pdC5tYXgudG9GaXhlZChkZWNpbWFsX3BsYWNlcyksXFxuICAgICAgICBtaW46IHRyYW5zZmVyX2xpbWl0ICE9PSBudWxsICYmIHRyYW5zZmVyX2xpbWl0ICE9PSB2b2lkIDAgJiYgdHJhbnNmZXJfbGltaXQubWluID8gKCsodHJhbnNmZXJfbGltaXQgPT09IG51bGwgfHwgdHJhbnNmZXJfbGltaXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRyYW5zZmVyX2xpbWl0Lm1pbikpLnRvRml4ZWQoZGVjaW1hbF9wbGFjZXMpIDogbnVsbFxcbiAgICAgIH07XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic29ydEFjY291bnRzVHJhbnNmZXJcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfc29ydEFjY291bnRzVHJhbnNmZXIgPSBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhyZXNwb25zZV9hY2NvdW50cykge1xcbiAgICAgICAgdmFyIF95aWVsZCR0aGlzJFdTJHN0b3JhZyxcXG4gICAgICAgICAgICBfeWllbGQkdGhpcyRXUyR0cmFkaW4sXFxuICAgICAgICAgICAgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgICAgIHZhciB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLCBtdDVfbG9naW5fbGlzdCwgZHh0cmFkZV9hY2NvdW50c19saXN0LCBhY2NvdW50cywgYXJyX2FjY291bnRzO1xcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gcmVzcG9uc2VfYWNjb3VudHM7XFxuXFxuICAgICAgICAgICAgICAgIGlmIChfY29udGV4dDMudDApIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XUy5hdXRob3JpemVkLnRyYW5zZmVyQmV0d2VlbkFjY291bnRzKCk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDQ6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0My5zZW50O1xcblxcbiAgICAgICAgICAgICAgY2FzZSA1OlxcbiAgICAgICAgICAgICAgICB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzID0gX2NvbnRleHQzLnQwO1xcblxcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hY2NvdW50c19saXN0Lmxlbmd0aCkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gOTtcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMuZXJyb3IpIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDk7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoXFxcInJldHVyblxcXCIpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA5OlxcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDExO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XUy5zdG9yYWdlLm10NUxvZ2luTGlzdCgpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAxMTpcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLnQyID0gX3lpZWxkJHRoaXMkV1Mkc3RvcmFnID0gX2NvbnRleHQzLnNlbnQ7XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My50MSA9IF9jb250ZXh0My50MiA9PT0gbnVsbDtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKF9jb250ZXh0My50MSkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTU7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLnQxID0gX3lpZWxkJHRoaXMkV1Mkc3RvcmFnID09PSB2b2lkIDA7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDE1OlxcbiAgICAgICAgICAgICAgICBpZiAoIV9jb250ZXh0My50MSkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTk7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLnQzID0gdm9pZCAwO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDIwO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTk6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My50MyA9IF95aWVsZCR0aGlzJFdTJHN0b3JhZy5tdDVfbG9naW5fbGlzdDtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjA6XFxuICAgICAgICAgICAgICAgIG10NV9sb2dpbl9saXN0ID0gX2NvbnRleHQzLnQzO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDIzO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XUy50cmFkaW5nUGxhdGZvcm1BY2NvdW50c0xpc3Qoc2hhcmVkXy5DRkRfUExBVEZPUk1TLkRYVFJBREUpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAyMzpcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLnQ1ID0gX3lpZWxkJHRoaXMkV1MkdHJhZGluID0gX2NvbnRleHQzLnNlbnQ7XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My50NCA9IF9jb250ZXh0My50NSA9PT0gbnVsbDtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKF9jb250ZXh0My50NCkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjc7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLnQ0ID0gX3lpZWxkJHRoaXMkV1MkdHJhZGluID09PSB2b2lkIDA7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDI3OlxcbiAgICAgICAgICAgICAgICBpZiAoIV9jb250ZXh0My50NCkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMzE7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLnQ2ID0gdm9pZCAwO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDMyO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMzE6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My50NiA9IF95aWVsZCR0aGlzJFdTJHRyYWRpbi50cmFkaW5nX3BsYXRmb3JtX2FjY291bnRzO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAzMjpcXG4gICAgICAgICAgICAgICAgZHh0cmFkZV9hY2NvdW50c19saXN0ID0gX2NvbnRleHQzLnQ2O1xcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyB0ZW1wb3JhcnkgbWFwcGluZyB3aGVuIEFQSSBhZGRzIG1hcmtldF90eXBlIGFuZCBzdWJfYWNjb3VudF90eXBlIHRvIHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHNcXG4gICAgICAgICAgICAgICAgYWNjb3VudHMgPSB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmFjY291bnRzLm1hcChmdW5jdGlvbiAoYWNjb3VudCkge1xcbiAgICAgICAgICAgICAgICAgIGlmIChhY2NvdW50LmFjY291bnRfdHlwZSA9PT0gc2hhcmVkXy5DRkRfUExBVEZPUk1TLk1UNSAmJiBBcnJheS5pc0FycmF5KG10NV9sb2dpbl9saXN0KSAmJiBtdDVfbG9naW5fbGlzdC5sZW5ndGgpIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vIGFjY291bnRfdHlwZSBpbiB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzIChtdDV8YmluYXJ5KVxcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0cyBvdmVycmlkZGVuIGJ5IGFjY291bnRfdHlwZSBpbiBtdDVfbG9naW5fbGlzdCAoZGVtb3xyZWFsKVxcbiAgICAgICAgICAgICAgICAgICAgLy8gc2luY2UgaW4gY2FzaGllciBhbGwgdGhlc2UgYXJlIHJlYWwgYWNjb3VudHMsIHRoZSBtdDUgYWNjb3VudCB0eXBlIGlzIHdoYXQgd2Ugd2FudCB0byBrZWVwXFxuICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmRfYWNjb3VudCA9IG10NV9sb2dpbl9saXN0LmZpbmQoZnVuY3Rpb24gKGFjYykge1xcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjLmxvZ2luID09PSBhY2NvdW50LmxvZ2luaWQ7XFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZF9hY2NvdW50ID09PSB1bmRlZmluZWQpIHJldHVybiBhY2NvdW50O1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfb2JqZWN0U3ByZWFkKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfb2JqZWN0U3ByZWFkKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfb2JqZWN0U3ByZWFkKHt9LCBhY2NvdW50KSwgZm91bmRfYWNjb3VudCksIHt9LCB7XFxuICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRfdHlwZTogc2hhcmVkXy5DRkRfUExBVEZPUk1TLk1UNVxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgIGlmIChhY2NvdW50LmFjY291bnRfdHlwZSA9PT0gc2hhcmVkXy5DRkRfUExBVEZPUk1TLkRYVFJBREUgJiYgQXJyYXkuaXNBcnJheShkeHRyYWRlX2FjY291bnRzX2xpc3QpICYmIGR4dHJhZGVfYWNjb3VudHNfbGlzdC5sZW5ndGgpIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vIGFjY291bnRfdHlwZSBpbiB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzIChtdDV8YmluYXJ5KVxcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0cyBvdmVycmlkZGVuIGJ5IGFjY291bnRfdHlwZSBpbiBkeHRyYWRlX2FjY291bnRzX2xpc3QgKGRlbW98cmVhbClcXG4gICAgICAgICAgICAgICAgICAgIC8vIHNpbmNlIGluIGNhc2hpZXIgYWxsIHRoZXNlIGFyZSByZWFsIGFjY291bnRzLCB0aGUgbXQ1IGFjY291bnQgdHlwZSBpcyB3aGF0IHdlIHdhbnQgdG8ga2VlcFxcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9mb3VuZF9hY2NvdW50ID0gZHh0cmFkZV9hY2NvdW50c19saXN0LmZpbmQoZnVuY3Rpb24gKGFjYykge1xcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjLmFjY291bnRfaWQgPT09IGFjY291bnQubG9naW5pZDtcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9mb3VuZF9hY2NvdW50ID09PSB1bmRlZmluZWQpIHJldHVybiBhY2NvdW50O1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfb2JqZWN0U3ByZWFkKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfb2JqZWN0U3ByZWFkKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfb2JqZWN0U3ByZWFkKHt9LCBhY2NvdW50KSwgX2ZvdW5kX2FjY291bnQpLCB7fSwge1xcbiAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50X3R5cGU6IHNoYXJlZF8uQ0ZEX1BMQVRGT1JNUy5EWFRSQURFXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjY291bnQ7XFxuICAgICAgICAgICAgICAgIH0pOyAvLyBzb3J0IGFjY291bnRzIGFzIGZvbGxvd3M6XFxuICAgICAgICAgICAgICAgIC8vIGZvciBNVDUsIHN5bnRoZXRpYywgZmluYW5jaWFsLCBmaW5hbmNpYWwgc3RwXFxuICAgICAgICAgICAgICAgIC8vIGZvciBub24tTVQ1LCBmaWF0LCBjcnlwdG8gKGFscGhhYmV0aWNhbGx5IGJ5IGN1cnJlbmN5KVxcbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgaGF2ZSBtb3JlIHRoYW4gb25lIGFjY291bnRcXG5cXG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMuYWNjb3VudHMubGVuZ3RoID4gMSkge1xcbiAgICAgICAgICAgICAgICAgIGFjY291bnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBhX2lzX210ID0gYS5hY2NvdW50X3R5cGUgPT09IHNoYXJlZF8uQ0ZEX1BMQVRGT1JNUy5NVDU7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgYl9pc19tdCA9IGIuYWNjb3VudF90eXBlID09PSBzaGFyZWRfLkNGRF9QTEFURk9STVMuTVQ1O1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFfaXNfY3J5cHRvID0gIWFfaXNfbXQgJiYgKDAsc2hhcmVkXy5pc0NyeXB0b2N1cnJlbmN5KShhLmN1cnJlbmN5KTtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBiX2lzX2NyeXB0byA9ICFiX2lzX210ICYmICgwLHNoYXJlZF8uaXNDcnlwdG9jdXJyZW5jeSkoYi5jdXJyZW5jeSk7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgYV9pc19maWF0ID0gIWFfaXNfbXQgJiYgIWFfaXNfY3J5cHRvO1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJfaXNfZmlhdCA9ICFiX2lzX210ICYmICFiX2lzX2NyeXB0bztcXG5cXG4gICAgICAgICAgICAgICAgICAgIGlmIChhX2lzX210ICYmIGJfaXNfbXQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGEubWFya2V0X3R5cGUgPT09ICdnYW1pbmcnIHx8IGEubWFya2V0X3R5cGUgPT09ICdzeW50aGV0aWMnKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xcbiAgICAgICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICAgICAgIGlmIChhLnN1Yl9hY2NvdW50X3R5cGUgPT09ICdmaW5hbmNpYWwnKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIubWFya2V0X3R5cGUgPT09ICdnYW1pbmcnIHx8IGIubWFya2V0X3R5cGUgPT09ICdzeW50aGV0aWMnID8gMSA6IC0xO1xcbiAgICAgICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhX2lzX2NyeXB0byAmJiBiX2lzX2NyeXB0byB8fCBhX2lzX2ZpYXQgJiYgYl9pc19maWF0KSB7XFxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmN1cnJlbmN5IDwgYi5jdXJyZW5jeSA/IC0xIDogMTtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYV9pc19jcnlwdG8gJiYgYl9pc19tdCB8fCBhX2lzX2ZpYXQgJiYgYl9pc19jcnlwdG8gfHwgYV9pc19maWF0ICYmIGJfaXNfbXQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFfaXNfbXQgPyAtMSA6IDE7XFxuICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgYXJyX2FjY291bnRzID0gW107XFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRUbyh7fSk7IC8vIHNldCBzZWxlY3RlZCB0byBlbXB0eSBlYWNoIHRpbWUgc28gd2UgY2FuIHJlZGV0ZXJtaW5lIGl0cyB2YWx1ZSBvbiByZWxvYWRcXG5cXG4gICAgICAgICAgICAgICAgYWNjb3VudHMuZm9yRWFjaChmdW5jdGlvbiAoYWNjb3VudCkge1xcbiAgICAgICAgICAgICAgICAgIHZhciBfY2ZkX3BsYXRmb3JtcyRhY2NvdW4sIF9jZmRfcGxhdGZvcm1zJGFjY291bjI7XFxuXFxuICAgICAgICAgICAgICAgICAgdmFyIGNmZF9wbGF0Zm9ybXMgPSB7XFxuICAgICAgICAgICAgICAgICAgICBtdDU6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0RNVDUnLFxcbiAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnSWNNdDUnXFxuICAgICAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICAgICAgZHh0cmFkZToge1xcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnRGVyaXYgWCcsXFxuICAgICAgICAgICAgICAgICAgICAgIGljb246ICdJY0R4dHJhZGUnXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICAgICAgICB2YXIgaXNfY2ZkID0gT2JqZWN0LmtleXMoY2ZkX3BsYXRmb3JtcykuaW5jbHVkZXMoYWNjb3VudC5hY2NvdW50X3R5cGUpO1xcbiAgICAgICAgICAgICAgICAgIHZhciBjZmRfdGV4dF9kaXNwbGF5ID0gKF9jZmRfcGxhdGZvcm1zJGFjY291biA9IGNmZF9wbGF0Zm9ybXNbYWNjb3VudC5hY2NvdW50X3R5cGVdKSA9PT0gbnVsbCB8fCBfY2ZkX3BsYXRmb3JtcyRhY2NvdW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jZmRfcGxhdGZvcm1zJGFjY291bi5uYW1lO1xcbiAgICAgICAgICAgICAgICAgIHZhciBjZmRfaWNvbl9kaXNwbGF5ID0gXFxcIlxcXCIuY29uY2F0KChfY2ZkX3BsYXRmb3JtcyRhY2NvdW4yID0gY2ZkX3BsYXRmb3Jtc1thY2NvdW50LmFjY291bnRfdHlwZV0pID09PSBudWxsIHx8IF9jZmRfcGxhdGZvcm1zJGFjY291bjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jZmRfcGxhdGZvcm1zJGFjY291bjIuaWNvbiwgXFxcIi1cXFwiKS5jb25jYXQoKDAsc2hhcmVkXy5nZXRDRkRBY2NvdW50KSh7XFxuICAgICAgICAgICAgICAgICAgICBtYXJrZXRfdHlwZTogYWNjb3VudC5tYXJrZXRfdHlwZSxcXG4gICAgICAgICAgICAgICAgICAgIHN1Yl9hY2NvdW50X3R5cGU6IGFjY291bnQuc3ViX2FjY291bnRfdHlwZSxcXG4gICAgICAgICAgICAgICAgICAgIHBsYXRmb3JtOiBhY2NvdW50LmFjY291bnRfdHlwZSxcXG4gICAgICAgICAgICAgICAgICAgIGlzX2V1OiBfdGhpczIucm9vdF9zdG9yZS5jbGllbnQuaXNfZXVcXG4gICAgICAgICAgICAgICAgICB9KSk7XFxuICAgICAgICAgICAgICAgICAgdmFyIGFjY291bnRfdGV4dF9kaXNwbGF5ID0gaXNfY2ZkID8gXFxcIlxcXCIuY29uY2F0KGNmZF90ZXh0X2Rpc3BsYXksIFxcXCIgXFxcIikuY29uY2F0KCgwLHNoYXJlZF8uZ2V0Q0ZEQWNjb3VudERpc3BsYXkpKHtcXG4gICAgICAgICAgICAgICAgICAgIG1hcmtldF90eXBlOiBhY2NvdW50Lm1hcmtldF90eXBlLFxcbiAgICAgICAgICAgICAgICAgICAgc3ViX2FjY291bnRfdHlwZTogYWNjb3VudC5zdWJfYWNjb3VudF90eXBlLFxcbiAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm06IGFjY291bnQuYWNjb3VudF90eXBlLFxcbiAgICAgICAgICAgICAgICAgICAgaXNfZXU6IF90aGlzMi5yb290X3N0b3JlLmNsaWVudC5pc19ldVxcbiAgICAgICAgICAgICAgICAgIH0pKSA6ICgwLHNoYXJlZF8uZ2V0Q3VycmVuY3lEaXNwbGF5Q29kZSkoYWNjb3VudC5jdXJyZW5jeSAhPT0gJ2VVU0RUJyA/IGFjY291bnQuY3VycmVuY3kudG9VcHBlckNhc2UoKSA6IGFjY291bnQuY3VycmVuY3kpO1xcblxcbiAgICAgICAgICAgICAgICAgIHZhciBvYmpfdmFsdWVzID0gYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9vYmplY3RTcHJlYWQoe1xcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogYWNjb3VudF90ZXh0X2Rpc3BsYXksXFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYWNjb3VudC5sb2dpbmlkLFxcbiAgICAgICAgICAgICAgICAgICAgYmFsYW5jZTogYWNjb3VudC5iYWxhbmNlLFxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVuY3k6IGFjY291bnQuY3VycmVuY3ksXFxuICAgICAgICAgICAgICAgICAgICBpc19jcnlwdG86ICgwLHNoYXJlZF8uaXNDcnlwdG9jdXJyZW5jeSkoYWNjb3VudC5jdXJyZW5jeSksXFxuICAgICAgICAgICAgICAgICAgICBpc19tdDogYWNjb3VudC5hY2NvdW50X3R5cGUgPT09IHNoYXJlZF8uQ0ZEX1BMQVRGT1JNUy5NVDUsXFxuICAgICAgICAgICAgICAgICAgICBpc19keHRyYWRlOiBhY2NvdW50LmFjY291bnRfdHlwZSA9PT0gc2hhcmVkXy5DRkRfUExBVEZPUk1TLkRYVFJBREVcXG4gICAgICAgICAgICAgICAgICB9LCBpc19jZmQgJiYge1xcbiAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm1faWNvbjogY2ZkX2ljb25fZGlzcGxheSxcXG4gICAgICAgICAgICAgICAgICAgIG1hcmtldF90eXBlOiAoMCxzaGFyZWRfLmdldENGREFjY291bnQpKHtcXG4gICAgICAgICAgICAgICAgICAgICAgbWFya2V0X3R5cGU6IGFjY291bnQubWFya2V0X3R5cGUsXFxuICAgICAgICAgICAgICAgICAgICAgIHN1Yl9hY2NvdW50X3R5cGU6IGFjY291bnQuc3ViX2FjY291bnRfdHlwZSxcXG4gICAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm06IGFjY291bnQuYWNjb3VudF90eXBlLFxcbiAgICAgICAgICAgICAgICAgICAgICBpc19ldTogX3RoaXMyLnJvb3Rfc3RvcmUuY2xpZW50LmlzX2V1XFxuICAgICAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgICAgICAgIH0pOyAvLyBzZXQgY3VycmVudCBsb2dnZWQgaW4gY2xpZW50IGFzIHRoZSBkZWZhdWx0IHRyYW5zZmVyIGZyb20gYWNjb3VudFxcblxcblxcbiAgICAgICAgICAgICAgICAgIGlmIChhY2NvdW50LmxvZ2luaWQgPT09IF90aGlzMi5yb290X3N0b3JlLmNsaWVudC5sb2dpbmlkKSB7XFxuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBzZWxlY3RlZCBmcm9tIGlzIG5vdCBhbGxvd2VkIGFjY291bnRcXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNUcmFuc2Zlck5vdEFsbG93ZWRMb2dpbmlkKG9ial92YWx1ZXMudmFsdWUpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgIG9ial92YWx1ZXMuZXJyb3IgPSBnZXRTZWxlY3RlZEVycm9yKG9ial92YWx1ZXMudmFsdWUsIHRydWUpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnNldFNlbGVjdGVkRnJvbShvYmpfdmFsdWVzKTtcXG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCgwLHNoYXJlZF8uaXNFbXB0eU9iamVjdCkoX3RoaXMyLnNlbGVjdGVkX3RvKSkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc1RyYW5zZmVyTm90QWxsb3dlZExvZ2luaWQob2JqX3ZhbHVlcy52YWx1ZSkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgc2VsZWN0ZWQgdG8gaXMgbm90IGFsbG93ZWQgYWNjb3VudFxcbiAgICAgICAgICAgICAgICAgICAgICBvYmpfdmFsdWVzLmVycm9yID0gZ2V0U2VsZWN0ZWRFcnJvcihvYmpfdmFsdWVzLnZhbHVlKTtcXG4gICAgICAgICAgICAgICAgICAgIH0gLy8gc2V0IHRoZSBmaXJzdCBhdmFpbGFibGUgYWNjb3VudCBhcyB0aGUgZGVmYXVsdCB0cmFuc2ZlciB0byBhY2NvdW50XFxuXFxuXFxuICAgICAgICAgICAgICAgICAgICBfdGhpczIuc2V0U2VsZWN0ZWRUbyhvYmpfdmFsdWVzKTtcXG4gICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICAgYXJyX2FjY291bnRzLnB1c2gob2JqX3ZhbHVlcyk7XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFjY291bnRzKGFycl9hY2NvdW50cyk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDM5OlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBfY2FsbGVlMywgdGhpcyk7XFxuICAgICAgfSkpO1xcblxcbiAgICAgIGZ1bmN0aW9uIHNvcnRBY2NvdW50c1RyYW5zZmVyKF94Mikge1xcbiAgICAgICAgcmV0dXJuIF9zb3J0QWNjb3VudHNUcmFuc2Zlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gc29ydEFjY291bnRzVHJhbnNmZXI7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRTZWxlY3RlZEZyb21cXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0ZWRGcm9tKG9ial92YWx1ZXMpIHtcXG4gICAgICB0aGlzLnNlbGVjdGVkX2Zyb20gPSBvYmpfdmFsdWVzO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldFNlbGVjdGVkVG9cXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0ZWRUbyhvYmpfdmFsdWVzKSB7XFxuICAgICAgdGhpcy5zZWxlY3RlZF90byA9IG9ial92YWx1ZXM7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0QWNjb3VudHNcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QWNjb3VudHMoYXJyX2FjY291bnRzKSB7XFxuICAgICAgdGhpcy5hY2NvdW50c19saXN0ID0gYXJyX2FjY291bnRzO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldElzVHJhbnNmZXJDb25maXJtXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldElzVHJhbnNmZXJDb25maXJtKGlzX3RyYW5zZmVyX2NvbmZpcm0pIHtcXG4gICAgICB0aGlzLmlzX3RyYW5zZmVyX2NvbmZpcm0gPSBpc190cmFuc2Zlcl9jb25maXJtO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldEFjY291bnRUcmFuc2ZlckFtb3VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRBY2NvdW50VHJhbnNmZXJBbW91bnQoYW1vdW50KSB7XFxuICAgICAgdGhpcy5hY2NvdW50X3RyYW5zZmVyX2Ftb3VudCA9IGFtb3VudDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRJc1RyYW5zZmVyU3VjY2Vzc2Z1bFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc1RyYW5zZmVyU3VjY2Vzc2Z1bChpc190cmFuc2Zlcl9zdWNjZXNzZnVsKSB7XFxuICAgICAgdGhpcy5pc190cmFuc2Zlcl9zdWNjZXNzZnVsID0gaXNfdHJhbnNmZXJfc3VjY2Vzc2Z1bDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRJc01UNVRyYW5zZmVySW5Qcm9ncmVzc1xcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc01UNVRyYW5zZmVySW5Qcm9ncmVzcyhpc19tdDVfdHJhbnNmZXJfaW5fcHJvZ3Jlc3MpIHtcXG4gICAgICB0aGlzLmlzX210NV90cmFuc2Zlcl9pbl9wcm9ncmVzcyA9IGlzX210NV90cmFuc2Zlcl9pbl9wcm9ncmVzcztcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRSZWNlaXB0VHJhbnNmZXJcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UmVjZWlwdFRyYW5zZmVyKF9yZWY4KSB7XFxuICAgICAgdmFyIGFtb3VudCA9IF9yZWY4LmFtb3VudDtcXG4gICAgICB0aGlzLnJlY2VpcHQgPSB7XFxuICAgICAgICBhbW91bnRfdHJhbnNmZXJyZWQ6IGFtb3VudFxcbiAgICAgIH07XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25DaGFuZ2VUcmFuc2ZlckZyb21cXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2VUcmFuc2ZlckZyb20oX3JlZjkpIHtcXG4gICAgICB2YXIgdGFyZ2V0ID0gX3JlZjkudGFyZ2V0O1xcbiAgICAgIHRoaXMuZXJyb3Iuc2V0RXJyb3JNZXNzYWdlKCcnKTtcXG4gICAgICB0aGlzLnNlbGVjdGVkX2Zyb20uZXJyb3IgPSAnJztcXG4gICAgICB2YXIgYWNjb3VudHMgPSB0aGlzLmFjY291bnRzX2xpc3Q7XFxuICAgICAgdmFyIHNlbGVjdGVkX2Zyb20gPSBhY2NvdW50cy5maW5kKGZ1bmN0aW9uIChhY2NvdW50KSB7XFxuICAgICAgICByZXR1cm4gYWNjb3VudC52YWx1ZSA9PT0gdGFyZ2V0LnZhbHVlO1xcbiAgICAgIH0pOyAvLyBpZiBuZXcgdmFsdWUgb2Ygc2VsZWN0ZWRfZnJvbSBpcyB0aGUgc2FtZSBhcyB0aGUgY3VycmVudCBzZWxlY3RlZF90b1xcbiAgICAgIC8vIHN3aXRjaCB0aGUgdmFsdWUgb2Ygc2VsZWN0ZWRfZnJvbSBhbmQgc2VsZWN0ZWRfdG9cXG5cXG4gICAgICBpZiAoc2VsZWN0ZWRfZnJvbS52YWx1ZSA9PT0gdGhpcy5zZWxlY3RlZF90by52YWx1ZSkge1xcbiAgICAgICAgdGhpcy5vbkNoYW5nZVRyYW5zZmVyVG8oe1xcbiAgICAgICAgICB0YXJnZXQ6IHtcXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5zZWxlY3RlZF9mcm9tLnZhbHVlXFxuICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRfZnJvbS5pc19tdCAmJiB0aGlzLnNlbGVjdGVkX3RvLmlzX210IHx8IHNlbGVjdGVkX2Zyb20uaXNfZHh0cmFkZSAmJiB0aGlzLnNlbGVjdGVkX3RvLmlzX2R4dHJhZGUgfHwgc2VsZWN0ZWRfZnJvbS5pc19keHRyYWRlICYmIHRoaXMuc2VsZWN0ZWRfdG8uaXNfbXQgfHwgc2VsZWN0ZWRfZnJvbS5pc19tdCAmJiB0aGlzLnNlbGVjdGVkX3RvLmlzX2R4dHJhZGUpIHtcXG4gICAgICAgIC8vIG5vdCBhbGxvd2VkIHRvIHRyYW5zZmVyIGZyb20gTVQgdG8gTVRcXG4gICAgICAgIC8vIG5vdCBhbGxvd2VkIHRvIHRyYW5zZmVyIGZyb20gRHh0cmFkZSB0byBEeHRyYWRlXFxuICAgICAgICAvLyBub3QgYWxsb3dlZCB0byB0cmFuc2ZlciBiZXR3ZWVuIE1UIGFuZCBEeHRyYWRlXFxuICAgICAgICB2YXIgZmlyc3Rfbm9uX2NmZCA9IHRoaXMuYWNjb3VudHNfbGlzdC5maW5kKGZ1bmN0aW9uIChhY2NvdW50KSB7XFxuICAgICAgICAgIHJldHVybiAhYWNjb3VudC5pc19tdCAmJiAhYWNjb3VudC5pc19keHRyYWRlO1xcbiAgICAgICAgfSk7XFxuICAgICAgICB0aGlzLm9uQ2hhbmdlVHJhbnNmZXJUbyh7XFxuICAgICAgICAgIHRhcmdldDoge1xcbiAgICAgICAgICAgIHZhbHVlOiBmaXJzdF9ub25fY2ZkLnZhbHVlXFxuICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRfZnJvbS5pc19jcnlwdG8gJiYgdGhpcy5zZWxlY3RlZF90by5pc19jcnlwdG8pIHtcXG4gICAgICAgIC8vIG5vdCBhbGxvd2VkIHRvIHRyYW5zZmVyIGNyeXB0byB0byBjcnlwdG9cXG4gICAgICAgIHZhciBmaXJzdF9maWF0ID0gdGhpcy5hY2NvdW50c19saXN0LmZpbmQoZnVuY3Rpb24gKGFjY291bnQpIHtcXG4gICAgICAgICAgcmV0dXJuICFhY2NvdW50LmlzX2NyeXB0bztcXG4gICAgICAgIH0pO1xcbiAgICAgICAgdGhpcy5vbkNoYW5nZVRyYW5zZmVyVG8oe1xcbiAgICAgICAgICB0YXJnZXQ6IHtcXG4gICAgICAgICAgICB2YWx1ZTogZmlyc3RfZmlhdC52YWx1ZVxcbiAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKGhhc1RyYW5zZmVyTm90QWxsb3dlZExvZ2luaWQoc2VsZWN0ZWRfZnJvbS52YWx1ZSkpIHtcXG4gICAgICAgIHNlbGVjdGVkX2Zyb20uZXJyb3IgPSBnZXRTZWxlY3RlZEVycm9yKHNlbGVjdGVkX2Zyb20udmFsdWUsIHRydWUpO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLnNlbGVjdGVkX2Zyb20gPSBzZWxlY3RlZF9mcm9tO1xcbiAgICAgIHRoaXMuc2V0VHJhbnNmZXJGZWUoKTtcXG4gICAgICB0aGlzLnNldE1pbmltdW1GZWUoKTtcXG4gICAgICB0aGlzLnNldFRyYW5zZmVyTGltaXQoKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJvbkNoYW5nZVRyYW5zZmVyVG9cXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2VUcmFuc2ZlclRvKF9yZWYxMCkge1xcbiAgICAgIHZhciB0YXJnZXQgPSBfcmVmMTAudGFyZ2V0O1xcbiAgICAgIHRoaXMuZXJyb3Iuc2V0RXJyb3JNZXNzYWdlKCcnKTtcXG4gICAgICB0aGlzLnNlbGVjdGVkX3RvLmVycm9yID0gJyc7XFxuICAgICAgdmFyIGFjY291bnRzID0gdGhpcy5hY2NvdW50c19saXN0O1xcbiAgICAgIHRoaXMuc2VsZWN0ZWRfdG8gPSBhY2NvdW50cy5maW5kKGZ1bmN0aW9uIChhY2NvdW50KSB7XFxuICAgICAgICByZXR1cm4gYWNjb3VudC52YWx1ZSA9PT0gdGFyZ2V0LnZhbHVlO1xcbiAgICAgIH0pIHx8IHt9O1xcblxcbiAgICAgIGlmIChoYXNUcmFuc2Zlck5vdEFsbG93ZWRMb2dpbmlkKHRoaXMuc2VsZWN0ZWRfdG8udmFsdWUpKSB7XFxuICAgICAgICB0aGlzLnNlbGVjdGVkX3RvLmVycm9yID0gZ2V0U2VsZWN0ZWRFcnJvcih0aGlzLnNlbGVjdGVkX3RvLnZhbHVlKTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhpcy5zZXRUcmFuc2ZlckZlZSgpO1xcbiAgICAgIHRoaXMuc2V0TWluaW11bUZlZSgpO1xcbiAgICAgIHRoaXMuc2V0VHJhbnNmZXJMaW1pdCgpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldFRyYW5zZmVyUGVyY2VudGFnZVNlbGVjdG9yUmVzdWx0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRyYW5zZmVyUGVyY2VudGFnZVNlbGVjdG9yUmVzdWx0KGFtb3VudCkge1xcbiAgICAgIHZhciBfdGhpcyRyb290X3N0b3JlJG1vZHUgPSB0aGlzLnJvb3Rfc3RvcmUubW9kdWxlcy5jYXNoaWVyLFxcbiAgICAgICAgICBjcnlwdG9fZmlhdF9jb252ZXJ0ZXIgPSBfdGhpcyRyb290X3N0b3JlJG1vZHUuY3J5cHRvX2ZpYXRfY29udmVydGVyLFxcbiAgICAgICAgICBnZW5lcmFsX3N0b3JlID0gX3RoaXMkcm9vdF9zdG9yZSRtb2R1LmdlbmVyYWxfc3RvcmU7XFxuICAgICAgdmFyIHNlbGVjdGVkX2Zyb21fY3VycmVuY3kgPSB0aGlzLnNlbGVjdGVkX2Zyb20uY3VycmVuY3k7XFxuICAgICAgdmFyIHNlbGVjdGVkX3RvX2N1cnJlbmN5ID0gdGhpcy5zZWxlY3RlZF90by5jdXJyZW5jeTtcXG5cXG4gICAgICBpZiAoYW1vdW50ID4gMCB8fCArdGhpcy5zZWxlY3RlZF9mcm9tLmJhbGFuY2UgPT09IDApIHtcXG4gICAgICAgIGNyeXB0b19maWF0X2NvbnZlcnRlci5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KGFtb3VudCk7XFxuICAgICAgICB0aGlzLnZhbGlkYXRlVHJhbnNmZXJGcm9tQW1vdW50KCk7XFxuICAgICAgICBjcnlwdG9fZmlhdF9jb252ZXJ0ZXIub25DaGFuZ2VDb252ZXJ0ZXJGcm9tQW1vdW50KHtcXG4gICAgICAgICAgdGFyZ2V0OiB7XFxuICAgICAgICAgICAgdmFsdWU6IGFtb3VudFxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBzZWxlY3RlZF9mcm9tX2N1cnJlbmN5LCBzZWxlY3RlZF90b19jdXJyZW5jeSk7XFxuICAgICAgfSBlbHNlIGlmICgrdGhpcy5zZWxlY3RlZF9mcm9tLmJhbGFuY2UgPT09IDApIHtcXG4gICAgICAgIGNyeXB0b19maWF0X2NvbnZlcnRlci5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KGFtb3VudCk7XFxuICAgICAgICB0aGlzLnZhbGlkYXRlVHJhbnNmZXJGcm9tQW1vdW50KCk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIGNyeXB0b19maWF0X2NvbnZlcnRlci5yZXNldENvbnZlcnRlcigpO1xcbiAgICAgIH1cXG5cXG4gICAgICBjcnlwdG9fZmlhdF9jb252ZXJ0ZXIuc2V0SXNUaW1lclZpc2libGUoZmFsc2UpO1xcbiAgICAgIGdlbmVyYWxfc3RvcmUucGVyY2VudGFnZVNlbGVjdG9yU2VsZWN0aW9uU3RhdHVzKGZhbHNlKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJ2YWxpZGF0ZVRyYW5zZmVyRnJvbUFtb3VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZVRyYW5zZmVyRnJvbUFtb3VudCgpIHtcXG4gICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSRtb2R1MiA9IHRoaXMucm9vdF9zdG9yZS5tb2R1bGVzLmNhc2hpZXIuY3J5cHRvX2ZpYXRfY29udmVydGVyLFxcbiAgICAgICAgICBjb252ZXJ0ZXJfZnJvbV9hbW91bnQgPSBfdGhpcyRyb290X3N0b3JlJG1vZHUyLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCxcXG4gICAgICAgICAgc2V0Q29udmVydGVyRnJvbUVycm9yID0gX3RoaXMkcm9vdF9zdG9yZSRtb2R1Mi5zZXRDb252ZXJ0ZXJGcm9tRXJyb3I7XFxuXFxuICAgICAgaWYgKCFjb252ZXJ0ZXJfZnJvbV9hbW91bnQpIHtcXG4gICAgICAgIHNldENvbnZlcnRlckZyb21FcnJvcigoMCx0cmFuc2xhdGlvbnNfLmxvY2FsaXplKSgnVGhpcyBmaWVsZCBpcyByZXF1aXJlZC4nKSk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHZhciBfdmFsaWROdW1iZXIgPSAoMCxzaGFyZWRfLnZhbGlkTnVtYmVyKShjb252ZXJ0ZXJfZnJvbV9hbW91bnQsIHtcXG4gICAgICAgICAgdHlwZTogJ2Zsb2F0JyxcXG4gICAgICAgICAgZGVjaW1hbHM6ICgwLHNoYXJlZF8uZ2V0RGVjaW1hbFBsYWNlcykodGhpcy5zZWxlY3RlZF9mcm9tLmN1cnJlbmN5KSxcXG4gICAgICAgICAgbWluOiB0aGlzLnRyYW5zZmVyX2xpbWl0Lm1pbixcXG4gICAgICAgICAgbWF4OiB0aGlzLnRyYW5zZmVyX2xpbWl0Lm1heFxcbiAgICAgICAgfSksXFxuICAgICAgICAgICAgaXNfb2sgPSBfdmFsaWROdW1iZXIuaXNfb2ssXFxuICAgICAgICAgICAgbWVzc2FnZSA9IF92YWxpZE51bWJlci5tZXNzYWdlO1xcblxcbiAgICAgICAgaWYgKCFpc19vaykge1xcbiAgICAgICAgICBzZXRDb252ZXJ0ZXJGcm9tRXJyb3IobWVzc2FnZSk7XFxuICAgICAgICB9IGVsc2UgaWYgKCt0aGlzLnNlbGVjdGVkX2Zyb20uYmFsYW5jZSA8ICtjb252ZXJ0ZXJfZnJvbV9hbW91bnQpIHtcXG4gICAgICAgICAgc2V0Q29udmVydGVyRnJvbUVycm9yKCgwLHRyYW5zbGF0aW9uc18ubG9jYWxpemUpKCdJbnN1ZmZpY2llbnQgZnVuZHMnKSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICBzZXRDb252ZXJ0ZXJGcm9tRXJyb3IoJycpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJ2YWxpZGF0ZVRyYW5zZmVyVG9BbW91bnRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVUcmFuc2ZlclRvQW1vdW50KCkge1xcbiAgICAgIHZhciBfdGhpcyRyb290X3N0b3JlJG1vZHUzID0gdGhpcy5yb290X3N0b3JlLm1vZHVsZXMuY2FzaGllci5jcnlwdG9fZmlhdF9jb252ZXJ0ZXIsXFxuICAgICAgICAgIGNvbnZlcnRlcl90b19hbW91bnQgPSBfdGhpcyRyb290X3N0b3JlJG1vZHUzLmNvbnZlcnRlcl90b19hbW91bnQsXFxuICAgICAgICAgIHNldENvbnZlcnRlclRvRXJyb3IgPSBfdGhpcyRyb290X3N0b3JlJG1vZHUzLnNldENvbnZlcnRlclRvRXJyb3I7XFxuXFxuICAgICAgaWYgKGNvbnZlcnRlcl90b19hbW91bnQpIHtcXG4gICAgICAgIHZhciBjdXJyZW5jeSA9IHRoaXMuc2VsZWN0ZWRfdG8uY3VycmVuY3k7XFxuXFxuICAgICAgICB2YXIgX3ZhbGlkTnVtYmVyMiA9ICgwLHNoYXJlZF8udmFsaWROdW1iZXIpKGNvbnZlcnRlcl90b19hbW91bnQsIHtcXG4gICAgICAgICAgdHlwZTogJ2Zsb2F0JyxcXG4gICAgICAgICAgZGVjaW1hbHM6ICgwLHNoYXJlZF8uZ2V0RGVjaW1hbFBsYWNlcykoY3VycmVuY3kpXFxuICAgICAgICB9KSxcXG4gICAgICAgICAgICBpc19vayA9IF92YWxpZE51bWJlcjIuaXNfb2ssXFxuICAgICAgICAgICAgbWVzc2FnZSA9IF92YWxpZE51bWJlcjIubWVzc2FnZTtcXG5cXG4gICAgICAgIGlmICghaXNfb2spIHtcXG4gICAgICAgICAgc2V0Q29udmVydGVyVG9FcnJvcihtZXNzYWdlKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIHNldENvbnZlcnRlclRvRXJyb3IoJycpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIEFjY291bnRUcmFuc2ZlclN0b3JlO1xcbn0oKSwgKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvciA9IGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiYWNjb3VudHNfbGlzdFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gW107XFxuICB9XFxufSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjIgPSBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNvbnRhaW5lclxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gY29uc3RhbnRzLmNvbnRhaW5lcnMuYWNjb3VudF90cmFuc2ZlcjtcXG4gIH1cXG59KSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yMyA9IGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZXJyb3JcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIG5ldyBFcnJvclN0b3JlKCk7XFxuICB9XFxufSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjQgPSBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImhhc19ub19hY2NvdW50XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yNSA9IGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaGFzX25vX2FjY291bnRzX2JhbGFuY2VcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbn0pLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I2ID0gYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc190cmFuc2Zlcl9jb25maXJtXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yNyA9IGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfdHJhbnNmZXJfc3VjY2Vzc2Z1bFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjggPSBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX210NV90cmFuc2Zlcl9pbl9wcm9ncmVzc1xcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjkgPSBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm1pbmltdW1fZmVlXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBudWxsO1xcbiAgfVxcbn0pLCBfZGVzY3JpcHRvcjEwID0gYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZWNlaXB0XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiB7fTtcXG4gIH1cXG59KSwgX2Rlc2NyaXB0b3IxMSA9IGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2VsZWN0ZWRfZnJvbVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4ge307XFxuICB9XFxufSksIF9kZXNjcmlwdG9yMTIgPSBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNlbGVjdGVkX3RvXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiB7fTtcXG4gIH1cXG59KSwgX2Rlc2NyaXB0b3IxMyA9IGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiYWNjb3VudF90cmFuc2Zlcl9hbW91bnRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuICcnO1xcbiAgfVxcbn0pLCBfZGVzY3JpcHRvcjE0ID0gYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJ0cmFuc2Zlcl9mZWVcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIG51bGw7XFxuICB9XFxufSksIF9kZXNjcmlwdG9yMTUgPSBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInRyYW5zZmVyX2xpbWl0XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiB7fTtcXG4gIH1cXG59KSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19hY2NvdW50X3RyYW5zZmVyX3Zpc2libGVcXFwiLCBbZXh0ZXJuYWxfbW9ieF8uY29tcHV0ZWRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfYWNjb3VudF90cmFuc2Zlcl92aXNpYmxlXFxcIiksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRCYWxhbmNlQnlMb2dpbklkXFxcIiwgW2FjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVjXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEJhbGFuY2VCeUxvZ2luSWRcXFwiKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEJhbGFuY2VTZWxlY3RlZEZyb21cXFwiLCBbYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZWMyXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEJhbGFuY2VTZWxlY3RlZEZyb21cXFwiKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEJhbGFuY2VTZWxlY3RlZFRvXFxcIiwgW2FjY291bnRfdHJhbnNmZXJfc3RvcmVfZGVjM10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRCYWxhbmNlU2VsZWN0ZWRUb1xcXCIpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25Nb3VudEFjY291bnRUcmFuc2ZlclxcXCIsIFthY2NvdW50X3RyYW5zZmVyX3N0b3JlX2RlYzRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25Nb3VudEFjY291bnRUcmFuc2ZlclxcXCIpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0SGFzTm9BY2NvdW50c0JhbGFuY2VcXFwiLCBbYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZWM1XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEhhc05vQWNjb3VudHNCYWxhbmNlXFxcIiksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRIYXNOb0FjY291bnRcXFwiLCBbYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZWM2XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEhhc05vQWNjb3VudFxcXCIpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0VHJhbnNmZXJGZWVcXFwiLCBbYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9kZWM3XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFRyYW5zZmVyRmVlXFxcIiksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRNaW5pbXVtRmVlXFxcIiwgW19kZWM4XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldE1pbmltdW1GZWVcXFwiKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFRyYW5zZmVyTGltaXRcXFwiLCBbX2RlYzldLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0VHJhbnNmZXJMaW1pdFxcXCIpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic29ydEFjY291bnRzVHJhbnNmZXJcXFwiLCBbX2RlYzEwXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNvcnRBY2NvdW50c1RyYW5zZmVyXFxcIiksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRTZWxlY3RlZEZyb21cXFwiLCBbX2RlYzExXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFNlbGVjdGVkRnJvbVxcXCIpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0U2VsZWN0ZWRUb1xcXCIsIFtfZGVjMTJdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0U2VsZWN0ZWRUb1xcXCIpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0QWNjb3VudHNcXFwiLCBbX2RlYzEzXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEFjY291bnRzXFxcIiksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc1RyYW5zZmVyQ29uZmlybVxcXCIsIFtfZGVjMTRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0SXNUcmFuc2ZlckNvbmZpcm1cXFwiKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEFjY291bnRUcmFuc2ZlckFtb3VudFxcXCIsIFtfZGVjMTVdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0QWNjb3VudFRyYW5zZmVyQW1vdW50XFxcIiksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc1RyYW5zZmVyU3VjY2Vzc2Z1bFxcXCIsIFtfZGVjMTZdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0SXNUcmFuc2ZlclN1Y2Nlc3NmdWxcXFwiKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzTVQ1VHJhbnNmZXJJblByb2dyZXNzXFxcIiwgW19kZWMxN10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc01UNVRyYW5zZmVySW5Qcm9ncmVzc1xcXCIpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0UmVjZWlwdFRyYW5zZmVyXFxcIiwgW19kZWMxOF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRSZWNlaXB0VHJhbnNmZXJcXFwiKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uQ2hhbmdlVHJhbnNmZXJGcm9tXFxcIiwgW19kZWMxOV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbkNoYW5nZVRyYW5zZmVyRnJvbVxcXCIpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25DaGFuZ2VUcmFuc2ZlclRvXFxcIiwgW19kZWMyMF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbkNoYW5nZVRyYW5zZmVyVG9cXFwiKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBfZGVzY3JpcHRvcjE2ID0gYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXNldEFjY291bnRUcmFuc2ZlclxcXCIsIFtfZGVjMjFdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHZhciBfdGhpczMgPSB0aGlzO1xcblxcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2FjY291bnRfdHJhbnNmZXJfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkge1xcbiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7XFxuICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHtcXG4gICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICBfdGhpczMuc2V0SXNUcmFuc2ZlckNvbmZpcm0oZmFsc2UpO1xcblxcbiAgICAgICAgICAgICAgX3RoaXMzLnNldFRyYW5zZmVyTGltaXQoKTtcXG5cXG4gICAgICAgICAgICBjYXNlIDI6XFxuICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfSwgX2NhbGxlZTQpO1xcbiAgICB9KSk7XFxuICB9XFxufSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0VHJhbnNmZXJQZXJjZW50YWdlU2VsZWN0b3JSZXN1bHRcXFwiLCBbX2RlYzIyXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFRyYW5zZmVyUGVyY2VudGFnZVNlbGVjdG9yUmVzdWx0XFxcIiksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJ2YWxpZGF0ZVRyYW5zZmVyRnJvbUFtb3VudFxcXCIsIFtfZGVjMjNdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwidmFsaWRhdGVUcmFuc2ZlckZyb21BbW91bnRcXFwiKSwgYWNjb3VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihhY2NvdW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInZhbGlkYXRlVHJhbnNmZXJUb0Ftb3VudFxcXCIsIFtfZGVjMjRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwidmFsaWRhdGVUcmFuc2ZlclRvQW1vdW50XFxcIiksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSksIGFjY291bnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MpKTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9TdG9yZXMvY3J5cHRvLWZpYXQtY29udmVydGVyLXN0b3JlLmpzXFxudmFyIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWMsIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWMyLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVjMywgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzQsIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWM1LCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVjNiwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzcsIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWM4LCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVjOSwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzEwLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVjMTEsIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWMxMiwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVzY3JpcHRvciwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2Rlc2NyaXB0b3IyLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVzY3JpcHRvcjMsIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZXNjcmlwdG9yNCwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2Rlc2NyaXB0b3I1O1xcblxcbmZ1bmN0aW9uIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XFxuXFxuZnVuY3Rpb24gY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJuZXh0XFxcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2FzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXFxcInRocm93XFxcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxcblxcbmZ1bmN0aW9uIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgaWYgKCFkZXNjcmlwdG9yKSByZXR1cm47IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB7IGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSwgY29uZmlndXJhYmxlOiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSwgd3JpdGFibGU6IGRlc2NyaXB0b3Iud3JpdGFibGUsIHZhbHVlOiBkZXNjcmlwdG9yLmluaXRpYWxpemVyID8gZGVzY3JpcHRvci5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwIH0pOyB9XFxuXFxuZnVuY3Rpb24gY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFxcXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cXFwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXFxcInZhbHVlXFxcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVjb3JhdG9ycywgZGVzY3JpcHRvciwgY29udGV4dCkgeyB2YXIgZGVzYyA9IHt9OyBPYmplY3Qua2V5cyhkZXNjcmlwdG9yKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgZGVzY1trZXldID0gZGVzY3JpcHRvcltrZXldOyB9KTsgZGVzYy5lbnVtZXJhYmxlID0gISFkZXNjLmVudW1lcmFibGU7IGRlc2MuY29uZmlndXJhYmxlID0gISFkZXNjLmNvbmZpZ3VyYWJsZTsgaWYgKCd2YWx1ZScgaW4gZGVzYyB8fCBkZXNjLmluaXRpYWxpemVyKSB7IGRlc2Mud3JpdGFibGUgPSB0cnVlOyB9IGRlc2MgPSBkZWNvcmF0b3JzLnNsaWNlKCkucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbiAoZGVzYywgZGVjb3JhdG9yKSB7IHJldHVybiBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYykgfHwgZGVzYzsgfSwgZGVzYyk7IGlmIChjb250ZXh0ICYmIGRlc2MuaW5pdGlhbGl6ZXIgIT09IHZvaWQgMCkgeyBkZXNjLnZhbHVlID0gZGVzYy5pbml0aWFsaXplciA/IGRlc2MuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMDsgZGVzYy5pbml0aWFsaXplciA9IHVuZGVmaW5lZDsgfSBpZiAoZGVzYy5pbml0aWFsaXplciA9PT0gdm9pZCAwKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjKTsgZGVzYyA9IG51bGw7IH0gcmV0dXJuIGRlc2M7IH1cXG5cXG5mdW5jdGlvbiBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyKGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgdGhyb3cgbmV3IEVycm9yKCdEZWNvcmF0aW5nIGNsYXNzIHByb3BlcnR5IGZhaWxlZC4gUGxlYXNlIGVuc3VyZSB0aGF0ICcgKyAncHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpcyBlbmFibGVkIGFuZCBydW5zIGFmdGVyIHRoZSBkZWNvcmF0b3JzIHRyYW5zZm9ybS4nKTsgfVxcblxcblxcblxcbnZhciBDcnlwdG9GaWF0Q29udmVydGVyU3RvcmUgPSAoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYyA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzIgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWMzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVjNCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzUgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWM2ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVjNyA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzggPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWM5ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVjMTAgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWMxMSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzEyID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCAoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIENyeXB0b0ZpYXRDb252ZXJ0ZXJTdG9yZShfcmVmKSB7XFxuICAgIHZhciBXUyA9IF9yZWYuV1MsXFxuICAgICAgICByb290X3N0b3JlID0gX3JlZi5yb290X3N0b3JlO1xcblxcbiAgICBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3J5cHRvRmlhdENvbnZlcnRlclN0b3JlKTtcXG5cXG4gICAgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImNvbnZlcnRlcl9mcm9tX2Ftb3VudFxcXCIsIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZXNjcmlwdG9yLCB0aGlzKTtcXG5cXG4gICAgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImNvbnZlcnRlcl90b19hbW91bnRcXFwiLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVzY3JpcHRvcjIsIHRoaXMpO1xcblxcbiAgICBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiY29udmVydGVyX2Zyb21fZXJyb3JcXFwiLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVzY3JpcHRvcjMsIHRoaXMpO1xcblxcbiAgICBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiY29udmVydGVyX3RvX2Vycm9yXFxcIiwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2Rlc2NyaXB0b3I0LCB0aGlzKTtcXG5cXG4gICAgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImlzX3RpbWVyX3Zpc2libGVcXFwiLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVzY3JpcHRvcjUsIHRoaXMpO1xcblxcbiAgICB0aGlzLnJvb3Rfc3RvcmUgPSByb290X3N0b3JlO1xcbiAgICB0aGlzLldTID0gV1M7XFxuICB9XFxuXFxuICBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfY3JlYXRlQ2xhc3MoQ3J5cHRvRmlhdENvbnZlcnRlclN0b3JlLCBbe1xcbiAgICBrZXk6IFxcXCJzZXRDb252ZXJ0ZXJGcm9tQW1vdW50XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldENvbnZlcnRlckZyb21BbW91bnQoYW1vdW50KSB7XFxuICAgICAgdGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQgPSBhbW91bnQ7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0Q29udmVydGVyVG9BbW91bnRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29udmVydGVyVG9BbW91bnQoYW1vdW50KSB7XFxuICAgICAgdGhpcy5jb252ZXJ0ZXJfdG9fYW1vdW50ID0gYW1vdW50O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldENvbnZlcnRlckZyb21FcnJvclxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb252ZXJ0ZXJGcm9tRXJyb3IoZXJyb3IpIHtcXG4gICAgICB0aGlzLmNvbnZlcnRlcl9mcm9tX2Vycm9yID0gZXJyb3I7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0Q29udmVydGVyVG9FcnJvclxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb252ZXJ0ZXJUb0Vycm9yKGVycm9yKSB7XFxuICAgICAgdGhpcy5jb252ZXJ0ZXJfdG9fZXJyb3IgPSBlcnJvcjtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRJc1RpbWVyVmlzaWJsZVxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc1RpbWVyVmlzaWJsZShpc190aW1lcl92aXNpYmxlKSB7XFxuICAgICAgdGhpcy5pc190aW1lcl92aXNpYmxlID0gaXNfdGltZXJfdmlzaWJsZTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJyZXNldFRpbWVyXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0VGltZXIoKSB7XFxuICAgICAgdGhpcy5zZXRJc1RpbWVyVmlzaWJsZShmYWxzZSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZ2V0RXhjaGFuZ2VSYXRlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgX2dldEV4Y2hhbmdlUmF0ZSA9IGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShmcm9tX2N1cnJlbmN5LCB0b19jdXJyZW5jeSkge1xcbiAgICAgICAgdmFyIF95aWVsZCR0aGlzJFdTJHNlbmQsIGV4Y2hhbmdlX3JhdGVzO1xcblxcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuV1Muc2VuZCh7XFxuICAgICAgICAgICAgICAgICAgZXhjaGFuZ2VfcmF0ZXM6IDEsXFxuICAgICAgICAgICAgICAgICAgYmFzZV9jdXJyZW5jeTogZnJvbV9jdXJyZW5jeVxcbiAgICAgICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjpcXG4gICAgICAgICAgICAgICAgX3lpZWxkJHRoaXMkV1Mkc2VuZCA9IF9jb250ZXh0LnNlbnQ7XFxuICAgICAgICAgICAgICAgIGV4Y2hhbmdlX3JhdGVzID0gX3lpZWxkJHRoaXMkV1Mkc2VuZC5leGNoYW5nZV9yYXRlcztcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcXFwicmV0dXJuXFxcIiwgZXhjaGFuZ2VfcmF0ZXMucmF0ZXNbdG9fY3VycmVuY3ldKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNTpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTtcXG4gICAgICB9KSk7XFxuXFxuICAgICAgZnVuY3Rpb24gZ2V0RXhjaGFuZ2VSYXRlKF94LCBfeDIpIHtcXG4gICAgICAgIHJldHVybiBfZ2V0RXhjaGFuZ2VSYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBnZXRFeGNoYW5nZVJhdGU7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJ2YWxpZGF0ZUZyb21BbW91bnRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVGcm9tQW1vdW50KCkge1xcbiAgICAgIHZhciBfdGhpcyRyb290X3N0b3JlJG1vZHUgPSB0aGlzLnJvb3Rfc3RvcmUubW9kdWxlcy5jYXNoaWVyLFxcbiAgICAgICAgICBhY2NvdW50X3RyYW5zZmVyID0gX3RoaXMkcm9vdF9zdG9yZSRtb2R1LmFjY291bnRfdHJhbnNmZXIsXFxuICAgICAgICAgIGdlbmVyYWxfc3RvcmUgPSBfdGhpcyRyb290X3N0b3JlJG1vZHUuZ2VuZXJhbF9zdG9yZSxcXG4gICAgICAgICAgd2l0aGRyYXcgPSBfdGhpcyRyb290X3N0b3JlJG1vZHUud2l0aGRyYXc7XFxuXFxuICAgICAgaWYgKGdlbmVyYWxfc3RvcmUuYWN0aXZlX2NvbnRhaW5lciA9PT0gYWNjb3VudF90cmFuc2Zlci5jb250YWluZXIpIHtcXG4gICAgICAgIGFjY291bnRfdHJhbnNmZXIudmFsaWRhdGVUcmFuc2ZlckZyb21BbW91bnQoKTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgd2l0aGRyYXcudmFsaWRhdGVXaXRoZHJhd0Zyb21BbW91bnQoKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwidmFsaWRhdGVUb0Ftb3VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZVRvQW1vdW50KCkge1xcbiAgICAgIHZhciBfdGhpcyRyb290X3N0b3JlJG1vZHUyID0gdGhpcy5yb290X3N0b3JlLm1vZHVsZXMuY2FzaGllcixcXG4gICAgICAgICAgYWNjb3VudF90cmFuc2ZlciA9IF90aGlzJHJvb3Rfc3RvcmUkbW9kdTIuYWNjb3VudF90cmFuc2ZlcixcXG4gICAgICAgICAgZ2VuZXJhbF9zdG9yZSA9IF90aGlzJHJvb3Rfc3RvcmUkbW9kdTIuZ2VuZXJhbF9zdG9yZSxcXG4gICAgICAgICAgd2l0aGRyYXcgPSBfdGhpcyRyb290X3N0b3JlJG1vZHUyLndpdGhkcmF3O1xcblxcbiAgICAgIGlmIChnZW5lcmFsX3N0b3JlLmFjdGl2ZV9jb250YWluZXIgPT09IGFjY291bnRfdHJhbnNmZXIuY29udGFpbmVyKSB7XFxuICAgICAgICBhY2NvdW50X3RyYW5zZmVyLnZhbGlkYXRlVHJhbnNmZXJUb0Ftb3VudCgpO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICB3aXRoZHJhdy52YWxpZGF0ZVdpdGhkcmF3VG9BbW91bnQoKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25DaGFuZ2VDb252ZXJ0ZXJGcm9tQW1vdW50XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgX29uQ2hhbmdlQ29udmVydGVyRnJvbUFtb3VudCA9IGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoX3JlZjIsIGZyb21fY3VycmVuY3ksIHRvX2N1cnJlbmN5KSB7XFxuICAgICAgICB2YXIgdGFyZ2V0LCBfdGhpcyRyb290X3N0b3JlJG1vZHUzLCBhY2NvdW50X3RyYW5zZmVyLCBnZW5lcmFsX3N0b3JlLCByYXRlLCBkZWNpbWFscywgYW1vdW50O1xcblxcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0O1xcbiAgICAgICAgICAgICAgICBfdGhpcyRyb290X3N0b3JlJG1vZHUzID0gdGhpcy5yb290X3N0b3JlLm1vZHVsZXMuY2FzaGllciwgYWNjb3VudF90cmFuc2ZlciA9IF90aGlzJHJvb3Rfc3RvcmUkbW9kdTMuYWNjb3VudF90cmFuc2ZlciwgZ2VuZXJhbF9zdG9yZSA9IF90aGlzJHJvb3Rfc3RvcmUkbW9kdTMuZ2VuZXJhbF9zdG9yZTtcXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldFRpbWVyKCk7XFxuXFxuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0LnZhbHVlKSB7XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyNztcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlckZyb21BbW91bnQodGFyZ2V0LnZhbHVlKTtcXG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUZyb21BbW91bnQoKTtcXG4gICAgICAgICAgICAgICAgZ2VuZXJhbF9zdG9yZS5wZXJjZW50YWdlU2VsZWN0b3JTZWxlY3Rpb25TdGF0dXModHJ1ZSk7XFxuICAgICAgICAgICAgICAgIGdlbmVyYWxfc3RvcmUuY2FsY3VsYXRlUGVyY2VudGFnZSgpO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udmVydGVyX2Zyb21fZXJyb3IpIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE1O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyVG9BbW91bnQoJycpO1xcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvRXJyb3IoJycpO1xcbiAgICAgICAgICAgICAgICB0aGlzLnNldElzVGltZXJWaXNpYmxlKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgYWNjb3VudF90cmFuc2Zlci5zZXRBY2NvdW50VHJhbnNmZXJBbW91bnQoJycpO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI1O1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTU6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTc7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEV4Y2hhbmdlUmF0ZShmcm9tX2N1cnJlbmN5LCB0b19jdXJyZW5jeSk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDE3OlxcbiAgICAgICAgICAgICAgICByYXRlID0gX2NvbnRleHQyLnNlbnQ7XFxuICAgICAgICAgICAgICAgIGRlY2ltYWxzID0gKDAsc2hhcmVkXy5nZXREZWNpbWFsUGxhY2VzKSh0b19jdXJyZW5jeSk7XFxuICAgICAgICAgICAgICAgIGFtb3VudCA9IChyYXRlICogdGFyZ2V0LnZhbHVlKS50b0ZpeGVkKGRlY2ltYWxzKTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCthbW91bnQgfHwgdGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQpIHtcXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvQW1vdW50KGFtb3VudCk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJUb0Ftb3VudCgnJyk7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVRvQW1vdW50KCk7XFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyVG9FcnJvcignJyk7XFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0SXNUaW1lclZpc2libGUodHJ1ZSk7XFxuICAgICAgICAgICAgICAgIGFjY291bnRfdHJhbnNmZXIuc2V0QWNjb3VudFRyYW5zZmVyQW1vdW50KHRhcmdldC52YWx1ZSk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDI1OlxcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI4O1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjc6XFxuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRDb252ZXJ0ZXIoKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjg6XFxuICAgICAgICAgICAgICBjYXNlIFxcXCJlbmRcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTtcXG4gICAgICB9KSk7XFxuXFxuICAgICAgZnVuY3Rpb24gb25DaGFuZ2VDb252ZXJ0ZXJGcm9tQW1vdW50KF94MywgX3g0LCBfeDUpIHtcXG4gICAgICAgIHJldHVybiBfb25DaGFuZ2VDb252ZXJ0ZXJGcm9tQW1vdW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBvbkNoYW5nZUNvbnZlcnRlckZyb21BbW91bnQ7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJvbkNoYW5nZUNvbnZlcnRlclRvQW1vdW50XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgX29uQ2hhbmdlQ29udmVydGVyVG9BbW91bnQgPSBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKF9yZWYzLCBmcm9tX2N1cnJlbmN5LCB0b19jdXJyZW5jeSkge1xcbiAgICAgICAgdmFyIHRhcmdldCwgX3RoaXMkcm9vdF9zdG9yZSRtb2R1NCwgYWNjb3VudF90cmFuc2ZlciwgZ2VuZXJhbF9zdG9yZSwgcmF0ZSwgZGVjaW1hbHMsIGFtb3VudDtcXG5cXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIHRhcmdldCA9IF9yZWYzLnRhcmdldDtcXG4gICAgICAgICAgICAgICAgX3RoaXMkcm9vdF9zdG9yZSRtb2R1NCA9IHRoaXMucm9vdF9zdG9yZS5tb2R1bGVzLmNhc2hpZXIsIGFjY291bnRfdHJhbnNmZXIgPSBfdGhpcyRyb290X3N0b3JlJG1vZHU0LmFjY291bnRfdHJhbnNmZXIsIGdlbmVyYWxfc3RvcmUgPSBfdGhpcyRyb290X3N0b3JlJG1vZHU0LmdlbmVyYWxfc3RvcmU7XFxuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRUaW1lcigpO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoIXRhcmdldC52YWx1ZSkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjU7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJUb0Ftb3VudCh0YXJnZXQudmFsdWUpO1xcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlVG9BbW91bnQoKTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnZlcnRlcl90b19lcnJvcikge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTM7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KCcnKTtcXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tRXJyb3IoJycpO1xcbiAgICAgICAgICAgICAgICB0aGlzLnNldElzVGltZXJWaXNpYmxlKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgYWNjb3VudF90cmFuc2Zlci5zZXRBY2NvdW50VHJhbnNmZXJBbW91bnQoJycpO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDIzO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTM6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTU7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEV4Y2hhbmdlUmF0ZShmcm9tX2N1cnJlbmN5LCB0b19jdXJyZW5jeSk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDE1OlxcbiAgICAgICAgICAgICAgICByYXRlID0gX2NvbnRleHQzLnNlbnQ7XFxuICAgICAgICAgICAgICAgIGRlY2ltYWxzID0gKDAsc2hhcmVkXy5nZXREZWNpbWFsUGxhY2VzKSh0b19jdXJyZW5jeSk7XFxuICAgICAgICAgICAgICAgIGFtb3VudCA9IChyYXRlICogdGFyZ2V0LnZhbHVlKS50b0ZpeGVkKGRlY2ltYWxzKTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCthbW91bnQgfHwgdGhpcy5jb252ZXJ0ZXJfdG9fYW1vdW50KSB7XFxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KGFtb3VudCk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KCcnKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBnZW5lcmFsX3N0b3JlLnBlcmNlbnRhZ2VTZWxlY3RvclNlbGVjdGlvblN0YXR1cyh0cnVlKTtcXG4gICAgICAgICAgICAgICAgZ2VuZXJhbF9zdG9yZS5jYWxjdWxhdGVQZXJjZW50YWdlKCk7XFxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGVGcm9tQW1vdW50KCk7XFxuXFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnZlcnRlcl9mcm9tX2Vycm9yKSB7XFxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJc1RpbWVyVmlzaWJsZShmYWxzZSk7XFxuICAgICAgICAgICAgICAgICAgYWNjb3VudF90cmFuc2Zlci5zZXRBY2NvdW50VHJhbnNmZXJBbW91bnQoJycpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUVycm9yKCcnKTtcXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldElzVGltZXJWaXNpYmxlKHRydWUpO1xcbiAgICAgICAgICAgICAgICAgIGFjY291bnRfdHJhbnNmZXIuc2V0QWNjb3VudFRyYW5zZmVyQW1vdW50KGFtb3VudCk7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjM6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjY7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAyNTpcXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldENvbnZlcnRlcigpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAyNjpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBvbkNoYW5nZUNvbnZlcnRlclRvQW1vdW50KF94NiwgX3g3LCBfeDgpIHtcXG4gICAgICAgIHJldHVybiBfb25DaGFuZ2VDb252ZXJ0ZXJUb0Ftb3VudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gb25DaGFuZ2VDb252ZXJ0ZXJUb0Ftb3VudDtcXG4gICAgfSgpXFxuICB9LCB7XFxuICAgIGtleTogXFxcInJlc2V0Q29udmVydGVyXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0Q29udmVydGVyKCkge1xcbiAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUFtb3VudCgnJyk7XFxuICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJUb0Ftb3VudCgnJyk7XFxuICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tRXJyb3IoJycpO1xcbiAgICAgIHRoaXMuc2V0Q29udmVydGVyVG9FcnJvcignJyk7XFxuICAgICAgdGhpcy5zZXRJc1RpbWVyVmlzaWJsZShmYWxzZSk7XFxuICAgICAgdGhpcy5yb290X3N0b3JlLm1vZHVsZXMuY2FzaGllci5nZW5lcmFsX3N0b3JlLnBlcmNlbnRhZ2VTZWxlY3RvclNlbGVjdGlvblN0YXR1cyh0cnVlKTtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIENyeXB0b0ZpYXRDb252ZXJ0ZXJTdG9yZTtcXG59KCksIChjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVzY3JpcHRvciA9IGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNvbnZlcnRlcl9mcm9tX2Ftb3VudFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gJyc7XFxuICB9XFxufSksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZXNjcmlwdG9yMiA9IGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNvbnZlcnRlcl90b19hbW91bnRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuICcnO1xcbiAgfVxcbn0pLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVzY3JpcHRvcjMgPSBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJjb252ZXJ0ZXJfZnJvbV9lcnJvclxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gJyc7XFxuICB9XFxufSksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZXNjcmlwdG9yNCA9IGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNvbnZlcnRlcl90b19lcnJvclxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gJyc7XFxuICB9XFxufSksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZXNjcmlwdG9yNSA9IGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX3RpbWVyX3Zpc2libGVcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbn0pLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRDb252ZXJ0ZXJGcm9tQW1vdW50XFxcIiwgW2NyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWNdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRDb252ZXJ0ZXJGcm9tQW1vdW50XFxcIiksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRDb252ZXJ0ZXJUb0Ftb3VudFxcXCIsIFtjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVjMl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldENvbnZlcnRlclRvQW1vdW50XFxcIiksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRDb252ZXJ0ZXJGcm9tRXJyb3JcXFwiLCBbY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzNdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRDb252ZXJ0ZXJGcm9tRXJyb3JcXFwiKSwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldENvbnZlcnRlclRvRXJyb3JcXFwiLCBbY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRDb252ZXJ0ZXJUb0Vycm9yXFxcIiksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc1RpbWVyVmlzaWJsZVxcXCIsIFtjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfZGVjNV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzVGltZXJWaXNpYmxlXFxcIiksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXNldFRpbWVyXFxcIiwgW2NyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWM2XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwicmVzZXRUaW1lclxcXCIpLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZ2V0RXhjaGFuZ2VSYXRlXFxcIiwgW2NyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWM3XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZ2V0RXhjaGFuZ2VSYXRlXFxcIiksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJ2YWxpZGF0ZUZyb21BbW91bnRcXFwiLCBbY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzhdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJ2YWxpZGF0ZUZyb21BbW91bnRcXFwiKSwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInZhbGlkYXRlVG9BbW91bnRcXFwiLCBbY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzldLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJ2YWxpZGF0ZVRvQW1vdW50XFxcIiksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbkNoYW5nZUNvbnZlcnRlckZyb21BbW91bnRcXFwiLCBbY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2RlYzEwXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25DaGFuZ2VDb252ZXJ0ZXJGcm9tQW1vdW50XFxcIiksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbkNoYW5nZUNvbnZlcnRlclRvQW1vdW50XFxcIiwgW2NyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWMxMV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uQ2hhbmdlQ29udmVydGVyVG9BbW91bnRcXFwiKSwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInJlc2V0Q29udmVydGVyXFxcIiwgW2NyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9kZWMxMl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInJlc2V0Q29udmVydGVyXFxcIiksIGNyeXB0b19maWF0X2NvbnZlcnRlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpKSwgY3J5cHRvX2ZpYXRfY29udmVydGVyX3N0b3JlX2NsYXNzKSk7XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vU3RvcmVzL2RlcG9zaXQtc3RvcmUuanNcXG52YXIgZGVwb3NpdF9zdG9yZV9kZWMsIGRlcG9zaXRfc3RvcmVfZGVjMiwgZGVwb3NpdF9zdG9yZV9jbGFzcywgZGVwb3NpdF9zdG9yZV9kZXNjcmlwdG9yLCBkZXBvc2l0X3N0b3JlX2Rlc2NyaXB0b3IyO1xcblxcbmZ1bmN0aW9uIGRlcG9zaXRfc3RvcmVfYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxcblxcbmZ1bmN0aW9uIGRlcG9zaXRfc3RvcmVfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgZGVwb3NpdF9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJuZXh0XFxcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgZGVwb3NpdF9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJ0aHJvd1xcXCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cXG5cXG5mdW5jdGlvbiBkZXBvc2l0X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkgeyBpZiAoIWRlc2NyaXB0b3IpIHJldHVybjsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHsgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLCBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLCB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSwgdmFsdWU6IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDAgfSk7IH1cXG5cXG5mdW5jdGlvbiBkZXBvc2l0X3N0b3JlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFxcXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cXFwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gZGVwb3NpdF9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFxcXCJ2YWx1ZVxcXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gZGVwb3NpdF9zdG9yZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlcG9zaXRfc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlcG9zaXRfc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBkZXBvc2l0X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7IHZhciBkZXNjID0ge307IE9iamVjdC5rZXlzKGRlc2NyaXB0b3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBkZXNjW2tleV0gPSBkZXNjcmlwdG9yW2tleV07IH0pOyBkZXNjLmVudW1lcmFibGUgPSAhIWRlc2MuZW51bWVyYWJsZTsgZGVzYy5jb25maWd1cmFibGUgPSAhIWRlc2MuY29uZmlndXJhYmxlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjIHx8IGRlc2MuaW5pdGlhbGl6ZXIpIHsgZGVzYy53cml0YWJsZSA9IHRydWU7IH0gZGVzYyA9IGRlY29yYXRvcnMuc2xpY2UoKS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChkZXNjLCBkZWNvcmF0b3IpIHsgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5LCBkZXNjKSB8fCBkZXNjOyB9LCBkZXNjKTsgaWYgKGNvbnRleHQgJiYgZGVzYy5pbml0aWFsaXplciAhPT0gdm9pZCAwKSB7IGRlc2MudmFsdWUgPSBkZXNjLmluaXRpYWxpemVyID8gZGVzYy5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwOyBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkOyB9IGlmIChkZXNjLmluaXRpYWxpemVyID09PSB2b2lkIDApIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2MpOyBkZXNjID0gbnVsbDsgfSByZXR1cm4gZGVzYzsgfVxcblxcbmZ1bmN0aW9uIGRlcG9zaXRfc3RvcmVfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyKGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgdGhyb3cgbmV3IEVycm9yKCdEZWNvcmF0aW5nIGNsYXNzIHByb3BlcnR5IGZhaWxlZC4gUGxlYXNlIGVuc3VyZSB0aGF0ICcgKyAncHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpcyBlbmFibGVkIGFuZCBydW5zIGFmdGVyIHRoZSBkZWNvcmF0b3JzIHRyYW5zZm9ybS4nKTsgfVxcblxcblxcblxcblxcbnZhciBEZXBvc2l0U3RvcmUgPSAoZGVwb3NpdF9zdG9yZV9kZWMgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGRlcG9zaXRfc3RvcmVfZGVjMiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgKGRlcG9zaXRfc3RvcmVfY2xhc3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xcbiAgZnVuY3Rpb24gRGVwb3NpdFN0b3JlKF9yZWYpIHtcXG4gICAgdmFyIFdTID0gX3JlZi5XUyxcXG4gICAgICAgIHJvb3Rfc3RvcmUgPSBfcmVmLnJvb3Rfc3RvcmU7XFxuXFxuICAgIGRlcG9zaXRfc3RvcmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGVwb3NpdFN0b3JlKTtcXG5cXG4gICAgZGVwb3NpdF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJjb250YWluZXJcXFwiLCBkZXBvc2l0X3N0b3JlX2Rlc2NyaXB0b3IsIHRoaXMpO1xcblxcbiAgICBkZXBvc2l0X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImVycm9yXFxcIiwgZGVwb3NpdF9zdG9yZV9kZXNjcmlwdG9yMiwgdGhpcyk7XFxuXFxuICAgIHRoaXMucm9vdF9zdG9yZSA9IHJvb3Rfc3RvcmU7XFxuICAgIHRoaXMuV1MgPSBXUztcXG4gIH1cXG5cXG4gIGRlcG9zaXRfc3RvcmVfY3JlYXRlQ2xhc3MoRGVwb3NpdFN0b3JlLCBbe1xcbiAgICBrZXk6IFxcXCJvbk1vdW50RGVwb3NpdFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIF9vbk1vdW50RGVwb3NpdCA9IGRlcG9zaXRfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XFxuICAgICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSwgY2xpZW50LCBtb2R1bGVzLCBfbW9kdWxlcyRjYXNoaWVyJGdlbmUsIGFjdGl2ZV9jb250YWluZXIsIGlzX2NyeXB0bywgb25Nb3VudENvbW1vbiwgc2V0TG9hZGluZywgc2V0T25SZW1vdW50LCBfbW9kdWxlcyRjYXNoaWVyJGlmcmEsIGNoZWNrSWZyYW1lTG9hZGVkLCBjbGVhclRpbWVvdXRDYXNoaWVyVXJsLCBpc19zZXNzaW9uX3RpbWVvdXQsIHNldENvbnRhaW5lckhlaWdodCwgc2V0SWZyYW1lVXJsLCBzZXRTZXNzaW9uVGltZW91dCwgc2V0VGltZW91dENhc2hpZXJVcmwsIGlzX3ZpcnR1YWwsIGN1cnJlbnRfY29udGFpbmVyLCByZXNwb25zZV9jYXNoaWVyO1xcblxcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBfdGhpcyRyb290X3N0b3JlID0gdGhpcy5yb290X3N0b3JlLCBjbGllbnQgPSBfdGhpcyRyb290X3N0b3JlLmNsaWVudCwgbW9kdWxlcyA9IF90aGlzJHJvb3Rfc3RvcmUubW9kdWxlcztcXG4gICAgICAgICAgICAgICAgX21vZHVsZXMkY2FzaGllciRnZW5lID0gbW9kdWxlcy5jYXNoaWVyLmdlbmVyYWxfc3RvcmUsIGFjdGl2ZV9jb250YWluZXIgPSBfbW9kdWxlcyRjYXNoaWVyJGdlbmUuYWN0aXZlX2NvbnRhaW5lciwgaXNfY3J5cHRvID0gX21vZHVsZXMkY2FzaGllciRnZW5lLmlzX2NyeXB0bywgb25Nb3VudENvbW1vbiA9IF9tb2R1bGVzJGNhc2hpZXIkZ2VuZS5vbk1vdW50Q29tbW9uLCBzZXRMb2FkaW5nID0gX21vZHVsZXMkY2FzaGllciRnZW5lLnNldExvYWRpbmcsIHNldE9uUmVtb3VudCA9IF9tb2R1bGVzJGNhc2hpZXIkZ2VuZS5zZXRPblJlbW91bnQ7XFxuICAgICAgICAgICAgICAgIF9tb2R1bGVzJGNhc2hpZXIkaWZyYSA9IG1vZHVsZXMuY2FzaGllci5pZnJhbWUsIGNoZWNrSWZyYW1lTG9hZGVkID0gX21vZHVsZXMkY2FzaGllciRpZnJhLmNoZWNrSWZyYW1lTG9hZGVkLCBjbGVhclRpbWVvdXRDYXNoaWVyVXJsID0gX21vZHVsZXMkY2FzaGllciRpZnJhLmNsZWFyVGltZW91dENhc2hpZXJVcmwsIGlzX3Nlc3Npb25fdGltZW91dCA9IF9tb2R1bGVzJGNhc2hpZXIkaWZyYS5pc19zZXNzaW9uX3RpbWVvdXQsIHNldENvbnRhaW5lckhlaWdodCA9IF9tb2R1bGVzJGNhc2hpZXIkaWZyYS5zZXRDb250YWluZXJIZWlnaHQsIHNldElmcmFtZVVybCA9IF9tb2R1bGVzJGNhc2hpZXIkaWZyYS5zZXRJZnJhbWVVcmwsIHNldFNlc3Npb25UaW1lb3V0ID0gX21vZHVsZXMkY2FzaGllciRpZnJhLnNldFNlc3Npb25UaW1lb3V0LCBzZXRUaW1lb3V0Q2FzaGllclVybCA9IF9tb2R1bGVzJGNhc2hpZXIkaWZyYS5zZXRUaW1lb3V0Q2FzaGllclVybDtcXG4gICAgICAgICAgICAgICAgaXNfdmlydHVhbCA9IGNsaWVudC5pc192aXJ0dWFsO1xcbiAgICAgICAgICAgICAgICBjdXJyZW50X2NvbnRhaW5lciA9IGFjdGl2ZV9jb250YWluZXI7XFxuICAgICAgICAgICAgICAgIHNldE9uUmVtb3VudCh0aGlzLm9uTW91bnREZXBvc2l0KTtcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7XFxuICAgICAgICAgICAgICAgIHJldHVybiBvbk1vdW50Q29tbW9uKCk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDg6XFxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3Iuc2V0RXJyb3JNZXNzYWdlKCcnKTtcXG4gICAgICAgICAgICAgICAgc2V0Q29udGFpbmVySGVpZ2h0KDApO1xcbiAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoaXNfc2Vzc2lvbl90aW1lb3V0KSB7XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGNoZWNrSWZyYW1lTG9hZGVkKCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXFxcInJldHVyblxcXCIpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAxNDpcXG4gICAgICAgICAgICAgICAgLy8gaWYgc2Vzc2lvbiBoYXMgdGltZWQgb3V0IHJlc2V0IGV2ZXJ5dGhpbmdcXG4gICAgICAgICAgICAgICAgc2V0SWZyYW1lVXJsKCcnKTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCFpc192aXJ0dWFsKSB7XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE4O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpOyAvLyBpZiB2aXJ0dWFsLCBjbGVhciBldmVyeXRoaW5nIGFuZCBkb24ndCBwcm9jZWVkIGZ1cnRoZXJcXG4gICAgICAgICAgICAgICAgLy8gaWYgbm8gdmVyaWZpY2F0aW9uIGNvZGUsIHdlIHNob3VsZCByZXF1ZXN0IGFnYWluXFxuXFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXFxcInJldHVyblxcXCIpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAxODpcXG4gICAgICAgICAgICAgICAgaWYgKGlzX2NyeXB0bykge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNjtcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjE7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLldTLmF1dGhvcml6ZWQuY2FzaGllcihhY3RpdmVfY29udGFpbmVyLCB7XFxuICAgICAgICAgICAgICAgICAgdmVyaWZpY2F0aW9uX2NvZGU6ICd1bmRlZmluZWQnXFxuICAgICAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAyMTpcXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VfY2FzaGllciA9IF9jb250ZXh0LnNlbnQ7XFxuXFxuICAgICAgICAgICAgICAgIGlmICghKGN1cnJlbnRfY29udGFpbmVyICE9PSBhY3RpdmVfY29udGFpbmVyKSkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNTtcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcXFwicmV0dXJuXFxcIik7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDI1OlxcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlX2Nhc2hpZXIuZXJyb3IpIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzE7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvci5oYW5kbGVDYXNoaWVyRXJyb3IocmVzcG9uc2VfY2FzaGllci5lcnJvcik7XFxuICAgICAgICAgICAgICAgIHNldFNlc3Npb25UaW1lb3V0KHRydWUpO1xcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXRDYXNoaWVyVXJsKCk7XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNjtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDMxOlxcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzM7XFxuICAgICAgICAgICAgICAgIHJldHVybiBjaGVja0lmcmFtZUxvYWRlZCgpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAzMzpcXG4gICAgICAgICAgICAgICAgc2V0SWZyYW1lVXJsKHJlc3BvbnNlX2Nhc2hpZXIuY2FzaGllcik7XFxuICAgICAgICAgICAgICAgIHNldFNlc3Npb25UaW1lb3V0KGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dENhc2hpZXJVcmwoKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMzY6XFxuICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAzNzpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTtcXG4gICAgICB9KSk7XFxuXFxuICAgICAgZnVuY3Rpb24gb25Nb3VudERlcG9zaXQoKSB7XFxuICAgICAgICByZXR1cm4gX29uTW91bnREZXBvc2l0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBvbk1vdW50RGVwb3NpdDtcXG4gICAgfSgpXFxuICB9LCB7XFxuICAgIGtleTogXFxcImlzX2RlcG9zaXRfbG9ja2VkXFxcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgdmFyIF90aGlzJHJvb3Rfc3RvcmUkY2xpZSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQsXFxuICAgICAgICAgIGlzX2F1dGhlbnRpY2F0aW9uX25lZWRlZCA9IF90aGlzJHJvb3Rfc3RvcmUkY2xpZS5pc19hdXRoZW50aWNhdGlvbl9uZWVkZWQsXFxuICAgICAgICAgIGlzX3RuY19uZWVkZWQgPSBfdGhpcyRyb290X3N0b3JlJGNsaWUuaXNfdG5jX25lZWRlZCxcXG4gICAgICAgICAgaXNfZmluYW5jaWFsX2FjY291bnQgPSBfdGhpcyRyb290X3N0b3JlJGNsaWUuaXNfZmluYW5jaWFsX2FjY291bnQsXFxuICAgICAgICAgIGlzX2ZpbmFuY2lhbF9pbmZvcm1hdGlvbl9pbmNvbXBsZXRlID0gX3RoaXMkcm9vdF9zdG9yZSRjbGllLmlzX2ZpbmFuY2lhbF9pbmZvcm1hdGlvbl9pbmNvbXBsZXRlLFxcbiAgICAgICAgICBpc190cmFkaW5nX2V4cGVyaWVuY2VfaW5jb21wbGV0ZSA9IF90aGlzJHJvb3Rfc3RvcmUkY2xpZS5pc190cmFkaW5nX2V4cGVyaWVuY2VfaW5jb21wbGV0ZSxcXG4gICAgICAgICAgYWNjb3VudF9zdGF0dXMgPSBfdGhpcyRyb290X3N0b3JlJGNsaWUuYWNjb3VudF9zdGF0dXMsXFxuICAgICAgICAgIGlzX2V1ID0gX3RoaXMkcm9vdF9zdG9yZSRjbGllLmlzX2V1LFxcbiAgICAgICAgICBtdDVfbG9naW5fbGlzdCA9IF90aGlzJHJvb3Rfc3RvcmUkY2xpZS5tdDVfbG9naW5fbGlzdCxcXG4gICAgICAgICAgaXNfZGVwb3NpdF9sb2NrID0gX3RoaXMkcm9vdF9zdG9yZSRjbGllLmlzX2RlcG9zaXRfbG9jaztcXG4gICAgICBpZiAoIShhY2NvdW50X3N0YXR1cyAhPT0gbnVsbCAmJiBhY2NvdW50X3N0YXR1cyAhPT0gdm9pZCAwICYmIGFjY291bnRfc3RhdHVzLnN0YXR1cykpIHJldHVybiBmYWxzZTtcXG4gICAgICB2YXIgbmVlZF9hdXRoZW50aWNhdGlvbiA9IHRoaXMuZXJyb3IuaXNfYXNrX2F1dGhlbnRpY2F0aW9uIHx8IGlzX2F1dGhlbnRpY2F0aW9uX25lZWRlZCAmJiBpc19ldTtcXG4gICAgICB2YXIgbmVlZF9maW5hbmNpYWxfYXNzZXNzbWVudCA9IGlzX2ZpbmFuY2lhbF9hY2NvdW50ICYmIChpc19maW5hbmNpYWxfaW5mb3JtYXRpb25faW5jb21wbGV0ZSB8fCBpc190cmFkaW5nX2V4cGVyaWVuY2VfaW5jb21wbGV0ZSk7IC8vIENSIGNhbiBkZXBvc2l0IHdpdGhvdXQgYWNjZXB0aW5nIGxhdGVzdCB0bmMgZXhjZXB0IHRob3NlIHdpdGggRmluYW5jaWFsIFNUUFxcblxcbiAgICAgIHZhciBuZWVkX3RuYyA9IChpc19ldSB8fCBtdDVfbG9naW5fbGlzdC5zb21lKGZ1bmN0aW9uIChpdGVtKSB7XFxuICAgICAgICByZXR1cm4gaXRlbS5hY2NvdW50X3R5cGUgPT09ICdyZWFsJyAmJiBpdGVtLnN1Yl9hY2NvdW50X3R5cGUgPT09ICdmaW5hbmNpYWxfc3RwJztcXG4gICAgICB9KSkgJiYgaXNfdG5jX25lZWRlZDtcXG4gICAgICByZXR1cm4gaXNfZGVwb3NpdF9sb2NrIHx8IG5lZWRfYXV0aGVudGljYXRpb24gfHwgbmVlZF90bmMgfHwgbmVlZF9maW5hbmNpYWxfYXNzZXNzbWVudCB8fCB0aGlzLmVycm9yLmlzX2Fza19maW5hbmNpYWxfcmlza19hcHByb3ZhbDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzdWJtaXRGdW5kc1Byb3RlY3Rpb25cXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3VibWl0RnVuZHNQcm90ZWN0aW9uKCkge1xcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgICAgdGhpcy5XUy5zZW5kKHtcXG4gICAgICAgIHVrZ2NfZnVuZHNfcHJvdGVjdGlvbjogMSxcXG4gICAgICAgIHRuY19hcHByb3ZhbDogMVxcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XFxuICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcXG4gICAgICAgICAgX3RoaXMuZXJyb3Iuc2V0TWVzc2FnZShyZXNwb25zZS5lcnJvci5tZXNzYWdlKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gRGVwb3NpdFN0b3JlO1xcbn0oKSwgKGRlcG9zaXRfc3RvcmVfZGVzY3JpcHRvciA9IGRlcG9zaXRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGRlcG9zaXRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY29udGFpbmVyXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBjb25zdGFudHMuY29udGFpbmVycy5kZXBvc2l0O1xcbiAgfVxcbn0pLCBkZXBvc2l0X3N0b3JlX2Rlc2NyaXB0b3IyID0gZGVwb3NpdF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZGVwb3NpdF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJlcnJvclxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gbmV3IEVycm9yU3RvcmUoKTtcXG4gIH1cXG59KSwgZGVwb3NpdF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZGVwb3NpdF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbk1vdW50RGVwb3NpdFxcXCIsIFtkZXBvc2l0X3N0b3JlX2RlY10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZGVwb3NpdF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbk1vdW50RGVwb3NpdFxcXCIpLCBkZXBvc2l0X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGRlcG9zaXRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGRlcG9zaXRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfZGVwb3NpdF9sb2NrZWRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8uY29tcHV0ZWRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRlcG9zaXRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfZGVwb3NpdF9sb2NrZWRcXFwiKSwgZGVwb3NpdF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBkZXBvc2l0X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihkZXBvc2l0X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInN1Ym1pdEZ1bmRzUHJvdGVjdGlvblxcXCIsIFtkZXBvc2l0X3N0b3JlX2RlYzJdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRlcG9zaXRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic3VibWl0RnVuZHNQcm90ZWN0aW9uXFxcIiksIGRlcG9zaXRfc3RvcmVfY2xhc3MucHJvdG90eXBlKSksIGRlcG9zaXRfc3RvcmVfY2xhc3MpKTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9TdG9yZXMvZXJyb3ItZGlhbG9nLXN0b3JlLmpzXFxudmFyIGVycm9yX2RpYWxvZ19zdG9yZV9kZWMsIGVycm9yX2RpYWxvZ19zdG9yZV9kZWMyLCBlcnJvcl9kaWFsb2dfc3RvcmVfY2xhc3MsIGVycm9yX2RpYWxvZ19zdG9yZV9kZXNjcmlwdG9yLCBlcnJvcl9kaWFsb2dfc3RvcmVfZGVzY3JpcHRvcjI7XFxuXFxuZnVuY3Rpb24gZXJyb3JfZGlhbG9nX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkgeyBpZiAoIWRlc2NyaXB0b3IpIHJldHVybjsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHsgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLCBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLCB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSwgdmFsdWU6IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDAgfSk7IH1cXG5cXG5mdW5jdGlvbiBlcnJvcl9kaWFsb2dfc3RvcmVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblxcXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBlcnJvcl9kaWFsb2dfc3RvcmVfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcXFwidmFsdWVcXFwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIGVycm9yX2RpYWxvZ19zdG9yZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGVycm9yX2RpYWxvZ19zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZXJyb3JfZGlhbG9nX3N0b3JlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gZXJyb3JfZGlhbG9nX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7IHZhciBkZXNjID0ge307IE9iamVjdC5rZXlzKGRlc2NyaXB0b3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBkZXNjW2tleV0gPSBkZXNjcmlwdG9yW2tleV07IH0pOyBkZXNjLmVudW1lcmFibGUgPSAhIWRlc2MuZW51bWVyYWJsZTsgZGVzYy5jb25maWd1cmFibGUgPSAhIWRlc2MuY29uZmlndXJhYmxlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjIHx8IGRlc2MuaW5pdGlhbGl6ZXIpIHsgZGVzYy53cml0YWJsZSA9IHRydWU7IH0gZGVzYyA9IGRlY29yYXRvcnMuc2xpY2UoKS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChkZXNjLCBkZWNvcmF0b3IpIHsgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5LCBkZXNjKSB8fCBkZXNjOyB9LCBkZXNjKTsgaWYgKGNvbnRleHQgJiYgZGVzYy5pbml0aWFsaXplciAhPT0gdm9pZCAwKSB7IGRlc2MudmFsdWUgPSBkZXNjLmluaXRpYWxpemVyID8gZGVzYy5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwOyBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkOyB9IGlmIChkZXNjLmluaXRpYWxpemVyID09PSB2b2lkIDApIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2MpOyBkZXNjID0gbnVsbDsgfSByZXR1cm4gZGVzYzsgfVxcblxcbmZ1bmN0aW9uIGVycm9yX2RpYWxvZ19zdG9yZV9pbml0aWFsaXplcldhcm5pbmdIZWxwZXIoZGVzY3JpcHRvciwgY29udGV4dCkgeyB0aHJvdyBuZXcgRXJyb3IoJ0RlY29yYXRpbmcgY2xhc3MgcHJvcGVydHkgZmFpbGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgJyArICdwcm9wb3NhbC1jbGFzcy1wcm9wZXJ0aWVzIGlzIGVuYWJsZWQgYW5kIHJ1bnMgYWZ0ZXIgdGhlIGRlY29yYXRvcnMgdHJhbnNmb3JtLicpOyB9XFxuXFxuXFxudmFyIEVycm9yRGlhbG9nU3RvcmUgPSAoZXJyb3JfZGlhbG9nX3N0b3JlX2RlYyA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgZXJyb3JfZGlhbG9nX3N0b3JlX2RlYzIgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIChlcnJvcl9kaWFsb2dfc3RvcmVfY2xhc3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xcbiAgZnVuY3Rpb24gRXJyb3JEaWFsb2dTdG9yZSgpIHtcXG4gICAgZXJyb3JfZGlhbG9nX3N0b3JlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVycm9yRGlhbG9nU3RvcmUpO1xcblxcbiAgICBlcnJvcl9kaWFsb2dfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiZXJyb3JfbWVzc2FnZVxcXCIsIGVycm9yX2RpYWxvZ19zdG9yZV9kZXNjcmlwdG9yLCB0aGlzKTtcXG5cXG4gICAgZXJyb3JfZGlhbG9nX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcInNob3VsZF9zaG93XFxcIiwgZXJyb3JfZGlhbG9nX3N0b3JlX2Rlc2NyaXB0b3IyLCB0aGlzKTtcXG4gIH1cXG5cXG4gIGVycm9yX2RpYWxvZ19zdG9yZV9jcmVhdGVDbGFzcyhFcnJvckRpYWxvZ1N0b3JlLCBbe1xcbiAgICBrZXk6IFxcXCJzZXRTaG91bGRTaG93XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNob3VsZFNob3codmFsdWUpIHtcXG4gICAgICB0aGlzLnNob3VsZF9zaG93ID0gdmFsdWU7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0RXJyb3JNZXNzYWdlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEVycm9yTWVzc2FnZShtZXNzYWdlKSB7XFxuICAgICAgdGhpcy5lcnJvcl9tZXNzYWdlID0gbWVzc2FnZTtcXG4gICAgICB0aGlzLnNldFNob3VsZFNob3codHJ1ZSk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBFcnJvckRpYWxvZ1N0b3JlO1xcbn0oKSwgKGVycm9yX2RpYWxvZ19zdG9yZV9kZXNjcmlwdG9yID0gZXJyb3JfZGlhbG9nX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihlcnJvcl9kaWFsb2dfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZXJyb3JfbWVzc2FnZVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gJyc7XFxuICB9XFxufSksIGVycm9yX2RpYWxvZ19zdG9yZV9kZXNjcmlwdG9yMiA9IGVycm9yX2RpYWxvZ19zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZXJyb3JfZGlhbG9nX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNob3VsZF9zaG93XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgZXJyb3JfZGlhbG9nX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihlcnJvcl9kaWFsb2dfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0U2hvdWxkU2hvd1xcXCIsIFtlcnJvcl9kaWFsb2dfc3RvcmVfZGVjXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlcnJvcl9kaWFsb2dfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0U2hvdWxkU2hvd1xcXCIpLCBlcnJvcl9kaWFsb2dfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZXJyb3JfZGlhbG9nX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihlcnJvcl9kaWFsb2dfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0RXJyb3JNZXNzYWdlXFxcIiwgW2Vycm9yX2RpYWxvZ19zdG9yZV9kZWMyXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlcnJvcl9kaWFsb2dfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0RXJyb3JNZXNzYWdlXFxcIiksIGVycm9yX2RpYWxvZ19zdG9yZV9jbGFzcy5wcm90b3R5cGUpKSwgZXJyb3JfZGlhbG9nX3N0b3JlX2NsYXNzKSk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1xcbnZhciBwcm9wX3R5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcXFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcXFwiKTtcXG52YXIgcHJvcF90eXBlc19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihwcm9wX3R5cGVzKTtcXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFxcXCJAZGVyaXYvY29tcG9uZW50c1xcXCJcXG52YXIgY29tcG9uZW50c18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFxcXCJAZGVyaXYvY29tcG9uZW50c1xcXCIpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL0NvbnRhaW5lcnMvY2FzaGllci1ub3RpZmljYXRpb25zLmpzeFxcblxcblxcblxcblxcbnZhciBDYXNoaWVyTm90aWZpY2F0aW9ucyA9IGZ1bmN0aW9uIENhc2hpZXJOb3RpZmljYXRpb25zKF9yZWYpIHtcXG4gIHZhciBwMnBfbm90aWZpY2F0aW9uX2NvdW50ID0gX3JlZi5wMnBfbm90aWZpY2F0aW9uX2NvdW50O1xcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudCgoZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpKS5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNfLkljb24sIHtcXG4gICAgaWNvbjogXFxcIkljQ2FzaGllclxcXCIsXFxuICAgIGNsYXNzTmFtZTogXFxcImhlYWRlcl9faWNvblxcXCJcXG4gIH0pLCAhIXAycF9ub3RpZmljYXRpb25fY291bnQgJiYgLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNfLkNvdW50ZXIsIHtcXG4gICAgY2xhc3NOYW1lOiBcXFwiY2FzaGllcl9fY291bnRlclxcXCIsXFxuICAgIGNvdW50OiBwMnBfbm90aWZpY2F0aW9uX2NvdW50XFxuICB9KSk7XFxufTtcXG5cXG5DYXNoaWVyTm90aWZpY2F0aW9ucy5wcm9wVHlwZXMgPSB7XFxuICBwMnBfbm90aWZpY2F0aW9uX2NvdW50OiAocHJvcF90eXBlc19kZWZhdWx0KCkpLm51bWJlclxcbn07XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBjYXNoaWVyX25vdGlmaWNhdGlvbnMgPSAoQ2FzaGllck5vdGlmaWNhdGlvbnMpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL19jb21tb24vdXRpbGl0eS5qc1xcbmZ1bmN0aW9uIHV0aWxpdHlfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblxcXCIpOyB9IH1cXG5cXG5cXG5cXG52YXIgdGVtcGxhdGUgPSBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIGNvbnRlbnQpIHtcXG4gIHZhciB0b19yZXBsYWNlID0gY29udGVudDtcXG5cXG4gIGlmIChjb250ZW50ICYmICFBcnJheS5pc0FycmF5KGNvbnRlbnQpKSB7XFxuICAgIHRvX3JlcGxhY2UgPSBbY29udGVudF07XFxuICB9XFxuXFxuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcXFxbXyhcXFxcZCspXS9nLCBmdW5jdGlvbiAocywgaW5kZXgpIHtcXG4gICAgcmV0dXJuIHRvX3JlcGxhY2VbK2luZGV4IC0gMV07XFxuICB9KTtcXG59O1xcbi8qKlxcbiAqIENyZWF0ZXMgYSBET00gZWxlbWVudCBhbmQgYWRkcyBhbnkgYXR0cmlidXRlcyB0byBpdC5cXG4gKlxcbiAqIEBwYXJhbSB7U3RyaW5nfSB0YWdfbmFtZTogdGhlIHRhZyB0byBjcmVhdGUsIGUuZy4gJ2RpdicsICdhJywgZXRjXFxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXM6IGFsbCB0aGUgYXR0cmlidXRlcyB0byBhc3NpZ24sIGUuZy4geyBpZDogJy4uLicsIGNsYXNzOiAnLi4uJywgaHRtbDogJy4uLicsIC4uLiB9XFxuICogQHJldHVybiB0aGUgY3JlYXRlZCBET00gZWxlbWVudFxcbiAqL1xcblxcblxcbnZhciBjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWdfbmFtZSkge1xcbiAgdmFyIGF0dHJpYnV0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdfbmFtZSk7XFxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XFxuICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbYXR0cl07XFxuXFxuICAgIGlmIChhdHRyID09PSAndGV4dCcpIHtcXG4gICAgICBlbC50ZXh0Q29udGVudCA9IHZhbHVlO1xcbiAgICB9IGVsc2UgaWYgKGF0dHIgPT09ICdodG1sJykge1xcbiAgICAgIGVsLmh0bWwodmFsdWUpO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSk7XFxuICAgIH1cXG4gIH0pO1xcbiAgcmV0dXJuIGVsO1xcbn07XFxuXFxudmFyIHN0YXRpY19oYXNoO1xcblxcbnZhciBnZXRTdGF0aWNIYXNoID0gZnVuY3Rpb24gZ2V0U3RhdGljSGFzaCgpIHtcXG4gIHN0YXRpY19oYXNoID0gc3RhdGljX2hhc2ggfHwgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFtzcmMqPVxcXCJtYWluXFxcIl0nKS5nZXRBdHRyaWJ1dGUoJ3NyYycpIHx8ICcnKS5zcGxpdCgnLicpWzFdO1xcbiAgcmV0dXJuIHN0YXRpY19oYXNoO1xcbn07XFxuXFxudmFyIFByb21pc2VDbGFzcyA9IGZ1bmN0aW9uIFByb21pc2VDbGFzcygpIHtcXG4gIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICB1dGlsaXR5X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb21pc2VDbGFzcyk7XFxuXFxuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XFxuICAgIF90aGlzLnJlamVjdCA9IHJlamVjdDtcXG4gICAgX3RoaXMucmVzb2x2ZSA9IHJlc29sdmU7XFxuICB9KTtcXG59O1xcblxcbnZhciBjb3B5VG9DbGlwYm9hcmQgPSBmdW5jdGlvbiBjb3B5VG9DbGlwYm9hcmQodGV4dCkge1xcbiAgdmFyIHRleHRGaWVsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XFxuICB0ZXh0RmllbGQuaW5uZXJUZXh0ID0gdGV4dDtcXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGV4dEZpZWxkKTtcXG4gIHRleHRGaWVsZC5zZWxlY3QoKTtcXG4gIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XFxuICB0ZXh0RmllbGQucmVtb3ZlKCk7XFxufTsgLy8gZXUgY291bnRyaWVzIHRvIHN1cHBvcnRcXG5cXG5cXG52YXIgZXVfY291bnRyaWVzID0gKC8qIHVudXNlZCBwdXJlIGV4cHJlc3Npb24gb3Igc3VwZXIgKi8gbnVsbCAmJiAoWydpdCcsICdkZScsICdmcicsICdsdScsICdncicsICdtZicsICdlcycsICdzaycsICdsdCcsICdubCcsICdhdCcsICdiZycsICdzaScsICdjeScsICdiZScsICdybycsICdocicsICdwdCcsICdwbCcsICdsdicsICdlZScsICdjeicsICdmaScsICdodScsICdkaycsICdzZScsICdpZScsICdpbScsICdnYicsICdtdCddKSk7IC8vIGNoZWNrIGlmIGNsaWVudCBpcyBmcm9tIEVVXFxuXFxudmFyIGlzRXVDb3VudHJ5ID0gZnVuY3Rpb24gaXNFdUNvdW50cnkoY291bnRyeSkge1xcbiAgcmV0dXJuIGV1X2NvdW50cmllcy5pbmNsdWRlcyhjb3VudHJ5KTtcXG59OyAvLyBjaGVjayBpZiBtbHQgb3IgZHh0cmFkZSBmb3IgYWNjb3VudCB0ZXh0XFxuXFxuXFxudmFyIGdldEFjY291bnRUZXh0ID0gZnVuY3Rpb24gZ2V0QWNjb3VudFRleHQoYWNjb3VudCkge1xcbiAgdmFyIGFjY291bnRfdGV4dCA9ICcnO1xcblxcbiAgaWYgKGFjY291bnQuaXNfZHh0cmFkZSB8fCBhY2NvdW50LmlzX210KSB7XFxuICAgIGFjY291bnRfdGV4dCA9IGFjY291bnQudGV4dDtcXG4gIH0gZWxzZSB7XFxuICAgIGFjY291bnRfdGV4dCA9IGdldEN1cnJlbmN5RGlzcGxheUNvZGUoYWNjb3VudC50ZXh0KTtcXG4gIH1cXG5cXG4gIHJldHVybiBhY2NvdW50X3RleHQ7XFxufTtcXG5cXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9VdGlscy9WYWxpZGF0b3IvZXJyb3JzLmpzXFxuZnVuY3Rpb24gZXJyb3JzX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFxcXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cXFwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gZXJyb3JzX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXFxcInZhbHVlXFxcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBlcnJvcnNfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBlcnJvcnNfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGVycm9yc19kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbnZhciBFcnJvcnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xcbiAgZnVuY3Rpb24gRXJyb3JzKCkge1xcbiAgICBlcnJvcnNfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXJyb3JzKTtcXG5cXG4gICAgdGhpcy5lcnJvcnMgPSB7fTtcXG4gIH1cXG5cXG4gIGVycm9yc19jcmVhdGVDbGFzcyhFcnJvcnMsIFt7XFxuICAgIGtleTogXFxcImFkZFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoYXR0cmlidXRlLCBtZXNzYWdlKSB7XFxuICAgICAgaWYgKCF0aGlzLmhhcyhhdHRyaWJ1dGUpKSB7XFxuICAgICAgICB0aGlzLmVycm9yc1thdHRyaWJ1dGVdID0gW107XFxuICAgICAgfVxcblxcbiAgICAgIGlmICh0aGlzLmVycm9yc1thdHRyaWJ1dGVdLmluZGV4T2YobWVzc2FnZSkgPT09IC0xKSB7XFxuICAgICAgICB0aGlzLmVycm9yc1thdHRyaWJ1dGVdLnB1c2gobWVzc2FnZSk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImFsbFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhbGwoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuZXJyb3JzO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImZpcnN0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpcnN0KGF0dHJpYnV0ZSkge1xcbiAgICAgIGlmICh0aGlzLmhhcyhhdHRyaWJ1dGUpKSB7XFxuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcnNbYXR0cmlidXRlXVswXTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIG51bGw7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZ2V0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldChhdHRyaWJ1dGUpIHtcXG4gICAgICBpZiAodGhpcy5oYXMoYXR0cmlidXRlKSkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JzW2F0dHJpYnV0ZV07XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBbXTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJoYXNcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzKGF0dHJpYnV0ZSkge1xcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5lcnJvcnMsIGF0dHJpYnV0ZSk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBFcnJvcnM7XFxufSgpO1xcblxcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgZXJyb3JzID0gKEVycm9ycyk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vVXRpbHMvVmFsaWRhdG9yL3ZhbGlkYXRvci5qc1xcbmZ1bmN0aW9uIHZhbGlkYXRvcl9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcXFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXFxcIik7IH0gfVxcblxcbmZ1bmN0aW9uIHZhbGlkYXRvcl9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFxcXCJ2YWx1ZVxcXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gdmFsaWRhdG9yX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgdmFsaWRhdG9yX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSB2YWxpZGF0b3JfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5cXG5cXG5cXG5cXG52YXIgVmFsaWRhdG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIFZhbGlkYXRvcihpbnB1dCwgcnVsZXMpIHtcXG4gICAgdmFyIHN0b3JlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBudWxsO1xcblxcbiAgICB2YWxpZGF0b3JfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmFsaWRhdG9yKTtcXG5cXG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xcbiAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XFxuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcXG4gICAgdGhpcy5lcnJvcnMgPSBuZXcgZXJyb3JzKCk7XFxuICAgIHRoaXMuZXJyb3JfY291bnQgPSAwO1xcbiAgfVxcbiAgLyoqXFxuICAgKiBBZGQgZmFpbHVyZSBhbmQgZXJyb3IgbWVzc2FnZSBmb3IgZ2l2ZW4gcnVsZVxcbiAgICpcXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBydWxlXFxuICAgKi9cXG5cXG5cXG4gIHZhbGlkYXRvcl9jcmVhdGVDbGFzcyhWYWxpZGF0b3IsIFt7XFxuICAgIGtleTogXFxcImFkZEZhaWx1cmVcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRmFpbHVyZShhdHRyaWJ1dGUsIHJ1bGUsIGVycm9yX21lc3NhZ2UpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IGVycm9yX21lc3NhZ2UgfHwgcnVsZS5vcHRpb25zLm1lc3NhZ2UgfHwgKDAsc2hhcmVkXy5nZXRQcmVCdWlsZERWUnMpKClbcnVsZS5uYW1lXS5tZXNzYWdlKCk7XFxuXFxuICAgICAgaWYgKHJ1bGUubmFtZSA9PT0gJ2xlbmd0aCcpIHtcXG4gICAgICAgIG1lc3NhZ2UgPSB0ZW1wbGF0ZShtZXNzYWdlLCBbcnVsZS5vcHRpb25zLm1pbiA9PT0gcnVsZS5vcHRpb25zLm1heCA/IHJ1bGUub3B0aW9ucy5taW4gOiBcXFwiXFxcIi5jb25jYXQocnVsZS5vcHRpb25zLm1pbiwgXFxcIi1cXFwiKS5jb25jYXQocnVsZS5vcHRpb25zLm1heCldKTtcXG4gICAgICB9IGVsc2UgaWYgKHJ1bGUubmFtZSA9PT0gJ21pbicpIHtcXG4gICAgICAgIG1lc3NhZ2UgPSB0ZW1wbGF0ZShtZXNzYWdlLCBbcnVsZS5vcHRpb25zLm1pbl0pO1xcbiAgICAgIH0gZWxzZSBpZiAocnVsZS5uYW1lID09PSAnbm90X2VxdWFsJykge1xcbiAgICAgICAgbWVzc2FnZSA9IHRlbXBsYXRlKG1lc3NhZ2UsIFtydWxlLm9wdGlvbnMubmFtZTEsIHJ1bGUub3B0aW9ucy5uYW1lMl0pO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLmVycm9ycy5hZGQoYXR0cmlidXRlLCBtZXNzYWdlKTtcXG4gICAgICB0aGlzLmVycm9yX2NvdW50Kys7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIFJ1bnMgdmFsaWRhdG9yXFxuICAgICAqXFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgaXQgcGFzc2VzOyB0cnVlID0gcGFzc2VzLCBmYWxzZSA9IGZhaWxzXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJjaGVja1xcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVjaygpIHtcXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xcblxcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuaW5wdXQpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX3RoaXMucnVsZXMsIGF0dHJpYnV0ZSkpIHtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgX3RoaXMucnVsZXNbYXR0cmlidXRlXS5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XFxuICAgICAgICAgIHZhciBydWxlT2JqZWN0ID0gVmFsaWRhdG9yLmdldFJ1bGVPYmplY3QocnVsZSk7XFxuXFxuICAgICAgICAgIGlmICghcnVsZU9iamVjdC52YWxpZGF0b3IgJiYgdHlwZW9mIHJ1bGVPYmplY3QudmFsaWRhdG9yICE9PSAnZnVuY3Rpb24nKSB7XFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGlmIChydWxlT2JqZWN0Lm9wdGlvbnMuY29uZGl0aW9uICYmICFydWxlT2JqZWN0Lm9wdGlvbnMuY29uZGl0aW9uKF90aGlzLnN0b3JlKSkge1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBpZiAoX3RoaXMuaW5wdXRbYXR0cmlidXRlXSA9PT0gJycgJiYgcnVsZU9iamVjdC5uYW1lICE9PSAncmVxJykge1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICB2YXIgaXNfdmFsaWQsIGVycm9yX21lc3NhZ2U7XFxuXFxuICAgICAgICAgIGlmIChydWxlT2JqZWN0Lm5hbWUgPT09ICdudW1iZXInKSB7XFxuICAgICAgICAgICAgdmFyIF9ydWxlT2JqZWN0JHZhbGlkYXRvciA9IHJ1bGVPYmplY3QudmFsaWRhdG9yKF90aGlzLmlucHV0W2F0dHJpYnV0ZV0sIHJ1bGVPYmplY3Qub3B0aW9ucywgX3RoaXMuc3RvcmUsIF90aGlzLmlucHV0KSxcXG4gICAgICAgICAgICAgICAgaXNfb2sgPSBfcnVsZU9iamVjdCR2YWxpZGF0b3IuaXNfb2ssXFxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBfcnVsZU9iamVjdCR2YWxpZGF0b3IubWVzc2FnZTtcXG5cXG4gICAgICAgICAgICBpc192YWxpZCA9IGlzX29rO1xcbiAgICAgICAgICAgIGVycm9yX21lc3NhZ2UgPSBtZXNzYWdlO1xcbiAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGlzX3ZhbGlkID0gcnVsZU9iamVjdC52YWxpZGF0b3IoX3RoaXMuaW5wdXRbYXR0cmlidXRlXSwgcnVsZU9iamVjdC5vcHRpb25zLCBfdGhpcy5zdG9yZSwgX3RoaXMuaW5wdXQpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGlmICghaXNfdmFsaWQpIHtcXG4gICAgICAgICAgICBfdGhpcy5hZGRGYWlsdXJlKGF0dHJpYnV0ZSwgcnVsZU9iamVjdCwgZXJyb3JfbWVzc2FnZSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiAhdGhpcy5lcnJvcl9jb3VudDtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogRGV0ZXJtaW5lIGlmIHZhbGlkYXRpb24gcGFzc2VzXFxuICAgICAqXFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJpc1Bhc3NlZFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1Bhc3NlZCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5jaGVjaygpO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBDb252ZXJ0cyB0aGUgcnVsZSBhcnJheSB0byBhbiBvYmplY3RcXG4gICAgICpcXG4gICAgICogQHBhcmFtIHthcnJheX0gcnVsZVxcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XFxuICAgICAqL1xcblxcbiAgfV0sIFt7XFxuICAgIGtleTogXFxcImdldFJ1bGVPYmplY3RcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UnVsZU9iamVjdChydWxlKSB7XFxuICAgICAgdmFyIGlzX3J1bGVfc3RyaW5nID0gdHlwZW9mIHJ1bGUgPT09ICdzdHJpbmcnO1xcbiAgICAgIHZhciBydWxlX29iamVjdCA9IHtcXG4gICAgICAgIG5hbWU6IGlzX3J1bGVfc3RyaW5nID8gcnVsZSA6IHJ1bGVbMF0sXFxuICAgICAgICBvcHRpb25zOiBpc19ydWxlX3N0cmluZyA/IHt9IDogcnVsZVsxXSB8fCB7fVxcbiAgICAgIH07XFxuICAgICAgcnVsZV9vYmplY3QudmFsaWRhdG9yID0gcnVsZV9vYmplY3QubmFtZSA9PT0gJ2N1c3RvbScgPyBydWxlWzFdLmZ1bmMgOiAoMCxzaGFyZWRfLmdldFByZUJ1aWxkRFZScykoKVtydWxlX29iamVjdC5uYW1lXS5mdW5jO1xcbiAgICAgIHJldHVybiBydWxlX29iamVjdDtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIFZhbGlkYXRvcjtcXG59KCk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBWYWxpZGF0b3JfdmFsaWRhdG9yID0gKFZhbGlkYXRvcik7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vVXRpbHMvVmFsaWRhdG9yL2luZGV4LmpzXFxuXFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vU3RvcmVzL2Jhc2Utc3RvcmUuanNcXG52YXIgYmFzZV9zdG9yZV9kZWMsIGJhc2Vfc3RvcmVfZGVjMiwgYmFzZV9zdG9yZV9kZWMzLCBiYXNlX3N0b3JlX2RlYzQsIGJhc2Vfc3RvcmVfZGVjNSwgYmFzZV9zdG9yZV9kZWM2LCBiYXNlX3N0b3JlX2RlYzcsIGJhc2Vfc3RvcmVfZGVjOCwgYmFzZV9zdG9yZV9kZWM5LCBiYXNlX3N0b3JlX2RlYzEwLCBiYXNlX3N0b3JlX2RlYzExLCBiYXNlX3N0b3JlX2RlYzEyLCBiYXNlX3N0b3JlX2RlYzEzLCBiYXNlX3N0b3JlX2RlYzE0LCBiYXNlX3N0b3JlX2RlYzE1LCBiYXNlX3N0b3JlX2RlYzE2LCBiYXNlX3N0b3JlX2NsYXNzLCBiYXNlX3N0b3JlX2Rlc2NyaXB0b3IsIGJhc2Vfc3RvcmVfZGVzY3JpcHRvcjIsIGJhc2Vfc3RvcmVfZGVzY3JpcHRvcjMsIF9jbGFzczIsIF90ZW1wO1xcblxcbmZ1bmN0aW9uIGJhc2Vfc3RvcmVfYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxcblxcbmZ1bmN0aW9uIGJhc2Vfc3RvcmVfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYmFzZV9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJuZXh0XFxcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYmFzZV9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJ0aHJvd1xcXCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cXG5cXG5mdW5jdGlvbiBiYXNlX3N0b3JlX293bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHsgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyB9IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxcblxcbmZ1bmN0aW9uIGJhc2Vfc3RvcmVfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IGJhc2Vfc3RvcmVfb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IGJhc2Vfc3RvcmVfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgYmFzZV9zdG9yZV9vd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxcblxcbmZ1bmN0aW9uIGJhc2Vfc3RvcmVfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxcblxcbmZ1bmN0aW9uIGJhc2Vfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7IGlmICghZGVzY3JpcHRvcikgcmV0dXJuOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgeyBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGUsIGNvbmZpZ3VyYWJsZTogZGVzY3JpcHRvci5jb25maWd1cmFibGUsIHdyaXRhYmxlOiBkZXNjcmlwdG9yLndyaXRhYmxlLCB2YWx1ZTogZGVzY3JpcHRvci5pbml0aWFsaXplciA/IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMCB9KTsgfVxcblxcbmZ1bmN0aW9uIGJhc2Vfc3RvcmVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblxcXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBiYXNlX3N0b3JlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXFxcInZhbHVlXFxcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBiYXNlX3N0b3JlX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgYmFzZV9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgYmFzZV9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIGJhc2Vfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHksIGRlY29yYXRvcnMsIGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgdmFyIGRlc2MgPSB7fTsgT2JqZWN0LmtleXMoZGVzY3JpcHRvcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IGRlc2Nba2V5XSA9IGRlc2NyaXB0b3Jba2V5XTsgfSk7IGRlc2MuZW51bWVyYWJsZSA9ICEhZGVzYy5lbnVtZXJhYmxlOyBkZXNjLmNvbmZpZ3VyYWJsZSA9ICEhZGVzYy5jb25maWd1cmFibGU7IGlmICgndmFsdWUnIGluIGRlc2MgfHwgZGVzYy5pbml0aWFsaXplcikgeyBkZXNjLndyaXRhYmxlID0gdHJ1ZTsgfSBkZXNjID0gZGVjb3JhdG9ycy5zbGljZSgpLnJldmVyc2UoKS5yZWR1Y2UoZnVuY3Rpb24gKGRlc2MsIGRlY29yYXRvcikgeyByZXR1cm4gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHksIGRlc2MpIHx8IGRlc2M7IH0sIGRlc2MpOyBpZiAoY29udGV4dCAmJiBkZXNjLmluaXRpYWxpemVyICE9PSB2b2lkIDApIHsgZGVzYy52YWx1ZSA9IGRlc2MuaW5pdGlhbGl6ZXIgPyBkZXNjLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDA7IGRlc2MuaW5pdGlhbGl6ZXIgPSB1bmRlZmluZWQ7IH0gaWYgKGRlc2MuaW5pdGlhbGl6ZXIgPT09IHZvaWQgMCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYyk7IGRlc2MgPSBudWxsOyB9IHJldHVybiBkZXNjOyB9XFxuXFxuZnVuY3Rpb24gYmFzZV9zdG9yZV9pbml0aWFsaXplcldhcm5pbmdIZWxwZXIoZGVzY3JpcHRvciwgY29udGV4dCkgeyB0aHJvdyBuZXcgRXJyb3IoJ0RlY29yYXRpbmcgY2xhc3MgcHJvcGVydHkgZmFpbGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgJyArICdwcm9wb3NhbC1jbGFzcy1wcm9wZXJ0aWVzIGlzIGVuYWJsZWQgYW5kIHJ1bnMgYWZ0ZXIgdGhlIGRlY29yYXRvcnMgdHJhbnNmb3JtLicpOyB9XFxuXFxuXFxuXFxuXFxuLyoqXFxuICogQmFzZVN0b3JlIGNsYXNzIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBhbGwgZGVmaW5lZCBzdG9yZXMgaW4gdGhlIGFwcGxpY2F0aW9uLiBJdCBoYW5kbGVzIHNvbWUgc3R1ZmYgc3VjaCBhczpcXG4gKiAgMS4gQ3JlYXRpbmcgc25hcHNob3Qgb2JqZWN0IGZyb20gdGhlIHN0b3JlLlxcbiAqICAyLiBTYXZpbmcgdGhlIHN0b3JlJ3Mgc25hcHNob3QgaW4gbG9jYWwvc2Vzc2lvbiBzdG9yYWdlIGFuZCBrZWVwaW5nIHRoZW0gaW4gc3luYy5cXG4gKi9cXG5cXG52YXIgQmFzZVN0b3JlID0gKGJhc2Vfc3RvcmVfZGVjID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBiYXNlX3N0b3JlX2RlYzIgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGJhc2Vfc3RvcmVfZGVjMyA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgYmFzZV9zdG9yZV9kZWM0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBiYXNlX3N0b3JlX2RlYzUgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGJhc2Vfc3RvcmVfZGVjNiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgYmFzZV9zdG9yZV9kZWM3ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBiYXNlX3N0b3JlX2RlYzggPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGJhc2Vfc3RvcmVfZGVjOSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgYmFzZV9zdG9yZV9kZWMxMCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgYmFzZV9zdG9yZV9kZWMxMSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgYmFzZV9zdG9yZV9kZWMxMiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgYmFzZV9zdG9yZV9kZWMxMyA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgYmFzZV9zdG9yZV9kZWMxNCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgYmFzZV9zdG9yZV9kZWMxNSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgYmFzZV9zdG9yZV9kZWMxNiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgKGJhc2Vfc3RvcmVfY2xhc3MgPSAoX3RlbXAgPSBfY2xhc3MyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIC8qKlxcbiAgICogQW4gZW51bSBvYmplY3QgdG8gZGVmaW5lIExPQ0FMX1NUT1JBR0UgYW5kIFNFU1NJT05fU1RPUkFHRVxcbiAgICovXFxuXFxuICAvKipcXG4gICAqIENvbnN0cnVjdG9yIG9mIHRoZSBiYXNlIGNsYXNzIHRoYXQgZ2V0cyBwcm9wZXJ0aWVzJyBuYW1lIG9mIGNoaWxkIHdoaWNoIHNob3VsZCBiZSBzYXZlZCBpbiBzdG9yYWdlc1xcbiAgICpcXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxcbiAgICogICAgIEBwcm9wZXJ0eSB7T2JqZWN0fSAgIHJvb3Rfc3RvcmUgLSBBbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgcm9vdCBzdG9yZSBvZiB0aGUgYXBwLlxcbiAgICogICAgIEBwcm9wZXJ0eSB7U3RyaW5nW119IGxvY2FsX3N0b3JhZ2VfcHJvcGVydGllcyAtIEEgbGlzdCBvZiBwcm9wZXJ0aWVzJyBuYW1lcyB0aGF0IHNob3VsZCBiZSBrZXB0IGluIGxvY2FsU3RvcmFnZS5cXG4gICAqICAgICBAcHJvcGVydHkge1N0cmluZ1tdfSBzZXNzaW9uX3N0b3JhZ2VfcHJvcGVydGllcyAtIEEgbGlzdCBvZiBwcm9wZXJ0aWVzJyBuYW1lcyB0aGF0IHNob3VsZCBiZSBrZXB0IGluIHNlc3Npb25TdG9yYWdlLlxcbiAgICogICAgIEBwcm9wZXJ0eSB7T2JqZWN0fSAgIHZhbGlkYXRpb25fcnVsZXMgLSBBbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgdmFsaWRhdGlvbiBydWxlcyBmb3IgZWFjaCBwcm9wZXJ0eSBvZiB0aGUgc3RvcmUuXFxuICAgKiAgICAgQHByb3BlcnR5IHtTdHJpbmd9ICAgc3RvcmVfbmFtZSAtIEV4cGxpY2l0IHN0b3JlIG5hbWUgZm9yIGJyb3dzZXIgYXBwbGljYXRpb24gc3RvcmFnZSAodG8gYnlwYXNzIG1pbmlmaWNhdGlvbilcXG4gICAqL1xcbiAgZnVuY3Rpb24gQmFzZVN0b3JlKCkge1xcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XFxuXFxuICAgIGJhc2Vfc3RvcmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZVN0b3JlKTtcXG5cXG4gICAgYmFzZV9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJ2YWxpZGF0aW9uX2Vycm9yc1xcXCIsIGJhc2Vfc3RvcmVfZGVzY3JpcHRvciwgdGhpcyk7XFxuXFxuICAgIGJhc2Vfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwidmFsaWRhdGlvbl9ydWxlc1xcXCIsIGJhc2Vfc3RvcmVfZGVzY3JpcHRvcjIsIHRoaXMpO1xcblxcbiAgICB0aGlzLnByZVN3aXRjaEFjY291bnREaXNwb3NlciA9IG51bGw7XFxuICAgIHRoaXMucHJlX3N3aXRjaF9hY2NvdW50X2xpc3RlbmVyID0gbnVsbDtcXG4gICAgdGhpcy5zd2l0Y2hBY2NvdW50RGlzcG9zZXIgPSBudWxsO1xcbiAgICB0aGlzLnN3aXRjaF9hY2NvdW50X2xpc3RlbmVyID0gbnVsbDtcXG4gICAgdGhpcy5sb2dvdXREaXNwb3NlciA9IG51bGw7XFxuICAgIHRoaXMubG9nb3V0X2xpc3RlbmVyID0gbnVsbDtcXG4gICAgdGhpcy5jbGllbnRJbml0RGlzcG9zZXIgPSBudWxsO1xcbiAgICB0aGlzLmNsaWVudF9pbml0X2xpc3RlbmVyID0gbnVsbDtcXG4gICAgdGhpcy5uZXR3b3JrU3RhdHVzQ2hhbmdlRGlzcG9zZXIgPSBudWxsO1xcbiAgICB0aGlzLm5ldHdvcmtfc3RhdHVzX2NoYW5nZV9saXN0ZW5lciA9IG51bGw7XFxuICAgIHRoaXMudGhlbWVDaGFuZ2VEaXNwb3NlciA9IG51bGw7XFxuICAgIHRoaXMudGhlbWVfY2hhbmdlX2xpc3RlbmVyID0gbnVsbDtcXG4gICAgdGhpcy5yZWFsQWNjb3VudFNpZ251cEVuZGVkRGlzcG9zZXIgPSBudWxsO1xcbiAgICB0aGlzLnJlYWxfYWNjb3VudF9zaWdudXBfZW5kZWRfbGlzdGVuZXIgPSBudWxsO1xcblxcbiAgICBiYXNlX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcInBhcnRpYWxfZmV0Y2hfdGltZVxcXCIsIGJhc2Vfc3RvcmVfZGVzY3JpcHRvcjMsIHRoaXMpO1xcblxcbiAgICB2YXIgcm9vdF9zdG9yZSA9IG9wdGlvbnMucm9vdF9zdG9yZSxcXG4gICAgICAgIGxvY2FsX3N0b3JhZ2VfcHJvcGVydGllcyA9IG9wdGlvbnMubG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzLFxcbiAgICAgICAgc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMgPSBvcHRpb25zLnNlc3Npb25fc3RvcmFnZV9wcm9wZXJ0aWVzLFxcbiAgICAgICAgdmFsaWRhdGlvbl9ydWxlcyA9IG9wdGlvbnMudmFsaWRhdGlvbl9ydWxlcyxcXG4gICAgICAgIHN0b3JlX25hbWUgPSBvcHRpb25zLnN0b3JlX25hbWU7XFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncm9vdF9zdG9yZScsIHtcXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcXG4gICAgICB3cml0YWJsZTogdHJ1ZVxcbiAgICB9KTtcXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdsb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXMnLCB7XFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXFxuICAgICAgd3JpdGFibGU6IHRydWVcXG4gICAgfSk7XFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMnLCB7XFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXFxuICAgICAgd3JpdGFibGU6IHRydWVcXG4gICAgfSk7XFxuICAgIHZhciBoYXNfbG9jYWxfb3Jfc2Vzc2lvbl9zdG9yYWdlID0gbG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzICYmIGxvY2FsX3N0b3JhZ2VfcHJvcGVydGllcy5sZW5ndGggfHwgc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMgJiYgc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMubGVuZ3RoO1xcblxcbiAgICBpZiAoaGFzX2xvY2FsX29yX3Nlc3Npb25fc3RvcmFnZSkge1xcbiAgICAgIGlmICghc3RvcmVfbmFtZSkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9yZV9uYW1lIGlzIHJlcXVpcmVkIGZvciBsb2NhbC9zZXNzaW9uIHN0b3JhZ2UnKTtcXG4gICAgICB9XFxuXFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdG9yZV9uYW1lJywge1xcbiAgICAgICAgdmFsdWU6IHN0b3JlX25hbWUsXFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxcbiAgICAgIH0pO1xcbiAgICB9XFxuXFxuICAgIHRoaXMucm9vdF9zdG9yZSA9IHJvb3Rfc3RvcmU7XFxuICAgIHRoaXMubG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzID0gbG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzIHx8IFtdO1xcbiAgICB0aGlzLnNlc3Npb25fc3RvcmFnZV9wcm9wZXJ0aWVzID0gc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMgfHwgW107XFxuICAgIHRoaXMuc2V0VmFsaWRhdGlvblJ1bGVzKHZhbGlkYXRpb25fcnVsZXMpO1xcbiAgICB0aGlzLnNldHVwUmVhY3Rpb25Gb3JMb2NhbFN0b3JhZ2UoKTtcXG4gICAgdGhpcy5zZXR1cFJlYWN0aW9uRm9yU2Vzc2lvblN0b3JhZ2UoKTtcXG4gICAgdGhpcy5yZXRyaWV2ZUZyb21TdG9yYWdlKCk7XFxuICB9XFxuICAvKipcXG4gICAqIFJldHVybnMgYW4gc25hcHNob3Qgb2YgdGhlIGN1cnJlbnQgc3RvcmVcXG4gICAqXFxuICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBwcm9wZXJ0aWVzIC0gQSBsaXN0IG9mIHByb3BlcnRpZXMnIG5hbWVzIHRoYXQgc2hvdWxkIGJlIGluIHRoZSBzbmFwc2hvdC5cXG4gICAqXFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYSBjbG9uZWQgb2JqZWN0IG9mIHRoZSBzdG9yZS5cXG4gICAqL1xcblxcblxcbiAgYmFzZV9zdG9yZV9jcmVhdGVDbGFzcyhCYXNlU3RvcmUsIFt7XFxuICAgIGtleTogXFxcImdldFNuYXBzaG90XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNuYXBzaG90KHByb3BlcnRpZXMpIHtcXG4gICAgICB2YXIgc25hcHNob3QgPSAoMCxleHRlcm5hbF9tb2J4Xy50b0pTKSh0aGlzKTtcXG5cXG4gICAgICBpZiAoISgwLHNoYXJlZF8uaXNFbXB0eU9iamVjdCkodGhpcy5yb290X3N0b3JlKSkge1xcbiAgICAgICAgc25hcHNob3Qucm9vdF9zdG9yZSA9IHRoaXMucm9vdF9zdG9yZTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKHByb3BlcnRpZXMgJiYgcHJvcGVydGllcy5sZW5ndGgpIHtcXG4gICAgICAgIHNuYXBzaG90ID0gcHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgcCkge1xcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihyZXN1bHQsIGJhc2Vfc3RvcmVfZGVmaW5lUHJvcGVydHkoe30sIHAsIHNuYXBzaG90W3BdKSk7XFxuICAgICAgICB9LCB7fSk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBzbmFwc2hvdDtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogU2V0cyB1cCBhIHJlYWN0aW9uIG9uIHByb3BlcnRpZXMgd2hpY2ggYXJlIG1lbnRpb25lZCBpbiBgbG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzYFxcbiAgICAgKiAgYW5kIGludm9rZXMgYHNhdmVUb1N0b3JhZ2VgIHdoZW4gdGhlcmUgYXJlIGFueSBjaGFuZ2VzIG9uIHRoZW0uXFxuICAgICAqXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXR1cFJlYWN0aW9uRm9yTG9jYWxTdG9yYWdlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwUmVhY3Rpb25Gb3JMb2NhbFN0b3JhZ2UoKSB7XFxuICAgICAgdmFyIF90aGlzID0gdGhpcztcXG5cXG4gICAgICBpZiAodGhpcy5sb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXMubGVuZ3RoKSB7XFxuICAgICAgICAoMCxleHRlcm5hbF9tb2J4Xy5yZWFjdGlvbikoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICByZXR1cm4gX3RoaXMubG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzLm1hcChmdW5jdGlvbiAoaSkge1xcbiAgICAgICAgICAgIHJldHVybiBfdGhpc1tpXTtcXG4gICAgICAgICAgfSk7XFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIHJldHVybiBfdGhpcy5zYXZlVG9TdG9yYWdlKF90aGlzLmxvY2FsX3N0b3JhZ2VfcHJvcGVydGllcywgQmFzZVN0b3JlLlNUT1JBR0VTLkxPQ0FMX1NUT1JBR0UpO1xcbiAgICAgICAgfSk7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBTZXRzIHVwIGEgcmVhY3Rpb24gb24gcHJvcGVydGllcyB3aGljaCBhcmUgbWVudGlvbmVkIGluIGBzZXNzaW9uX3N0b3JhZ2VfcHJvcGVydGllc2BcXG4gICAgICogIGFuZCBpbnZva2VzIGBzYXZlVG9TdG9yYWdlYCB3aGVuIHRoZXJlIGFyZSBhbnkgY2hhbmdlcyBvbiB0aGVtLlxcbiAgICAgKlxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0dXBSZWFjdGlvbkZvclNlc3Npb25TdG9yYWdlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwUmVhY3Rpb25Gb3JTZXNzaW9uU3RvcmFnZSgpIHtcXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgICBpZiAodGhpcy5zZXNzaW9uX3N0b3JhZ2VfcHJvcGVydGllcy5sZW5ndGgpIHtcXG4gICAgICAgICgwLGV4dGVybmFsX21vYnhfLnJlYWN0aW9uKShmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIHJldHVybiBfdGhpczIuc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMubWFwKGZ1bmN0aW9uIChpKSB7XFxuICAgICAgICAgICAgcmV0dXJuIF90aGlzMltpXTtcXG4gICAgICAgICAgfSk7XFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIHJldHVybiBfdGhpczIuc2F2ZVRvU3RvcmFnZShfdGhpczIuc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMsIEJhc2VTdG9yZS5TVE9SQUdFUy5TRVNTSU9OX1NUT1JBR0UpO1xcbiAgICAgICAgfSk7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBSZW1vdmVzIHByb3BlcnRpZXMgdGhhdCBhcmUgbm90IHBhc3NlZCBmcm9tIHRoZSBzbmFwc2hvdCBvZiB0aGUgc3RvcmUgYW5kIHNhdmVzIGl0IHRvIHRoZSBwYXNzZWQgc3RvcmFnZVxcbiAgICAgKlxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBwcm9wZXJ0aWVzIC0gQSBsaXN0IG9mIHRoZSBzdG9yZSdzIHByb3BlcnRpZXMnIG5hbWVzIHdoaWNoIHNob3VsZCBiZSBzYXZlZCBpbiB0aGUgc3RvcmFnZS5cXG4gICAgICogQHBhcmFtIHtTeW1ib2x9ICAgc3RvcmFnZSAgICAtIEEgc3ltYm9sIG9iamVjdCB0aGF0IGRlZmluZXMgdGhlIHN0b3JhZ2Ugd2hpY2ggdGhlIHNuYXBzaG90IHNob3VsZCBiZSBzdG9yZWQgaW4gaXQuXFxuICAgICAqXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzYXZlVG9TdG9yYWdlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVUb1N0b3JhZ2UocHJvcGVydGllcywgc3RvcmFnZSkge1xcbiAgICAgIHZhciBzbmFwc2hvdCA9IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2V0U25hcHNob3QocHJvcGVydGllcyksIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XFxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHJldHVybiB2YWx1ZTtcXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XFxuICAgICAgfSk7XFxuXFxuICAgICAgaWYgKHN0b3JhZ2UgPT09IEJhc2VTdG9yZS5TVE9SQUdFUy5MT0NBTF9TVE9SQUdFKSB7XFxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnN0b3JlX25hbWUsIHNuYXBzaG90KTtcXG4gICAgICB9IGVsc2UgaWYgKHN0b3JhZ2UgPT09IEJhc2VTdG9yZS5TVE9SQUdFUy5TRVNTSU9OX1NUT1JBR0UpIHtcXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0odGhpcy5zdG9yZV9uYW1lLCBzbmFwc2hvdCk7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBSZXRyaWV2ZXMgc2F2ZWQgc25hcHNob3Qgb2YgdGhlIHN0b3JlIGFuZCBhc3NpZ25zIHRvIHRoZSBjdXJyZW50IGluc3RhbmNlLlxcbiAgICAgKlxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwicmV0cmlldmVGcm9tU3RvcmFnZVxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXRyaWV2ZUZyb21TdG9yYWdlKCkge1xcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xcblxcbiAgICAgIHZhciBsb2NhbF9zdG9yYWdlX3NuYXBzaG90ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnN0b3JlX25hbWUsIHt9KSk7XFxuICAgICAgdmFyIHNlc3Npb25fc3RvcmFnZV9zbmFwc2hvdCA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnN0b3JlX25hbWUsIHt9KSk7XFxuXFxuICAgICAgdmFyIHNuYXBzaG90ID0gYmFzZV9zdG9yZV9vYmplY3RTcHJlYWQoYmFzZV9zdG9yZV9vYmplY3RTcHJlYWQoe30sIGxvY2FsX3N0b3JhZ2Vfc25hcHNob3QpLCBzZXNzaW9uX3N0b3JhZ2Vfc25hcHNob3QpO1xcblxcbiAgICAgIE9iamVjdC5rZXlzKHNuYXBzaG90KS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XFxuICAgICAgICByZXR1cm4gX3RoaXMzW2tdID0gc25hcHNob3Rba107XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIFNldHMgdmFsaWRhdGlvbiBlcnJvciBtZXNzYWdlcyBmb3IgYW4gb2JzZXJ2YWJsZSBwcm9wZXJ0eSBvZiB0aGUgc3RvcmVcXG4gICAgICpcXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5TmFtZSAtIFRoZSBvYnNlcnZhYmxlIHByb3BlcnR5J3MgbmFtZVxcbiAgICAgKiBAcGFyYW0gW3tTdHJpbmd9XSBtZXNzYWdlcyAtIEFuIGFycmF5IG9mIHN0cmluZ3MgdGhhdCBjb250YWlucyB2YWxpZGF0aW9uIGVycm9yIG1lc3NhZ2VzIGZvciB0aGUgcGFydGljdWxhciBwcm9wZXJ0eS5cXG4gICAgICpcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldFZhbGlkYXRpb25FcnJvck1lc3NhZ2VzXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZhbGlkYXRpb25FcnJvck1lc3NhZ2VzKHByb3BlcnR5TmFtZSwgbWVzc2FnZXMpIHtcXG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcXG5cXG4gICAgICB2YXIgaXNfZGlmZmVyZW50ID0gZnVuY3Rpb24gaXNfZGlmZmVyZW50KCkge1xcbiAgICAgICAgcmV0dXJuICEhX3RoaXM0LnZhbGlkYXRpb25fZXJyb3JzW3Byb3BlcnR5TmFtZV0uZmlsdGVyKGZ1bmN0aW9uICh4KSB7XFxuICAgICAgICAgIHJldHVybiAhbWVzc2FnZXMuaW5jbHVkZXMoeCk7XFxuICAgICAgICB9KS5jb25jYXQobWVzc2FnZXMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XFxuICAgICAgICAgIHJldHVybiAhX3RoaXM0LnZhbGlkYXRpb25fZXJyb3JzW3Byb3BlcnR5TmFtZV0uaW5jbHVkZXMoeCk7XFxuICAgICAgICB9KSkubGVuZ3RoO1xcbiAgICAgIH07XFxuXFxuICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25fZXJyb3JzW3Byb3BlcnR5TmFtZV0gfHwgaXNfZGlmZmVyZW50KCkpIHtcXG4gICAgICAgIHRoaXMudmFsaWRhdGlvbl9lcnJvcnNbcHJvcGVydHlOYW1lXSA9IG1lc3NhZ2VzO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogU2V0cyB2YWxpZGF0aW9uIHJ1bGVzXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBydWxlc1xcbiAgICAgKlxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0VmFsaWRhdGlvblJ1bGVzXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZhbGlkYXRpb25SdWxlcygpIHtcXG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcXG5cXG4gICAgICB2YXIgcnVsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xcbiAgICAgIE9iamVjdC5rZXlzKHJ1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcXG4gICAgICAgIF90aGlzNS5hZGRSdWxlKGtleSwgcnVsZXNba2V5XSk7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIEFkZHMgcnVsZXMgdG8gdGhlIHBhcnRpY3VsYXIgcHJvcGVydHlcXG4gICAgICpcXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBydWxlc1xcbiAgICAgKlxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiYWRkUnVsZVxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSdWxlKHByb3BlcnR5LCBydWxlcykge1xcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xcblxcbiAgICAgIHRoaXMudmFsaWRhdGlvbl9ydWxlc1twcm9wZXJ0eV0gPSBydWxlcztcXG4gICAgICAoMCxleHRlcm5hbF9tb2J4Xy5pbnRlcmNlcHQpKHRoaXMsIHByb3BlcnR5LCBmdW5jdGlvbiAoY2hhbmdlKSB7XFxuICAgICAgICBfdGhpczYudmFsaWRhdGVQcm9wZXJ0eShwcm9wZXJ0eSwgY2hhbmdlLm5ld1ZhbHVlKTtcXG5cXG4gICAgICAgIHJldHVybiBjaGFuZ2U7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIFZhbGlkYXRlcyBhIHBhcnRpY3VsYXIgcHJvcGVydHkgb2YgdGhlIHN0b3JlXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSBpbiB0aGUgc3RvcmVcXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHZhbHVlICAgIC0gVGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSwgaXQgY2FuIGJlIHVuZGVmaW5lZC5cXG4gICAgICpcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXFxcInZhbGlkYXRlUHJvcGVydHlcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHtcXG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcXG5cXG4gICAgICB2YXIgdHJpZ2dlciA9IHRoaXMudmFsaWRhdGlvbl9ydWxlc1twcm9wZXJ0eV0udHJpZ2dlcjtcXG5cXG4gICAgICB2YXIgaW5wdXRzID0gYmFzZV9zdG9yZV9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJvcGVydHksIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHRoaXNbcHJvcGVydHldKTtcXG5cXG4gICAgICB2YXIgdmFsaWRhdGlvbl9ydWxlcyA9IGJhc2Vfc3RvcmVfZGVmaW5lUHJvcGVydHkoe30sIHByb3BlcnR5LCB0aGlzLnZhbGlkYXRpb25fcnVsZXNbcHJvcGVydHldLnJ1bGVzIHx8IFtdKTtcXG5cXG4gICAgICBpZiAoISF0cmlnZ2VyICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIHRyaWdnZXIpKSB7XFxuICAgICAgICBpbnB1dHNbdHJpZ2dlcl0gPSB0aGlzW3RyaWdnZXJdO1xcbiAgICAgICAgdmFsaWRhdGlvbl9ydWxlc1t0cmlnZ2VyXSA9IHRoaXMudmFsaWRhdGlvbl9ydWxlc1t0cmlnZ2VyXS5ydWxlcyB8fCBbXTtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3JfdmFsaWRhdG9yKGlucHV0cywgdmFsaWRhdGlvbl9ydWxlcywgdGhpcyk7XFxuICAgICAgdmFsaWRhdG9yLmlzUGFzc2VkKCk7XFxuICAgICAgT2JqZWN0LmtleXMoaW5wdXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcXG4gICAgICAgIF90aGlzNy5zZXRWYWxpZGF0aW9uRXJyb3JNZXNzYWdlcyhrZXksIHZhbGlkYXRvci5lcnJvcnMuZ2V0KGtleSkpO1xcbiAgICAgIH0pO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBWYWxpZGF0ZXMgYWxsIHByb3BlcnRpZXMgd2hpY2ggdmFsaWRhdGlvbiBydWxlIGhhcyBiZWVuIHNldCBmb3IuXFxuICAgICAqXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJ2YWxpZGF0ZUFsbFByb3BlcnRpZXNcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVBbGxQcm9wZXJ0aWVzKCkge1xcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xcblxcbiAgICAgIHZhciB2YWxpZGF0aW9uX3J1bGVzID0gT2JqZWN0LmtleXModGhpcy52YWxpZGF0aW9uX3J1bGVzKTtcXG4gICAgICB2YXIgdmFsaWRhdGlvbl9lcnJvcnMgPSBPYmplY3Qua2V5cyh0aGlzLnZhbGlkYXRpb25fZXJyb3JzKTtcXG4gICAgICB2YWxpZGF0aW9uX3J1bGVzLmZvckVhY2goZnVuY3Rpb24gKHApIHtcXG4gICAgICAgIF90aGlzOC52YWxpZGF0ZVByb3BlcnR5KHAsIF90aGlzOFtwXSk7XFxuICAgICAgfSk7IC8vIFJlbW92ZSBrZXlzIHRoYXQgYXJlIHByZXNlbnQgaW4gZXJyb3IsIGJ1dCBub3QgaW4gcnVsZXM6XFxuXFxuICAgICAgdmFsaWRhdGlvbl9lcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZXJyb3IpIHtcXG4gICAgICAgIGlmICghdmFsaWRhdGlvbl9ydWxlcy5pbmNsdWRlcyhlcnJvcikpIHtcXG4gICAgICAgICAgZGVsZXRlIF90aGlzOC52YWxpZGF0aW9uX2Vycm9yc1tlcnJvcl07XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25Td2l0Y2hBY2NvdW50XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uU3dpdGNoQWNjb3VudChsaXN0ZW5lcikge1xcbiAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xcblxcbiAgICAgIGlmIChsaXN0ZW5lcikge1xcbiAgICAgICAgdGhpcy5zd2l0Y2hfYWNjb3VudF9saXN0ZW5lciA9IGxpc3RlbmVyO1xcbiAgICAgICAgdGhpcy5zd2l0Y2hBY2NvdW50RGlzcG9zZXIgPSAoMCxleHRlcm5hbF9tb2J4Xy53aGVuKShmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIHJldHVybiBfdGhpczkucm9vdF9zdG9yZS5jbGllbnQuc3dpdGNoX2Jyb2FkY2FzdDtcXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXM5LnN3aXRjaF9hY2NvdW50X2xpc3RlbmVyKCk7XFxuXFxuICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbiAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcXG4gICAgICAgICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgICAgX3RoaXM5LnJvb3Rfc3RvcmUuY2xpZW50LnN3aXRjaEVuZFNpZ25hbCgpO1xcblxcbiAgICAgICAgICAgICAgICBfdGhpczkub25Td2l0Y2hBY2NvdW50KF90aGlzOS5zd2l0Y2hfYWNjb3VudF9saXN0ZW5lcik7XFxuICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTd2l0Y2hpbmcgYWNjb3VudCBsaXN0ZW5lcnMgYXJlIHJlcXVpcmVkIHRvIHJldHVybiBhIHByb21pc2UuJyk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIGxpc3RlbmVyIGN1cnJlbnRseSBhY3RpdmUuIHNvIHdlIGNhbiBqdXN0IGlnbm9yZSB0aGUgZXJyb3IgcmFpc2VkIGZyb20gdHJlYXRpbmdcXG4gICAgICAgICAgICAvLyBhIG51bGwgb2JqZWN0IGFzIGEgZnVuY3Rpb24uIEFsdGhvdWdoLCBpbiBkZXZlbG9wbWVudCBtb2RlLCB3ZSB0aHJvdyBhIGNvbnNvbGUgZXJyb3IuXFxuICAgICAgICAgICAgaWYgKCEoMCxzaGFyZWRfLmlzUHJvZHVjdGlvbikoKSkge1xcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJvblByZVN3aXRjaEFjY291bnRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25QcmVTd2l0Y2hBY2NvdW50KGxpc3RlbmVyKSB7XFxuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xcblxcbiAgICAgIGlmIChsaXN0ZW5lcikge1xcbiAgICAgICAgdGhpcy5wcmVfc3dpdGNoX2FjY291bnRfbGlzdGVuZXIgPSBsaXN0ZW5lcjtcXG4gICAgICAgIHRoaXMucHJlU3dpdGNoQWNjb3VudERpc3Bvc2VyID0gKDAsZXh0ZXJuYWxfbW9ieF8ud2hlbikoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICByZXR1cm4gX3RoaXMxMC5yb290X3N0b3JlLmNsaWVudC5wcmVfc3dpdGNoX2Jyb2FkY2FzdDtcXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMxMC5wcmVfc3dpdGNoX2FjY291bnRfbGlzdGVuZXIoKTtcXG5cXG4gICAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICAgICAgICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgICAgICBfdGhpczEwLnJvb3Rfc3RvcmUuY2xpZW50LnNldFByZVN3aXRjaEFjY291bnQoZmFsc2UpO1xcblxcbiAgICAgICAgICAgICAgICBfdGhpczEwLm9uUHJlU3dpdGNoQWNjb3VudChfdGhpczEwLnByZV9zd2l0Y2hfYWNjb3VudF9saXN0ZW5lcik7XFxuICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcmUtc3dpdGNoIGFjY291bnQgbGlzdGVuZXJzIGFyZSByZXF1aXJlZCB0byByZXR1cm4gYSBwcm9taXNlLicpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgICAgICAgICAvLyB0aGVyZSBpcyBubyBsaXN0ZW5lciBjdXJyZW50bHkgYWN0aXZlLiBzbyB3ZSBjYW4ganVzdCBpZ25vcmUgdGhlIGVycm9yIHJhaXNlZCBmcm9tIHRyZWF0aW5nXFxuICAgICAgICAgICAgLy8gYSBudWxsIG9iamVjdCBhcyBhIGZ1bmN0aW9uLiBBbHRob3VnaCwgaW4gZGV2ZWxvcG1lbnQgbW9kZSwgd2UgdGhyb3cgYSBjb25zb2xlIGVycm9yLlxcbiAgICAgICAgICAgIGlmICghKDAsc2hhcmVkXy5pc1Byb2R1Y3Rpb24pKCkpIHtcXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25Mb2dvdXRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Mb2dvdXQobGlzdGVuZXIpIHtcXG4gICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XFxuXFxuICAgICAgdGhpcy5sb2dvdXREaXNwb3NlciA9ICgwLGV4dGVybmFsX21vYnhfLndoZW4pKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiBfdGhpczExLnJvb3Rfc3RvcmUuY2xpZW50Lmhhc19sb2dnZWRfb3V0O1xcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9iYXNlX3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xcbiAgICAgICAgdmFyIHJlc3VsdDtcXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDA7XFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF90aGlzMTEubG9nb3V0X2xpc3RlbmVyKCk7XFxuXFxuICAgICAgICAgICAgICAgIGlmICghKHJlc3VsdCAmJiByZXN1bHQudGhlbiAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpKSB7XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgICAgICAgIF90aGlzMTEucm9vdF9zdG9yZS5jbGllbnQuc2V0TG9nb3V0KGZhbHNlKTtcXG5cXG4gICAgICAgICAgICAgICAgICBfdGhpczExLm9uTG9nb3V0KF90aGlzMTEubG9nb3V0X2xpc3RlbmVyKTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3O1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNjpcXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2dvdXQgbGlzdGVuZXJzIGFyZSByZXF1aXJlZCB0byByZXR1cm4gYSBwcm9taXNlLicpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA3OlxcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA5OlxcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gOTtcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFtcXFwiY2F0Y2hcXFwiXSgwKTtcXG5cXG4gICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgbm8gbGlzdGVuZXIgY3VycmVudGx5IGFjdGl2ZS4gc28gd2UgY2FuIGp1c3QgaWdub3JlIHRoZSBlcnJvciByYWlzZWQgZnJvbSB0cmVhdGluZ1xcbiAgICAgICAgICAgICAgICAvLyBhIG51bGwgb2JqZWN0IGFzIGEgZnVuY3Rpb24uIEFsdGhvdWdoLCBpbiBkZXZlbG9wbWVudCBtb2RlLCB3ZSB0aHJvdyBhIGNvbnNvbGUgZXJyb3IuXFxuICAgICAgICAgICAgICAgIGlmICghKDAsc2hhcmVkXy5pc1Byb2R1Y3Rpb24pKCkpIHtcXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKF9jb250ZXh0LnQwKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBjYXNlIDEyOlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgOV1dKTtcXG4gICAgICB9KSkpO1xcbiAgICAgIHRoaXMubG9nb3V0X2xpc3RlbmVyID0gbGlzdGVuZXI7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25DbGllbnRJbml0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xpZW50SW5pdChsaXN0ZW5lcikge1xcbiAgICAgIHZhciBfdGhpczEyID0gdGhpcztcXG5cXG4gICAgICB0aGlzLmNsaWVudEluaXREaXNwb3NlciA9ICgwLGV4dGVybmFsX21vYnhfLndoZW4pKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiBfdGhpczEyLnJvb3Rfc3RvcmUuY2xpZW50LmluaXRpYWxpemVkX2Jyb2FkY2FzdDtcXG4gICAgICB9LCAvKiNfX1BVUkVfXyovYmFzZV9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7XFxuICAgICAgICB2YXIgcmVzdWx0O1xcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAwO1xcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBfdGhpczEyLmNsaWVudF9pbml0X2xpc3RlbmVyKCk7XFxuXFxuICAgICAgICAgICAgICAgIGlmICghKHJlc3VsdCAmJiByZXN1bHQudGhlbiAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpKSB7XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgICAgICBfdGhpczEyLnJvb3Rfc3RvcmUuY2xpZW50LnNldEluaXRpYWxpemVkKGZhbHNlKTtcXG5cXG4gICAgICAgICAgICAgICAgICBfdGhpczEyLm9uQ2xpZW50SW5pdChfdGhpczEyLmNsaWVudF9pbml0X2xpc3RlbmVyKTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNztcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDY6XFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50IGluaXQgbGlzdGVuZXJzIGFyZSByZXF1aXJlZCB0byByZXR1cm4gYSBwcm9taXNlLicpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA3OlxcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEyO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgICAgIGNhc2UgOTpcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA5O1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbXFxcImNhdGNoXFxcIl0oMCk7XFxuXFxuICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIGxpc3RlbmVyIGN1cnJlbnRseSBhY3RpdmUuIHNvIHdlIGNhbiBqdXN0IGlnbm9yZSB0aGUgZXJyb3IgcmFpc2VkIGZyb20gdHJlYXRpbmdcXG4gICAgICAgICAgICAgICAgLy8gYSBudWxsIG9iamVjdCBhcyBhIGZ1bmN0aW9uLiBBbHRob3VnaCwgaW4gZGV2ZWxvcG1lbnQgbW9kZSwgd2UgdGhyb3cgYSBjb25zb2xlIGVycm9yLlxcbiAgICAgICAgICAgICAgICBpZiAoISgwLHNoYXJlZF8uaXNQcm9kdWN0aW9uKSgpKSB7XFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihfY29udGV4dDIudDApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTI6XFxuICAgICAgICAgICAgICBjYXNlIFxcXCJlbmRcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzAsIDldXSk7XFxuICAgICAgfSkpKTtcXG4gICAgICB0aGlzLmNsaWVudF9pbml0X2xpc3RlbmVyID0gbGlzdGVuZXI7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25OZXR3b3JrU3RhdHVzQ2hhbmdlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTmV0d29ya1N0YXR1c0NoYW5nZShsaXN0ZW5lcikge1xcbiAgICAgIHZhciBfdGhpczEzID0gdGhpcztcXG5cXG4gICAgICB0aGlzLm5ldHdvcmtTdGF0dXNDaGFuZ2VEaXNwb3NlciA9ICgwLGV4dGVybmFsX21vYnhfLnJlYWN0aW9uKShmdW5jdGlvbiAoKSB7XFxuICAgICAgICByZXR1cm4gX3RoaXMxMy5yb290X3N0b3JlLmNvbW1vbi5pc19uZXR3b3JrX29ubGluZTtcXG4gICAgICB9LCBmdW5jdGlvbiAoaXNfb25saW5lKSB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICBfdGhpczEzLm5ldHdvcmtfc3RhdHVzX2NoYW5nZV9saXN0ZW5lcihpc19vbmxpbmUpO1xcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgICAgICAgLy8gdGhlcmUgaXMgbm8gbGlzdGVuZXIgY3VycmVudGx5IGFjdGl2ZS4gc28gd2UgY2FuIGp1c3QgaWdub3JlIHRoZSBlcnJvciByYWlzZWQgZnJvbSB0cmVhdGluZ1xcbiAgICAgICAgICAvLyBhIG51bGwgb2JqZWN0IGFzIGEgZnVuY3Rpb24uIEFsdGhvdWdoLCBpbiBkZXZlbG9wbWVudCBtb2RlLCB3ZSB0aHJvdyBhIGNvbnNvbGUgZXJyb3IuXFxuICAgICAgICAgIGlmICghKDAsc2hhcmVkXy5pc1Byb2R1Y3Rpb24pKCkpIHtcXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgICAgdGhpcy5uZXR3b3JrX3N0YXR1c19jaGFuZ2VfbGlzdGVuZXIgPSBsaXN0ZW5lcjtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJvblRoZW1lQ2hhbmdlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uVGhlbWVDaGFuZ2UobGlzdGVuZXIpIHtcXG4gICAgICB2YXIgX3RoaXMxNCA9IHRoaXM7XFxuXFxuICAgICAgdGhpcy50aGVtZUNoYW5nZURpc3Bvc2VyID0gKDAsZXh0ZXJuYWxfbW9ieF8ucmVhY3Rpb24pKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiBfdGhpczE0LnJvb3Rfc3RvcmUudWkuaXNfZGFya19tb2RlX29uO1xcbiAgICAgIH0sIGZ1bmN0aW9uIChpc19kYXJrX21vZGVfb24pIHtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgIF90aGlzMTQudGhlbWVfY2hhbmdlX2xpc3RlbmVyKGlzX2RhcmtfbW9kZV9vbik7XFxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgICAgICAvLyB0aGVyZSBpcyBubyBsaXN0ZW5lciBjdXJyZW50bHkgYWN0aXZlLiBzbyB3ZSBjYW4ganVzdCBpZ25vcmUgdGhlIGVycm9yIHJhaXNlZCBmcm9tIHRyZWF0aW5nXFxuICAgICAgICAgIC8vIGEgbnVsbCBvYmplY3QgYXMgYSBmdW5jdGlvbi4gQWx0aG91Z2gsIGluIGRldmVsb3BtZW50IG1vZGUsIHdlIHRocm93IGEgY29uc29sZSBlcnJvci5cXG4gICAgICAgICAgaWYgKCEoMCxzaGFyZWRfLmlzUHJvZHVjdGlvbikoKSkge1xcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgICB0aGlzLnRoZW1lX2NoYW5nZV9saXN0ZW5lciA9IGxpc3RlbmVyO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcIm9uUmVhbEFjY291bnRTaWdudXBFbmRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25SZWFsQWNjb3VudFNpZ251cEVuZChsaXN0ZW5lcikge1xcbiAgICAgIHZhciBfdGhpczE1ID0gdGhpcztcXG5cXG4gICAgICB0aGlzLnJlYWxBY2NvdW50U2lnbnVwRW5kZWREaXNwb3NlciA9ICgwLGV4dGVybmFsX21vYnhfLndoZW4pKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiBfdGhpczE1LnJvb3Rfc3RvcmUudWkuaGFzX3JlYWxfYWNjb3VudF9zaWdudXBfZW5kZWQ7XFxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IF90aGlzMTUucmVhbF9hY2NvdW50X3NpZ251cF9lbmRlZF9saXN0ZW5lcigpO1xcblxcbiAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICAgICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgIF90aGlzMTUucm9vdF9zdG9yZS51aS5zZXRSZWFsQWNjb3VudFNpZ251cEVuZChmYWxzZSk7XFxuXFxuICAgICAgICAgICAgICBfdGhpczE1Lm9uUmVhbEFjY291bnRTaWdudXBFbmQoX3RoaXMxNS5yZWFsX2FjY291bnRfc2lnbnVwX2VuZGVkX2xpc3RlbmVyKTtcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWwgYWNjb3VudCBzaWdudXAgbGlzdGVuZXJzIGFyZSByZXF1aXJlZCB0byByZXR1cm4gYSBwcm9taXNlLicpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgICAgICAvLyB0aGVyZSBpcyBubyBsaXN0ZW5lciBjdXJyZW50bHkgYWN0aXZlLiBzbyB3ZSBjYW4ganVzdCBpZ25vcmUgdGhlIGVycm9yIHJhaXNlZCBmcm9tIHRyZWF0aW5nXFxuICAgICAgICAgIC8vIGEgbnVsbCBvYmplY3QgYXMgYSBmdW5jdGlvbi4gQWx0aG91Z2gsIGluIGRldmVsb3BtZW50IG1vZGUsIHdlIHRocm93IGEgY29uc29sZSBlcnJvci5cXG4gICAgICAgICAgaWYgKCEoMCxzaGFyZWRfLmlzUHJvZHVjdGlvbikoKSkge1xcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgICB0aGlzLnJlYWxfYWNjb3VudF9zaWdudXBfZW5kZWRfbGlzdGVuZXIgPSBsaXN0ZW5lcjtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJkaXNwb3NlUHJlU3dpdGNoQWNjb3VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlUHJlU3dpdGNoQWNjb3VudCgpIHtcXG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJlU3dpdGNoQWNjb3VudERpc3Bvc2VyID09PSAnZnVuY3Rpb24nKSB7XFxuICAgICAgICB0aGlzLnByZVN3aXRjaEFjY291bnREaXNwb3NlcigpO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLnByZV9zd2l0Y2hfYWNjb3VudF9saXN0ZW5lciA9IG51bGw7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZGlzcG9zZVN3aXRjaEFjY291bnRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcG9zZVN3aXRjaEFjY291bnQoKSB7XFxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnN3aXRjaEFjY291bnREaXNwb3NlciA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICAgICAgdGhpcy5zd2l0Y2hBY2NvdW50RGlzcG9zZXIoKTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhpcy5zd2l0Y2hfYWNjb3VudF9saXN0ZW5lciA9IG51bGw7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZGlzcG9zZUxvZ291dFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlTG9nb3V0KCkge1xcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5sb2dvdXREaXNwb3NlciA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICAgICAgdGhpcy5sb2dvdXREaXNwb3NlcigpO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLmxvZ291dF9saXN0ZW5lciA9IG51bGw7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZGlzcG9zZUNsaWVudEluaXRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcG9zZUNsaWVudEluaXQoKSB7XFxuICAgICAgaWYgKHR5cGVvZiB0aGlzLmNsaWVudEluaXREaXNwb3NlciA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICAgICAgdGhpcy5jbGllbnRJbml0RGlzcG9zZXIoKTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhpcy5jbGllbnRfaW5pdF9saXN0ZW5lciA9IG51bGw7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZGlzcG9zZU5ldHdvcmtTdGF0dXNDaGFuZ2VcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcG9zZU5ldHdvcmtTdGF0dXNDaGFuZ2UoKSB7XFxuICAgICAgaWYgKHR5cGVvZiB0aGlzLm5ldHdvcmtTdGF0dXNDaGFuZ2VEaXNwb3NlciA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICAgICAgdGhpcy5uZXR3b3JrU3RhdHVzQ2hhbmdlRGlzcG9zZXIoKTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhpcy5uZXR3b3JrX3N0YXR1c19jaGFuZ2VfbGlzdGVuZXIgPSBudWxsO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImRpc3Bvc2VUaGVtZUNoYW5nZVxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlVGhlbWVDaGFuZ2UoKSB7XFxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnRoZW1lQ2hhbmdlRGlzcG9zZXIgPT09ICdmdW5jdGlvbicpIHtcXG4gICAgICAgIHRoaXMudGhlbWVDaGFuZ2VEaXNwb3NlcigpO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLnRoZW1lX2NoYW5nZV9saXN0ZW5lciA9IG51bGw7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZGlzcG9zZVJlYWxBY2NvdW50U2lnbnVwRW5kXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3Bvc2VSZWFsQWNjb3VudFNpZ251cEVuZCgpIHtcXG4gICAgICBpZiAodHlwZW9mIHRoaXMucmVhbEFjY291bnRTaWdudXBFbmRlZERpc3Bvc2VyID09PSAnZnVuY3Rpb24nKSB7XFxuICAgICAgICB0aGlzLnJlYWxBY2NvdW50U2lnbnVwRW5kZWREaXNwb3NlcigpO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLnJlYWxfYWNjb3VudF9zaWdudXBfZW5kZWRfbGlzdGVuZXIgPSBudWxsO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcIm9uVW5tb3VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblVubW91bnQoKSB7XFxuICAgICAgdGhpcy5kaXNwb3NlUHJlU3dpdGNoQWNjb3VudCgpO1xcbiAgICAgIHRoaXMuZGlzcG9zZVN3aXRjaEFjY291bnQoKTtcXG4gICAgICB0aGlzLmRpc3Bvc2VMb2dvdXQoKTtcXG4gICAgICB0aGlzLmRpc3Bvc2VDbGllbnRJbml0KCk7XFxuICAgICAgdGhpcy5kaXNwb3NlTmV0d29ya1N0YXR1c0NoYW5nZSgpO1xcbiAgICAgIHRoaXMuZGlzcG9zZVRoZW1lQ2hhbmdlKCk7XFxuICAgICAgdGhpcy5kaXNwb3NlUmVhbEFjY291bnRTaWdudXBFbmQoKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJhc3NlcnRIYXNWYWxpZENhY2hlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFzc2VydEhhc1ZhbGlkQ2FjaGUobG9naW5pZCkge1xcbiAgICAgIC8vIGFjY291bnQgd2FzIGNoYW5nZWQgd2hlbiB0aGlzIHdhcyB1bm1vdW50ZWQuXFxuICAgICAgaWYgKHRoaXMucm9vdF9zdG9yZS5jbGllbnQubG9naW5pZCAhPT0gbG9naW5pZCkge1xcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlYWN0aW9ucyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XFxuICAgICAgICAgIHJlYWN0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZWFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0KSB7XFxuICAgICAgICAgIHJldHVybiBhY3QoKTtcXG4gICAgICAgIH0pO1xcbiAgICAgICAgdGhpcy5wYXJ0aWFsX2ZldGNoX3RpbWUgPSBmYWxzZTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBCYXNlU3RvcmU7XFxufSgpLCBfY2xhc3MyLlNUT1JBR0VTID0gT2JqZWN0LmZyZWV6ZSh7XFxuICBMT0NBTF9TVE9SQUdFOiBTeW1ib2woJ0xPQ0FMX1NUT1JBR0UnKSxcXG4gIFNFU1NJT05fU1RPUkFHRTogU3ltYm9sKCdTRVNTSU9OX1NUT1JBR0UnKVxcbn0pLCBfdGVtcCksIChiYXNlX3N0b3JlX2Rlc2NyaXB0b3IgPSBiYXNlX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInZhbGlkYXRpb25fZXJyb3JzXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiB7fTtcXG4gIH1cXG59KSwgYmFzZV9zdG9yZV9kZXNjcmlwdG9yMiA9IGJhc2Vfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwidmFsaWRhdGlvbl9ydWxlc1xcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4ge307XFxuICB9XFxufSksIGJhc2Vfc3RvcmVfZGVzY3JpcHRvcjMgPSBiYXNlX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInBhcnRpYWxfZmV0Y2hfdGltZVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gMDtcXG4gIH1cXG59KSwgYmFzZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXRyaWV2ZUZyb21TdG9yYWdlXFxcIiwgW2V4dGVybmFsX21vYnhfLmFjdGlvbl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXRyaWV2ZUZyb21TdG9yYWdlXFxcIiksIGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYmFzZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRWYWxpZGF0aW9uRXJyb3JNZXNzYWdlc1xcXCIsIFtleHRlcm5hbF9tb2J4Xy5hY3Rpb25dLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0VmFsaWRhdGlvbkVycm9yTWVzc2FnZXNcXFwiKSwgYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBiYXNlX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFZhbGlkYXRpb25SdWxlc1xcXCIsIFtleHRlcm5hbF9tb2J4Xy5hY3Rpb25dLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0VmFsaWRhdGlvblJ1bGVzXFxcIiksIGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYmFzZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJhZGRSdWxlXFxcIiwgW2V4dGVybmFsX21vYnhfLmFjdGlvbl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJhZGRSdWxlXFxcIiksIGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYmFzZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJ2YWxpZGF0ZVByb3BlcnR5XFxcIiwgW2V4dGVybmFsX21vYnhfLmFjdGlvbl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJ2YWxpZGF0ZVByb3BlcnR5XFxcIiksIGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYmFzZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJ2YWxpZGF0ZUFsbFByb3BlcnRpZXNcXFwiLCBbZXh0ZXJuYWxfbW9ieF8uYWN0aW9uXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInZhbGlkYXRlQWxsUHJvcGVydGllc1xcXCIpLCBiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGJhc2Vfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25Td2l0Y2hBY2NvdW50XFxcIiwgW2Jhc2Vfc3RvcmVfZGVjXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uU3dpdGNoQWNjb3VudFxcXCIpLCBiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGJhc2Vfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25QcmVTd2l0Y2hBY2NvdW50XFxcIiwgW2Jhc2Vfc3RvcmVfZGVjMl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvblByZVN3aXRjaEFjY291bnRcXFwiKSwgYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBiYXNlX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uTG9nb3V0XFxcIiwgW2Jhc2Vfc3RvcmVfZGVjM10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbkxvZ291dFxcXCIpLCBiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGJhc2Vfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25DbGllbnRJbml0XFxcIiwgW2Jhc2Vfc3RvcmVfZGVjNF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbkNsaWVudEluaXRcXFwiKSwgYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBiYXNlX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uTmV0d29ya1N0YXR1c0NoYW5nZVxcXCIsIFtiYXNlX3N0b3JlX2RlYzVdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25OZXR3b3JrU3RhdHVzQ2hhbmdlXFxcIiksIGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYmFzZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvblRoZW1lQ2hhbmdlXFxcIiwgW2Jhc2Vfc3RvcmVfZGVjNl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvblRoZW1lQ2hhbmdlXFxcIiksIGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYmFzZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvblJlYWxBY2NvdW50U2lnbnVwRW5kXFxcIiwgW2Jhc2Vfc3RvcmVfZGVjN10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvblJlYWxBY2NvdW50U2lnbnVwRW5kXFxcIiksIGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYmFzZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJkaXNwb3NlUHJlU3dpdGNoQWNjb3VudFxcXCIsIFtiYXNlX3N0b3JlX2RlYzhdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZGlzcG9zZVByZVN3aXRjaEFjY291bnRcXFwiKSwgYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBiYXNlX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImRpc3Bvc2VTd2l0Y2hBY2NvdW50XFxcIiwgW2Jhc2Vfc3RvcmVfZGVjOV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJkaXNwb3NlU3dpdGNoQWNjb3VudFxcXCIpLCBiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGJhc2Vfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZGlzcG9zZUxvZ291dFxcXCIsIFtiYXNlX3N0b3JlX2RlYzEwXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImRpc3Bvc2VMb2dvdXRcXFwiKSwgYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBiYXNlX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImRpc3Bvc2VDbGllbnRJbml0XFxcIiwgW2Jhc2Vfc3RvcmVfZGVjMTFdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZGlzcG9zZUNsaWVudEluaXRcXFwiKSwgYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBiYXNlX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImRpc3Bvc2VOZXR3b3JrU3RhdHVzQ2hhbmdlXFxcIiwgW2Jhc2Vfc3RvcmVfZGVjMTJdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZGlzcG9zZU5ldHdvcmtTdGF0dXNDaGFuZ2VcXFwiKSwgYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBiYXNlX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImRpc3Bvc2VUaGVtZUNoYW5nZVxcXCIsIFtiYXNlX3N0b3JlX2RlYzEzXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImRpc3Bvc2VUaGVtZUNoYW5nZVxcXCIpLCBiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGJhc2Vfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZGlzcG9zZVJlYWxBY2NvdW50U2lnbnVwRW5kXFxcIiwgW2Jhc2Vfc3RvcmVfZGVjMTRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZGlzcG9zZVJlYWxBY2NvdW50U2lnbnVwRW5kXFxcIiksIGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgYmFzZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvblVubW91bnRcXFwiLCBbYmFzZV9zdG9yZV9kZWMxNV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvblVubW91bnRcXFwiKSwgYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBiYXNlX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihiYXNlX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImFzc2VydEhhc1ZhbGlkQ2FjaGVcXFwiLCBbYmFzZV9zdG9yZV9kZWMxNl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJhc3NlcnRIYXNWYWxpZENhY2hlXFxcIiksIGJhc2Vfc3RvcmVfY2xhc3MucHJvdG90eXBlKSksIGJhc2Vfc3RvcmVfY2xhc3MpKTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9TdG9yZXMvZ2VuZXJhbC1zdG9yZS5qc1xcbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFxcXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlxcXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcXFwiZnVuY3Rpb25cXFwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFxcXCJzeW1ib2xcXFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXFxcImZ1bmN0aW9uXFxcIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcXFwic3ltYm9sXFxcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxcblxcbnZhciBnZW5lcmFsX3N0b3JlX2RlYywgZ2VuZXJhbF9zdG9yZV9kZWMyLCBnZW5lcmFsX3N0b3JlX2RlYzMsIGdlbmVyYWxfc3RvcmVfZGVjNCwgZ2VuZXJhbF9zdG9yZV9kZWM1LCBnZW5lcmFsX3N0b3JlX2RlYzYsIGdlbmVyYWxfc3RvcmVfZGVjNywgZ2VuZXJhbF9zdG9yZV9kZWM4LCBnZW5lcmFsX3N0b3JlX2RlYzksIGdlbmVyYWxfc3RvcmVfZGVjMTAsIGdlbmVyYWxfc3RvcmVfZGVjMTEsIGdlbmVyYWxfc3RvcmVfZGVjMTIsIGdlbmVyYWxfc3RvcmVfZGVjMTMsIGdlbmVyYWxfc3RvcmVfZGVjMTQsIGdlbmVyYWxfc3RvcmVfZGVjMTUsIGdlbmVyYWxfc3RvcmVfZGVjMTYsIGdlbmVyYWxfc3RvcmVfZGVjMTcsIGdlbmVyYWxfc3RvcmVfZGVjMTgsIGdlbmVyYWxfc3RvcmVfZGVjMTksIGdlbmVyYWxfc3RvcmVfZGVjMjAsIGdlbmVyYWxfc3RvcmVfZGVjMjEsIGdlbmVyYWxfc3RvcmVfZGVjMjIsIGdlbmVyYWxfc3RvcmVfZGVjMjMsIGdlbmVyYWxfc3RvcmVfZGVjMjQsIF9kZWMyNSwgZ2VuZXJhbF9zdG9yZV9jbGFzcywgZ2VuZXJhbF9zdG9yZV9kZXNjcmlwdG9yLCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3IyLCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3IzLCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3I0LCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3I1LCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3I2LCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3I3LCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3I4LCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3I5LCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3IxMCwgZ2VuZXJhbF9zdG9yZV9kZXNjcmlwdG9yMTEsIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjEyLCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3IxMywgZ2VuZXJhbF9zdG9yZV9kZXNjcmlwdG9yMTQsIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjE1O1xcblxcbmZ1bmN0aW9uIGdlbmVyYWxfc3RvcmVfYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxcblxcbmZ1bmN0aW9uIGdlbmVyYWxfc3RvcmVfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgZ2VuZXJhbF9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJuZXh0XFxcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgZ2VuZXJhbF9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJ0aHJvd1xcXCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cXG5cXG5mdW5jdGlvbiBnZW5lcmFsX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkgeyBpZiAoIWRlc2NyaXB0b3IpIHJldHVybjsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHsgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLCBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLCB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSwgdmFsdWU6IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDAgfSk7IH1cXG5cXG5mdW5jdGlvbiBnZW5lcmFsX3N0b3JlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFxcXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cXFwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gZ2VuZXJhbF9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFxcXCJ2YWx1ZVxcXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gZ2VuZXJhbF9zdG9yZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGdlbmVyYWxfc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGdlbmVyYWxfc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcXFwiZnVuY3Rpb25cXFwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcXFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cXFwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cXG5cXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxcblxcbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFxcXCJvYmplY3RcXFwiIHx8IHR5cGVvZiBjYWxsID09PSBcXFwiZnVuY3Rpb25cXFwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxcblxcbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcXFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXFxcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFxcXCJ1bmRlZmluZWRcXFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcXFwiZnVuY3Rpb25cXFwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxcblxcbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG5mdW5jdGlvbiBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7IHZhciBkZXNjID0ge307IE9iamVjdC5rZXlzKGRlc2NyaXB0b3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBkZXNjW2tleV0gPSBkZXNjcmlwdG9yW2tleV07IH0pOyBkZXNjLmVudW1lcmFibGUgPSAhIWRlc2MuZW51bWVyYWJsZTsgZGVzYy5jb25maWd1cmFibGUgPSAhIWRlc2MuY29uZmlndXJhYmxlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjIHx8IGRlc2MuaW5pdGlhbGl6ZXIpIHsgZGVzYy53cml0YWJsZSA9IHRydWU7IH0gZGVzYyA9IGRlY29yYXRvcnMuc2xpY2UoKS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChkZXNjLCBkZWNvcmF0b3IpIHsgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5LCBkZXNjKSB8fCBkZXNjOyB9LCBkZXNjKTsgaWYgKGNvbnRleHQgJiYgZGVzYy5pbml0aWFsaXplciAhPT0gdm9pZCAwKSB7IGRlc2MudmFsdWUgPSBkZXNjLmluaXRpYWxpemVyID8gZGVzYy5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwOyBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkOyB9IGlmIChkZXNjLmluaXRpYWxpemVyID09PSB2b2lkIDApIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2MpOyBkZXNjID0gbnVsbDsgfSByZXR1cm4gZGVzYzsgfVxcblxcbmZ1bmN0aW9uIGdlbmVyYWxfc3RvcmVfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyKGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgdGhyb3cgbmV3IEVycm9yKCdEZWNvcmF0aW5nIGNsYXNzIHByb3BlcnR5IGZhaWxlZC4gUGxlYXNlIGVuc3VyZSB0aGF0ICcgKyAncHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpcyBlbmFibGVkIGFuZCBydW5zIGFmdGVyIHRoZSBkZWNvcmF0b3JzIHRyYW5zZm9ybS4nKTsgfVxcblxcblxcblxcblxcblxcblxcblxcblxcbnZhciBHZW5lcmFsU3RvcmUgPSAoZ2VuZXJhbF9zdG9yZV9kZWMgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGdlbmVyYWxfc3RvcmVfZGVjMiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgZ2VuZXJhbF9zdG9yZV9kZWMzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzQgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGdlbmVyYWxfc3RvcmVfZGVjNSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgZ2VuZXJhbF9zdG9yZV9kZWM2ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzcgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGdlbmVyYWxfc3RvcmVfZGVjOCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgZ2VuZXJhbF9zdG9yZV9kZWM5ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzEwID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzExID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzEyID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzEzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzE0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzE1ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzE2ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzE3ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzE4ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzE5ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzIwID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzIxID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzIyID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzIzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBnZW5lcmFsX3N0b3JlX2RlYzI0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBfZGVjMjUgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIChnZW5lcmFsX3N0b3JlX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVN0b3JlKSB7XFxuICBfaW5oZXJpdHMoR2VuZXJhbFN0b3JlLCBfQmFzZVN0b3JlKTtcXG5cXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoR2VuZXJhbFN0b3JlKTtcXG5cXG4gIGZ1bmN0aW9uIEdlbmVyYWxTdG9yZShfcmVmKSB7XFxuICAgIHZhciBfdGhpcztcXG5cXG4gICAgdmFyIHJvb3Rfc3RvcmUgPSBfcmVmLnJvb3Rfc3RvcmUsXFxuICAgICAgICBXUyA9IF9yZWYuV1M7XFxuXFxuICAgIGdlbmVyYWxfc3RvcmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2VuZXJhbFN0b3JlKTtcXG5cXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCB7XFxuICAgICAgcm9vdF9zdG9yZTogcm9vdF9zdG9yZVxcbiAgICB9KTtcXG5cXG4gICAgZ2VuZXJhbF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KF90aGlzLCBcXFwiaXNfbG9hZGluZ1xcXCIsIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvciwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xcblxcbiAgICBnZW5lcmFsX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkoX3RoaXMsIFxcXCJpc19wMnBfdmlzaWJsZVxcXCIsIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjIsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcXG5cXG4gICAgZ2VuZXJhbF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KF90aGlzLCBcXFwicDJwX25vdGlmaWNhdGlvbl9jb3VudFxcXCIsIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjMsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcXG5cXG4gICAgZ2VuZXJhbF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KF90aGlzLCBcXFwiY2FzaGllcl9yb3V0ZV90YWJfaW5kZXhcXFwiLCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3I0LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIGdlbmVyYWxfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcImlzX2RlcG9zaXRcXFwiLCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3I1LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIGdlbmVyYWxfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcInNob3VsZF9zaG93X2FsbF9hdmFpbGFibGVfY3VycmVuY2llc1xcXCIsIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjYsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcXG5cXG4gICAgZ2VuZXJhbF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KF90aGlzLCBcXFwiaXNfY2FzaGllcl9kZWZhdWx0XFxcIiwgZ2VuZXJhbF9zdG9yZV9kZXNjcmlwdG9yNywgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xcblxcbiAgICBnZW5lcmFsX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkoX3RoaXMsIFxcXCJkZXBvc2l0X3RhcmdldFxcXCIsIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjgsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcXG5cXG4gICAgZ2VuZXJhbF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KF90aGlzLCBcXFwic2hvdWxkX3NldF9jdXJyZW5jeV9tb2RhbF90aXRsZV9jaGFuZ2VcXFwiLCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3I5LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIGdlbmVyYWxfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcInAycF9hZHZlcnRpc2VyX2Vycm9yXFxcIiwgZ2VuZXJhbF9zdG9yZV9kZXNjcmlwdG9yMTAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcXG5cXG4gICAgZ2VuZXJhbF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KF90aGlzLCBcXFwiaGFzX3NldF9jdXJyZW5jeVxcXCIsIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjExLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIGdlbmVyYWxfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcInNob3VsZF9wZXJjZW50YWdlX3Jlc2V0XFxcIiwgZ2VuZXJhbF9zdG9yZV9kZXNjcmlwdG9yMTIsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcXG5cXG4gICAgZ2VuZXJhbF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KF90aGlzLCBcXFwicGVyY2VudGFnZVxcXCIsIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjEzLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIGdlbmVyYWxfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcInNob3dfcDJwX2luX2Nhc2hpZXJfZGVmYXVsdFxcXCIsIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjE0LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIGdlbmVyYWxfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcIm9uUmVtb3VudFxcXCIsIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjE1LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIF90aGlzLmFjdGl2ZV9jb250YWluZXIgPSBjb25zdGFudHMuY29udGFpbmVycy5kZXBvc2l0O1xcbiAgICBfdGhpcy5pc19wb3B1bGF0aW5nX3ZhbHVlcyA9IGZhbHNlO1xcbiAgICBfdGhpcy5XUyA9IFdTO1xcbiAgICBfdGhpcy5yb290X3N0b3JlID0gcm9vdF9zdG9yZTtcXG4gICAgKDAsZXh0ZXJuYWxfbW9ieF8ud2hlbikoZnVuY3Rpb24gKCkge1xcbiAgICAgIHJldHVybiBfdGhpcy5yb290X3N0b3JlLmNsaWVudC5pc19sb2dnZWRfaW47XFxuICAgIH0sIGZ1bmN0aW9uICgpIHtcXG4gICAgICBfdGhpcy5zZXRIYXNTZXRDdXJyZW5jeSgpO1xcblxcbiAgICAgIF90aGlzLmF0dGFjaENhc2hpZXJUb01lbnUoKTtcXG4gICAgfSk7XFxuXFxuICAgIGlmICghX3RoaXMuaGFzX3NldF9jdXJyZW5jeSkge1xcbiAgICAgIF90aGlzLmNoYW5nZVNldEN1cnJlbmN5TW9kYWxUaXRsZSgpO1xcbiAgICB9XFxuXFxuICAgICgwLGV4dGVybmFsX21vYnhfLnJlYWN0aW9uKShmdW5jdGlvbiAoKSB7XFxuICAgICAgcmV0dXJuIFtfdGhpcy5yb290X3N0b3JlLmNsaWVudC5zd2l0Y2hlZCwgX3RoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfbG9nZ2VkX2luLCBfdGhpcy5yb290X3N0b3JlLmNsaWVudC5jdXJyZW5jeV07XFxuICAgIH0sIGZ1bmN0aW9uICgpIHtcXG4gICAgICBfdGhpcy5pbml0KCk7XFxuICAgIH0pO1xcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuXFxuICBnZW5lcmFsX3N0b3JlX2NyZWF0ZUNsYXNzKEdlbmVyYWxTdG9yZSwgW3tcXG4gICAga2V5OiBcXFwic2V0T25SZW1vdW50XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE9uUmVtb3VudChmdW5jKSB7XFxuICAgICAgdGhpcy5vblJlbW91bnQgPSBmdW5jO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImlzX2NyeXB0b1xcXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHZhciBjdXJyZW5jeSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQuY3VycmVuY3k7XFxuICAgICAgcmV0dXJuICEhY3VycmVuY3kgJiYgKDAsc2hhcmVkXy5pc0NyeXB0b2N1cnJlbmN5KShjdXJyZW5jeSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiaXNfcDJwX2VuYWJsZWRcXFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5pc19wMnBfdmlzaWJsZSAmJiAhdGhpcy5yb290X3N0b3JlLmNsaWVudC5pc19ldTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzaG93UDJwSW5DYXNoaWVyRGVmYXVsdFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93UDJwSW5DYXNoaWVyRGVmYXVsdCgpIHtcXG4gICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSRjbGllID0gdGhpcy5yb290X3N0b3JlLmNsaWVudCxcXG4gICAgICAgICAgYWNjb3VudF9saXN0ID0gX3RoaXMkcm9vdF9zdG9yZSRjbGllLmFjY291bnRfbGlzdCxcXG4gICAgICAgICAgaXNfdmlydHVhbCA9IF90aGlzJHJvb3Rfc3RvcmUkY2xpZS5pc192aXJ0dWFsO1xcbiAgICAgIHZhciBpc19wMnBfcmVzdHJpY3RlZCA9IHRoaXMucDJwX2FkdmVydGlzZXJfZXJyb3IgPT09ICdSZXN0cmljdGVkQ291bnRyeSc7XFxuICAgICAgdmFyIGhhc191c2RfY3VycmVuY3kgPSBhY2NvdW50X2xpc3Quc29tZShmdW5jdGlvbiAoYWNjb3VudCkge1xcbiAgICAgICAgcmV0dXJuIGFjY291bnQudGl0bGUgPT09ICdVU0QnO1xcbiAgICAgIH0pO1xcbiAgICAgIHZhciBoYXNfdXNlcl9maWF0X2N1cnJlbmN5ID0gYWNjb3VudF9saXN0LnNvbWUoZnVuY3Rpb24gKGFjY291bnQpIHtcXG4gICAgICAgIHJldHVybiAhKDAsc2hhcmVkXy5pc0NyeXB0b2N1cnJlbmN5KShhY2NvdW50LnRpdGxlKSAmJiBhY2NvdW50LnRpdGxlICE9PSAnUmVhbCc7XFxuICAgICAgfSk7XFxuXFxuICAgICAgaWYgKGlzX3AycF9yZXN0cmljdGVkIHx8IGlzX3ZpcnR1YWwgfHwgaGFzX3VzZXJfZmlhdF9jdXJyZW5jeSAmJiAhaGFzX3VzZF9jdXJyZW5jeSkge1xcbiAgICAgICAgdGhpcy5zaG93X3AycF9pbl9jYXNoaWVyX2RlZmF1bHQgPSBmYWxzZTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgdGhpcy5zaG93X3AycF9pbl9jYXNoaWVyX2RlZmF1bHQgPSB0cnVlO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJhdHRhY2hDYXNoaWVyVG9NZW51XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGF0dGFjaENhc2hpZXJUb01lbnUoKSB7XFxuICAgICAgdmFyIF90aGlzJHJvb3Rfc3RvcmUgPSB0aGlzLnJvb3Rfc3RvcmUsXFxuICAgICAgICAgIG1lbnUgPSBfdGhpcyRyb290X3N0b3JlLm1lbnUsXFxuICAgICAgICAgIHVpID0gX3RoaXMkcm9vdF9zdG9yZS51aTtcXG5cXG4gICAgICBpZiAoIXRoaXMuaGFzX3NldF9jdXJyZW5jeSkge1xcbiAgICAgICAgdGhpcy5zZXRIYXNTZXRDdXJyZW5jeSgpO1xcbiAgICAgIH1cXG5cXG4gICAgICBtZW51LmF0dGFjaCh7XFxuICAgICAgICBpZDogJ2R0X2Nhc2hpZXJfdGFiJyxcXG4gICAgICAgIGljb246IC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChjYXNoaWVyX25vdGlmaWNhdGlvbnMsIHtcXG4gICAgICAgICAgcDJwX25vdGlmaWNhdGlvbl9jb3VudDogdGhpcy5wMnBfbm90aWZpY2F0aW9uX2NvdW50XFxuICAgICAgICB9KSxcXG4gICAgICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoKSB7XFxuICAgICAgICAgIHJldHVybiAoMCx0cmFuc2xhdGlvbnNfLmxvY2FsaXplKSgnQ2FzaGllcicpO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGxpbmtfdG86IHRoaXMuaGFzX3NldF9jdXJyZW5jeSAmJiBzaGFyZWRfLnJvdXRlcy5jYXNoaWVyLFxcbiAgICAgICAgb25DbGljazogIXRoaXMuaGFzX3NldF9jdXJyZW5jeSAmJiB1aS50b2dnbGVTZXRDdXJyZW5jeU1vZGFsLFxcbiAgICAgICAgbG9naW5fb25seTogdHJ1ZVxcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInJlcGxhY2VDYXNoaWVyTWVudU9uY2xpY2tcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZUNhc2hpZXJNZW51T25jbGljaygpIHtcXG4gICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZTIgPSB0aGlzLnJvb3Rfc3RvcmUsXFxuICAgICAgICAgIG1lbnUgPSBfdGhpcyRyb290X3N0b3JlMi5tZW51LFxcbiAgICAgICAgICB1aSA9IF90aGlzJHJvb3Rfc3RvcmUyLnVpO1xcbiAgICAgIHRoaXMuc2V0SGFzU2V0Q3VycmVuY3koKTtcXG4gICAgICBtZW51LnVwZGF0ZSh7XFxuICAgICAgICBpZDogJ2R0X2Nhc2hpZXJfdGFiJyxcXG4gICAgICAgIGljb246IC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChjYXNoaWVyX25vdGlmaWNhdGlvbnMsIHtcXG4gICAgICAgICAgcDJwX25vdGlmaWNhdGlvbl9jb3VudDogdGhpcy5wMnBfbm90aWZpY2F0aW9uX2NvdW50XFxuICAgICAgICB9KSxcXG4gICAgICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoKSB7XFxuICAgICAgICAgIHJldHVybiAoMCx0cmFuc2xhdGlvbnNfLmxvY2FsaXplKSgnQ2FzaGllcicpO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGxpbmtfdG86IHRoaXMuaGFzX3NldF9jdXJyZW5jeSAmJiBzaGFyZWRfLnJvdXRlcy5jYXNoaWVyLFxcbiAgICAgICAgb25DbGljazogIXRoaXMuaGFzX3NldF9jdXJyZW5jeSA/IHVpLnRvZ2dsZVNldEN1cnJlbmN5TW9kYWwgOiBmYWxzZSxcXG4gICAgICAgIGxvZ2luX29ubHk6IHRydWVcXG4gICAgICB9LCAxKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRIYXNTZXRDdXJyZW5jeVxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRIYXNTZXRDdXJyZW5jeSgpIHtcXG4gICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSRjbGllMiA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQsXFxuICAgICAgICAgIGFjY291bnRfbGlzdCA9IF90aGlzJHJvb3Rfc3RvcmUkY2xpZTIuYWNjb3VudF9saXN0LFxcbiAgICAgICAgICBoYXNfYWN0aXZlX3JlYWxfYWNjb3VudCA9IF90aGlzJHJvb3Rfc3RvcmUkY2xpZTIuaGFzX2FjdGl2ZV9yZWFsX2FjY291bnQ7XFxuICAgICAgdGhpcy5oYXNfc2V0X2N1cnJlbmN5ID0gYWNjb3VudF9saXN0LmZpbHRlcihmdW5jdGlvbiAoYWNjb3VudCkge1xcbiAgICAgICAgcmV0dXJuICFhY2NvdW50LmlzX3ZpcnR1YWw7XFxuICAgICAgfSkuc29tZShmdW5jdGlvbiAoYWNjb3VudCkge1xcbiAgICAgICAgcmV0dXJuIGFjY291bnQudGl0bGUgIT09ICdSZWFsJztcXG4gICAgICB9KSB8fCAhaGFzX2FjdGl2ZV9yZWFsX2FjY291bnQ7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiY2hhbmdlU2V0Q3VycmVuY3lNb2RhbFRpdGxlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVNldEN1cnJlbmN5TW9kYWxUaXRsZSgpIHtcXG4gICAgICB0aGlzLnNob3VsZF9zZXRfY3VycmVuY3lfbW9kYWxfdGl0bGVfY2hhbmdlID0gdHJ1ZTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJvbk1vdW50Q2FzaGllckRlZmF1bHRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfb25Nb3VudENhc2hpZXJEZWZhdWx0ID0gZ2VuZXJhbF9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHtcXG4gICAgICAgIHZhciBfcGF5bWVudF9hZ2VudCRhbGxfcGEsIF9wYXltZW50X2FnZW50JGFsbF9wYTI7XFxuXFxuICAgICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSRtb2R1LCBhY2NvdW50X3Byb21wdF9kaWFsb2csIHBheW1lbnRfYWdlbnQsIGFnZW50X2xpc3Q7XFxuXFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIF90aGlzJHJvb3Rfc3RvcmUkbW9kdSA9IHRoaXMucm9vdF9zdG9yZS5tb2R1bGVzLmNhc2hpZXIsIGFjY291bnRfcHJvbXB0X2RpYWxvZyA9IF90aGlzJHJvb3Rfc3RvcmUkbW9kdS5hY2NvdW50X3Byb21wdF9kaWFsb2csIHBheW1lbnRfYWdlbnQgPSBfdGhpcyRyb290X3N0b3JlJG1vZHUucGF5bWVudF9hZ2VudDtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc19zZXRfY3VycmVuY3kpIHtcXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldEhhc1NldEN1cnJlbmN5KCk7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJc0Nhc2hpZXJEZWZhdWx0KHRydWUpO1xcbiAgICAgICAgICAgICAgICBhY2NvdW50X3Byb21wdF9kaWFsb2cucmVzZXRJc0NvbmZpcm1lZCgpO1xcbiAgICAgICAgICAgICAgICB0aGlzLnNldExvYWRpbmcodHJ1ZSk7XFxuXFxuICAgICAgICAgICAgICAgIGlmICgoX3BheW1lbnRfYWdlbnQkYWxsX3BhID0gcGF5bWVudF9hZ2VudC5hbGxfcGF5bWVudF9hZ2VudF9saXN0KSAhPT0gbnVsbCAmJiBfcGF5bWVudF9hZ2VudCRhbGxfcGEgIT09IHZvaWQgMCAmJiAoX3BheW1lbnRfYWdlbnQkYWxsX3BhMiA9IF9wYXltZW50X2FnZW50JGFsbF9wYS5wYXltZW50YWdlbnRfbGlzdCkgIT09IG51bGwgJiYgX3BheW1lbnRfYWdlbnQkYWxsX3BhMiAhPT0gdm9pZCAwICYmIF9wYXltZW50X2FnZW50JGFsbF9wYTIubGlzdCkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDtcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBheW1lbnRfYWdlbnQuZ2V0QWxsUGF5bWVudEFnZW50TGlzdCgpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA4OlxcbiAgICAgICAgICAgICAgICBhZ2VudF9saXN0ID0gX2NvbnRleHQuc2VudDtcXG4gICAgICAgICAgICAgICAgcGF5bWVudF9hZ2VudC5zZXRBbGxQYXltZW50QWdlbnRMaXN0KGFnZW50X2xpc3QpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAxMDpcXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTE6XFxuICAgICAgICAgICAgICBjYXNlIFxcXCJlbmRcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7XFxuICAgICAgfSkpO1xcblxcbiAgICAgIGZ1bmN0aW9uIG9uTW91bnRDYXNoaWVyRGVmYXVsdCgpIHtcXG4gICAgICAgIHJldHVybiBfb25Nb3VudENhc2hpZXJEZWZhdWx0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBvbk1vdW50Q2FzaGllckRlZmF1bHQ7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJjYWxjdWxhdGVQZXJjZW50YWdlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGN1bGF0ZVBlcmNlbnRhZ2UoKSB7XFxuICAgICAgdmFyIGFtb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5yb290X3N0b3JlLm1vZHVsZXMuY2FzaGllci5jcnlwdG9fZmlhdF9jb252ZXJ0ZXIuY29udmVydGVyX2Zyb21fYW1vdW50O1xcbiAgICAgIHZhciBfdGhpcyRyb290X3N0b3JlMyA9IHRoaXMucm9vdF9zdG9yZSxcXG4gICAgICAgICAgY2xpZW50ID0gX3RoaXMkcm9vdF9zdG9yZTMuY2xpZW50LFxcbiAgICAgICAgICBtb2R1bGVzID0gX3RoaXMkcm9vdF9zdG9yZTMubW9kdWxlcztcXG4gICAgICB2YXIgYWNjb3VudF90cmFuc2ZlciA9IG1vZHVsZXMuY2FzaGllci5hY2NvdW50X3RyYW5zZmVyO1xcblxcbiAgICAgIGlmICh0aGlzLmFjdGl2ZV9jb250YWluZXIgPT09IGFjY291bnRfdHJhbnNmZXIuY29udGFpbmVyKSB7XFxuICAgICAgICB0aGlzLnBlcmNlbnRhZ2UgPSArKGFtb3VudCAvICthY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uYmFsYW5jZSAqIDEwMCkudG9GaXhlZCgwKTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgdGhpcy5wZXJjZW50YWdlID0gKyhhbW91bnQgLyArY2xpZW50LmJhbGFuY2UgKiAxMDApLnRvRml4ZWQoMCk7XFxuICAgICAgfVxcblxcbiAgICAgIGlmICghaXNGaW5pdGUodGhpcy5wZXJjZW50YWdlKSkge1xcbiAgICAgICAgdGhpcy5wZXJjZW50YWdlID0gMDtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwicGVyY2VudGFnZVNlbGVjdG9yU2VsZWN0aW9uU3RhdHVzXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBlcmNlbnRhZ2VTZWxlY3RvclNlbGVjdGlvblN0YXR1cyhzaG91bGRfcGVyY2VudGFnZV9yZXNldCkge1xcbiAgICAgIHRoaXMuc2hvdWxkX3BlcmNlbnRhZ2VfcmVzZXQgPSBzaG91bGRfcGVyY2VudGFnZV9yZXNldDtcXG5cXG4gICAgICBpZiAoc2hvdWxkX3BlcmNlbnRhZ2VfcmVzZXQpIHtcXG4gICAgICAgIHRoaXMucGVyY2VudGFnZSA9IDA7XFxuICAgICAgfVxcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldElzRGVwb3NpdFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc0RlcG9zaXQoaXNfZGVwb3NpdCkge1xcbiAgICAgIHRoaXMuaXNfZGVwb3NpdCA9IGlzX2RlcG9zaXQ7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0U2hvdWxkU2hvd0FsbEF2YWlsYWJsZUN1cnJlbmNpZXNcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2hvdWxkU2hvd0FsbEF2YWlsYWJsZUN1cnJlbmNpZXModmFsdWUpIHtcXG4gICAgICB0aGlzLnNob3VsZF9zaG93X2FsbF9hdmFpbGFibGVfY3VycmVuY2llcyA9IHZhbHVlO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldElzQ2FzaGllckRlZmF1bHRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SXNDYXNoaWVyRGVmYXVsdChpc19jYXNoaWVyX2RlZmF1bHQpIHtcXG4gICAgICB0aGlzLmlzX2Nhc2hpZXJfZGVmYXVsdCA9IGlzX2Nhc2hpZXJfZGVmYXVsdDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXREZXBvc2l0VGFyZ2V0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldERlcG9zaXRUYXJnZXQodGFyZ2V0KSB7XFxuICAgICAgdGhpcy5kZXBvc2l0X3RhcmdldCA9IHRhcmdldDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJjb250aW51ZVJvdXRlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRpbnVlUm91dGUoKSB7XFxuICAgICAgdGhpcy5yb290X3N0b3JlLmNvbW1vbi5yb3V0ZVRvKHRoaXMuZGVwb3NpdF90YXJnZXQpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldEFjY291bnRTd2l0Y2hMaXN0ZW5lclxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRBY2NvdW50U3dpdGNoTGlzdGVuZXIoKSB7XFxuICAgICAgLy8gY2FzaGllciBpbml0cyBvbmNlIGFuZCB0cmllcyB0byBzdGF5IGFjdGl2ZSB1bnRpbCBzd2l0Y2hpbmcgYWNjb3VudFxcbiAgICAgIC8vIHNpbmNlIGNhc2hpZXIgY2FsbHMgdGFrZSBhIGxvbmcgdGltZSB0byByZXNwb25kIG9yIGRpc3BsYXkgaW4gaWZyYW1lXFxuICAgICAgLy8gc28gd2UgZG9uJ3QgaGF2ZSBhbnkgdW5tb3VudCBmdW5jdGlvbiBoZXJlIGFuZCBldmVyeXRoaW5nIGdldHMgcmVzZXQgb24gc3dpdGNoIGluc3RlYWRcXG4gICAgICB0aGlzLmRpc3Bvc2VTd2l0Y2hBY2NvdW50KCk7XFxuICAgICAgdGhpcy5vblN3aXRjaEFjY291bnQodGhpcy5hY2NvdW50U3dpdGNoZXJMaXN0ZW5lcik7XFxuICAgIH0gLy8gSW5pdGlhbGlzZSBQMlAgYXR0cmlidXRlcyBvbiBhcHAgbG9hZCB3aXRob3V0IG1vdW50aW5nIHRoZSBlbnRpcmUgY2FzaGllclxcblxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJpbml0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XFxuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICAgICAgaWYgKHRoaXMucm9vdF9zdG9yZS5tb2R1bGVzLmNhc2hpZXIpIHtcXG4gICAgICAgIHZhciBfdGhpcyRyb290X3N0b3JlNCA9IHRoaXMucm9vdF9zdG9yZSxcXG4gICAgICAgICAgICBjbGllbnQgPSBfdGhpcyRyb290X3N0b3JlNC5jbGllbnQsXFxuICAgICAgICAgICAgbW9kdWxlcyA9IF90aGlzJHJvb3Rfc3RvcmU0Lm1vZHVsZXM7XFxuICAgICAgICB2YXIgX21vZHVsZXMkY2FzaGllciA9IG1vZHVsZXMuY2FzaGllcixcXG4gICAgICAgICAgICBhY2NvdW50X3Byb21wdF9kaWFsb2cgPSBfbW9kdWxlcyRjYXNoaWVyLmFjY291bnRfcHJvbXB0X2RpYWxvZyxcXG4gICAgICAgICAgICB3aXRoZHJhdyA9IF9tb2R1bGVzJGNhc2hpZXIud2l0aGRyYXc7XFxuICAgICAgICB2YXIgY3VycmVuY3kgPSBjbGllbnQuY3VycmVuY3ksXFxuICAgICAgICAgICAgaXNfbG9nZ2VkX2luID0gY2xpZW50LmlzX2xvZ2dlZF9pbixcXG4gICAgICAgICAgICBzd2l0Y2hlZCA9IGNsaWVudC5zd2l0Y2hlZDtcXG4gICAgICAgICgwLGV4dGVybmFsX21vYnhfLndoZW4pKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgcmV0dXJuIGlzX2xvZ2dlZF9pbjtcXG4gICAgICAgIH0sIC8qI19fUFVSRV9fKi9nZW5lcmFsX3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHtcXG4gICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcXG4gICAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XFxuICAgICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7XFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5nZXRBZHZlcnRpemVyRXJyb3IoKTtcXG5cXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxcbiAgICAgICAgICAgICAgICAgIF90aGlzMi5jaGVja1AycFN0YXR1cygpO1xcblxcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTtcXG4gICAgICAgICAgICAgICAgICByZXR1cm4gd2l0aGRyYXcuY2hlY2sxMGtMaW1pdCgpO1xcblxcbiAgICAgICAgICAgICAgICBjYXNlIDU6XFxuICAgICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9LCBfY2FsbGVlMik7XFxuICAgICAgICB9KSkpO1xcbiAgICAgICAgKDAsZXh0ZXJuYWxfbW9ieF8ucmVhY3Rpb24pKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgcmV0dXJuIFtzd2l0Y2hlZCwgaXNfbG9nZ2VkX2luLCBjdXJyZW5jeV07XFxuICAgICAgICB9LCAvKiNfX1BVUkVfXyovZ2VuZXJhbF9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7XFxuICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7XFxuICAgICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xcbiAgICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyO1xcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuV1Mud2FpdCgnZ2V0X3NldHRpbmdzJyk7XFxuXFxuICAgICAgICAgICAgICAgIGNhc2UgMjpcXG4gICAgICAgICAgICAgICAgICBpZiAoIWlzX2xvZ2dlZF9pbikge1xcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMDtcXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7XFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5nZXRBZHZlcnRpemVyRXJyb3IoKTtcXG5cXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxcbiAgICAgICAgICAgICAgICAgIGFjY291bnRfcHJvbXB0X2RpYWxvZy5yZXNldExhc3RMb2NhdGlvbigpO1xcblxcbiAgICAgICAgICAgICAgICAgIGlmIChzd2l0Y2hlZCkge1xcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMDtcXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICBfdGhpczIuY2hlY2tQMnBTdGF0dXMoKTsgLy8gY2hlY2sgaWYgd2l0aGRyYXdhbCBsaW1pdCBpcyByZWFjaGVkXFxuICAgICAgICAgICAgICAgICAgLy8gaWYgeWVzLCB0aGlzIHdpbGwgdHJpZ2dlciB0byBzaG93IGEgbm90aWZpY2F0aW9uXFxuXFxuXFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMDtcXG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmNoZWNrMTBrTGltaXQoKTtcXG5cXG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcXG4gICAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH0sIF9jYWxsZWUzKTtcXG4gICAgICAgIH0pKSk7XFxuICAgICAgICAoMCxleHRlcm5hbF9tb2J4Xy5yZWFjdGlvbikoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICByZXR1cm4gY3VycmVuY3k7XFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIHdpdGhkcmF3LnNldElzV2l0aGRyYXdDb25maXJtZWQoZmFsc2UpO1xcbiAgICAgICAgfSk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImdldEFkdmVydGl6ZXJFcnJvclxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIF9nZXRBZHZlcnRpemVyRXJyb3IgPSBnZW5lcmFsX3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHtcXG4gICAgICAgIHZhciBhZHZlcnRpc2VyX2luZm87XFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLldTLmF1dGhvcml6ZWQucDJwQWR2ZXJ0aXNlckluZm8oKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjpcXG4gICAgICAgICAgICAgICAgYWR2ZXJ0aXNlcl9pbmZvID0gX2NvbnRleHQ0LnNlbnQ7XFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UDJwQWR2ZXJ0aXNlckVycm9yKCgwLHNoYXJlZF8uZ2V0UHJvcGVydHlWYWx1ZSkoYWR2ZXJ0aXNlcl9pbmZvLCBbJ2Vycm9yJywgJ2NvZGUnXSkpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA0OlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBfY2FsbGVlNCwgdGhpcyk7XFxuICAgICAgfSkpO1xcblxcbiAgICAgIGZ1bmN0aW9uIGdldEFkdmVydGl6ZXJFcnJvcigpIHtcXG4gICAgICAgIHJldHVybiBfZ2V0QWR2ZXJ0aXplckVycm9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBnZXRBZHZlcnRpemVyRXJyb3I7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRQMnBBZHZlcnRpc2VyRXJyb3JcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UDJwQWR2ZXJ0aXNlckVycm9yKHZhbHVlKSB7XFxuICAgICAgdGhpcy5wMnBfYWR2ZXJ0aXNlcl9lcnJvciA9IHZhbHVlO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImNoZWNrUDJwU3RhdHVzXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrUDJwU3RhdHVzKCkge1xcbiAgICAgIHZhciBhZHZlcnRpc2VyX2Vycm9yID0gdGhpcy5wMnBfYWR2ZXJ0aXNlcl9lcnJvcjtcXG4gICAgICB2YXIgaXNfcDJwX3Jlc3RyaWN0ZWQgPSBhZHZlcnRpc2VyX2Vycm9yID09PSAnUmVzdHJpY3RlZENvdW50cnknIHx8IGFkdmVydGlzZXJfZXJyb3IgPT09ICdSZXN0cmljdGVkQ3VycmVuY3knO1xcbiAgICAgIHRoaXMuc2V0SXNQMnBWaXNpYmxlKCEoaXNfcDJwX3Jlc3RyaWN0ZWQgfHwgdGhpcy5yb290X3N0b3JlLmNsaWVudC5pc192aXJ0dWFsKSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25Nb3VudENvbW1vblxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIF9vbk1vdW50Q29tbW9uID0gZ2VuZXJhbF9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoc2hvdWxkX3JlbW91bnQpIHtcXG4gICAgICAgIHZhciBfdGhpcyRyb290X3N0b3JlNSwgY2xpZW50LCBjb21tb24sIG1vZHVsZXMsIF9tb2R1bGVzJGNhc2hpZXIyLCBhY2NvdW50X3RyYW5zZmVyLCBvbnJhbXAsIHBheW1lbnRfYWdlbnQsIHBheW1lbnRfYWdlbnRfdHJhbnNmZXIsIHRyYW5zYWN0aW9uX2hpc3Rvcnk7XFxuXFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBfdGhpcyRyb290X3N0b3JlNSA9IHRoaXMucm9vdF9zdG9yZSwgY2xpZW50ID0gX3RoaXMkcm9vdF9zdG9yZTUuY2xpZW50LCBjb21tb24gPSBfdGhpcyRyb290X3N0b3JlNS5jb21tb24sIG1vZHVsZXMgPSBfdGhpcyRyb290X3N0b3JlNS5tb2R1bGVzO1xcbiAgICAgICAgICAgICAgICBfbW9kdWxlcyRjYXNoaWVyMiA9IG1vZHVsZXMuY2FzaGllciwgYWNjb3VudF90cmFuc2ZlciA9IF9tb2R1bGVzJGNhc2hpZXIyLmFjY291bnRfdHJhbnNmZXIsIG9ucmFtcCA9IF9tb2R1bGVzJGNhc2hpZXIyLm9ucmFtcCwgcGF5bWVudF9hZ2VudCA9IF9tb2R1bGVzJGNhc2hpZXIyLnBheW1lbnRfYWdlbnQsIHBheW1lbnRfYWdlbnRfdHJhbnNmZXIgPSBfbW9kdWxlcyRjYXNoaWVyMi5wYXltZW50X2FnZW50X3RyYW5zZmVyLCB0cmFuc2FjdGlvbl9oaXN0b3J5ID0gX21vZHVsZXMkY2FzaGllcjIudHJhbnNhY3Rpb25faGlzdG9yeTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCFjbGllbnQuaXNfbG9nZ2VkX2luKSB7XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxMjtcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNfcG9wdWxhdGluZ192YWx1ZXMpIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDU7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoXFxcInJldHVyblxcXCIpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA1OlxcbiAgICAgICAgICAgICAgICB0aGlzLmlzX3BvcHVsYXRpbmdfdmFsdWVzID0gdHJ1ZTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZF9yZW1vdW50KSB7XFxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRPblJlbW91bnQodGhpcy5vbk1vdW50Q29tbW9uKTtcXG4gICAgICAgICAgICAgICAgfSAvLyB3ZSBuZWVkIHRvIHNlZSBpZiBjbGllbnQncyBjb3VudHJ5IGhhcyBQQVxcbiAgICAgICAgICAgICAgICAvLyBpZiB5ZXMsIHdlIGNhbiBzaG93IHRoZSBQQSB0YWIgaW4gY2FzaGllclxcblxcblxcbiAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50LnNldFBheW1lbnRBZ2VudExpc3QoKS50aGVuKHBheW1lbnRfYWdlbnQuZmlsdGVyUGF5bWVudEFnZW50TGlzdCk7XFxuXFxuICAgICAgICAgICAgICAgIGlmICghcGF5bWVudF9hZ2VudF90cmFuc2Zlci5pc19wYXltZW50X2FnZW50KSB7XFxuICAgICAgICAgICAgICAgICAgcGF5bWVudF9hZ2VudF90cmFuc2Zlci5jaGVja0lzUGF5bWVudEFnZW50KCk7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgaWYgKCFhY2NvdW50X3RyYW5zZmVyLmFjY291bnRzX2xpc3QubGVuZ3RoKSB7XFxuICAgICAgICAgICAgICAgICAgYWNjb3VudF90cmFuc2Zlci5zb3J0QWNjb3VudHNUcmFuc2ZlcigpO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGlmICghb25yYW1wLmlzX29ucmFtcF90YWJfdmlzaWJsZSAmJiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuZW5kc1dpdGgoc2hhcmVkXy5yb3V0ZXMuY2FzaGllcl9vbnJhbXApKSB7XFxuICAgICAgICAgICAgICAgICAgY29tbW9uLnJvdXRlVG8oc2hhcmVkXy5yb3V0ZXMuY2FzaGllcl9kZXBvc2l0KTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBpZiAoIXRyYW5zYWN0aW9uX2hpc3RvcnkuaXNfY3J5cHRvX3RyYW5zYWN0aW9uc192aXNpYmxlICYmIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5lbmRzV2l0aChzaGFyZWRfLnJvdXRlcy5jYXNoaWVyX2NyeXB0b190cmFuc2FjdGlvbnMpKSB7XFxuICAgICAgICAgICAgICAgICAgY29tbW9uLnJvdXRlVG8oc2hhcmVkXy5yb3V0ZXMuY2FzaGllcl9kZXBvc2l0KTtcXG4gICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbl9oaXN0b3J5LnNldElzQ3J5cHRvVHJhbnNhY3Rpb25zVmlzaWJsZSh0cnVlKTtcXG4gICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbl9oaXN0b3J5Lm9uTW91bnQoKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgY2FzZSAxMjpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTUsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBvbk1vdW50Q29tbW9uKF94KSB7XFxuICAgICAgICByZXR1cm4gX29uTW91bnRDb21tb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIG9uTW91bnRDb21tb247XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRDYXNoaWVyVGFiSW5kZXhcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q2FzaGllclRhYkluZGV4KGluZGV4KSB7XFxuICAgICAgdGhpcy5jYXNoaWVyX3JvdXRlX3RhYl9pbmRleCA9IGluZGV4O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldE5vdGlmaWNhdGlvbkNvdW50XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE5vdGlmaWNhdGlvbkNvdW50KG5vdGlmaWNhdGlvbl9jb3VudCkge1xcbiAgICAgIHRoaXMucDJwX25vdGlmaWNhdGlvbl9jb3VudCA9IG5vdGlmaWNhdGlvbl9jb3VudDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRJc1AycFZpc2libGVcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SXNQMnBWaXNpYmxlKGlzX3AycF92aXNpYmxlKSB7XFxuICAgICAgdGhpcy5pc19wMnBfdmlzaWJsZSA9IGlzX3AycF92aXNpYmxlO1xcblxcbiAgICAgIGlmICghaXNfcDJwX3Zpc2libGUgJiYgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmVuZHNXaXRoKHNoYXJlZF8ucm91dGVzLmNhc2hpZXJfcDJwKSkge1xcbiAgICAgICAgdmFyIF90aGlzJHJvb3Rfc3RvcmUkbW9kdTI7XFxuXFxuICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY29tbW9uLnJvdXRlVG8oKF90aGlzJHJvb3Rfc3RvcmUkbW9kdTIgPSB0aGlzLnJvb3Rfc3RvcmUubW9kdWxlcy5jYXNoaWVyLmFjY291bnRfcHJvbXB0X2RpYWxvZy5sYXN0X2xvY2F0aW9uKSAhPT0gbnVsbCAmJiBfdGhpcyRyb290X3N0b3JlJG1vZHUyICE9PSB2b2lkIDAgPyBfdGhpcyRyb290X3N0b3JlJG1vZHUyIDogc2hhcmVkXy5yb3V0ZXMuY2FzaGllcl9kZXBvc2l0KTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiaXNfY2FzaGllcl9sb2NrZWRcXFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICB2YXIgYWNjb3VudF9zdGF0dXMgPSB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmFjY291bnRfc3RhdHVzO1xcbiAgICAgIGlmICghKGFjY291bnRfc3RhdHVzICE9PSBudWxsICYmIGFjY291bnRfc3RhdHVzICE9PSB2b2lkIDAgJiYgYWNjb3VudF9zdGF0dXMuc3RhdHVzKSkgcmV0dXJuIGZhbHNlO1xcbiAgICAgIHJldHVybiBhY2NvdW50X3N0YXR1cy5zdGF0dXMuc29tZShmdW5jdGlvbiAoc3RhdHVzX25hbWUpIHtcXG4gICAgICAgIHJldHVybiBzdGF0dXNfbmFtZSA9PT0gJ2Nhc2hpZXJfbG9ja2VkJztcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJpc19zeXN0ZW1fbWFpbnRlbmFuY2VcXFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICB2YXIgYWNjb3VudF9zdGF0dXMgPSB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmFjY291bnRfc3RhdHVzO1xcbiAgICAgIGlmICghKGFjY291bnRfc3RhdHVzICE9PSBudWxsICYmIGFjY291bnRfc3RhdHVzICE9PSB2b2lkIDAgJiYgYWNjb3VudF9zdGF0dXMuY2FzaGllcl92YWxpZGF0aW9uKSkgcmV0dXJuIGZhbHNlO1xcbiAgICAgIHJldHVybiBhY2NvdW50X3N0YXR1cy5jYXNoaWVyX3ZhbGlkYXRpb24uc29tZShmdW5jdGlvbiAodmFsaWRhdGlvbikge1xcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb24gPT09ICdzeXN0ZW1fbWFpbnRlbmFuY2UnO1xcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldExvYWRpbmdcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TG9hZGluZyhpc19sb2FkaW5nKSB7XFxuICAgICAgdGhpcy5pc19sb2FkaW5nID0gaXNfbG9hZGluZztcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRBY3RpdmVUYWJcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QWN0aXZlVGFiKGNvbnRhaW5lcikge1xcbiAgICAgIHRoaXMuYWN0aXZlX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJhY2NvdW50U3dpdGNoZXJMaXN0ZW5lclxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhY2NvdW50U3dpdGNoZXJMaXN0ZW5lcigpIHtcXG4gICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSRtb2R1MyA9IHRoaXMucm9vdF9zdG9yZS5tb2R1bGVzLmNhc2hpZXIsXFxuICAgICAgICAgIGlmcmFtZSA9IF90aGlzJHJvb3Rfc3RvcmUkbW9kdTMuaWZyYW1lLFxcbiAgICAgICAgICBwYXltZW50X2FnZW50ID0gX3RoaXMkcm9vdF9zdG9yZSRtb2R1My5wYXltZW50X2FnZW50LFxcbiAgICAgICAgICB3aXRoZHJhdyA9IF90aGlzJHJvb3Rfc3RvcmUkbW9kdTMud2l0aGRyYXc7XFxuICAgICAgd2l0aGRyYXcudmVyaWZpY2F0aW9uLmNsZWFyVmVyaWZpY2F0aW9uKCk7XFxuICAgICAgcGF5bWVudF9hZ2VudC52ZXJpZmljYXRpb24uY2xlYXJWZXJpZmljYXRpb24oKTtcXG4gICAgICBpZnJhbWUuY2xlYXJJZnJhbWUoKTtcXG4gICAgICB0aGlzLnBheW1lbnRfYWdlbnQgPSBwYXltZW50X2FnZW50O1xcbiAgICAgIHRoaXMuaXNfcG9wdWxhdGluZ192YWx1ZXMgPSBmYWxzZTtcXG4gICAgICB0aGlzLm9uUmVtb3VudCgpO1xcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIEdlbmVyYWxTdG9yZTtcXG59KEJhc2VTdG9yZSksIChnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3IgPSBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX2xvYWRpbmdcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbn0pLCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3IyID0gZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19wMnBfdmlzaWJsZVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjMgPSBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInAycF9ub3RpZmljYXRpb25fY291bnRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIDA7XFxuICB9XFxufSksIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjQgPSBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNhc2hpZXJfcm91dGVfdGFiX2luZGV4XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiAwO1xcbiAgfVxcbn0pLCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3I1ID0gZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19kZXBvc2l0XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgZ2VuZXJhbF9zdG9yZV9kZXNjcmlwdG9yNiA9IGdlbmVyYWxfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2hvdWxkX3Nob3dfYWxsX2F2YWlsYWJsZV9jdXJyZW5jaWVzXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgZ2VuZXJhbF9zdG9yZV9kZXNjcmlwdG9yNyA9IGdlbmVyYWxfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfY2FzaGllcl9kZWZhdWx0XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiB0cnVlO1xcbiAgfVxcbn0pLCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3I4ID0gZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJkZXBvc2l0X3RhcmdldFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gJyc7XFxuICB9XFxufSksIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjkgPSBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNob3VsZF9zZXRfY3VycmVuY3lfbW9kYWxfdGl0bGVfY2hhbmdlXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgZ2VuZXJhbF9zdG9yZV9kZXNjcmlwdG9yMTAgPSBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInAycF9hZHZlcnRpc2VyX2Vycm9yXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiB1bmRlZmluZWQ7XFxuICB9XFxufSksIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjExID0gZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJoYXNfc2V0X2N1cnJlbmN5XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgZ2VuZXJhbF9zdG9yZV9kZXNjcmlwdG9yMTIgPSBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNob3VsZF9wZXJjZW50YWdlX3Jlc2V0XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgZ2VuZXJhbF9zdG9yZV9kZXNjcmlwdG9yMTMgPSBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInBlcmNlbnRhZ2VcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIDA7XFxuICB9XFxufSksIGdlbmVyYWxfc3RvcmVfZGVzY3JpcHRvcjE0ID0gZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzaG93X3AycF9pbl9jYXNoaWVyX2RlZmF1bHRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbn0pLCBnZW5lcmFsX3N0b3JlX2Rlc2NyaXB0b3IxNSA9IGdlbmVyYWxfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25SZW1vdW50XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcXG4gIH1cXG59KSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRPblJlbW91bnRcXFwiLCBbZ2VuZXJhbF9zdG9yZV9kZWNdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0T25SZW1vdW50XFxcIiksIGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19jcnlwdG9cXFwiLCBbZXh0ZXJuYWxfbW9ieF8uY29tcHV0ZWRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfY3J5cHRvXFxcIiksIGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19wMnBfZW5hYmxlZFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5jb21wdXRlZF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19wMnBfZW5hYmxlZFxcXCIpLCBnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGdlbmVyYWxfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2hvd1AycEluQ2FzaGllckRlZmF1bHRcXFwiLCBbZ2VuZXJhbF9zdG9yZV9kZWMyXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNob3dQMnBJbkNhc2hpZXJEZWZhdWx0XFxcIiksIGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJhdHRhY2hDYXNoaWVyVG9NZW51XFxcIiwgW2dlbmVyYWxfc3RvcmVfZGVjM10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJhdHRhY2hDYXNoaWVyVG9NZW51XFxcIiksIGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXBsYWNlQ2FzaGllck1lbnVPbmNsaWNrXFxcIiwgW2dlbmVyYWxfc3RvcmVfZGVjNF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXBsYWNlQ2FzaGllck1lbnVPbmNsaWNrXFxcIiksIGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRIYXNTZXRDdXJyZW5jeVxcXCIsIFtnZW5lcmFsX3N0b3JlX2RlYzVdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0SGFzU2V0Q3VycmVuY3lcXFwiKSwgZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNoYW5nZVNldEN1cnJlbmN5TW9kYWxUaXRsZVxcXCIsIFtnZW5lcmFsX3N0b3JlX2RlYzZdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY2hhbmdlU2V0Q3VycmVuY3lNb2RhbFRpdGxlXFxcIiksIGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbk1vdW50Q2FzaGllckRlZmF1bHRcXFwiLCBbZ2VuZXJhbF9zdG9yZV9kZWM3XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uTW91bnRDYXNoaWVyRGVmYXVsdFxcXCIpLCBnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGdlbmVyYWxfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY2FsY3VsYXRlUGVyY2VudGFnZVxcXCIsIFtnZW5lcmFsX3N0b3JlX2RlYzhdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY2FsY3VsYXRlUGVyY2VudGFnZVxcXCIpLCBnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGdlbmVyYWxfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwicGVyY2VudGFnZVNlbGVjdG9yU2VsZWN0aW9uU3RhdHVzXFxcIiwgW2dlbmVyYWxfc3RvcmVfZGVjOV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJwZXJjZW50YWdlU2VsZWN0b3JTZWxlY3Rpb25TdGF0dXNcXFwiKSwgZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzRGVwb3NpdFxcXCIsIFtnZW5lcmFsX3N0b3JlX2RlYzEwXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzRGVwb3NpdFxcXCIpLCBnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGdlbmVyYWxfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0U2hvdWxkU2hvd0FsbEF2YWlsYWJsZUN1cnJlbmNpZXNcXFwiLCBbZ2VuZXJhbF9zdG9yZV9kZWMxMV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRTaG91bGRTaG93QWxsQXZhaWxhYmxlQ3VycmVuY2llc1xcXCIpLCBnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGdlbmVyYWxfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0SXNDYXNoaWVyRGVmYXVsdFxcXCIsIFtnZW5lcmFsX3N0b3JlX2RlYzEyXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzQ2FzaGllckRlZmF1bHRcXFwiKSwgZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldERlcG9zaXRUYXJnZXRcXFwiLCBbZ2VuZXJhbF9zdG9yZV9kZWMxM10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXREZXBvc2l0VGFyZ2V0XFxcIiksIGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJjb250aW51ZVJvdXRlXFxcIiwgW2dlbmVyYWxfc3RvcmVfZGVjMTRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY29udGludWVSb3V0ZVxcXCIpLCBnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGdlbmVyYWxfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0QWNjb3VudFN3aXRjaExpc3RlbmVyXFxcIiwgW2dlbmVyYWxfc3RvcmVfZGVjMTVdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0QWNjb3VudFN3aXRjaExpc3RlbmVyXFxcIiksIGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpbml0XFxcIiwgW2dlbmVyYWxfc3RvcmVfZGVjMTZdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaW5pdFxcXCIpLCBnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGdlbmVyYWxfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZ2V0QWR2ZXJ0aXplckVycm9yXFxcIiwgW2dlbmVyYWxfc3RvcmVfZGVjMTddLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZ2V0QWR2ZXJ0aXplckVycm9yXFxcIiksIGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRQMnBBZHZlcnRpc2VyRXJyb3JcXFwiLCBbZ2VuZXJhbF9zdG9yZV9kZWMxOF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRQMnBBZHZlcnRpc2VyRXJyb3JcXFwiKSwgZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNoZWNrUDJwU3RhdHVzXFxcIiwgW2dlbmVyYWxfc3RvcmVfZGVjMTldLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY2hlY2tQMnBTdGF0dXNcXFwiKSwgZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uTW91bnRDb21tb25cXFwiLCBbZ2VuZXJhbF9zdG9yZV9kZWMyMF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbk1vdW50Q29tbW9uXFxcIiksIGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRDYXNoaWVyVGFiSW5kZXhcXFwiLCBbZ2VuZXJhbF9zdG9yZV9kZWMyMV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRDYXNoaWVyVGFiSW5kZXhcXFwiKSwgZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldE5vdGlmaWNhdGlvbkNvdW50XFxcIiwgW2dlbmVyYWxfc3RvcmVfZGVjMjJdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0Tm90aWZpY2F0aW9uQ291bnRcXFwiKSwgZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzUDJwVmlzaWJsZVxcXCIsIFtnZW5lcmFsX3N0b3JlX2RlYzIzXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzUDJwVmlzaWJsZVxcXCIpLCBnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGdlbmVyYWxfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfY2FzaGllcl9sb2NrZWRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8uY29tcHV0ZWRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfY2FzaGllcl9sb2NrZWRcXFwiKSwgZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX3N5c3RlbV9tYWludGVuYW5jZVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5jb21wdXRlZF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19zeXN0ZW1fbWFpbnRlbmFuY2VcXFwiKSwgZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBnZW5lcmFsX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldExvYWRpbmdcXFwiLCBbZ2VuZXJhbF9zdG9yZV9kZWMyNF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRMb2FkaW5nXFxcIiksIGdlbmVyYWxfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgZ2VuZXJhbF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoZ2VuZXJhbF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRBY3RpdmVUYWJcXFwiLCBbX2RlYzI1XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEFjdGl2ZVRhYlxcXCIpLCBnZW5lcmFsX3N0b3JlX2NsYXNzLnByb3RvdHlwZSkpLCBnZW5lcmFsX3N0b3JlX2NsYXNzKSk7XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vU3RvcmVzL2lmcmFtZS1zdG9yZS5qc1xcbnZhciBpZnJhbWVfc3RvcmVfZGVjLCBpZnJhbWVfc3RvcmVfZGVjMiwgaWZyYW1lX3N0b3JlX2RlYzMsIGlmcmFtZV9zdG9yZV9kZWM0LCBpZnJhbWVfc3RvcmVfZGVjNSwgaWZyYW1lX3N0b3JlX2RlYzYsIGlmcmFtZV9zdG9yZV9kZWM3LCBpZnJhbWVfc3RvcmVfY2xhc3MsIGlmcmFtZV9zdG9yZV9kZXNjcmlwdG9yLCBpZnJhbWVfc3RvcmVfZGVzY3JpcHRvcjIsIGlmcmFtZV9zdG9yZV9kZXNjcmlwdG9yMywgaWZyYW1lX3N0b3JlX2Rlc2NyaXB0b3I0O1xcblxcbmZ1bmN0aW9uIGlmcmFtZV9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XFxuXFxuZnVuY3Rpb24gaWZyYW1lX3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGlmcmFtZV9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJuZXh0XFxcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgaWZyYW1lX3N0b3JlX2FzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXFxcInRocm93XFxcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxcblxcbmZ1bmN0aW9uIGlmcmFtZV9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgaWYgKCFkZXNjcmlwdG9yKSByZXR1cm47IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB7IGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSwgY29uZmlndXJhYmxlOiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSwgd3JpdGFibGU6IGRlc2NyaXB0b3Iud3JpdGFibGUsIHZhbHVlOiBkZXNjcmlwdG9yLmluaXRpYWxpemVyID8gZGVzY3JpcHRvci5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwIH0pOyB9XFxuXFxuZnVuY3Rpb24gaWZyYW1lX3N0b3JlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFxcXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cXFwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gaWZyYW1lX3N0b3JlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXFxcInZhbHVlXFxcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBpZnJhbWVfc3RvcmVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBpZnJhbWVfc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGlmcmFtZV9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIGlmcmFtZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVjb3JhdG9ycywgZGVzY3JpcHRvciwgY29udGV4dCkgeyB2YXIgZGVzYyA9IHt9OyBPYmplY3Qua2V5cyhkZXNjcmlwdG9yKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgZGVzY1trZXldID0gZGVzY3JpcHRvcltrZXldOyB9KTsgZGVzYy5lbnVtZXJhYmxlID0gISFkZXNjLmVudW1lcmFibGU7IGRlc2MuY29uZmlndXJhYmxlID0gISFkZXNjLmNvbmZpZ3VyYWJsZTsgaWYgKCd2YWx1ZScgaW4gZGVzYyB8fCBkZXNjLmluaXRpYWxpemVyKSB7IGRlc2Mud3JpdGFibGUgPSB0cnVlOyB9IGRlc2MgPSBkZWNvcmF0b3JzLnNsaWNlKCkucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbiAoZGVzYywgZGVjb3JhdG9yKSB7IHJldHVybiBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYykgfHwgZGVzYzsgfSwgZGVzYyk7IGlmIChjb250ZXh0ICYmIGRlc2MuaW5pdGlhbGl6ZXIgIT09IHZvaWQgMCkgeyBkZXNjLnZhbHVlID0gZGVzYy5pbml0aWFsaXplciA/IGRlc2MuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMDsgZGVzYy5pbml0aWFsaXplciA9IHVuZGVmaW5lZDsgfSBpZiAoZGVzYy5pbml0aWFsaXplciA9PT0gdm9pZCAwKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjKTsgZGVzYyA9IG51bGw7IH0gcmV0dXJuIGRlc2M7IH1cXG5cXG5mdW5jdGlvbiBpZnJhbWVfc3RvcmVfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyKGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgdGhyb3cgbmV3IEVycm9yKCdEZWNvcmF0aW5nIGNsYXNzIHByb3BlcnR5IGZhaWxlZC4gUGxlYXNlIGVuc3VyZSB0aGF0ICcgKyAncHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpcyBlbmFibGVkIGFuZCBydW5zIGFmdGVyIHRoZSBkZWNvcmF0b3JzIHRyYW5zZm9ybS4nKTsgfVxcblxcblxcblxcbnZhciBJZnJhbWVTdG9yZSA9IChpZnJhbWVfc3RvcmVfZGVjID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBpZnJhbWVfc3RvcmVfZGVjMiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgaWZyYW1lX3N0b3JlX2RlYzMgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGlmcmFtZV9zdG9yZV9kZWM0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBpZnJhbWVfc3RvcmVfZGVjNSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgaWZyYW1lX3N0b3JlX2RlYzYgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIGlmcmFtZV9zdG9yZV9kZWM3ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCAoaWZyYW1lX3N0b3JlX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIElmcmFtZVN0b3JlKF9yZWYpIHtcXG4gICAgdmFyIFdTID0gX3JlZi5XUyxcXG4gICAgICAgIHJvb3Rfc3RvcmUgPSBfcmVmLnJvb3Rfc3RvcmU7XFxuXFxuICAgIGlmcmFtZV9zdG9yZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBJZnJhbWVTdG9yZSk7XFxuXFxuICAgIGlmcmFtZV9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJpZnJhbWVfaGVpZ2h0XFxcIiwgaWZyYW1lX3N0b3JlX2Rlc2NyaXB0b3IsIHRoaXMpO1xcblxcbiAgICBpZnJhbWVfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiaWZyYW1lX3VybFxcXCIsIGlmcmFtZV9zdG9yZV9kZXNjcmlwdG9yMiwgdGhpcyk7XFxuXFxuICAgIGlmcmFtZV9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJpc19zZXNzaW9uX3RpbWVvdXRcXFwiLCBpZnJhbWVfc3RvcmVfZGVzY3JpcHRvcjMsIHRoaXMpO1xcblxcbiAgICB0aGlzLm9uSWZyYW1lTG9hZGVkID0gJyc7XFxuXFxuICAgIGlmcmFtZV9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJ0aW1lb3V0X3Nlc3Npb25cXFwiLCBpZnJhbWVfc3RvcmVfZGVzY3JpcHRvcjQsIHRoaXMpO1xcblxcbiAgICB0aGlzLnJvb3Rfc3RvcmUgPSByb290X3N0b3JlO1xcbiAgICB0aGlzLldTID0gV1M7XFxuICB9XFxuXFxuICBpZnJhbWVfc3RvcmVfY3JlYXRlQ2xhc3MoSWZyYW1lU3RvcmUsIFt7XFxuICAgIGtleTogXFxcInNldFNlc3Npb25UaW1lb3V0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNlc3Npb25UaW1lb3V0KGlzX3Nlc3Npb25fdGltZV9vdXQpIHtcXG4gICAgICB0aGlzLmlzX3Nlc3Npb25fdGltZW91dCA9IGlzX3Nlc3Npb25fdGltZV9vdXQ7XFxuXFxuICAgICAgaWYgKGlzX3Nlc3Npb25fdGltZV9vdXQpIHtcXG4gICAgICAgIHRoaXMucmVtb3ZlT25JZnJhbWVMb2FkZWQoKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiY2hlY2tJZnJhbWVMb2FkZWRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfY2hlY2tJZnJhbWVMb2FkZWQgPSBpZnJhbWVfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XFxuICAgICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSwgbW9kdWxlcywgdWk7XFxuXFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIF90aGlzJHJvb3Rfc3RvcmUgPSB0aGlzLnJvb3Rfc3RvcmUsIG1vZHVsZXMgPSBfdGhpcyRyb290X3N0b3JlLm1vZHVsZXMsIHVpID0gX3RoaXMkcm9vdF9zdG9yZS51aTtcXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVPbklmcmFtZUxvYWRlZCgpO1xcblxcbiAgICAgICAgICAgICAgICB0aGlzLm9uSWZyYW1lTG9hZGVkID0gZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgICAgICAgICAgICBpZiAoL2Nhc2hpZXJ8ZG91Z2hmbG93Ly50ZXN0KGUub3JpZ2luKSkge1xcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlcy5jYXNoaWVyLmdlbmVyYWxfc3RvcmUuc2V0TG9hZGluZyhmYWxzZSk7IC8vIHNldCB0aGUgaGVpZ2h0IG9mIHRoZSBjb250YWluZXIgYWZ0ZXIgY29udGVudCBsb2FkcyBzbyB0aGF0IHRoZVxcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9hZGluZyBiYXIgc3RheXMgdmVydGljYWxseSBjZW50ZXJlZCB1bnRpbCB0aGUgZW5kXFxuXFxuICAgICAgICAgICAgICAgICAgICBpZiAodWkuaXNfbW9iaWxlKSB7XFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udGFpbmVySGVpZ2h0KHdpbmRvdy5pbm5lckhlaWdodCAtIDEwMCk7XFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENvbnRhaW5lckhlaWdodCh3aW5kb3cuaW5uZXJIZWlnaHQgLSAxOTApO1xcbiAgICAgICAgICAgICAgICAgICAgfSAvLyBkbyBub3QgcmVtb3ZlIHRoZSBsaXN0ZW5lclxcbiAgICAgICAgICAgICAgICAgICAgLy8gb24gZXZlcnkgaWZyYW1lIHNjcmVlbiBjaGFuZ2Ugd2UgbmVlZCB0byB1cGRhdGUgdGhlIGhlaWdodCB0byBtb3JlL2xlc3MgdG8gbWF0Y2ggdGhlIG5ldyBjb250ZW50XFxuXFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyk7XFxuXFxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5vbklmcmFtZUxvYWRlZCwgZmFsc2UpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA0OlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBjaGVja0lmcmFtZUxvYWRlZCgpIHtcXG4gICAgICAgIHJldHVybiBfY2hlY2tJZnJhbWVMb2FkZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGNoZWNrSWZyYW1lTG9hZGVkO1xcbiAgICB9KClcXG4gIH0sIHtcXG4gICAga2V5OiBcXFwicmVtb3ZlT25JZnJhbWVMb2FkZWRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlT25JZnJhbWVMb2FkZWQoKSB7XFxuICAgICAgaWYgKHRoaXMub25JZnJhbWVMb2FkZWQpIHtcXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5vbklmcmFtZUxvYWRlZCwgZmFsc2UpO1xcbiAgICAgICAgdGhpcy5vbklmcmFtZUxvYWRlZCA9ICcnO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJjbGVhclRpbWVvdXRDYXNoaWVyVXJsXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyVGltZW91dENhc2hpZXJVcmwoKSB7XFxuICAgICAgaWYgKHRoaXMudGltZW91dF9zZXNzaW9uKSB7XFxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0X3Nlc3Npb24pO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRUaW1lb3V0Q2FzaGllclVybFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUaW1lb3V0Q2FzaGllclVybCgpIHtcXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xcblxcbiAgICAgIHRoaXMuY2xlYXJUaW1lb3V0Q2FzaGllclVybCgpO1xcbiAgICAgIHRoaXMudGltZW91dF9zZXNzaW9uID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XFxuICAgICAgICBfdGhpcy5zZXRTZXNzaW9uVGltZW91dCh0cnVlKTtcXG4gICAgICB9LCA2MDAwMCk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0SWZyYW1lVXJsXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldElmcmFtZVVybCh1cmwpIHtcXG4gICAgICB2YXIgY29udGFpbmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnJvb3Rfc3RvcmUubW9kdWxlcy5jYXNoaWVyLmdlbmVyYWxfc3RvcmUuYWN0aXZlX2NvbnRhaW5lcjtcXG4gICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZTIgPSB0aGlzLnJvb3Rfc3RvcmUsXFxuICAgICAgICAgIGNsaWVudCA9IF90aGlzJHJvb3Rfc3RvcmUyLmNsaWVudCxcXG4gICAgICAgICAgdWkgPSBfdGhpcyRyb290X3N0b3JlMi51aTtcXG5cXG4gICAgICBpZiAodXJsKSB7XFxuICAgICAgICB0aGlzLmlmcmFtZV91cmwgPSBcXFwiXFxcIi5jb25jYXQodXJsLCBcXFwiJnRoZW1lPVxcXCIpLmNvbmNhdCh1aS5pc19kYXJrX21vZGVfb24gPyAnZGFyaycgOiAnbGlnaHQnKTsgLy8gYWZ0ZXIgd2Ugc2V0IGlmcmFtZSB1cmwgd2UgY2FuIGNsZWFyIHZlcmlmaWNhdGlvbiBjb2RlXFxuXFxuICAgICAgICBjbGllbnQuc2V0VmVyaWZpY2F0aW9uQ29kZSgnJywgY29uc3RhbnRzLm1hcF9hY3Rpb25bY29udGFpbmVyXSk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHRoaXMuaWZyYW1lX3VybCA9IHVybDtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0Q29udGFpbmVySGVpZ2h0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldENvbnRhaW5lckhlaWdodChoZWlnaHQpIHtcXG4gICAgICB0aGlzLmlmcmFtZV9oZWlnaHQgPSBoZWlnaHQ7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiY2xlYXJJZnJhbWVcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJJZnJhbWUoKSB7XFxuICAgICAgdGhpcy5zZXRJZnJhbWVVcmwoJycpO1xcbiAgICAgIHRoaXMuY2xlYXJUaW1lb3V0Q2FzaGllclVybCgpO1xcbiAgICAgIHRoaXMuc2V0U2Vzc2lvblRpbWVvdXQodHJ1ZSk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBJZnJhbWVTdG9yZTtcXG59KCksIChpZnJhbWVfc3RvcmVfZGVzY3JpcHRvciA9IGlmcmFtZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoaWZyYW1lX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlmcmFtZV9oZWlnaHRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIDA7XFxuICB9XFxufSksIGlmcmFtZV9zdG9yZV9kZXNjcmlwdG9yMiA9IGlmcmFtZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoaWZyYW1lX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlmcmFtZV91cmxcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuICcnO1xcbiAgfVxcbn0pLCBpZnJhbWVfc3RvcmVfZGVzY3JpcHRvcjMgPSBpZnJhbWVfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGlmcmFtZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19zZXNzaW9uX3RpbWVvdXRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIHRydWU7XFxuICB9XFxufSksIGlmcmFtZV9zdG9yZV9kZXNjcmlwdG9yNCA9IGlmcmFtZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoaWZyYW1lX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInRpbWVvdXRfc2Vzc2lvblxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gJyc7XFxuICB9XFxufSksIGlmcmFtZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoaWZyYW1lX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFNlc3Npb25UaW1lb3V0XFxcIiwgW2lmcmFtZV9zdG9yZV9kZWNdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGlmcmFtZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRTZXNzaW9uVGltZW91dFxcXCIpLCBpZnJhbWVfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgaWZyYW1lX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihpZnJhbWVfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY2hlY2tJZnJhbWVMb2FkZWRcXFwiLCBbaWZyYW1lX3N0b3JlX2RlYzJdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGlmcmFtZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJjaGVja0lmcmFtZUxvYWRlZFxcXCIpLCBpZnJhbWVfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgaWZyYW1lX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihpZnJhbWVfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY2xlYXJUaW1lb3V0Q2FzaGllclVybFxcXCIsIFtpZnJhbWVfc3RvcmVfZGVjM10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaWZyYW1lX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNsZWFyVGltZW91dENhc2hpZXJVcmxcXFwiKSwgaWZyYW1lX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGlmcmFtZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoaWZyYW1lX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFRpbWVvdXRDYXNoaWVyVXJsXFxcIiwgW2lmcmFtZV9zdG9yZV9kZWM0XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpZnJhbWVfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0VGltZW91dENhc2hpZXJVcmxcXFwiKSwgaWZyYW1lX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIGlmcmFtZV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoaWZyYW1lX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElmcmFtZVVybFxcXCIsIFtpZnJhbWVfc3RvcmVfZGVjNV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaWZyYW1lX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElmcmFtZVVybFxcXCIpLCBpZnJhbWVfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgaWZyYW1lX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihpZnJhbWVfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0Q29udGFpbmVySGVpZ2h0XFxcIiwgW2lmcmFtZV9zdG9yZV9kZWM2XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpZnJhbWVfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0Q29udGFpbmVySGVpZ2h0XFxcIiksIGlmcmFtZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBpZnJhbWVfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKGlmcmFtZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJjbGVhcklmcmFtZVxcXCIsIFtpZnJhbWVfc3RvcmVfZGVjN10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaWZyYW1lX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNsZWFySWZyYW1lXFxcIiksIGlmcmFtZV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpKSwgaWZyYW1lX3N0b3JlX2NsYXNzKSk7XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vQ29uZmlnL29uLXJhbXAtcHJvdmlkZXJzLmpzXFxuXFxuXFxudmFyIGNyZWF0ZUJhbnhhUHJvdmlkZXIgPSBmdW5jdGlvbiBjcmVhdGVCYW54YVByb3ZpZGVyKHN0b3JlKSB7XFxuICByZXR1cm4ge1xcbiAgICBpY29uOiB7XFxuICAgICAgZGFyazogJ0ljQ2FzaGllckJhbnhhRGFyaycsXFxuICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJCYW54YUxpZ2h0J1xcbiAgICB9LFxcbiAgICBuYW1lOiAnQmFueGEnLFxcbiAgICBnZXREZXNjcmlwdGlvbjogZnVuY3Rpb24gZ2V0RGVzY3JpcHRpb24oKSB7XFxuICAgICAgcmV0dXJuICgwLHRyYW5zbGF0aW9uc18ubG9jYWxpemUpKCdBIGZhc3QgYW5kIHNlY3VyZSBmaWF0LXRvLWNyeXB0byBwYXltZW50IHNlcnZpY2UuIERlcG9zaXQgY3J5cHRvY3VycmVuY2llcyBmcm9tIGFueXdoZXJlIGluIHRoZSB3b3JsZCB1c2luZyB5b3VyIGNyZWRpdC9kZWJpdCBjYXJkcyBhbmQgYmFuayB0cmFuc2ZlcnMuJyk7XFxuICAgIH0sXFxuICAgIGdldEFsbG93ZWRSZXNpZGVuY2llczogZnVuY3Rpb24gZ2V0QWxsb3dlZFJlc2lkZW5jaWVzKCkge1xcbiAgICAgIHJldHVybiBbJyonXTtcXG4gICAgfSxcXG4gICAgZ2V0UGF5bWVudEljb25zOiBmdW5jdGlvbiBnZXRQYXltZW50SWNvbnMoKSB7XFxuICAgICAgcmV0dXJuIFt7XFxuICAgICAgICBkYXJrOiAnSWNDYXNoaWVyVmlzYURhcmsnLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJWaXNhTGlnaHQnXFxuICAgICAgfSwge1xcbiAgICAgICAgZGFyazogJ0ljQ2FzaGllck1hc3RlcmNhcmREYXJrJyxcXG4gICAgICAgIGxpZ2h0OiAnSWNDYXNoaWVyTWFzdGVyY2FyZExpZ2h0J1xcbiAgICAgIH0sIHtcXG4gICAgICAgIGRhcms6ICdJY0Nhc2hpZXJCcGF5RGFyaycsXFxuICAgICAgICBsaWdodDogJ0ljQ2FzaGllckJwYXlMaWdodCdcXG4gICAgICB9LCB7XFxuICAgICAgICBkYXJrOiAnSWNDYXNoaWVyU2VwYURhcmsnLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJTZXBhTGlnaHQnXFxuICAgICAgfSwge1xcbiAgICAgICAgZGFyazogJ0ljQ2FzaGllckJsdWVzaHlmdERhcmsnLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJCbHVlc2h5ZnRMaWdodCdcXG4gICAgICB9LCB7XFxuICAgICAgICBkYXJrOiAnSWNDYXNoaWVyRmxleGVwaW5EYXJrJyxcXG4gICAgICAgIGxpZ2h0OiAnSWNDYXNoaWVyRmxleGVwaW5MaWdodCdcXG4gICAgICB9LCB7XFxuICAgICAgICBkYXJrOiAnSWNDYXNoaWVyUGF5SWREYXJrJyxcXG4gICAgICAgIGxpZ2h0OiAnSWNDYXNoaWVyUGF5SWRMaWdodCdcXG4gICAgICB9LCB7XFxuICAgICAgICBkYXJrOiAnSWNDYXNoaWVyUG9saURhcmsnLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJQb2xpTGlnaHQnXFxuICAgICAgfSwge1xcbiAgICAgICAgZGFyazogJ0ljQ2FzaGllckFwcGxlUGF5JyxcXG4gICAgICAgIGxpZ2h0OiAnSWNDYXNoaWVyQXBwbGVQYXknXFxuICAgICAgfSwge1xcbiAgICAgICAgZGFyazogJ0ljQ2FzaGllckludGVyYWNFdHJhbnNmZXInLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJJbnRlcmFjRXRyYW5zZmVyJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIGRhcms6ICdJY0Nhc2hpZXJJZGVhbCcsXFxuICAgICAgICBsaWdodDogJ0ljQ2FzaGllcklkZWFsJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIGRhcms6ICdJY0Nhc2hpZXJQb3N0QmlsbFBheURhcmsnLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJQb3N0QmlsbFBheUxpZ2h0J1xcbiAgICAgIH0sIHtcXG4gICAgICAgIGRhcms6ICdJY0Nhc2hpZXJTb2ZvcnQnLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJTb2ZvcnQnXFxuICAgICAgfV07XFxuICAgIH0sXFxuICAgIGdldFNjcmlwdERlcGVuZGVuY2llczogZnVuY3Rpb24gZ2V0U2NyaXB0RGVwZW5kZW5jaWVzKCkge1xcbiAgICAgIHJldHVybiBbXTtcXG4gICAgfSxcXG4gICAgLy8gTm9uZS5cXG4gICAgZ2V0RGVmYXVsdEZyb21DdXJyZW5jeTogZnVuY3Rpb24gZ2V0RGVmYXVsdEZyb21DdXJyZW5jeSgpIHtcXG4gICAgICByZXR1cm4gJyc7XFxuICAgIH0sXFxuICAgIGdldEZyb21DdXJyZW5jaWVzOiBmdW5jdGlvbiBnZXRGcm9tQ3VycmVuY2llcygpIHtcXG4gICAgICByZXR1cm4gWycqJ107XFxuICAgIH0sXFxuICAgIGdldFRvQ3VycmVuY2llczogZnVuY3Rpb24gZ2V0VG9DdXJyZW5jaWVzKCkge1xcbiAgICAgIHJldHVybiBbJyonXTtcXG4gICAgfSxcXG4gICAgZ2V0V2lkZ2V0SHRtbDogZnVuY3Rpb24gZ2V0V2lkZ2V0SHRtbCgpIHtcXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xcbiAgICAgICAgc3RvcmUuV1Muc2VydmljZVRva2VuKHtcXG4gICAgICAgICAgc2VydmljZV90b2tlbjogMSxcXG4gICAgICAgICAgc2VydmljZTogJ2JhbnhhJyxcXG4gICAgICAgICAgcmVmZXJyZXI6IHdpbmRvdy5sb2NhdGlvbi5ocmVmXFxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xcbiAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcXG4gICAgICAgICAgICByZWplY3QocmVzcG9uc2UuZXJyb3IubWVzc2FnZSk7XFxuICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgdmFyIHVybCA9IHJlc3BvbnNlLnNlcnZpY2VfdG9rZW4uYmFueGEudXJsO1xcblxcbiAgICAgICAgICAgIGlmICh1cmwpIHtcXG4gICAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCk7XFxuICAgICAgICAgICAgfSAvLyBSZXNvbHZpbmcgZW1wdHkgd2lsbC9zaG91bGQgcmVkaXJlY3QgdXNlci5cXG5cXG5cXG4gICAgICAgICAgICByZXNvbHZlKCk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgIH0pO1xcbiAgICB9LFxcbiAgICBvbk1vdW50V2lkZ2V0Q29udGFpbmVyOiBmdW5jdGlvbiBvbk1vdW50V2lkZ2V0Q29udGFpbmVyKCkge30sXFxuICAgIHNob3VsZF9zaG93X2RlcG9zaXRfYWRkcmVzczogZmFsc2VcXG4gIH07XFxufTtcXG5cXG52YXIgY3JlYXRlQ2hhbmdlbGx5UHJvdmlkZXIgPSBmdW5jdGlvbiBjcmVhdGVDaGFuZ2VsbHlQcm92aWRlcihzdG9yZSkge1xcbiAgcmV0dXJuIHtcXG4gICAgaWNvbjoge1xcbiAgICAgIGRhcms6ICdJY0Nhc2hpZXJDaGFuZ2VsbHlEYXJrJyxcXG4gICAgICBsaWdodDogJ0ljQ2FzaGllckNoYW5nZWxseUxpZ2h0J1xcbiAgICB9LFxcbiAgICBuYW1lOiAnQ2hhbmdlbGx5JyxcXG4gICAgZ2V0RGVzY3JpcHRpb246IGZ1bmN0aW9uIGdldERlc2NyaXB0aW9uKCkge1xcbiAgICAgIHJldHVybiAoMCx0cmFuc2xhdGlvbnNfLmxvY2FsaXplKSgnWW91ciBzaW1wbGUgYWNjZXNzIHRvIGNyeXB0by4gRmFzdCBhbmQgc2VjdXJlIHdheSB0byBleGNoYW5nZSBhbmQgcHVyY2hhc2UgY3J5cHRvY3VycmVuY2llcy4gMjQvNyBsaXZlIGNoYXQgc3VwcG9ydC4nKTtcXG4gICAgfSxcXG4gICAgZ2V0QWxsb3dlZFJlc2lkZW5jaWVzOiBmdW5jdGlvbiBnZXRBbGxvd2VkUmVzaWRlbmNpZXMoKSB7XFxuICAgICAgcmV0dXJuIFsnKiddO1xcbiAgICB9LFxcbiAgICBnZXRQYXltZW50SWNvbnM6IGZ1bmN0aW9uIGdldFBheW1lbnRJY29ucygpIHtcXG4gICAgICByZXR1cm4gW3tcXG4gICAgICAgIGRhcms6ICdJY0Nhc2hpZXJWaXNhRGFyaycsXFxuICAgICAgICBsaWdodDogJ0ljQ2FzaGllclZpc2FMaWdodCdcXG4gICAgICB9LCB7XFxuICAgICAgICBkYXJrOiAnSWNDYXNoaWVyTWFzdGVyY2FyZERhcmsnLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJNYXN0ZXJjYXJkTGlnaHQnXFxuICAgICAgfV07XFxuICAgIH0sXFxuICAgIGdldFNjcmlwdERlcGVuZGVuY2llczogZnVuY3Rpb24gZ2V0U2NyaXB0RGVwZW5kZW5jaWVzKCkge1xcbiAgICAgIHJldHVybiBbXTtcXG4gICAgfSxcXG4gICAgZ2V0RGVmYXVsdEZyb21DdXJyZW5jeTogZnVuY3Rpb24gZ2V0RGVmYXVsdEZyb21DdXJyZW5jeSgpIHtcXG4gICAgICByZXR1cm4gJ3VzZCc7XFxuICAgIH0sXFxuICAgIGdldEZyb21DdXJyZW5jaWVzOiBmdW5jdGlvbiBnZXRGcm9tQ3VycmVuY2llcygpIHtcXG4gICAgICByZXR1cm4gWyd1c2QnLCAnZXVyJywgJ2dicCddO1xcbiAgICB9LFxcbiAgICBnZXRUb0N1cnJlbmNpZXM6IGZ1bmN0aW9uIGdldFRvQ3VycmVuY2llcygpIHtcXG4gICAgICByZXR1cm4gWydiY2gnLCAnYnRjJywgJ2V0YycsICdldGgnLCAnbHRjJywgJ3VzdCddO1xcbiAgICB9LFxcbiAgICBnZXRXaWRnZXRIdG1sOiBmdW5jdGlvbiBnZXRXaWRnZXRIdG1sKCkge1xcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XFxuICAgICAgICB2YXIgdXJsID0gbmV3IFVSTCgnaHR0cHM6Ly93aWRnZXQuY2hhbmdlbGx5LmNvbS8/dj0zJnRoZW1lPWRlZmF1bHQnKTtcXG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdmcm9tRGVmYXVsdCcsIF90aGlzLmdldERlZmF1bHRGcm9tQ3VycmVuY3koKSk7XFxuICAgICAgICB2YXIgY3VycmVuY3kgPSBzdG9yZS5yb290X3N0b3JlLmNsaWVudC5jdXJyZW5jeS50b0xvd2VyQ2FzZSgpO1xcblxcbiAgICAgICAgaWYgKF90aGlzLmdldFRvQ3VycmVuY2llcygpLmluY2x1ZGVzKGN1cnJlbmN5KSkge1xcbiAgICAgICAgICB2YXIgdG9fY3VycmVuY3kgPSBjdXJyZW5jeSA9PT0gJ3VzdCcgPyAndXNkdCcgOiBjdXJyZW5jeTtcXG4gICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ3RvJywgdG9fY3VycmVuY3kpO1xcbiAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgndG9EZWZhdWx0JywgdG9fY3VycmVuY3kpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2Ftb3VudCcsIDEpO1xcbiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ21lcmNoYW50X2lkJywgJ2lpcTNqZHQycDQ0eXJmYngnKTtcXG4gICAgICAgIHdpbmRvdy5vcGVuKHVybCk7XFxuICAgICAgICByZXNvbHZlKCk7XFxuICAgICAgfSk7XFxuICAgIH0sXFxuICAgIG9uTW91bnRXaWRnZXRDb250YWluZXI6IGZ1bmN0aW9uIG9uTW91bnRXaWRnZXRDb250YWluZXIoKSB7fSxcXG4gICAgc2hvdWxkX3Nob3dfZGVwb3NpdF9hZGRyZXNzOiB0cnVlXFxuICB9O1xcbn07XFxuXFxudmFyIGNyZWF0ZVhhblBvb2xQcm92aWRlciA9IGZ1bmN0aW9uIGNyZWF0ZVhhblBvb2xQcm92aWRlcihzdG9yZSkge1xcbiAgcmV0dXJuIHtcXG4gICAgaWNvbjoge1xcbiAgICAgIGRhcms6ICdJY0Nhc2hpZXJYYW5wb29sRGFyaycsXFxuICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJYYW5wb29sTGlnaHQnXFxuICAgIH0sXFxuICAgIG5hbWU6ICdYYW5Qb29sJyxcXG4gICAgZ2V0RGVzY3JpcHRpb246IGZ1bmN0aW9uIGdldERlc2NyaXB0aW9uKCkge1xcbiAgICAgIHJldHVybiAoMCx0cmFuc2xhdGlvbnNfLmxvY2FsaXplKSgnQnV5IGNyeXB0b2N1cnJlbmNpZXMgaW4gYW4gaW5zdGFudC4gRW5qb3kgZWFzeSwgcXVpY2ssIGFuZCBzZWN1cmUgZXhjaGFuZ2VzIHVzaW5nIHlvdXIgbG9jYWwgcGF5bWVudCBtZXRob2RzLicpO1xcbiAgICB9LFxcbiAgICBnZXRBbGxvd2VkUmVzaWRlbmNpZXM6IGZ1bmN0aW9uIGdldEFsbG93ZWRSZXNpZGVuY2llcygpIHtcXG4gICAgICByZXR1cm4gWycqJ107XFxuICAgIH0sXFxuICAgIGdldFBheW1lbnRJY29uczogZnVuY3Rpb24gZ2V0UGF5bWVudEljb25zKCkge1xcbiAgICAgIHJldHVybiBbe1xcbiAgICAgICAgZGFyazogJ0ljQ2FzaGllckZwc0RhcmsnLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJGcHNMaWdodCdcXG4gICAgICB9LCB7XFxuICAgICAgICBkYXJrOiAnSWNDYXNoaWVyQWxpUGF5RGFyaycsXFxuICAgICAgICBsaWdodDogJ0ljQ2FzaGllckFsaVBheUxpZ2h0J1xcbiAgICAgIH0sIHtcXG4gICAgICAgIGRhcms6ICdJY0Nhc2hpZXJHb1BheURhcmsnLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJHb1BheUxpZ2h0J1xcbiAgICAgIH0sIHtcXG4gICAgICAgIGRhcms6ICdJY0Nhc2hpZXJNYW5kaXJpUGF5JyxcXG4gICAgICAgIGxpZ2h0OiAnSWNDYXNoaWVyTWFuZGlyaVBheSdcXG4gICAgICB9LCB7XFxuICAgICAgICBkYXJrOiAnSWNDYXNoaWVySW5zdGFQYXlMaWdodCcsXFxuICAgICAgICBsaWdodDogJ0ljQ2FzaGllckluc3RhUGF5RGFyaydcXG4gICAgICB9LCB7XFxuICAgICAgICBkYXJrOiAnSWNDYXNoaWVyQ2VidWFuYUxodWlsbGllckRhcmsnLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJDZWJ1YW5hTGh1aWxsaWVyTGlnaHQnXFxuICAgICAgfSwge1xcbiAgICAgICAgZGFyazogJ0ljQ2FzaGllclBheU5vd0RhcmsnLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJQYXlOb3dMaWdodCdcXG4gICAgICB9LCB7XFxuICAgICAgICBkYXJrOiAnSWNDYXNoaWVyVXBpRGFyaycsXFxuICAgICAgICBsaWdodDogJ0ljQ2FzaGllclVwaUxpZ2h0J1xcbiAgICAgIH0sIHtcXG4gICAgICAgIGRhcms6ICdJY0Nhc2hpZXJQcm9tcHRQYXlEYXJrJyxcXG4gICAgICAgIGxpZ2h0OiAnSWNDYXNoaWVyUHJvbXB0UGF5TGlnaHQnXFxuICAgICAgfSwge1xcbiAgICAgICAgZGFyazogJ0ljQ2FzaGllclZpZXR0bGVQYXknLFxcbiAgICAgICAgbGlnaHQ6ICdJY0Nhc2hpZXJWaWV0dGxlUGF5J1xcbiAgICAgIH1dO1xcbiAgICB9LFxcbiAgICBnZXRTY3JpcHREZXBlbmRlbmNpZXM6IGZ1bmN0aW9uIGdldFNjcmlwdERlcGVuZGVuY2llcygpIHtcXG4gICAgICByZXR1cm4gW107XFxuICAgIH0sXFxuICAgIGdldFRvQ3VycmVuY2llczogZnVuY3Rpb24gZ2V0VG9DdXJyZW5jaWVzKCkge1xcbiAgICAgIHJldHVybiBbJ2J0YycsICdldGgnLCAndXN0JywgJ3ppbCcsICduZW0nXTtcXG4gICAgfSxcXG4gICAgZ2V0V2lkZ2V0SHRtbDogZnVuY3Rpb24gZ2V0V2lkZ2V0SHRtbCgpIHtcXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcXG4gICAgICAgIHZhciBjdXJyZW5jeSA9IHN0b3JlLnJvb3Rfc3RvcmUuY2xpZW50LmN1cnJlbmN5O1xcbiAgICAgICAgdmFyIHVybCA9ICdodHRwczovL2NoZWNrb3V0LnhhbnBvb2wuY29tLyc7XFxuICAgICAgICB1cmwgKz0gXFxcIj9hcGlLZXk9ZGI0ZWM2MzhkZmY5YTY4YWJkYTFlZjZiNzYzOGMyMjBcXFwiO1xcbiAgICAgICAgdXJsICs9IFxcXCImcmVkaXJlY3RVcmw9XFxcIi5jb25jYXQod2luZG93LmxvY2F0aW9uLmhyZWYpO1xcbiAgICAgICAgdXJsICs9IFxcXCImd2FsbGV0PVxcXCIuY29uY2F0KHN0b3JlLmRlcG9zaXRfYWRkcmVzcyk7XFxuICAgICAgICB1cmwgKz0gXFxcIiZjcnlwdG9DdXJyZW5jeT1cXFwiLmNvbmNhdChjdXJyZW5jeSA9PT0gJ1VTVCcgPyAnVVNEVCcgOiBjdXJyZW5jeSk7XFxuICAgICAgICB1cmwgKz0gXFxcIiZ0cmFuc2FjdGlvblR5cGU9YnV5XFxcIjtcXG4gICAgICAgIHdpbmRvdy5vcGVuKHVybCk7XFxuICAgICAgICByZXNvbHZlKCk7XFxuICAgICAgfSk7XFxuICAgIH0sXFxuICAgIG9uTW91bnRXaWRnZXRDb250YWluZXI6IGZ1bmN0aW9uIG9uTW91bnRXaWRnZXRDb250YWluZXIoKSB7fSxcXG4gICAgc2hvdWxkX3Nob3dfZGVwb3NpdF9hZGRyZXNzOiBmYWxzZVxcbiAgfTtcXG59O1xcblxcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3Qgb25fcmFtcF9wcm92aWRlcnMgPSAoe1xcbiAgY3JlYXRlQmFueGFQcm92aWRlcjogY3JlYXRlQmFueGFQcm92aWRlcixcXG4gIGNyZWF0ZUNoYW5nZWxseVByb3ZpZGVyOiBjcmVhdGVDaGFuZ2VsbHlQcm92aWRlcixcXG4gIGNyZWF0ZVhhblBvb2xQcm92aWRlcjogY3JlYXRlWGFuUG9vbFByb3ZpZGVyXFxufSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vU3RvcmVzL29uLXJhbXAtc3RvcmUuanNcXG5mdW5jdGlvbiBvbl9yYW1wX3N0b3JlX3R5cGVvZihvYmopIHsgXFxcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXFxcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFxcXCJmdW5jdGlvblxcXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXFxcInN5bWJvbFxcXCIpIHsgb25fcmFtcF9zdG9yZV90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgb25fcmFtcF9zdG9yZV90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFxcXCJmdW5jdGlvblxcXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXFxcInN5bWJvbFxcXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBvbl9yYW1wX3N0b3JlX3R5cGVvZihvYmopOyB9XFxuXFxudmFyIG9uX3JhbXBfc3RvcmVfZGVjLCBvbl9yYW1wX3N0b3JlX2RlYzIsIG9uX3JhbXBfc3RvcmVfZGVjMywgb25fcmFtcF9zdG9yZV9kZWM0LCBvbl9yYW1wX3N0b3JlX2RlYzUsIG9uX3JhbXBfc3RvcmVfZGVjNiwgb25fcmFtcF9zdG9yZV9kZWM3LCBvbl9yYW1wX3N0b3JlX2RlYzgsIG9uX3JhbXBfc3RvcmVfZGVjOSwgb25fcmFtcF9zdG9yZV9kZWMxMCwgb25fcmFtcF9zdG9yZV9kZWMxMSwgb25fcmFtcF9zdG9yZV9kZWMxMiwgb25fcmFtcF9zdG9yZV9kZWMxMywgb25fcmFtcF9zdG9yZV9kZWMxNCwgb25fcmFtcF9zdG9yZV9kZWMxNSwgb25fcmFtcF9zdG9yZV9kZWMxNiwgb25fcmFtcF9zdG9yZV9kZWMxNywgb25fcmFtcF9zdG9yZV9kZWMxOCwgb25fcmFtcF9zdG9yZV9kZWMxOSwgb25fcmFtcF9zdG9yZV9kZWMyMCwgb25fcmFtcF9zdG9yZV9kZWMyMSwgb25fcmFtcF9zdG9yZV9kZWMyMiwgb25fcmFtcF9zdG9yZV9jbGFzcywgb25fcmFtcF9zdG9yZV9kZXNjcmlwdG9yLCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3IyLCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3IzLCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3I0LCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3I1LCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3I2LCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3I3LCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3I4LCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3I5LCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3IxMCwgb25fcmFtcF9zdG9yZV9kZXNjcmlwdG9yMTE7XFxuXFxuZnVuY3Rpb24gb25fcmFtcF9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XFxuXFxuZnVuY3Rpb24gb25fcmFtcF9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBvbl9yYW1wX3N0b3JlX2FzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXFxcIm5leHRcXFwiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBvbl9yYW1wX3N0b3JlX2FzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXFxcInRocm93XFxcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxcblxcbmZ1bmN0aW9uIG9uX3JhbXBfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7IGlmICghZGVzY3JpcHRvcikgcmV0dXJuOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgeyBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGUsIGNvbmZpZ3VyYWJsZTogZGVzY3JpcHRvci5jb25maWd1cmFibGUsIHdyaXRhYmxlOiBkZXNjcmlwdG9yLndyaXRhYmxlLCB2YWx1ZTogZGVzY3JpcHRvci5pbml0aWFsaXplciA/IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMCB9KTsgfVxcblxcbmZ1bmN0aW9uIG9uX3JhbXBfc3RvcmVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblxcXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBvbl9yYW1wX3N0b3JlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXFxcInZhbHVlXFxcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBvbl9yYW1wX3N0b3JlX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgb25fcmFtcF9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgb25fcmFtcF9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIG9uX3JhbXBfc3RvcmVfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcXFwiZnVuY3Rpb25cXFwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcXFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cXFwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBvbl9yYW1wX3N0b3JlX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxcblxcbmZ1bmN0aW9uIG9uX3JhbXBfc3RvcmVfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvbl9yYW1wX3N0b3JlX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBvbl9yYW1wX3N0b3JlX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XFxuXFxuZnVuY3Rpb24gb25fcmFtcF9zdG9yZV9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gb25fcmFtcF9zdG9yZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBvbl9yYW1wX3N0b3JlX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBvbl9yYW1wX3N0b3JlX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBvbl9yYW1wX3N0b3JlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxcblxcbmZ1bmN0aW9uIG9uX3JhbXBfc3RvcmVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChvbl9yYW1wX3N0b3JlX3R5cGVvZihjYWxsKSA9PT0gXFxcIm9iamVjdFxcXCIgfHwgdHlwZW9mIGNhbGwgPT09IFxcXCJmdW5jdGlvblxcXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBvbl9yYW1wX3N0b3JlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxcblxcbmZ1bmN0aW9uIG9uX3JhbXBfc3RvcmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXFxcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFxcXCIpOyB9IHJldHVybiBzZWxmOyB9XFxuXFxuZnVuY3Rpb24gb25fcmFtcF9zdG9yZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXFxcInVuZGVmaW5lZFxcXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFxcXCJmdW5jdGlvblxcXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuZnVuY3Rpb24gb25fcmFtcF9zdG9yZV9nZXRQcm90b3R5cGVPZihvKSB7IG9uX3JhbXBfc3RvcmVfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gb25fcmFtcF9zdG9yZV9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbmZ1bmN0aW9uIG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHksIGRlY29yYXRvcnMsIGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgdmFyIGRlc2MgPSB7fTsgT2JqZWN0LmtleXMoZGVzY3JpcHRvcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IGRlc2Nba2V5XSA9IGRlc2NyaXB0b3Jba2V5XTsgfSk7IGRlc2MuZW51bWVyYWJsZSA9ICEhZGVzYy5lbnVtZXJhYmxlOyBkZXNjLmNvbmZpZ3VyYWJsZSA9ICEhZGVzYy5jb25maWd1cmFibGU7IGlmICgndmFsdWUnIGluIGRlc2MgfHwgZGVzYy5pbml0aWFsaXplcikgeyBkZXNjLndyaXRhYmxlID0gdHJ1ZTsgfSBkZXNjID0gZGVjb3JhdG9ycy5zbGljZSgpLnJldmVyc2UoKS5yZWR1Y2UoZnVuY3Rpb24gKGRlc2MsIGRlY29yYXRvcikgeyByZXR1cm4gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHksIGRlc2MpIHx8IGRlc2M7IH0sIGRlc2MpOyBpZiAoY29udGV4dCAmJiBkZXNjLmluaXRpYWxpemVyICE9PSB2b2lkIDApIHsgZGVzYy52YWx1ZSA9IGRlc2MuaW5pdGlhbGl6ZXIgPyBkZXNjLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDA7IGRlc2MuaW5pdGlhbGl6ZXIgPSB1bmRlZmluZWQ7IH0gaWYgKGRlc2MuaW5pdGlhbGl6ZXIgPT09IHZvaWQgMCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYyk7IGRlc2MgPSBudWxsOyB9IHJldHVybiBkZXNjOyB9XFxuXFxuZnVuY3Rpb24gb25fcmFtcF9zdG9yZV9pbml0aWFsaXplcldhcm5pbmdIZWxwZXIoZGVzY3JpcHRvciwgY29udGV4dCkgeyB0aHJvdyBuZXcgRXJyb3IoJ0RlY29yYXRpbmcgY2xhc3MgcHJvcGVydHkgZmFpbGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgJyArICdwcm9wb3NhbC1jbGFzcy1wcm9wZXJ0aWVzIGlzIGVuYWJsZWQgYW5kIHJ1bnMgYWZ0ZXIgdGhlIGRlY29yYXRvcnMgdHJhbnNmb3JtLicpOyB9XFxuXFxuXFxuXFxuXFxuXFxuXFxudmFyIE9uUmFtcFN0b3JlID0gKG9uX3JhbXBfc3RvcmVfZGVjID0gZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZS5zaGFsbG93LCBvbl9yYW1wX3N0b3JlX2RlYzIgPSBleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlLnJlZiwgb25fcmFtcF9zdG9yZV9kZWMzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzQgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIG9uX3JhbXBfc3RvcmVfZGVjNSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgb25fcmFtcF9zdG9yZV9kZWM2ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzcgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIG9uX3JhbXBfc3RvcmVfZGVjOCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgb25fcmFtcF9zdG9yZV9kZWM5ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzEwID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzExID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzEyID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzEzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzE0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzE1ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzE2ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzE3ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzE4ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzE5ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzIwID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzIxID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBvbl9yYW1wX3N0b3JlX2RlYzIyID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCAob25fcmFtcF9zdG9yZV9jbGFzcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VTdG9yZSkge1xcbiAgb25fcmFtcF9zdG9yZV9pbmhlcml0cyhPblJhbXBTdG9yZSwgX0Jhc2VTdG9yZSk7XFxuXFxuICB2YXIgX3N1cGVyID0gb25fcmFtcF9zdG9yZV9jcmVhdGVTdXBlcihPblJhbXBTdG9yZSk7XFxuXFxuICBmdW5jdGlvbiBPblJhbXBTdG9yZShfcmVmKSB7XFxuICAgIHZhciBfdGhpcztcXG5cXG4gICAgdmFyIFdTID0gX3JlZi5XUyxcXG4gICAgICAgIHJvb3Rfc3RvcmUgPSBfcmVmLnJvb3Rfc3RvcmU7XFxuXFxuICAgIG9uX3JhbXBfc3RvcmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgT25SYW1wU3RvcmUpO1xcblxcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHtcXG4gICAgICByb290X3N0b3JlOiByb290X3N0b3JlXFxuICAgIH0pO1xcblxcbiAgICBvbl9yYW1wX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkoX3RoaXMsIFxcXCJhcGlfZXJyb3JcXFwiLCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3IsIG9uX3JhbXBfc3RvcmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIG9uX3JhbXBfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcImRlcG9zaXRfYWRkcmVzc1xcXCIsIG9uX3JhbXBfc3RvcmVfZGVzY3JpcHRvcjIsIG9uX3JhbXBfc3RvcmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIG9uX3JhbXBfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcImlzX2RlcG9zaXRfYWRkcmVzc19sb2FkaW5nXFxcIiwgb25fcmFtcF9zdG9yZV9kZXNjcmlwdG9yMywgb25fcmFtcF9zdG9yZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcXG5cXG4gICAgb25fcmFtcF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KF90aGlzLCBcXFwiaXNfZGVwb3NpdF9hZGRyZXNzX3BvcG92ZXJfb3BlblxcXCIsIG9uX3JhbXBfc3RvcmVfZGVzY3JpcHRvcjQsIG9uX3JhbXBfc3RvcmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIG9uX3JhbXBfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcImlzX29ucmFtcF9tb2RhbF9vcGVuXFxcIiwgb25fcmFtcF9zdG9yZV9kZXNjcmlwdG9yNSwgb25fcmFtcF9zdG9yZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcXG5cXG4gICAgb25fcmFtcF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KF90aGlzLCBcXFwiaXNfcmVxdWVzdGluZ193aWRnZXRfaHRtbFxcXCIsIG9uX3JhbXBfc3RvcmVfZGVzY3JpcHRvcjYsIG9uX3JhbXBfc3RvcmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIG9uX3JhbXBfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcIm9ucmFtcF9wcm92aWRlcnNcXFwiLCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3I3LCBvbl9yYW1wX3N0b3JlX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xcblxcbiAgICBvbl9yYW1wX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkoX3RoaXMsIFxcXCJzZWxlY3RlZF9wcm92aWRlclxcXCIsIG9uX3JhbXBfc3RvcmVfZGVzY3JpcHRvcjgsIG9uX3JhbXBfc3RvcmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIG9uX3JhbXBfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcInNob3VsZF9zaG93X3dpZGdldFxcXCIsIG9uX3JhbXBfc3RvcmVfZGVzY3JpcHRvcjksIG9uX3JhbXBfc3RvcmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgIG9uX3JhbXBfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eShfdGhpcywgXFxcIndpZGdldF9lcnJvclxcXCIsIG9uX3JhbXBfc3RvcmVfZGVzY3JpcHRvcjEwLCBvbl9yYW1wX3N0b3JlX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xcblxcbiAgICBvbl9yYW1wX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkoX3RoaXMsIFxcXCJ3aWRnZXRfaHRtbFxcXCIsIG9uX3JhbXBfc3RvcmVfZGVzY3JpcHRvcjExLCBvbl9yYW1wX3N0b3JlX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xcblxcbiAgICBfdGhpcy5kZXBvc2l0X2FkZHJlc3NfcmVmID0gbnVsbDtcXG4gICAgX3RoaXMuV1MgPSBXUztcXG5cXG4gICAgX3RoaXMub25DbGllbnRJbml0KCAvKiNfX1BVUkVfXyovb25fcmFtcF9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHtcXG4gICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcXG4gICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcXG4gICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICBfdGhpcy5zZXRPbnJhbXBQcm92aWRlcnMoW29uX3JhbXBfcHJvdmlkZXJzLmNyZWF0ZUNoYW5nZWxseVByb3ZpZGVyKG9uX3JhbXBfc3RvcmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIG9uX3JhbXBfcHJvdmlkZXJzLmNyZWF0ZVhhblBvb2xQcm92aWRlcihvbl9yYW1wX3N0b3JlX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBvbl9yYW1wX3Byb3ZpZGVycy5jcmVhdGVCYW54YVByb3ZpZGVyKG9uX3JhbXBfc3RvcmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSldKTtcXG5cXG4gICAgICAgICAgICBjYXNlIDE6XFxuICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9LCBfY2FsbGVlKTtcXG4gICAgfSkpKTtcXG5cXG4gICAgcmV0dXJuIF90aGlzO1xcbiAgfVxcblxcbiAgb25fcmFtcF9zdG9yZV9jcmVhdGVDbGFzcyhPblJhbXBTdG9yZSwgW3tcXG4gICAga2V5OiBcXFwiaXNfb25yYW1wX3RhYl92aXNpYmxlXFxcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgdmFyIGNsaWVudCA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQ7XFxuICAgICAgcmV0dXJuIGNsaWVudC5pc192aXJ0dWFsID09PSBmYWxzZSAmJiAoMCxzaGFyZWRfLmlzQ3J5cHRvY3VycmVuY3kpKGNsaWVudC5jdXJyZW5jeSkgJiYgdGhpcy5maWx0ZXJlZF9vbnJhbXBfcHJvdmlkZXJzLmxlbmd0aCA+IDA7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZmlsdGVyZWRfb25yYW1wX3Byb3ZpZGVyc1xcXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHZhciBjbGllbnQgPSB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50O1xcbiAgICAgIHJldHVybiB0aGlzLm9ucmFtcF9wcm92aWRlcnMgLy8gRW5zdXJlIHByb3ZpZGVyIHN1cHBvcnRzIHRoaXMgdXNlcidzIGFjY291bnQgY3VycmVuY3kuXFxuICAgICAgLmZpbHRlcihmdW5jdGlvbiAocHJvdmlkZXIpIHtcXG4gICAgICAgIHZhciB0b19jdXJyZW5jaWVzID0gcHJvdmlkZXIuZ2V0VG9DdXJyZW5jaWVzKCk7XFxuICAgICAgICByZXR1cm4gdG9fY3VycmVuY2llcy5pbmNsdWRlcygnKicpIHx8IHRvX2N1cnJlbmNpZXMuaW5jbHVkZXMoY2xpZW50LmN1cnJlbmN5LnRvTG93ZXJDYXNlKCkpO1xcbiAgICAgIH0pIC8vIEVuc3VyZSBwcm92aWRlciBzdXBwb3J0cyB0aGlzIHVzZXIncyByZXNpZGVuY3kuXFxuICAgICAgLmZpbHRlcihmdW5jdGlvbiAocHJvdmlkZXIpIHtcXG4gICAgICAgIHZhciBhbGxvd2VkX3Jlc2lkZW5jaWVzID0gcHJvdmlkZXIuZ2V0QWxsb3dlZFJlc2lkZW5jaWVzKCk7XFxuICAgICAgICByZXR1cm4gYWxsb3dlZF9yZXNpZGVuY2llcy5pbmNsdWRlcygnKicpIHx8IGFsbG93ZWRfcmVzaWRlbmNpZXMuaW5jbHVkZXMoY2xpZW50LnJlc2lkZW5jZSk7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25yYW1wX3BvcHVwX21vZGFsX3RpdGxlXFxcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgaWYgKHRoaXMuc2hvdWxkX3Nob3dfd2lkZ2V0KSB7XFxuICAgICAgICByZXR1cm4gKDAsdHJhbnNsYXRpb25zXy5sb2NhbGl6ZSkoJ1BheW1lbnQgY2hhbm5lbCcpO1xcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZF9wcm92aWRlcikge1xcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkX3Nob3dfZGlhbG9nKSB7XFxuICAgICAgICAgIHJldHVybiAoMCx0cmFuc2xhdGlvbnNfLmxvY2FsaXplKSgnT3VyIHNlcnZlciBjYW5ub3QgcmV0cmlldmUgYW4gYWRkcmVzcy4nKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiAnICc7IC8vIEVtcHR5IHN0cmluZyB0byByZW5kZXIgaGVhZGVyICsgY2xvc2UgaWNvbi5cXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzaG91bGRfc2hvd19kaWFsb2dcXFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5hcGlfZXJyb3I7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25Nb3VudE9ucmFtcFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1vdW50T25yYW1wKCkge1xcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICAgIHRoaXMuZGlzcG9zZVRoaXJkUGFydHlKc1JlYWN0aW9uID0gKDAsZXh0ZXJuYWxfbW9ieF8ucmVhY3Rpb24pKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiBfdGhpczIuc2VsZWN0ZWRfcHJvdmlkZXI7XFxuICAgICAgfSwgLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciBfcmVmMyA9IG9uX3JhbXBfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHByb3ZpZGVyKSB7XFxuICAgICAgICAgIHZhciBkZXBlbmRlbmNpZXMsIF95aWVsZCRpbXBvcnQsIGxvYWRqcywgc2NyaXB0X25hbWU7XFxuXFxuICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XFxuICAgICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xcbiAgICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgICAgaWYgKHByb3ZpZGVyKSB7XFxuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7XFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXFxcInJldHVyblxcXCIpO1xcblxcbiAgICAgICAgICAgICAgICBjYXNlIDI6XFxuICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzID0gcHJvdmlkZXIuZ2V0U2NyaXB0RGVwZW5kZW5jaWVzKCk7XFxuXFxuICAgICAgICAgICAgICAgICAgaWYgKCEoZGVwZW5kZW5jaWVzLmxlbmd0aCA9PT0gMCkpIHtcXG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTtcXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcXFwicmV0dXJuXFxcIik7XFxuXFxuICAgICAgICAgICAgICAgIGNhc2UgNTpcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7XFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZSgvKiBpbXBvcnQoKSB8IGxvYWRqcyAqLyBcXFwibG9hZGpzXFxcIikudGhlbihfX3dlYnBhY2tfcmVxdWlyZV9fLnQuYmluZChfX3dlYnBhY2tfcmVxdWlyZV9fLCBcXFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvYWRqcy9kaXN0L2xvYWRqcy51bWQuanNcXFwiLCAyMykpO1xcblxcbiAgICAgICAgICAgICAgICBjYXNlIDc6XFxuICAgICAgICAgICAgICAgICAgX3lpZWxkJGltcG9ydCA9IF9jb250ZXh0Mi5zZW50O1xcbiAgICAgICAgICAgICAgICAgIGxvYWRqcyA9IF95aWVsZCRpbXBvcnRbXFxcImRlZmF1bHRcXFwiXTtcXG4gICAgICAgICAgICAgICAgICBzY3JpcHRfbmFtZSA9IFxcXCJcXFwiLmNvbmNhdCgoMCxzaGFyZWRfLmdldEtlYmFiQ2FzZSkocHJvdmlkZXIubmFtZSksIFxcXCItb25yYW1wXFxcIik7XFxuXFxuICAgICAgICAgICAgICAgICAgaWYgKCFsb2FkanMuaXNEZWZpbmVkKHNjcmlwdF9uYW1lKSkge1xcbiAgICAgICAgICAgICAgICAgICAgbG9hZGpzKGRlcGVuZGVuY2llcywgc2NyaXB0X25hbWUsIHtcXG4gICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxcXCJEZXBlbmRlbmNpZXMgZm9yIG9ucmFtcCBwcm92aWRlciBcXFwiLmNvbmNhdChwcm92aWRlci5uYW1lLCBcXFwiIGNvdWxkIG5vdCBiZSBsb2FkZWQuXFxcIikpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5zZXRTZWxlY3RlZFByb3ZpZGVyKG51bGwpO1xcbiAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGNhc2UgMTE6XFxuICAgICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9LCBfY2FsbGVlMik7XFxuICAgICAgICB9KSk7XFxuXFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7XFxuICAgICAgICAgIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgICAgfTtcXG4gICAgICB9KCkpOyAvLyBXaGVuIFxcXCJzaG91bGRfc2hvd193aWRnZXRcXFwiLCBhdHRlbXB0IHRvIGZldGNoIFxcXCJzZWxlY3RlZF9wcm92aWRlclxcXCIncyBcXFwid2lkZ2V0X2h0bWxcXFwiLlxcblxcbiAgICAgIHRoaXMuZGlzcG9zZUdldFdpZGdldEh0bWxSZWFjdGlvbiA9ICgwLGV4dGVybmFsX21vYnhfLnJlYWN0aW9uKShmdW5jdGlvbiAoKSB7XFxuICAgICAgICByZXR1cm4gX3RoaXMyLnNob3VsZF9zaG93X3dpZGdldDtcXG4gICAgICB9LCBmdW5jdGlvbiAoc2hvdWxkX3Nob3dfd2lkZ2V0KSB7XFxuICAgICAgICBpZiAoc2hvdWxkX3Nob3dfd2lkZ2V0KSB7XFxuICAgICAgICAgIGlmIChfdGhpczIuaXNfcmVxdWVzdGluZ193aWRnZXRfaHRtbCkge1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBfdGhpczIuc2V0SXNSZXF1ZXN0aW5nV2lkZ2V0SHRtbCh0cnVlKTtcXG5cXG4gICAgICAgICAgX3RoaXMyLnNlbGVjdGVkX3Byb3ZpZGVyLmdldFdpZGdldEh0bWwoKS50aGVuKGZ1bmN0aW9uICh3aWRnZXRfaHRtbCkge1xcbiAgICAgICAgICAgIGlmICh3aWRnZXRfaHRtbCkge1xcbiAgICAgICAgICAgICAgLy8gUmVndWxhciBwcm92aWRlcnMgKGlmcmFtZS9KUyBlbWJlZClcXG4gICAgICAgICAgICAgIF90aGlzMi5zZXRXaWRnZXRIdG1sKHdpZGdldF9odG1sKTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgLy8gQW4gZW1wdHkgcmVzb2x2ZSAod2lkZ2V0X2h0bWwpIGlkZW50aWZpZXMgYSByZWRpcmVjdC5cXG4gICAgICAgICAgICAgIF90aGlzMi5zZXRTaG91bGRTaG93V2lkZ2V0KGZhbHNlKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH0pW1xcXCJjYXRjaFxcXCJdKGZ1bmN0aW9uIChlcnJvcikge1xcbiAgICAgICAgICAgIF90aGlzMi5zZXRXaWRnZXRFcnJvcihlcnJvcik7XFxuICAgICAgICAgIH0pW1xcXCJmaW5hbGx5XFxcIl0oZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuc2V0SXNSZXF1ZXN0aW5nV2lkZ2V0SHRtbChmYWxzZSk7XFxuICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcIm9uVW5tb3VudE9ucmFtcFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblVubW91bnRPbnJhbXAoKSB7XFxuICAgICAgaWYgKHR5cGVvZiB0aGlzLmRpc3Bvc2VUaGlyZFBhcnR5SnNSZWFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICAgICAgdGhpcy5kaXNwb3NlVGhpcmRQYXJ0eUpzUmVhY3Rpb24oKTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKHR5cGVvZiB0aGlzLmRpc3Bvc2VHZXRXaWRnZXRIdG1sUmVhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcXG4gICAgICAgIHRoaXMuZGlzcG9zZUdldFdpZGdldEh0bWxSZWFjdGlvbigpO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJvbkNsaWNrQ29weURlcG9zaXRBZGRyZXNzXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xpY2tDb3B5RGVwb3NpdEFkZHJlc3MoKSB7XFxuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XFxuXFxuICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcXG4gICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHModGhpcy5kZXBvc2l0X2FkZHJlc3NfcmVmKTtcXG4gICAgICB2YXIgc2VsZWN0aW9ucyA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcXG4gICAgICBzZWxlY3Rpb25zLnJlbW92ZUFsbFJhbmdlcygpO1xcbiAgICAgIHNlbGVjdGlvbnMuYWRkUmFuZ2UocmFuZ2UpO1xcbiAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHRoaXMuZGVwb3NpdF9hZGRyZXNzKS50aGVuKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIF90aGlzMy5zZXRJc0RlcG9zaXRBZGRyZXNzUG9wb3Zlck9wZW4odHJ1ZSk7XFxuXFxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5zZXRJc0RlcG9zaXRBZGRyZXNzUG9wb3Zlck9wZW4oZmFsc2UpO1xcbiAgICAgICAgfSwgNTAwKTtcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJvbkNsaWNrRGlzY2xhaW1lckNvbnRpbnVlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xpY2tEaXNjbGFpbWVyQ29udGludWUoKSB7XFxuICAgICAgdGhpcy5zZXRTaG91bGRTaG93V2lkZ2V0KHRydWUpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcIm9uQ2xpY2tHb1RvRGVwb3NpdFBhZ2VcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DbGlja0dvVG9EZXBvc2l0UGFnZSgpIHtcXG4gICAgICB0aGlzLnBvbGxBcGlGb3JEZXBvc2l0QWRkcmVzcyhmYWxzZSk7XFxuICAgICAgd2luZG93Lm9wZW4oKDAsc2hhcmVkXy53ZWJzaXRlVXJsKSgpICsgc2hhcmVkXy5yb3V0ZXMuY2FzaGllcl9kZXBvc2l0LnN1YnN0cmluZygxKSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwicG9sbEFwaUZvckRlcG9zaXRBZGRyZXNzXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvbGxBcGlGb3JEZXBvc2l0QWRkcmVzcyhzaG91bGRfYWxsb3dfZW1wdHlfYWRkcmVzcykge1xcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xcblxcbiAgICAgIC8vIHNob3VsZF9hbGxvd19lbXB0eV9hZGRyZXNzOiBBUEkgcmV0dXJucyBlbXB0eSBkZXBvc2l0IGFkZHJlc3MgZm9yIGxlZ2FjeSBhY2NvdW50c1xcbiAgICAgIC8vIHRoYXQgaGF2ZSBuZXZlciBnZW5lcmF0ZWQgYSBkZXBvc2l0IGFkZHJlc3MuIFNldHRpbmcgdGhpcyB0byBcXFwidHJ1ZVxcXCIgd2lsbCBhbGxvd1xcbiAgICAgIC8vIHRoZSB1c2VyIHRvIGJlIHJlZGlyZWN0ZWQgdG8gdGhlIERlcG9zaXQgcGFnZSAod2hlcmUgYW4gYWRkcmVzcyB3aWxsIGJlIGdlbmVyYXRlZCkuXFxuICAgICAgLy8gU2V0dGluZyB0aGlzIHRvIFxcXCJmYWxzZVxcXCIgd2lsbCBzdGFydCBwb2xsaW5nIHRoZSBBUEkgZm9yIHRoaXMgZGVwb3NpdCBhZGRyZXNzLlxcbiAgICAgIHRoaXMuc2V0SXNEZXBvc2l0QWRkcmVzc0xvYWRpbmcodHJ1ZSk7XFxuICAgICAgdGhpcy5zZXRBcGlFcnJvcihudWxsKTtcXG4gICAgICB2YXIgZGVwb3NpdF9hZGRyZXNzX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcmV0dXJuIGdldERlcG9zaXRBZGRyZXNzRnJvbUFwaTtcXG4gICAgICB9LCAzMDAwKTtcXG5cXG4gICAgICB2YXIgZ2V0RGVwb3NpdEFkZHJlc3NGcm9tQXBpID0gZnVuY3Rpb24gZ2V0RGVwb3NpdEFkZHJlc3NGcm9tQXBpKCkge1xcbiAgICAgICAgX3RoaXM0LldTLmF1dGhvcml6ZWQuY2FzaGllcignZGVwb3NpdCcsIHtcXG4gICAgICAgICAgcHJvdmlkZXI6ICdjcnlwdG8nLFxcbiAgICAgICAgICB0eXBlOiAnYXBpJ1xcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcXG4gICAgICAgICAgdmFyIHNob3VsZF9jbGVhcl9pbnRlcnZhbCA9IGZhbHNlO1xcblxcbiAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcXG4gICAgICAgICAgICBfdGhpczQuc2V0QXBpRXJyb3IocmVzcG9uc2UuZXJyb3IpO1xcblxcbiAgICAgICAgICAgIHNob3VsZF9jbGVhcl9pbnRlcnZhbCA9IHRydWU7XFxuICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgdmFyIGFkZHJlc3MgPSByZXNwb25zZS5jYXNoaWVyLmRlcG9zaXQuYWRkcmVzcztcXG5cXG4gICAgICAgICAgICBpZiAoYWRkcmVzcyB8fCBzaG91bGRfYWxsb3dfZW1wdHlfYWRkcmVzcykge1xcbiAgICAgICAgICAgICAgX3RoaXM0LnNldERlcG9zaXRBZGRyZXNzKGFkZHJlc3MpO1xcblxcbiAgICAgICAgICAgICAgc2hvdWxkX2NsZWFyX2ludGVydmFsID0gdHJ1ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgaWYgKHNob3VsZF9jbGVhcl9pbnRlcnZhbCkge1xcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoZGVwb3NpdF9hZGRyZXNzX2ludGVydmFsKTtcXG5cXG4gICAgICAgICAgICBfdGhpczQuc2V0SXNEZXBvc2l0QWRkcmVzc0xvYWRpbmcoZmFsc2UpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICB9O1xcblxcbiAgICAgIGdldERlcG9zaXRBZGRyZXNzRnJvbUFwaSgpO1xcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgY2xlYXJJbnRlcnZhbChkZXBvc2l0X2FkZHJlc3NfaW50ZXJ2YWwpO1xcblxcbiAgICAgICAgX3RoaXM0LnNldElzRGVwb3NpdEFkZHJlc3NMb2FkaW5nKGZhbHNlKTtcXG4gICAgICB9LCAzMDAwMCk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwicmVzZXRQb3B1cFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldFBvcHVwKCkge1xcbiAgICAgIHRoaXMuc2V0QXBpRXJyb3IobnVsbCk7XFxuICAgICAgdGhpcy5zZXREZXBvc2l0QWRkcmVzcyhudWxsKTtcXG4gICAgICB0aGlzLnNldERlcG9zaXRBZGRyZXNzUmVmKG51bGwpO1xcbiAgICAgIHRoaXMuc2V0SXNEZXBvc2l0QWRkcmVzc0xvYWRpbmcodHJ1ZSk7XFxuICAgICAgdGhpcy5zZXRTZWxlY3RlZFByb3ZpZGVyKG51bGwpO1xcbiAgICAgIHRoaXMuc2V0U2hvdWxkU2hvd1dpZGdldChmYWxzZSk7XFxuICAgICAgdGhpcy5zZXRXaWRnZXRFcnJvcihudWxsKTtcXG4gICAgICB0aGlzLnNldFdpZGdldEh0bWwobnVsbCk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0QXBpRXJyb3JcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QXBpRXJyb3IoYXBpX2Vycm9yKSB7XFxuICAgICAgdGhpcy5hcGlfZXJyb3IgPSBhcGlfZXJyb3I7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0Q29weUljb25SZWZcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29weUljb25SZWYocmVmKSB7XFxuICAgICAgdGhpcy5jb3B5X2ljb25fcmVmID0gcmVmO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldERlcG9zaXRBZGRyZXNzXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldERlcG9zaXRBZGRyZXNzKGRlcG9zaXRfYWRkcmVzcykge1xcbiAgICAgIHRoaXMuZGVwb3NpdF9hZGRyZXNzID0gZGVwb3NpdF9hZGRyZXNzO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldERlcG9zaXRBZGRyZXNzUmVmXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldERlcG9zaXRBZGRyZXNzUmVmKHJlZikge1xcbiAgICAgIHRoaXMuZGVwb3NpdF9hZGRyZXNzX3JlZiA9IHJlZjtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRJc0RlcG9zaXRBZGRyZXNzTG9hZGluZ1xcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc0RlcG9zaXRBZGRyZXNzTG9hZGluZyhpc19sb2FkaW5nKSB7XFxuICAgICAgdGhpcy5pc19kZXBvc2l0X2FkZHJlc3NfbG9hZGluZyA9IGlzX2xvYWRpbmc7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0SXNEZXBvc2l0QWRkcmVzc1BvcG92ZXJPcGVuXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldElzRGVwb3NpdEFkZHJlc3NQb3BvdmVyT3Blbihpc19vcGVuKSB7XFxuICAgICAgdGhpcy5pc19kZXBvc2l0X2FkZHJlc3NfcG9wb3Zlcl9vcGVuID0gaXNfb3BlbjtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRJc09uUmFtcE1vZGFsT3BlblxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc09uUmFtcE1vZGFsT3Blbihpc19vcGVuKSB7XFxuICAgICAgdGhpcy5pc19vbnJhbXBfbW9kYWxfb3BlbiA9IGlzX29wZW47XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0SXNSZXF1ZXN0aW5nV2lkZ2V0SHRtbFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc1JlcXVlc3RpbmdXaWRnZXRIdG1sKGlzX3JlcXVlc3Rpbmdfd2lkZ2V0X2h0bWwpIHtcXG4gICAgICB0aGlzLmlzX3JlcXVlc3Rpbmdfd2lkZ2V0X2h0bWwgPSBpc19yZXF1ZXN0aW5nX3dpZGdldF9odG1sO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldFNlbGVjdGVkUHJvdmlkZXJcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0ZWRQcm92aWRlcihwcm92aWRlcikge1xcbiAgICAgIGlmIChwcm92aWRlcikge1xcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9wcm92aWRlciA9IHByb3ZpZGVyO1xcbiAgICAgICAgdGhpcy5zZXRJc09uUmFtcE1vZGFsT3Blbih0cnVlKTtcXG4gICAgICAgIHRoaXMucG9sbEFwaUZvckRlcG9zaXRBZGRyZXNzKHRydWUpO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICB0aGlzLnNldElzT25SYW1wTW9kYWxPcGVuKGZhbHNlKTtcXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfcHJvdmlkZXIgPSBudWxsO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRTaG91bGRTaG93V2lkZ2V0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNob3VsZFNob3dXaWRnZXQoc2hvdWxkX3Nob3cpIHtcXG4gICAgICB0aGlzLnNob3VsZF9zaG93X3dpZGdldCA9IHNob3VsZF9zaG93O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldE9ucmFtcFByb3ZpZGVyc1xcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRPbnJhbXBQcm92aWRlcnMob25yYW1wX3Byb3ZpZGVycykge1xcbiAgICAgIHRoaXMub25yYW1wX3Byb3ZpZGVycyA9IG9ucmFtcF9wcm92aWRlcnMuc2xpY2UoKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRXaWRnZXRFcnJvclxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRXaWRnZXRFcnJvcih3aWRnZXRfZXJyb3IpIHtcXG4gICAgICB0aGlzLndpZGdldF9lcnJvciA9IHdpZGdldF9lcnJvcjtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRXaWRnZXRIdG1sXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFdpZGdldEh0bWwod2lkZ2V0X2h0bWwpIHtcXG4gICAgICB0aGlzLndpZGdldF9odG1sID0gd2lkZ2V0X2h0bWw7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBPblJhbXBTdG9yZTtcXG59KEJhc2VTdG9yZSksIChvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3IgPSBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImFwaV9lcnJvclxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gbnVsbDtcXG4gIH1cXG59KSwgb25fcmFtcF9zdG9yZV9kZXNjcmlwdG9yMiA9IG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZGVwb3NpdF9hZGRyZXNzXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBudWxsO1xcbiAgfVxcbn0pLCBvbl9yYW1wX3N0b3JlX2Rlc2NyaXB0b3IzID0gb25fcmFtcF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19kZXBvc2l0X2FkZHJlc3NfbG9hZGluZ1xcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gdHJ1ZTtcXG4gIH1cXG59KSwgb25fcmFtcF9zdG9yZV9kZXNjcmlwdG9yNCA9IG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfZGVwb3NpdF9hZGRyZXNzX3BvcG92ZXJfb3BlblxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIG9uX3JhbXBfc3RvcmVfZGVzY3JpcHRvcjUgPSBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX29ucmFtcF9tb2RhbF9vcGVuXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgb25fcmFtcF9zdG9yZV9kZXNjcmlwdG9yNiA9IG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfcmVxdWVzdGluZ193aWRnZXRfaHRtbFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIG9uX3JhbXBfc3RvcmVfZGVzY3JpcHRvcjcgPSBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9ucmFtcF9wcm92aWRlcnNcXFwiLCBbb25fcmFtcF9zdG9yZV9kZWNdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBbXTtcXG4gIH1cXG59KSwgb25fcmFtcF9zdG9yZV9kZXNjcmlwdG9yOCA9IG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2VsZWN0ZWRfcHJvdmlkZXJcXFwiLCBbb25fcmFtcF9zdG9yZV9kZWMyXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gbnVsbDtcXG4gIH1cXG59KSwgb25fcmFtcF9zdG9yZV9kZXNjcmlwdG9yOSA9IG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2hvdWxkX3Nob3dfd2lkZ2V0XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgb25fcmFtcF9zdG9yZV9kZXNjcmlwdG9yMTAgPSBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIndpZGdldF9lcnJvclxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gbnVsbDtcXG4gIH1cXG59KSwgb25fcmFtcF9zdG9yZV9kZXNjcmlwdG9yMTEgPSBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIndpZGdldF9odG1sXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBudWxsO1xcbiAgfVxcbn0pLCBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX29ucmFtcF90YWJfdmlzaWJsZVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5jb21wdXRlZF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19vbnJhbXBfdGFiX3Zpc2libGVcXFwiKSwgb25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImZpbHRlcmVkX29ucmFtcF9wcm92aWRlcnNcXFwiLCBbZXh0ZXJuYWxfbW9ieF8uY29tcHV0ZWRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiZmlsdGVyZWRfb25yYW1wX3Byb3ZpZGVyc1xcXCIpLCBvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25yYW1wX3BvcHVwX21vZGFsX3RpdGxlXFxcIiwgW2V4dGVybmFsX21vYnhfLmNvbXB1dGVkXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9ucmFtcF9wb3B1cF9tb2RhbF90aXRsZVxcXCIpLCBvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2hvdWxkX3Nob3dfZGlhbG9nXFxcIiwgW2V4dGVybmFsX21vYnhfLmNvbXB1dGVkXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNob3VsZF9zaG93X2RpYWxvZ1xcXCIpLCBvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25Nb3VudE9ucmFtcFxcXCIsIFtvbl9yYW1wX3N0b3JlX2RlYzNdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25Nb3VudE9ucmFtcFxcXCIpLCBvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25Vbm1vdW50T25yYW1wXFxcIiwgW29uX3JhbXBfc3RvcmVfZGVjNF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvblVubW91bnRPbnJhbXBcXFwiKSwgb25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uQ2xpY2tDb3B5RGVwb3NpdEFkZHJlc3NcXFwiLCBbb25fcmFtcF9zdG9yZV9kZWM1XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uQ2xpY2tDb3B5RGVwb3NpdEFkZHJlc3NcXFwiKSwgb25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uQ2xpY2tEaXNjbGFpbWVyQ29udGludWVcXFwiLCBbb25fcmFtcF9zdG9yZV9kZWM2XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uQ2xpY2tEaXNjbGFpbWVyQ29udGludWVcXFwiKSwgb25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uQ2xpY2tHb1RvRGVwb3NpdFBhZ2VcXFwiLCBbb25fcmFtcF9zdG9yZV9kZWM3XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uQ2xpY2tHb1RvRGVwb3NpdFBhZ2VcXFwiKSwgb25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInBvbGxBcGlGb3JEZXBvc2l0QWRkcmVzc1xcXCIsIFtvbl9yYW1wX3N0b3JlX2RlYzhdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwicG9sbEFwaUZvckRlcG9zaXRBZGRyZXNzXFxcIiksIG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgb25fcmFtcF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXNldFBvcHVwXFxcIiwgW29uX3JhbXBfc3RvcmVfZGVjOV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXNldFBvcHVwXFxcIiksIG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgb25fcmFtcF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRBcGlFcnJvclxcXCIsIFtvbl9yYW1wX3N0b3JlX2RlYzEwXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEFwaUVycm9yXFxcIiksIG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgb25fcmFtcF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRDb3B5SWNvblJlZlxcXCIsIFtvbl9yYW1wX3N0b3JlX2RlYzExXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldENvcHlJY29uUmVmXFxcIiksIG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgb25fcmFtcF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXREZXBvc2l0QWRkcmVzc1xcXCIsIFtvbl9yYW1wX3N0b3JlX2RlYzEyXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldERlcG9zaXRBZGRyZXNzXFxcIiksIG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgb25fcmFtcF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXREZXBvc2l0QWRkcmVzc1JlZlxcXCIsIFtvbl9yYW1wX3N0b3JlX2RlYzEzXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldERlcG9zaXRBZGRyZXNzUmVmXFxcIiksIG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgb25fcmFtcF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc0RlcG9zaXRBZGRyZXNzTG9hZGluZ1xcXCIsIFtvbl9yYW1wX3N0b3JlX2RlYzE0XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzRGVwb3NpdEFkZHJlc3NMb2FkaW5nXFxcIiksIG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgb25fcmFtcF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc0RlcG9zaXRBZGRyZXNzUG9wb3Zlck9wZW5cXFwiLCBbb25fcmFtcF9zdG9yZV9kZWMxNV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc0RlcG9zaXRBZGRyZXNzUG9wb3Zlck9wZW5cXFwiKSwgb25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzT25SYW1wTW9kYWxPcGVuXFxcIiwgW29uX3JhbXBfc3RvcmVfZGVjMTZdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0SXNPblJhbXBNb2RhbE9wZW5cXFwiKSwgb25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzUmVxdWVzdGluZ1dpZGdldEh0bWxcXFwiLCBbb25fcmFtcF9zdG9yZV9kZWMxN10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc1JlcXVlc3RpbmdXaWRnZXRIdG1sXFxcIiksIG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgb25fcmFtcF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRTZWxlY3RlZFByb3ZpZGVyXFxcIiwgW29uX3JhbXBfc3RvcmVfZGVjMThdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0U2VsZWN0ZWRQcm92aWRlclxcXCIpLCBvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0U2hvdWxkU2hvd1dpZGdldFxcXCIsIFtvbl9yYW1wX3N0b3JlX2RlYzE5XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFNob3VsZFNob3dXaWRnZXRcXFwiKSwgb25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBvbl9yYW1wX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldE9ucmFtcFByb3ZpZGVyc1xcXCIsIFtvbl9yYW1wX3N0b3JlX2RlYzIwXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldE9ucmFtcFByb3ZpZGVyc1xcXCIpLCBvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0V2lkZ2V0RXJyb3JcXFwiLCBbb25fcmFtcF9zdG9yZV9kZWMyMV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRXaWRnZXRFcnJvclxcXCIpLCBvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIG9uX3JhbXBfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKG9uX3JhbXBfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0V2lkZ2V0SHRtbFxcXCIsIFtvbl9yYW1wX3N0b3JlX2RlYzIyXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvbl9yYW1wX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFdpZGdldEh0bWxcXFwiKSwgb25fcmFtcF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpKSwgb25fcmFtcF9zdG9yZV9jbGFzcykpO1xcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL1N0b3Jlcy92ZXJpZmljYXRpb24tc3RvcmUuanNcXG52YXIgdmVyaWZpY2F0aW9uX3N0b3JlX2RlYywgdmVyaWZpY2F0aW9uX3N0b3JlX2RlYzIsIHZlcmlmaWNhdGlvbl9zdG9yZV9kZWMzLCB2ZXJpZmljYXRpb25fc3RvcmVfZGVjNCwgdmVyaWZpY2F0aW9uX3N0b3JlX2RlYzUsIHZlcmlmaWNhdGlvbl9zdG9yZV9kZWM2LCB2ZXJpZmljYXRpb25fc3RvcmVfZGVjNywgdmVyaWZpY2F0aW9uX3N0b3JlX2RlYzgsIHZlcmlmaWNhdGlvbl9zdG9yZV9jbGFzcywgdmVyaWZpY2F0aW9uX3N0b3JlX2Rlc2NyaXB0b3IsIHZlcmlmaWNhdGlvbl9zdG9yZV9kZXNjcmlwdG9yMiwgdmVyaWZpY2F0aW9uX3N0b3JlX2Rlc2NyaXB0b3IzLCB2ZXJpZmljYXRpb25fc3RvcmVfZGVzY3JpcHRvcjQsIHZlcmlmaWNhdGlvbl9zdG9yZV9kZXNjcmlwdG9yNSwgdmVyaWZpY2F0aW9uX3N0b3JlX2Rlc2NyaXB0b3I2O1xcblxcbmZ1bmN0aW9uIHZlcmlmaWNhdGlvbl9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XFxuXFxuZnVuY3Rpb24gdmVyaWZpY2F0aW9uX3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IHZlcmlmaWNhdGlvbl9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJuZXh0XFxcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgdmVyaWZpY2F0aW9uX3N0b3JlX2FzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXFxcInRocm93XFxcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxcblxcbmZ1bmN0aW9uIHZlcmlmaWNhdGlvbl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgaWYgKCFkZXNjcmlwdG9yKSByZXR1cm47IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB7IGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSwgY29uZmlndXJhYmxlOiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSwgd3JpdGFibGU6IGRlc2NyaXB0b3Iud3JpdGFibGUsIHZhbHVlOiBkZXNjcmlwdG9yLmluaXRpYWxpemVyID8gZGVzY3JpcHRvci5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwIH0pOyB9XFxuXFxuZnVuY3Rpb24gdmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFxcXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cXFwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gdmVyaWZpY2F0aW9uX3N0b3JlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXFxcInZhbHVlXFxcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiB2ZXJpZmljYXRpb25fc3RvcmVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSB2ZXJpZmljYXRpb25fc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIHZlcmlmaWNhdGlvbl9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIHZlcmlmaWNhdGlvbl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVjb3JhdG9ycywgZGVzY3JpcHRvciwgY29udGV4dCkgeyB2YXIgZGVzYyA9IHt9OyBPYmplY3Qua2V5cyhkZXNjcmlwdG9yKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgZGVzY1trZXldID0gZGVzY3JpcHRvcltrZXldOyB9KTsgZGVzYy5lbnVtZXJhYmxlID0gISFkZXNjLmVudW1lcmFibGU7IGRlc2MuY29uZmlndXJhYmxlID0gISFkZXNjLmNvbmZpZ3VyYWJsZTsgaWYgKCd2YWx1ZScgaW4gZGVzYyB8fCBkZXNjLmluaXRpYWxpemVyKSB7IGRlc2Mud3JpdGFibGUgPSB0cnVlOyB9IGRlc2MgPSBkZWNvcmF0b3JzLnNsaWNlKCkucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbiAoZGVzYywgZGVjb3JhdG9yKSB7IHJldHVybiBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYykgfHwgZGVzYzsgfSwgZGVzYyk7IGlmIChjb250ZXh0ICYmIGRlc2MuaW5pdGlhbGl6ZXIgIT09IHZvaWQgMCkgeyBkZXNjLnZhbHVlID0gZGVzYy5pbml0aWFsaXplciA/IGRlc2MuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMDsgZGVzYy5pbml0aWFsaXplciA9IHVuZGVmaW5lZDsgfSBpZiAoZGVzYy5pbml0aWFsaXplciA9PT0gdm9pZCAwKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjKTsgZGVzYyA9IG51bGw7IH0gcmV0dXJuIGRlc2M7IH1cXG5cXG5mdW5jdGlvbiB2ZXJpZmljYXRpb25fc3RvcmVfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyKGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgdGhyb3cgbmV3IEVycm9yKCdEZWNvcmF0aW5nIGNsYXNzIHByb3BlcnR5IGZhaWxlZC4gUGxlYXNlIGVuc3VyZSB0aGF0ICcgKyAncHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpcyBlbmFibGVkIGFuZCBydW5zIGFmdGVyIHRoZSBkZWNvcmF0b3JzIHRyYW5zZm9ybS4nKTsgfVxcblxcblxcblxcblxcbnZhciBWZXJpZmljYXRpb25TdG9yZSA9ICh2ZXJpZmljYXRpb25fc3RvcmVfZGVjID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCB2ZXJpZmljYXRpb25fc3RvcmVfZGVjMiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgdmVyaWZpY2F0aW9uX3N0b3JlX2RlYzMgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHZlcmlmaWNhdGlvbl9zdG9yZV9kZWM0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCB2ZXJpZmljYXRpb25fc3RvcmVfZGVjNSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgdmVyaWZpY2F0aW9uX3N0b3JlX2RlYzYgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHZlcmlmaWNhdGlvbl9zdG9yZV9kZWM3ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCB2ZXJpZmljYXRpb25fc3RvcmVfZGVjOCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgKHZlcmlmaWNhdGlvbl9zdG9yZV9jbGFzcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XFxuICBmdW5jdGlvbiBWZXJpZmljYXRpb25TdG9yZShfcmVmKSB7XFxuICAgIHZhciBXUyA9IF9yZWYuV1MsXFxuICAgICAgICByb290X3N0b3JlID0gX3JlZi5yb290X3N0b3JlO1xcblxcbiAgICB2ZXJpZmljYXRpb25fc3RvcmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmVyaWZpY2F0aW9uU3RvcmUpO1xcblxcbiAgICB2ZXJpZmljYXRpb25fc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiaXNfYnV0dG9uX2NsaWNrZWRcXFwiLCB2ZXJpZmljYXRpb25fc3RvcmVfZGVzY3JpcHRvciwgdGhpcyk7XFxuXFxuICAgIHZlcmlmaWNhdGlvbl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJ0aW1lb3V0X2J1dHRvblxcXCIsIHZlcmlmaWNhdGlvbl9zdG9yZV9kZXNjcmlwdG9yMiwgdGhpcyk7XFxuXFxuICAgIHZlcmlmaWNhdGlvbl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJlcnJvclxcXCIsIHZlcmlmaWNhdGlvbl9zdG9yZV9kZXNjcmlwdG9yMywgdGhpcyk7XFxuXFxuICAgIHZlcmlmaWNhdGlvbl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJpc19lbWFpbF9zZW50XFxcIiwgdmVyaWZpY2F0aW9uX3N0b3JlX2Rlc2NyaXB0b3I0LCB0aGlzKTtcXG5cXG4gICAgdmVyaWZpY2F0aW9uX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImlzX3Jlc2VuZF9jbGlja2VkXFxcIiwgdmVyaWZpY2F0aW9uX3N0b3JlX2Rlc2NyaXB0b3I1LCB0aGlzKTtcXG5cXG4gICAgdmVyaWZpY2F0aW9uX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcInJlc2VuZF90aW1lb3V0XFxcIiwgdmVyaWZpY2F0aW9uX3N0b3JlX2Rlc2NyaXB0b3I2LCB0aGlzKTtcXG5cXG4gICAgdGhpcy5yb290X3N0b3JlID0gcm9vdF9zdG9yZTtcXG4gICAgdGhpcy5XUyA9IFdTO1xcbiAgfVxcblxcbiAgdmVyaWZpY2F0aW9uX3N0b3JlX2NyZWF0ZUNsYXNzKFZlcmlmaWNhdGlvblN0b3JlLCBbe1xcbiAgICBrZXk6IFxcXCJzZXRJc0J1dHRvbkNsaWNrZWRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SXNCdXR0b25DbGlja2VkKHZhbHVlKSB7XFxuICAgICAgdGhpcy5pc19idXR0b25fY2xpY2tlZCA9IHZhbHVlO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldFRpbWVvdXRCdXR0b25cXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VGltZW91dEJ1dHRvbih2YWx1ZSkge1xcbiAgICAgIHRoaXMudGltZW91dF9idXR0b24gPSB2YWx1ZTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRJc0VtYWlsU2VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc0VtYWlsU2VudCh2YWx1ZSkge1xcbiAgICAgIHRoaXMuaXNfZW1haWxfc2VudCA9IHZhbHVlO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldElzUmVzZW5kQ2xpY2tlZFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc1Jlc2VuZENsaWNrZWQodmFsdWUpIHtcXG4gICAgICB0aGlzLmlzX3Jlc2VuZF9jbGlja2VkID0gdmFsdWU7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0UmVzZW5kVGltZW91dFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSZXNlbmRUaW1lb3V0KHZhbHVlKSB7XFxuICAgICAgdGhpcy5yZXNlbmRfdGltZW91dCA9IHZhbHVlO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImNsZWFyVGltZW91dFZlcmlmaWNhdGlvblxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhclRpbWVvdXRWZXJpZmljYXRpb24oKSB7XFxuICAgICAgaWYgKHRoaXMudGltZW91dF9idXR0b24pIHtcXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRfYnV0dG9uKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0VGltZW91dFZlcmlmaWNhdGlvblxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUaW1lb3V0VmVyaWZpY2F0aW9uKCkge1xcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgICAgdGhpcy5jbGVhclRpbWVvdXRWZXJpZmljYXRpb24oKTtcXG4gICAgICB0aGlzLnNldFRpbWVvdXRCdXR0b24oc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XFxuICAgICAgICBfdGhpcy5jbGVhclZlcmlmaWNhdGlvbigpO1xcbiAgICAgIH0sIDM2MDAwMDApKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZW5kVmVyaWZpY2F0aW9uRW1haWxcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfc2VuZFZlcmlmaWNhdGlvbkVtYWlsID0gdmVyaWZpY2F0aW9uX3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICAgICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSwgY2xpZW50LCBtb2R1bGVzLCByZXNldFBheW1lbnRBZ2VudCwgYWN0aXZlX2NvbnRhaW5lciwgY29udGFpbmVyLCB3aXRoZHJhd2FsX3R5cGUsIHJlc3BvbnNlX3ZlcmlmeV9lbWFpbDtcXG5cXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgX3RoaXMkcm9vdF9zdG9yZSA9IHRoaXMucm9vdF9zdG9yZSwgY2xpZW50ID0gX3RoaXMkcm9vdF9zdG9yZS5jbGllbnQsIG1vZHVsZXMgPSBfdGhpcyRyb290X3N0b3JlLm1vZHVsZXM7XFxuICAgICAgICAgICAgICAgIHJlc2V0UGF5bWVudEFnZW50ID0gbW9kdWxlcy5jYXNoaWVyLnBheW1lbnRfYWdlbnQucmVzZXRQYXltZW50QWdlbnQ7XFxuICAgICAgICAgICAgICAgIGFjdGl2ZV9jb250YWluZXIgPSBtb2R1bGVzLmNhc2hpZXIuZ2VuZXJhbF9zdG9yZS5hY3RpdmVfY29udGFpbmVyO1xcbiAgICAgICAgICAgICAgICBjb250YWluZXIgPSBjb25zdGFudHMubWFwX2FjdGlvblthY3RpdmVfY29udGFpbmVyXTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCEodGhpcy5pc19idXR0b25fY2xpY2tlZCB8fCAhY2xpZW50LmVtYWlsKSkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXFxcInJldHVyblxcXCIpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA2OlxcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yLnNldEVycm9yTWVzc2FnZSgnJyk7XFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0SXNCdXR0b25DbGlja2VkKHRydWUpO1xcbiAgICAgICAgICAgICAgICB3aXRoZHJhd2FsX3R5cGUgPSBjb250YWluZXIgPT09ICdwYXltZW50X2FnZW50X3dpdGhkcmF3JyA/ICdwYXltZW50YWdlbnRfd2l0aGRyYXcnIDogJ3BheW1lbnRfd2l0aGRyYXcnO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLldTLnZlcmlmeUVtYWlsKGNsaWVudC5lbWFpbCwgd2l0aGRyYXdhbF90eXBlKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTE6XFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlX3ZlcmlmeV9lbWFpbCA9IF9jb250ZXh0LnNlbnQ7XFxuXFxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZV92ZXJpZnlfZW1haWwuZXJyb3IpIHtcXG4gICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVmVyaWZpY2F0aW9uKCk7XFxuXFxuICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlX3ZlcmlmeV9lbWFpbC5lcnJvci5jb2RlID09PSAnUGF5bWVudEFnZW50V2l0aGRyYXdFcnJvcicpIHtcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3Iuc2V0RXJyb3JNZXNzYWdlKHJlc3BvbnNlX3ZlcmlmeV9lbWFpbC5lcnJvciwgcmVzZXRQYXltZW50QWdlbnQsIG51bGwpO1xcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yLnNldEVycm9yTWVzc2FnZShyZXNwb25zZV92ZXJpZnlfZW1haWwuZXJyb3IsIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmVycm9yLnNldEVycm9yTWVzc2FnZSgnJywgbnVsbCwgbnVsbCk7XFxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJc0VtYWlsU2VudCh0cnVlKTtcXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFRpbWVvdXRWZXJpZmljYXRpb24oKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgY2FzZSAxMzpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTtcXG4gICAgICB9KSk7XFxuXFxuICAgICAgZnVuY3Rpb24gc2VuZFZlcmlmaWNhdGlvbkVtYWlsKCkge1xcbiAgICAgICAgcmV0dXJuIF9zZW5kVmVyaWZpY2F0aW9uRW1haWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIHNlbmRWZXJpZmljYXRpb25FbWFpbDtcXG4gICAgfSgpXFxuICB9LCB7XFxuICAgIGtleTogXFxcInJlc2VuZFZlcmlmaWNhdGlvbkVtYWlsXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2VuZFZlcmlmaWNhdGlvbkVtYWlsKCkge1xcbiAgICAgIC8vIGRvbid0IGFsbG93IGNsaWNraW5nIHdoaWxlIG9uZ29pbmcgdGltZW91dFxcbiAgICAgIGlmICh0aGlzLnJlc2VuZF90aW1lb3V0IDwgNjApIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuXFxuICAgICAgdGhpcy5zZXRJc0J1dHRvbkNsaWNrZWQoZmFsc2UpO1xcbiAgICAgIHRoaXMuc2V0Q291bnREb3duUmVzZW5kVmVyaWZpY2F0aW9uKCk7XFxuICAgICAgdGhpcy5zZW5kVmVyaWZpY2F0aW9uRW1haWwoKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRDb3VudERvd25SZXNlbmRWZXJpZmljYXRpb25cXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q291bnREb3duUmVzZW5kVmVyaWZpY2F0aW9uKCkge1xcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xcblxcbiAgICAgIHRoaXMuc2V0UmVzZW5kVGltZW91dCh0aGlzLnJlc2VuZF90aW1lb3V0IC0gMSk7XFxuICAgICAgdmFyIHJlc2VuZF9pbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIGlmIChfdGhpczMucmVzZW5kX3RpbWVvdXQgPT09IDEpIHtcXG4gICAgICAgICAgX3RoaXMzLnNldFJlc2VuZFRpbWVvdXQoNjApO1xcblxcbiAgICAgICAgICBjbGVhckludGVydmFsKHJlc2VuZF9pbnRlcnZhbCk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICBfdGhpczMuc2V0UmVzZW5kVGltZW91dChfdGhpczMucmVzZW5kX3RpbWVvdXQgLSAxKTtcXG4gICAgICAgIH1cXG4gICAgICB9LCAxMDAwKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJjbGVhclZlcmlmaWNhdGlvblxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhclZlcmlmaWNhdGlvbigpIHtcXG4gICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZTIgPSB0aGlzLnJvb3Rfc3RvcmUsXFxuICAgICAgICAgIGNsaWVudCA9IF90aGlzJHJvb3Rfc3RvcmUyLmNsaWVudCxcXG4gICAgICAgICAgbW9kdWxlcyA9IF90aGlzJHJvb3Rfc3RvcmUyLm1vZHVsZXM7XFxuICAgICAgdmFyIGFjdGl2ZV9jb250YWluZXIgPSBtb2R1bGVzLmNhc2hpZXIuZ2VuZXJhbF9zdG9yZS5hY3RpdmVfY29udGFpbmVyO1xcbiAgICAgIHZhciBjb250YWluZXIgPSBjb25zdGFudHMubWFwX2FjdGlvblthY3RpdmVfY29udGFpbmVyXTtcXG4gICAgICB0aGlzLmNsZWFyVGltZW91dFZlcmlmaWNhdGlvbigpO1xcbiAgICAgIHRoaXMuc2V0SXNCdXR0b25DbGlja2VkKGZhbHNlKTtcXG4gICAgICB0aGlzLnNldElzRW1haWxTZW50KGZhbHNlKTtcXG4gICAgICB0aGlzLnNldElzUmVzZW5kQ2xpY2tlZChmYWxzZSk7XFxuICAgICAgdGhpcy5zZXRSZXNlbmRUaW1lb3V0KDYwKTtcXG4gICAgICB0aGlzLmVycm9yLnNldEVycm9yTWVzc2FnZSgnJywgbnVsbCwgbnVsbCk7XFxuICAgICAgY2xpZW50LnNldFZlcmlmaWNhdGlvbkNvZGUoJycsIGNvbnRhaW5lcik7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBWZXJpZmljYXRpb25TdG9yZTtcXG59KCksICh2ZXJpZmljYXRpb25fc3RvcmVfZGVzY3JpcHRvciA9IHZlcmlmaWNhdGlvbl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX2J1dHRvbl9jbGlja2VkXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgdmVyaWZpY2F0aW9uX3N0b3JlX2Rlc2NyaXB0b3IyID0gdmVyaWZpY2F0aW9uX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih2ZXJpZmljYXRpb25fc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwidGltZW91dF9idXR0b25cXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuICcnO1xcbiAgfVxcbn0pLCB2ZXJpZmljYXRpb25fc3RvcmVfZGVzY3JpcHRvcjMgPSB2ZXJpZmljYXRpb25fc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHZlcmlmaWNhdGlvbl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJlcnJvclxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gbmV3IEVycm9yU3RvcmUoKTtcXG4gIH1cXG59KSwgdmVyaWZpY2F0aW9uX3N0b3JlX2Rlc2NyaXB0b3I0ID0gdmVyaWZpY2F0aW9uX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih2ZXJpZmljYXRpb25fc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfZW1haWxfc2VudFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIHZlcmlmaWNhdGlvbl9zdG9yZV9kZXNjcmlwdG9yNSA9IHZlcmlmaWNhdGlvbl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX3Jlc2VuZF9jbGlja2VkXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgdmVyaWZpY2F0aW9uX3N0b3JlX2Rlc2NyaXB0b3I2ID0gdmVyaWZpY2F0aW9uX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih2ZXJpZmljYXRpb25fc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwicmVzZW5kX3RpbWVvdXRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIDYwO1xcbiAgfVxcbn0pLCB2ZXJpZmljYXRpb25fc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHZlcmlmaWNhdGlvbl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc0J1dHRvbkNsaWNrZWRcXFwiLCBbdmVyaWZpY2F0aW9uX3N0b3JlX2RlY10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzQnV0dG9uQ2xpY2tlZFxcXCIpLCB2ZXJpZmljYXRpb25fc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgdmVyaWZpY2F0aW9uX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih2ZXJpZmljYXRpb25fc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0VGltZW91dEJ1dHRvblxcXCIsIFt2ZXJpZmljYXRpb25fc3RvcmVfZGVjMl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFRpbWVvdXRCdXR0b25cXFwiKSwgdmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHZlcmlmaWNhdGlvbl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzRW1haWxTZW50XFxcIiwgW3ZlcmlmaWNhdGlvbl9zdG9yZV9kZWMzXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2ZXJpZmljYXRpb25fc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0SXNFbWFpbFNlbnRcXFwiKSwgdmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHZlcmlmaWNhdGlvbl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzUmVzZW5kQ2xpY2tlZFxcXCIsIFt2ZXJpZmljYXRpb25fc3RvcmVfZGVjNF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzUmVzZW5kQ2xpY2tlZFxcXCIpLCB2ZXJpZmljYXRpb25fc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgdmVyaWZpY2F0aW9uX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih2ZXJpZmljYXRpb25fc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0UmVzZW5kVGltZW91dFxcXCIsIFt2ZXJpZmljYXRpb25fc3RvcmVfZGVjNV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFJlc2VuZFRpbWVvdXRcXFwiKSwgdmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHZlcmlmaWNhdGlvbl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFRpbWVvdXRWZXJpZmljYXRpb25cXFwiLCBbdmVyaWZpY2F0aW9uX3N0b3JlX2RlYzZdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZlcmlmaWNhdGlvbl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRUaW1lb3V0VmVyaWZpY2F0aW9uXFxcIiksIHZlcmlmaWNhdGlvbl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCB2ZXJpZmljYXRpb25fc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHZlcmlmaWNhdGlvbl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZW5kVmVyaWZpY2F0aW9uRW1haWxcXFwiLCBbdmVyaWZpY2F0aW9uX3N0b3JlX2RlYzddLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZlcmlmaWNhdGlvbl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZW5kVmVyaWZpY2F0aW9uRW1haWxcXFwiKSwgdmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHZlcmlmaWNhdGlvbl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInJlc2VuZFZlcmlmaWNhdGlvbkVtYWlsXFxcIiwgW3ZlcmlmaWNhdGlvbl9zdG9yZV9kZWM4XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2ZXJpZmljYXRpb25fc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwicmVzZW5kVmVyaWZpY2F0aW9uRW1haWxcXFwiKSwgdmVyaWZpY2F0aW9uX3N0b3JlX2NsYXNzLnByb3RvdHlwZSkpLCB2ZXJpZmljYXRpb25fc3RvcmVfY2xhc3MpKTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9TdG9yZXMvcGF5bWVudC1hZ2VudC1zdG9yZS5qc1xcbnZhciBwYXltZW50X2FnZW50X3N0b3JlX2RlYywgcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMyLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzMsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjNCwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZWM1LCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzYsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjNywgcGF5bWVudF9hZ2VudF9zdG9yZV9kZWM4LCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzksIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMTAsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMTEsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMTIsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMTMsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMTQsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMTUsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMTYsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMTcsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMTgsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMTksIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMjAsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMjEsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMjIsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMjMsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMjQsIHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvciwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yMiwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yMywgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yNCwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yNSwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yNiwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yNywgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yOCwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yOSwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yMTAsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvcjExLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IxMiwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yMTMsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvcjE0LCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IxNSwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yMTYsIF9kZXNjcmlwdG9yMTc7XFxuXFxuZnVuY3Rpb24gcGF5bWVudF9hZ2VudF9zdG9yZV9vd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSB7IHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgfSBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cXG5cXG5mdW5jdGlvbiBwYXltZW50X2FnZW50X3N0b3JlX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBwYXltZW50X2FnZW50X3N0b3JlX293bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBwYXltZW50X2FnZW50X3N0b3JlX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IHBheW1lbnRfYWdlbnRfc3RvcmVfb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cXG5cXG5mdW5jdGlvbiBwYXltZW50X2FnZW50X3N0b3JlX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cXG5cXG5mdW5jdGlvbiBwYXltZW50X2FnZW50X3N0b3JlX2FzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH1cXG5cXG5mdW5jdGlvbiBwYXltZW50X2FnZW50X3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IHBheW1lbnRfYWdlbnRfc3RvcmVfYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcXFwibmV4dFxcXCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IHBheW1lbnRfYWdlbnRfc3RvcmVfYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcXFwidGhyb3dcXFwiLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9XFxuXFxuZnVuY3Rpb24gcGF5bWVudF9hZ2VudF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgaWYgKCFkZXNjcmlwdG9yKSByZXR1cm47IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB7IGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSwgY29uZmlndXJhYmxlOiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSwgd3JpdGFibGU6IGRlc2NyaXB0b3Iud3JpdGFibGUsIHZhbHVlOiBkZXNjcmlwdG9yLmluaXRpYWxpemVyID8gZGVzY3JpcHRvci5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwIH0pOyB9XFxuXFxuZnVuY3Rpb24gcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcXFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXFxcIik7IH0gfVxcblxcbmZ1bmN0aW9uIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcXFwidmFsdWVcXFwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIHBheW1lbnRfYWdlbnRfc3RvcmVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBwYXltZW50X2FnZW50X3N0b3JlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBwYXltZW50X2FnZW50X3N0b3JlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVjb3JhdG9ycywgZGVzY3JpcHRvciwgY29udGV4dCkgeyB2YXIgZGVzYyA9IHt9OyBPYmplY3Qua2V5cyhkZXNjcmlwdG9yKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgZGVzY1trZXldID0gZGVzY3JpcHRvcltrZXldOyB9KTsgZGVzYy5lbnVtZXJhYmxlID0gISFkZXNjLmVudW1lcmFibGU7IGRlc2MuY29uZmlndXJhYmxlID0gISFkZXNjLmNvbmZpZ3VyYWJsZTsgaWYgKCd2YWx1ZScgaW4gZGVzYyB8fCBkZXNjLmluaXRpYWxpemVyKSB7IGRlc2Mud3JpdGFibGUgPSB0cnVlOyB9IGRlc2MgPSBkZWNvcmF0b3JzLnNsaWNlKCkucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbiAoZGVzYywgZGVjb3JhdG9yKSB7IHJldHVybiBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYykgfHwgZGVzYzsgfSwgZGVzYyk7IGlmIChjb250ZXh0ICYmIGRlc2MuaW5pdGlhbGl6ZXIgIT09IHZvaWQgMCkgeyBkZXNjLnZhbHVlID0gZGVzYy5pbml0aWFsaXplciA/IGRlc2MuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMDsgZGVzYy5pbml0aWFsaXplciA9IHVuZGVmaW5lZDsgfSBpZiAoZGVzYy5pbml0aWFsaXplciA9PT0gdm9pZCAwKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjKTsgZGVzYyA9IG51bGw7IH0gcmV0dXJuIGRlc2M7IH1cXG5cXG5mdW5jdGlvbiBwYXltZW50X2FnZW50X3N0b3JlX2luaXRpYWxpemVyV2FybmluZ0hlbHBlcihkZXNjcmlwdG9yLCBjb250ZXh0KSB7IHRocm93IG5ldyBFcnJvcignRGVjb3JhdGluZyBjbGFzcyBwcm9wZXJ0eSBmYWlsZWQuIFBsZWFzZSBlbnN1cmUgdGhhdCAnICsgJ3Byb3Bvc2FsLWNsYXNzLXByb3BlcnRpZXMgaXMgZW5hYmxlZCBhbmQgcnVucyBhZnRlciB0aGUgZGVjb3JhdG9ycyB0cmFuc2Zvcm0uJyk7IH1cXG5cXG5cXG5cXG5cXG5cXG5cXG52YXIgUGF5bWVudEFnZW50U3RvcmUgPSAocGF5bWVudF9hZ2VudF9zdG9yZV9kZWMgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjMiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzQgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjNSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZWM2ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzcgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVjOCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZWM5ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzEwID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzExID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzEyID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzEzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzE0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzE1ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzE2ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzE3ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzE4ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzE5ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzIwID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzIxID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzIyID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzIzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3N0b3JlX2RlYzI0ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCAocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XFxuICBmdW5jdGlvbiBQYXltZW50QWdlbnRTdG9yZShfcmVmKSB7XFxuICAgIHZhciBXUyA9IF9yZWYuV1MsXFxuICAgICAgICByb290X3N0b3JlID0gX3JlZi5yb290X3N0b3JlO1xcblxcbiAgICBwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBheW1lbnRBZ2VudFN0b3JlKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJsaXN0XFxcIiwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yLCB0aGlzKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJhZ2VudHNcXFwiLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IyLCB0aGlzKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJjb250YWluZXJcXFwiLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IzLCB0aGlzKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJlcnJvclxcXCIsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvcjQsIHRoaXMpO1xcblxcbiAgICBwYXltZW50X2FnZW50X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImZpbHRlcmVkX2xpc3RcXFwiLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3I1LCB0aGlzKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJpc19uYW1lX3NlbGVjdGVkXFxcIiwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yNiwgdGhpcyk7XFxuXFxuICAgIHBheW1lbnRfYWdlbnRfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiaXNfd2l0aGRyYXdcXFwiLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3I3LCB0aGlzKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJpc190cnlfd2l0aGRyYXdfc3VjY2Vzc2Z1bFxcXCIsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvcjgsIHRoaXMpO1xcblxcbiAgICBwYXltZW50X2FnZW50X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImlzX3dpdGhkcmF3X3N1Y2Nlc3NmdWxcXFwiLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3I5LCB0aGlzKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJjb25maXJtXFxcIiwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yMTAsIHRoaXMpO1xcblxcbiAgICBwYXltZW50X2FnZW50X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcInJlY2VpcHRcXFwiLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IxMSwgdGhpcyk7XFxuXFxuICAgIHBheW1lbnRfYWdlbnRfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwic2VsZWN0ZWRfYmFua1xcXCIsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvcjEyLCB0aGlzKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJzdXBwb3J0ZWRfYmFua3NcXFwiLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IxMywgdGhpcyk7XFxuXFxuICAgIHBheW1lbnRfYWdlbnRfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwidmVyaWZpY2F0aW9uXFxcIiwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yMTQsIHRoaXMpO1xcblxcbiAgICBwYXltZW50X2FnZW50X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImFjdGl2ZV90YWJfaW5kZXhcXFwiLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IxNSwgdGhpcyk7XFxuXFxuICAgIHBheW1lbnRfYWdlbnRfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiYWxsX3BheW1lbnRfYWdlbnRfbGlzdFxcXCIsIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvcjE2LCB0aGlzKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJyZXNldFBheW1lbnRBZ2VudFxcXCIsIF9kZXNjcmlwdG9yMTcsIHRoaXMpO1xcblxcbiAgICB0aGlzLnJvb3Rfc3RvcmUgPSByb290X3N0b3JlO1xcbiAgICB0aGlzLldTID0gV1M7XFxuICB9XFxuXFxuICBwYXltZW50X2FnZW50X3N0b3JlX2NyZWF0ZUNsYXNzKFBheW1lbnRBZ2VudFN0b3JlLCBbe1xcbiAgICBrZXk6IFxcXCJzZXRBY3RpdmVUYWJJbmRleFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRBY3RpdmVUYWJJbmRleChpbmRleCkge1xcbiAgICAgIHRoaXMuYWN0aXZlX3RhYl9pbmRleCA9IGluZGV4O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldEFjdGl2ZVRhYlxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRBY3RpdmVUYWIoaW5kZXgpIHtcXG4gICAgICB0aGlzLnNldEFjdGl2ZVRhYkluZGV4KGluZGV4KTtcXG5cXG4gICAgICBpZiAoaW5kZXggPT09IDEpIHtcXG4gICAgICAgIHRoaXMudmVyaWZpY2F0aW9uLnNlbmRWZXJpZmljYXRpb25FbWFpbCgpO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJpc19wYXltZW50X2FnZW50X3Zpc2libGVcXFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gISEodGhpcy5maWx0ZXJlZF9saXN0Lmxlbmd0aCB8fCB0aGlzLmFnZW50cy5sZW5ndGgpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImdldFBheW1lbnRBZ2VudExpc3RcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfZ2V0UGF5bWVudEFnZW50TGlzdCA9IHBheW1lbnRfYWdlbnRfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XFxuICAgICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSRjbGllLCByZXNpZGVuY2UsIGN1cnJlbmN5O1xcblxcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuV1Mud2FpdCgnZ2V0X3NldHRpbmdzJyk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDI6XFxuICAgICAgICAgICAgICAgIF90aGlzJHJvb3Rfc3RvcmUkY2xpZSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQsIHJlc2lkZW5jZSA9IF90aGlzJHJvb3Rfc3RvcmUkY2xpZS5yZXNpZGVuY2UsIGN1cnJlbmN5ID0gX3RoaXMkcm9vdF9zdG9yZSRjbGllLmN1cnJlbmN5O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFxcXCJyZXR1cm5cXFwiLCB0aGlzLldTLmF1dGhvcml6ZWQucGF5bWVudEFnZW50TGlzdChyZXNpZGVuY2UsIGN1cnJlbmN5KSk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDQ6XFxuICAgICAgICAgICAgICBjYXNlIFxcXCJlbmRcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7XFxuICAgICAgfSkpO1xcblxcbiAgICAgIGZ1bmN0aW9uIGdldFBheW1lbnRBZ2VudExpc3QoKSB7XFxuICAgICAgICByZXR1cm4gX2dldFBheW1lbnRBZ2VudExpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGdldFBheW1lbnRBZ2VudExpc3Q7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJnZXRQYXltZW50QWdlbnREZXRhaWxzXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgX2dldFBheW1lbnRBZ2VudERldGFpbHMgPSBwYXltZW50X2FnZW50X3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHtcXG4gICAgICAgIHZhciBfeWllbGQkdGhpcyRXUyRhdXRob3IsIHBheW1lbnRhZ2VudF9kZXRhaWxzO1xcblxcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XUy5hdXRob3JpemVkLnBheW1lbnRBZ2VudERldGFpbHMoKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjpcXG4gICAgICAgICAgICAgICAgX3lpZWxkJHRoaXMkV1MkYXV0aG9yID0gX2NvbnRleHQyLnNlbnQ7XFxuICAgICAgICAgICAgICAgIHBheW1lbnRhZ2VudF9kZXRhaWxzID0gX3lpZWxkJHRoaXMkV1MkYXV0aG9yLnBheW1lbnRhZ2VudF9kZXRhaWxzO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcXFwicmV0dXJuXFxcIiwgcGF5bWVudGFnZW50X2RldGFpbHMpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA1OlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7XFxuICAgICAgfSkpO1xcblxcbiAgICAgIGZ1bmN0aW9uIGdldFBheW1lbnRBZ2VudERldGFpbHMoKSB7XFxuICAgICAgICByZXR1cm4gX2dldFBheW1lbnRBZ2VudERldGFpbHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGdldFBheW1lbnRBZ2VudERldGFpbHM7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJhZGRTdXBwb3J0ZWRCYW5rXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFN1cHBvcnRlZEJhbmsoYmFuaykge1xcbiAgICAgIHZhciBzdXBwb3J0ZWRfYmFua19leGlzdHMgPSB0aGlzLnN1cHBvcnRlZF9iYW5rcy5maW5kKGZ1bmN0aW9uIChzdXBwb3J0ZWRfYmFuaykge1xcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRlZF9iYW5rLnZhbHVlID09PSBiYW5rLnRvTG93ZXJDYXNlKCk7XFxuICAgICAgfSk7XFxuXFxuICAgICAgaWYgKCFzdXBwb3J0ZWRfYmFua19leGlzdHMpIHtcXG4gICAgICAgIHRoaXMuc3VwcG9ydGVkX2JhbmtzLnB1c2goe1xcbiAgICAgICAgICB0ZXh0OiBiYW5rLFxcbiAgICAgICAgICB2YWx1ZTogYmFuay50b0xvd2VyQ2FzZSgpXFxuICAgICAgICB9KTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiY2xlYXJTdXBwZXJ0ZWRCYW5rc1xcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhclN1cHBlcnRlZEJhbmtzKCkge1xcbiAgICAgIHRoaXMuc3VwcG9ydGVkX2JhbmtzID0gW107XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic29ydFN1cHBvcnRlZEJhbmtzXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNvcnRTdXBwb3J0ZWRCYW5rcygpIHtcXG4gICAgICAvLyBzb3J0IHN1cHBvcnRlZCBiYW5rcyBhbHBoYWJldGljYWxseSBieSB2YWx1ZSwgdGhlIG9wdGlvbiAnQWxsIHBheW1lbnQgYWdlbnRzJyB3aXRoIHZhbHVlIDAgc2hvdWxkIGJlIG9uIHRvcFxcbiAgICAgIHRoaXMuc3VwcG9ydGVkX2JhbmtzLnJlcGxhY2UodGhpcy5zdXBwb3J0ZWRfYmFua3Muc2xpY2UoKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XFxuICAgICAgICBpZiAoYS52YWx1ZSA8IGIudmFsdWUpIHtcXG4gICAgICAgICAgcmV0dXJuIC0xO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgaWYgKGEudmFsdWUgPiBiLnZhbHVlKSB7XFxuICAgICAgICAgIHJldHVybiAxO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIDA7XFxuICAgICAgfSkpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldExpc3RcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TGlzdChwYV9saXN0KSB7XFxuICAgICAgdGhpcy5saXN0LnB1c2gocGFfbGlzdCk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiY2xlYXJMaXN0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyTGlzdCgpIHtcXG4gICAgICB0aGlzLmxpc3QgPSBbXTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRQYXltZW50QWdlbnRMaXN0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgX3NldFBheW1lbnRBZ2VudExpc3QgPSBwYXltZW50X2FnZW50X3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhwYV9saXN0KSB7XFxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xcblxcbiAgICAgICAgdmFyIHBheW1lbnRfYWdlbnRfbGlzdDtcXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My50MCA9IHBhX2xpc3Q7XFxuXFxuICAgICAgICAgICAgICAgIGlmIChfY29udGV4dDMudDApIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXltZW50QWdlbnRMaXN0KCk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDQ6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0My5zZW50O1xcblxcbiAgICAgICAgICAgICAgY2FzZSA1OlxcbiAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50X2xpc3QgPSBfY29udGV4dDMudDA7XFxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJMaXN0KCk7XFxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJTdXBwZXJ0ZWRCYW5rcygpOyAvLyBUT0RPOiBPbmNlIHRlbGVwaG9uZSwgdXJsIGFuZCBzdXBwb3J0ZWRfYmFua3MgcmVtb3ZlZCBmcm9tIHBheW1lbnRhZ2VudF9saXN0Lmxpc3Qgd2UgY2FuIHJlbW92ZSB0aGVtIGFuZCBqdXN0IHVzZSB0aGUgcGx1cmFsIG9uZXNcXG5cXG4gICAgICAgICAgICAgICAgcGF5bWVudF9hZ2VudF9saXN0LnBheW1lbnRhZ2VudF9saXN0Lmxpc3QuZm9yRWFjaChmdW5jdGlvbiAocGF5bWVudF9hZ2VudCkge1xcbiAgICAgICAgICAgICAgICAgIF90aGlzLnNldExpc3Qoe1xcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IHBheW1lbnRfYWdlbnQuZW1haWwsXFxuICAgICAgICAgICAgICAgICAgICBwaG9uZXM6IChwYXltZW50X2FnZW50ID09PSBudWxsIHx8IHBheW1lbnRfYWdlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBheW1lbnRfYWdlbnQucGhvbmVfbnVtYmVycykgfHwgKHBheW1lbnRfYWdlbnQgPT09IG51bGwgfHwgcGF5bWVudF9hZ2VudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGF5bWVudF9hZ2VudC50ZWxlcGhvbmUpLFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcGF5bWVudF9hZ2VudC5uYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkX2JhbmtzOiAocGF5bWVudF9hZ2VudCA9PT0gbnVsbCB8fCBwYXltZW50X2FnZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXltZW50X2FnZW50LnN1cHBvcnRlZF9wYXltZW50X21ldGhvZHMpIHx8IChwYXltZW50X2FnZW50ID09PSBudWxsIHx8IHBheW1lbnRfYWdlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBheW1lbnRfYWdlbnQuc3VwcG9ydGVkX2JhbmtzKSxcXG4gICAgICAgICAgICAgICAgICAgIHVybHM6IChwYXltZW50X2FnZW50ID09PSBudWxsIHx8IHBheW1lbnRfYWdlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBheW1lbnRfYWdlbnQudXJscykgfHwgKHBheW1lbnRfYWdlbnQgPT09IG51bGwgfHwgcGF5bWVudF9hZ2VudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGF5bWVudF9hZ2VudC51cmwpXFxuICAgICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICAgICAgaWYgKHBheW1lbnRfYWdlbnQuc3VwcG9ydGVkX2JhbmtzKSB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VwcG9ydGVkX2JhbmtzX2FycmF5ID0gcGF5bWVudF9hZ2VudCAhPT0gbnVsbCAmJiBwYXltZW50X2FnZW50ICE9PSB2b2lkIDAgJiYgcGF5bWVudF9hZ2VudC5zdXBwb3J0ZWRfcGF5bWVudF9tZXRob2RzID8gcGF5bWVudF9hZ2VudC5zdXBwb3J0ZWRfcGF5bWVudF9tZXRob2RzLm1hcChmdW5jdGlvbiAoYmFuaykge1xcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmFuay5wYXltZW50X21ldGhvZDtcXG4gICAgICAgICAgICAgICAgICAgIH0pIDogcGF5bWVudF9hZ2VudC5zdXBwb3J0ZWRfYmFua3Muc3BsaXQoJywnKTtcXG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZF9iYW5rc19hcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChiYW5rKSB7XFxuICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmFkZFN1cHBvcnRlZEJhbmsoYmFuayk7XFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRTdXBwb3J0ZWRCYW5rcygpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAxMDpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBzZXRQYXltZW50QWdlbnRMaXN0KF94KSB7XFxuICAgICAgICByZXR1cm4gX3NldFBheW1lbnRBZ2VudExpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIHNldFBheW1lbnRBZ2VudExpc3Q7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJmaWx0ZXJQYXltZW50QWdlbnRMaXN0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlclBheW1lbnRBZ2VudExpc3QoYmFuaykge1xcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICAgIHZhciBjb21tb24gPSB0aGlzLnJvb3Rfc3RvcmUuY29tbW9uO1xcblxcbiAgICAgIGlmIChiYW5rKSB7XFxuICAgICAgICB0aGlzLmZpbHRlcmVkX2xpc3QgPSBbXTtcXG4gICAgICAgIHRoaXMubGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChwYXltZW50X2FnZW50KSB7XFxuICAgICAgICAgIGlmIChwYXltZW50X2FnZW50LnN1cHBvcnRlZF9iYW5rcyAmJiBwYXltZW50X2FnZW50LnN1cHBvcnRlZF9iYW5rcy50b0xvd2VyQ2FzZSgpLnNwbGl0KCcsJykuaW5kZXhPZihiYW5rKSAhPT0gLTEpIHtcXG4gICAgICAgICAgICBfdGhpczIuZmlsdGVyZWRfbGlzdC5wdXNoKHBheW1lbnRfYWdlbnQpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgdGhpcy5maWx0ZXJlZF9saXN0ID0gdGhpcy5saXN0O1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAoIXRoaXMuaXNfcGF5bWVudF9hZ2VudF92aXNpYmxlICYmIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5lbmRzV2l0aChzaGFyZWRfLnJvdXRlcy5jYXNoaWVyX3BhKSkge1xcbiAgICAgICAgY29tbW9uLnJvdXRlVG8oc2hhcmVkXy5yb3V0ZXMuY2FzaGllcl9kZXBvc2l0KTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25DaGFuZ2VQYXltZW50TWV0aG9kXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlUGF5bWVudE1ldGhvZChfcmVmMikge1xcbiAgICAgIHZhciB0YXJnZXQgPSBfcmVmMi50YXJnZXQ7XFxuICAgICAgdmFyIHZhbHVlID0gdGFyZ2V0LnZhbHVlID09PSAnMCcgPyBwYXJzZUludCh0YXJnZXQudmFsdWUpIDogdGFyZ2V0LnZhbHVlO1xcbiAgICAgIHRoaXMuc2VsZWN0ZWRfYmFuayA9IHZhbHVlO1xcbiAgICAgIHRoaXMuZmlsdGVyUGF5bWVudEFnZW50TGlzdCh2YWx1ZSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0SXNXaXRoZHJhd1xcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc1dpdGhkcmF3KCkge1xcbiAgICAgIHZhciBpc193aXRoZHJhdyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogIXRoaXMuaXNfd2l0aGRyYXc7XFxuICAgICAgdGhpcy5pc193aXRoZHJhdyA9IGlzX3dpdGhkcmF3O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldElzVHJ5V2l0aGRyYXdTdWNjZXNzZnVsXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldElzVHJ5V2l0aGRyYXdTdWNjZXNzZnVsKGlzX3RyeV93aXRoZHJhd19zdWNjZXNzZnVsKSB7XFxuICAgICAgdGhpcy5lcnJvci5zZXRFcnJvck1lc3NhZ2UoJycpO1xcbiAgICAgIHRoaXMuaXNfdHJ5X3dpdGhkcmF3X3N1Y2Nlc3NmdWwgPSBpc190cnlfd2l0aGRyYXdfc3VjY2Vzc2Z1bDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRJc1dpdGhkcmF3U3VjY2Vzc2Z1bFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc1dpdGhkcmF3U3VjY2Vzc2Z1bChpc193aXRoZHJhd19zdWNjZXNzZnVsKSB7XFxuICAgICAgdGhpcy5pc193aXRoZHJhd19zdWNjZXNzZnVsID0gaXNfd2l0aGRyYXdfc3VjY2Vzc2Z1bDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRDb25maXJtYXRpb25cXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29uZmlybWF0aW9uKF9yZWYzKSB7XFxuICAgICAgdmFyIGFtb3VudCA9IF9yZWYzLmFtb3VudCxcXG4gICAgICAgICAgY3VycmVuY3kgPSBfcmVmMy5jdXJyZW5jeSxcXG4gICAgICAgICAgbG9naW5pZCA9IF9yZWYzLmxvZ2luaWQsXFxuICAgICAgICAgIHBheW1lbnRfYWdlbnRfbmFtZSA9IF9yZWYzLnBheW1lbnRfYWdlbnRfbmFtZTtcXG4gICAgICB0aGlzLmNvbmZpcm0gPSB7XFxuICAgICAgICBhbW91bnQ6IGFtb3VudCxcXG4gICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeSxcXG4gICAgICAgIGxvZ2luaWQ6IGxvZ2luaWQsXFxuICAgICAgICBwYXltZW50X2FnZW50X25hbWU6IHBheW1lbnRfYWdlbnRfbmFtZVxcbiAgICAgIH07XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0UmVjZWlwdFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSZWNlaXB0KF9yZWY0KSB7XFxuICAgICAgdmFyIGFtb3VudF90cmFuc2ZlcnJlZCA9IF9yZWY0LmFtb3VudF90cmFuc2ZlcnJlZCxcXG4gICAgICAgICAgcGF5bWVudF9hZ2VudF9lbWFpbCA9IF9yZWY0LnBheW1lbnRfYWdlbnRfZW1haWwsXFxuICAgICAgICAgIHBheW1lbnRfYWdlbnRfaWQgPSBfcmVmNC5wYXltZW50X2FnZW50X2lkLFxcbiAgICAgICAgICBwYXltZW50X2FnZW50X25hbWUgPSBfcmVmNC5wYXltZW50X2FnZW50X25hbWUsXFxuICAgICAgICAgIHBheW1lbnRfYWdlbnRfcGhvbmUgPSBfcmVmNC5wYXltZW50X2FnZW50X3Bob25lLFxcbiAgICAgICAgICBwYXltZW50X2FnZW50X3VybCA9IF9yZWY0LnBheW1lbnRfYWdlbnRfdXJsO1xcbiAgICAgIHRoaXMucmVjZWlwdCA9IHtcXG4gICAgICAgIGFtb3VudF90cmFuc2ZlcnJlZDogYW1vdW50X3RyYW5zZmVycmVkLFxcbiAgICAgICAgcGF5bWVudF9hZ2VudF9lbWFpbDogcGF5bWVudF9hZ2VudF9lbWFpbCxcXG4gICAgICAgIHBheW1lbnRfYWdlbnRfaWQ6IHBheW1lbnRfYWdlbnRfaWQsXFxuICAgICAgICBwYXltZW50X2FnZW50X25hbWU6IHBheW1lbnRfYWdlbnRfbmFtZSxcXG4gICAgICAgIHBheW1lbnRfYWdlbnRfcGhvbmU6IHBheW1lbnRfYWdlbnRfcGhvbmUsXFxuICAgICAgICBwYXltZW50X2FnZW50X3VybDogcGF5bWVudF9hZ2VudF91cmxcXG4gICAgICB9O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImFkZFBheW1lbnRBZ2VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRQYXltZW50QWdlbnQocGF5bWVudF9hZ2VudCkge1xcbiAgICAgIHRoaXMuYWdlbnRzLnB1c2goe1xcbiAgICAgICAgdGV4dDogcGF5bWVudF9hZ2VudC5uYW1lLFxcbiAgICAgICAgdmFsdWU6IHBheW1lbnRfYWdlbnQucGF5bWVudGFnZW50X2xvZ2luaWQsXFxuICAgICAgICBtYXhfd2l0aGRyYXdhbDogcGF5bWVudF9hZ2VudC5tYXhfd2l0aGRyYXdhbCxcXG4gICAgICAgIG1pbl93aXRoZHJhd2FsOiBwYXltZW50X2FnZW50Lm1pbl93aXRoZHJhd2FsLFxcbiAgICAgICAgZW1haWw6IHBheW1lbnRfYWdlbnQuZW1haWwsXFxuICAgICAgICBwaG9uZTogcGF5bWVudF9hZ2VudC50ZWxlcGhvbmUsXFxuICAgICAgICB1cmw6IHBheW1lbnRfYWdlbnQudXJsXFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwib25Nb3VudFBheW1lbnRBZ2VudFdpdGhkcmF3XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgX29uTW91bnRQYXltZW50QWdlbnRXaXRoZHJhdyA9IHBheW1lbnRfYWdlbnRfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkge1xcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XFxuXFxuICAgICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSwgY29tbW9uLCBtb2R1bGVzLCBfbW9kdWxlcyRjYXNoaWVyJGdlbmUsIHNldExvYWRpbmcsIG9uTW91bnRDb21tb24sIHBheW1lbnRfYWdlbnRfbGlzdDtcXG5cXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIF90aGlzJHJvb3Rfc3RvcmUgPSB0aGlzLnJvb3Rfc3RvcmUsIGNvbW1vbiA9IF90aGlzJHJvb3Rfc3RvcmUuY29tbW9uLCBtb2R1bGVzID0gX3RoaXMkcm9vdF9zdG9yZS5tb2R1bGVzO1xcbiAgICAgICAgICAgICAgICBfbW9kdWxlcyRjYXNoaWVyJGdlbmUgPSBtb2R1bGVzLmNhc2hpZXIuZ2VuZXJhbF9zdG9yZSwgc2V0TG9hZGluZyA9IF9tb2R1bGVzJGNhc2hpZXIkZ2VuZS5zZXRMb2FkaW5nLCBvbk1vdW50Q29tbW9uID0gX21vZHVsZXMkY2FzaGllciRnZW5lLm9uTW91bnRDb21tb247XFxuICAgICAgICAgICAgICAgIHNldExvYWRpbmcodHJ1ZSk7XFxuICAgICAgICAgICAgICAgIHRoaXMub25SZW1vdW50ID0gdGhpcy5vbk1vdW50UGF5bWVudEFnZW50V2l0aGRyYXc7XFxuICAgICAgICAgICAgICAgIG9uTW91bnRDb21tb24oKTtcXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJc1dpdGhkcmF3KHRydWUpO1xcbiAgICAgICAgICAgICAgICB0aGlzLnNldElzV2l0aGRyYXdTdWNjZXNzZnVsKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSZWNlaXB0KHt9KTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWdlbnRzLmxlbmd0aCkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTQ7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGF5bWVudEFnZW50TGlzdCgpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAxMTpcXG4gICAgICAgICAgICAgICAgcGF5bWVudF9hZ2VudF9saXN0ID0gX2NvbnRleHQ0LnNlbnQ7XFxuICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfbGlzdC5wYXltZW50YWdlbnRfbGlzdC5saXN0LmZvckVhY2goZnVuY3Rpb24gKHBheW1lbnRfYWdlbnQpIHtcXG4gICAgICAgICAgICAgICAgICBfdGhpczMuYWRkUGF5bWVudEFnZW50KHBheW1lbnRfYWdlbnQpO1xcbiAgICAgICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCFwYXltZW50X2FnZW50X2xpc3QucGF5bWVudGFnZW50X2xpc3QubGlzdC5sZW5ndGggJiYgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmVuZHNXaXRoKHNoYXJlZF8ucm91dGVzLmNhc2hpZXJfcGEpKSB7XFxuICAgICAgICAgICAgICAgICAgY29tbW9uLnJvdXRlVG8oc2hhcmVkXy5yb3V0ZXMuY2FzaGllcl9kZXBvc2l0KTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgY2FzZSAxNDpcXG4gICAgICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDE1OlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBfY2FsbGVlNCwgdGhpcyk7XFxuICAgICAgfSkpO1xcblxcbiAgICAgIGZ1bmN0aW9uIG9uTW91bnRQYXltZW50QWdlbnRXaXRoZHJhdygpIHtcXG4gICAgICAgIHJldHVybiBfb25Nb3VudFBheW1lbnRBZ2VudFdpdGhkcmF3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBvbk1vdW50UGF5bWVudEFnZW50V2l0aGRyYXc7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJyZXF1ZXN0VHJ5UGF5bWVudEFnZW50V2l0aGRyYXdcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfcmVxdWVzdFRyeVBheW1lbnRBZ2VudFdpdGhkcmF3ID0gcGF5bWVudF9hZ2VudF9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoX3JlZjUpIHtcXG4gICAgICAgIHZhciBsb2dpbmlkLCBjdXJyZW5jeSwgYW1vdW50LCB2ZXJpZmljYXRpb25fY29kZSwgcGF5bWVudF9hZ2VudF93aXRoZHJhdywgc2VsZWN0ZWRfYWdlbnQ7XFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBsb2dpbmlkID0gX3JlZjUubG9naW5pZCwgY3VycmVuY3kgPSBfcmVmNS5jdXJyZW5jeSwgYW1vdW50ID0gX3JlZjUuYW1vdW50LCB2ZXJpZmljYXRpb25fY29kZSA9IF9yZWY1LnZlcmlmaWNhdGlvbl9jb2RlO1xcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yLnNldEVycm9yTWVzc2FnZSgnJyk7XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNDtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuV1MuYXV0aG9yaXplZC5wYXltZW50QWdlbnRXaXRoZHJhdyh7XFxuICAgICAgICAgICAgICAgICAgbG9naW5pZDogbG9naW5pZCxcXG4gICAgICAgICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3ksXFxuICAgICAgICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsXFxuICAgICAgICAgICAgICAgICAgdmVyaWZpY2F0aW9uX2NvZGU6IHZlcmlmaWNhdGlvbl9jb2RlLFxcbiAgICAgICAgICAgICAgICAgIGRyeV9ydW46IDFcXG4gICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDQ6XFxuICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfd2l0aGRyYXcgPSBfY29udGV4dDUuc2VudDtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCtwYXltZW50X2FnZW50X3dpdGhkcmF3LnBheW1lbnRhZ2VudF93aXRoZHJhdyA9PT0gMikge1xcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkX2FnZW50ID0gdGhpcy5hZ2VudHMuZmluZChmdW5jdGlvbiAoYWdlbnQpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhZ2VudC52YWx1ZSA9PT0gbG9naW5pZDtcXG4gICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldENvbmZpcm1hdGlvbihwYXltZW50X2FnZW50X3N0b3JlX29iamVjdFNwcmVhZCh7XFxuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGFtb3VudCxcXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeSxcXG4gICAgICAgICAgICAgICAgICAgIGxvZ2luaWQ6IGxvZ2luaWRcXG4gICAgICAgICAgICAgICAgICB9LCBzZWxlY3RlZF9hZ2VudCAmJiB7XFxuICAgICAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50X25hbWU6IHNlbGVjdGVkX2FnZW50LnRleHRcXG4gICAgICAgICAgICAgICAgICB9KSk7XFxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJc1RyeVdpdGhkcmF3U3VjY2Vzc2Z1bCh0cnVlKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB0aGlzLmVycm9yLnNldEVycm9yTWVzc2FnZShwYXltZW50X2FnZW50X3dpdGhkcmF3LmVycm9yLCB0aGlzLnJlc2V0UGF5bWVudEFnZW50KTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgY2FzZSA2OlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBfY2FsbGVlNSwgdGhpcyk7XFxuICAgICAgfSkpO1xcblxcbiAgICAgIGZ1bmN0aW9uIHJlcXVlc3RUcnlQYXltZW50QWdlbnRXaXRoZHJhdyhfeDIpIHtcXG4gICAgICAgIHJldHVybiBfcmVxdWVzdFRyeVBheW1lbnRBZ2VudFdpdGhkcmF3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiByZXF1ZXN0VHJ5UGF5bWVudEFnZW50V2l0aGRyYXc7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJvbk1vdW50UGF5bWVudEFnZW50TGlzdFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIF9vbk1vdW50UGF5bWVudEFnZW50TGlzdCA9IHBheW1lbnRfYWdlbnRfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KCkge1xcbiAgICAgICAgdmFyIF90aGlzJHJvb3Rfc3RvcmUkbW9kdSwgc2V0TG9hZGluZywgb25Nb3VudENvbW1vbjtcXG5cXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIF90aGlzJHJvb3Rfc3RvcmUkbW9kdSA9IHRoaXMucm9vdF9zdG9yZS5tb2R1bGVzLmNhc2hpZXIuZ2VuZXJhbF9zdG9yZSwgc2V0TG9hZGluZyA9IF90aGlzJHJvb3Rfc3RvcmUkbW9kdS5zZXRMb2FkaW5nLCBvbk1vdW50Q29tbW9uID0gX3RoaXMkcm9vdF9zdG9yZSRtb2R1Lm9uTW91bnRDb21tb247XFxuICAgICAgICAgICAgICAgIHNldExvYWRpbmcodHJ1ZSk7XFxuICAgICAgICAgICAgICAgIHRoaXMub25SZW1vdW50ID0gdGhpcy5vbk1vdW50UGF5bWVudEFnZW50TGlzdDtcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA1O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gb25Nb3VudENvbW1vbigpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA1OlxcbiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDc7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBheW1lbnRBZ2VudExpc3QoKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNzpcXG4gICAgICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDg6XFxuICAgICAgICAgICAgICBjYXNlIFxcXCJlbmRcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWU2LCB0aGlzKTtcXG4gICAgICB9KSk7XFxuXFxuICAgICAgZnVuY3Rpb24gb25Nb3VudFBheW1lbnRBZ2VudExpc3QoKSB7XFxuICAgICAgICByZXR1cm4gX29uTW91bnRQYXltZW50QWdlbnRMaXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBvbk1vdW50UGF5bWVudEFnZW50TGlzdDtcXG4gICAgfSgpXFxuICB9LCB7XFxuICAgIGtleTogXFxcImdldEFsbFBheW1lbnRBZ2VudExpc3RcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfZ2V0QWxsUGF5bWVudEFnZW50TGlzdCA9IHBheW1lbnRfYWdlbnRfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkge1xcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAyO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XUy53YWl0KCdnZXRfc2V0dGluZ3MnKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoXFxcInJldHVyblxcXCIsIHRoaXMuV1MuYWxsUGF5bWVudEFnZW50TGlzdCh0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnJlc2lkZW5jZSkpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAzOlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBfY2FsbGVlNywgdGhpcyk7XFxuICAgICAgfSkpO1xcblxcbiAgICAgIGZ1bmN0aW9uIGdldEFsbFBheW1lbnRBZ2VudExpc3QoKSB7XFxuICAgICAgICByZXR1cm4gX2dldEFsbFBheW1lbnRBZ2VudExpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGdldEFsbFBheW1lbnRBZ2VudExpc3Q7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRBbGxQYXltZW50QWdlbnRMaXN0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFsbFBheW1lbnRBZ2VudExpc3QobGlzdCkge1xcbiAgICAgIHRoaXMuYWxsX3BheW1lbnRfYWdlbnRfbGlzdCA9IGxpc3Q7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiaXNfcGF5bWVudF9hZ2VudF92aXNpYmxlX2luX29uYm9hcmRpbmdcXFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICB2YXIgX3RoaXMkYWxsX3BheW1lbnRfYWdlLCBfdGhpcyRhbGxfcGF5bWVudF9hZ2UyLCBfdGhpcyRhbGxfcGF5bWVudF9hZ2UzO1xcblxcbiAgICAgIHJldHVybiAhISgoX3RoaXMkYWxsX3BheW1lbnRfYWdlID0gdGhpcy5hbGxfcGF5bWVudF9hZ2VudF9saXN0KSAhPT0gbnVsbCAmJiBfdGhpcyRhbGxfcGF5bWVudF9hZ2UgIT09IHZvaWQgMCAmJiAoX3RoaXMkYWxsX3BheW1lbnRfYWdlMiA9IF90aGlzJGFsbF9wYXltZW50X2FnZS5wYXltZW50YWdlbnRfbGlzdCkgIT09IG51bGwgJiYgX3RoaXMkYWxsX3BheW1lbnRfYWdlMiAhPT0gdm9pZCAwICYmIChfdGhpcyRhbGxfcGF5bWVudF9hZ2UzID0gX3RoaXMkYWxsX3BheW1lbnRfYWdlMi5saXN0KSAhPT0gbnVsbCAmJiBfdGhpcyRhbGxfcGF5bWVudF9hZ2UzICE9PSB2b2lkIDAgJiYgX3RoaXMkYWxsX3BheW1lbnRfYWdlMy5sZW5ndGgpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInJlcXVlc3RQYXltZW50QWdlbnRXaXRoZHJhd1xcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIF9yZXF1ZXN0UGF5bWVudEFnZW50V2l0aGRyYXcgPSBwYXltZW50X2FnZW50X3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOChfcmVmNikge1xcbiAgICAgICAgdmFyIGxvZ2luaWQsIGN1cnJlbmN5LCBhbW91bnQsIHZlcmlmaWNhdGlvbl9jb2RlLCBwYXltZW50X2FnZW50X3dpdGhkcmF3LCBzZWxlY3RlZF9hZ2VudDtcXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDgucHJldiA9IF9jb250ZXh0OC5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIGxvZ2luaWQgPSBfcmVmNi5sb2dpbmlkLCBjdXJyZW5jeSA9IF9yZWY2LmN1cnJlbmN5LCBhbW91bnQgPSBfcmVmNi5hbW91bnQsIHZlcmlmaWNhdGlvbl9jb2RlID0gX3JlZjYudmVyaWZpY2F0aW9uX2NvZGU7XFxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3Iuc2V0RXJyb3JNZXNzYWdlKCcnKTtcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSA0O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XUy5hdXRob3JpemVkLnBheW1lbnRBZ2VudFdpdGhkcmF3KHtcXG4gICAgICAgICAgICAgICAgICBsb2dpbmlkOiBsb2dpbmlkLFxcbiAgICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeSxcXG4gICAgICAgICAgICAgICAgICBhbW91bnQ6IGFtb3VudCxcXG4gICAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25fY29kZTogdmVyaWZpY2F0aW9uX2NvZGVcXG4gICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDQ6XFxuICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfd2l0aGRyYXcgPSBfY29udGV4dDguc2VudDtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKCtwYXltZW50X2FnZW50X3dpdGhkcmF3LnBheW1lbnRhZ2VudF93aXRoZHJhdyA9PT0gMSkge1xcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkX2FnZW50ID0gdGhpcy5hZ2VudHMuZmluZChmdW5jdGlvbiAoYWdlbnQpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhZ2VudC52YWx1ZSA9PT0gbG9naW5pZDtcXG4gICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFJlY2VpcHQocGF5bWVudF9hZ2VudF9zdG9yZV9vYmplY3RTcHJlYWQocGF5bWVudF9hZ2VudF9zdG9yZV9vYmplY3RTcHJlYWQoe1xcbiAgICAgICAgICAgICAgICAgICAgYW1vdW50X3RyYW5zZmVycmVkOiAoMCxzaGFyZWRfLmZvcm1hdE1vbmV5KShjdXJyZW5jeSwgYW1vdW50LCB0cnVlKVxcbiAgICAgICAgICAgICAgICAgIH0sIHNlbGVjdGVkX2FnZW50ICYmIHtcXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfZW1haWw6IHNlbGVjdGVkX2FnZW50LmVtYWlsLFxcbiAgICAgICAgICAgICAgICAgICAgcGF5bWVudF9hZ2VudF9pZDogc2VsZWN0ZWRfYWdlbnQudmFsdWUsXFxuICAgICAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50X25hbWU6IHNlbGVjdGVkX2FnZW50LnRleHQsXFxuICAgICAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50X3Bob25lOiBzZWxlY3RlZF9hZ2VudC5waG9uZSxcXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfdXJsOiBzZWxlY3RlZF9hZ2VudC51cmxcXG4gICAgICAgICAgICAgICAgICB9KSwgIXNlbGVjdGVkX2FnZW50ICYmIHtcXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfaWQ6IGxvZ2luaWRcXG4gICAgICAgICAgICAgICAgICB9KSk7XFxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJc1dpdGhkcmF3U3VjY2Vzc2Z1bCh0cnVlKTtcXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldElzVHJ5V2l0aGRyYXdTdWNjZXNzZnVsKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldENvbmZpcm1hdGlvbih7fSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvci5zZXRFcnJvck1lc3NhZ2UocGF5bWVudF9hZ2VudF93aXRoZHJhdy5lcnJvciwgdGhpcy5yZXNldFBheW1lbnRBZ2VudCk7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGNhc2UgNjpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTgsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiByZXF1ZXN0UGF5bWVudEFnZW50V2l0aGRyYXcoX3gzKSB7XFxuICAgICAgICByZXR1cm4gX3JlcXVlc3RQYXltZW50QWdlbnRXaXRoZHJhdy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gcmVxdWVzdFBheW1lbnRBZ2VudFdpdGhkcmF3O1xcbiAgICB9KClcXG4gIH1dKTtcXG5cXG4gIHJldHVybiBQYXltZW50QWdlbnRTdG9yZTtcXG59KCksIChwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IgPSBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImxpc3RcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIFtdO1xcbiAgfVxcbn0pLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IyID0gcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJhZ2VudHNcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIFtdO1xcbiAgfVxcbn0pLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IzID0gcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJjb250YWluZXJcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIGNvbnN0YW50cy5jb250YWluZXJzLnBheW1lbnRfYWdlbnQ7XFxuICB9XFxufSksIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvcjQgPSBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImVycm9yXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBuZXcgRXJyb3JTdG9yZSgpO1xcbiAgfVxcbn0pLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3I1ID0gcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJmaWx0ZXJlZF9saXN0XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBbXTtcXG4gIH1cXG59KSwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yNiA9IHBheW1lbnRfYWdlbnRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfbmFtZV9zZWxlY3RlZFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gdHJ1ZTtcXG4gIH1cXG59KSwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yNyA9IHBheW1lbnRfYWdlbnRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfd2l0aGRyYXdcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbn0pLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3I4ID0gcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc190cnlfd2l0aGRyYXdfc3VjY2Vzc2Z1bFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvcjkgPSBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX3dpdGhkcmF3X3N1Y2Nlc3NmdWxcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbn0pLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IxMCA9IHBheW1lbnRfYWdlbnRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY29uZmlybVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4ge307XFxuICB9XFxufSksIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvcjExID0gcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZWNlaXB0XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiB7fTtcXG4gIH1cXG59KSwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yMTIgPSBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNlbGVjdGVkX2JhbmtcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIDA7XFxuICB9XFxufSksIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvcjEzID0gcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzdXBwb3J0ZWRfYmFua3NcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIFtdO1xcbiAgfVxcbn0pLCBwYXltZW50X2FnZW50X3N0b3JlX2Rlc2NyaXB0b3IxNCA9IHBheW1lbnRfYWdlbnRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwidmVyaWZpY2F0aW9uXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBuZXcgVmVyaWZpY2F0aW9uU3RvcmUoe1xcbiAgICAgIHJvb3Rfc3RvcmU6IHRoaXMucm9vdF9zdG9yZSxcXG4gICAgICBXUzogdGhpcy5XU1xcbiAgICB9KTtcXG4gIH1cXG59KSwgcGF5bWVudF9hZ2VudF9zdG9yZV9kZXNjcmlwdG9yMTUgPSBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImFjdGl2ZV90YWJfaW5kZXhcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIDA7XFxuICB9XFxufSksIHBheW1lbnRfYWdlbnRfc3RvcmVfZGVzY3JpcHRvcjE2ID0gcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJhbGxfcGF5bWVudF9hZ2VudF9saXN0XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBbXTtcXG4gIH1cXG59KSwgcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRBY3RpdmVUYWJJbmRleFxcXCIsIFtwYXltZW50X2FnZW50X3N0b3JlX2RlY10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRBY3RpdmVUYWJJbmRleFxcXCIpLCBwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHBheW1lbnRfYWdlbnRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0QWN0aXZlVGFiXFxcIiwgW3BheW1lbnRfYWdlbnRfc3RvcmVfZGVjMl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRBY3RpdmVUYWJcXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX3BheW1lbnRfYWdlbnRfdmlzaWJsZVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5jb21wdXRlZF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19wYXltZW50X2FnZW50X3Zpc2libGVcXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImdldFBheW1lbnRBZ2VudExpc3RcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMzXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImdldFBheW1lbnRBZ2VudExpc3RcXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImdldFBheW1lbnRBZ2VudERldGFpbHNcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWM0XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImdldFBheW1lbnRBZ2VudERldGFpbHNcXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImFkZFN1cHBvcnRlZEJhbmtcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWM1XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImFkZFN1cHBvcnRlZEJhbmtcXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNsZWFyU3VwcGVydGVkQmFua3NcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWM2XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNsZWFyU3VwcGVydGVkQmFua3NcXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNvcnRTdXBwb3J0ZWRCYW5rc1xcXCIsIFtwYXltZW50X2FnZW50X3N0b3JlX2RlYzddLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic29ydFN1cHBvcnRlZEJhbmtzXFxcIiksIHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRMaXN0XFxcIiwgW3BheW1lbnRfYWdlbnRfc3RvcmVfZGVjOF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRMaXN0XFxcIiksIHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJjbGVhckxpc3RcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWM5XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNsZWFyTGlzdFxcXCIpLCBwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHBheW1lbnRfYWdlbnRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0UGF5bWVudEFnZW50TGlzdFxcXCIsIFtwYXltZW50X2FnZW50X3N0b3JlX2RlYzEwXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFBheW1lbnRBZ2VudExpc3RcXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImZpbHRlclBheW1lbnRBZ2VudExpc3RcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMxMV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJmaWx0ZXJQYXltZW50QWdlbnRMaXN0XFxcIiksIHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbkNoYW5nZVBheW1lbnRNZXRob2RcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMxMl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbkNoYW5nZVBheW1lbnRNZXRob2RcXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzV2l0aGRyYXdcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMxM10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc1dpdGhkcmF3XFxcIiksIHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc1RyeVdpdGhkcmF3U3VjY2Vzc2Z1bFxcXCIsIFtwYXltZW50X2FnZW50X3N0b3JlX2RlYzE0XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzVHJ5V2l0aGRyYXdTdWNjZXNzZnVsXFxcIiksIHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc1dpdGhkcmF3U3VjY2Vzc2Z1bFxcXCIsIFtwYXltZW50X2FnZW50X3N0b3JlX2RlYzE1XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzV2l0aGRyYXdTdWNjZXNzZnVsXFxcIiksIHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRDb25maXJtYXRpb25cXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMxNl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRDb25maXJtYXRpb25cXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFJlY2VpcHRcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMxN10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRSZWNlaXB0XFxcIiksIHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJhZGRQYXltZW50QWdlbnRcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMxOF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJhZGRQYXltZW50QWdlbnRcXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uTW91bnRQYXltZW50QWdlbnRXaXRoZHJhd1xcXCIsIFtwYXltZW50X2FnZW50X3N0b3JlX2RlYzE5XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uTW91bnRQYXltZW50QWdlbnRXaXRoZHJhd1xcXCIpLCBwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHBheW1lbnRfYWdlbnRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwicmVxdWVzdFRyeVBheW1lbnRBZ2VudFdpdGhkcmF3XFxcIiwgW3BheW1lbnRfYWdlbnRfc3RvcmVfZGVjMjBdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwicmVxdWVzdFRyeVBheW1lbnRBZ2VudFdpdGhkcmF3XFxcIiksIHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgX2Rlc2NyaXB0b3IxNyA9IHBheW1lbnRfYWdlbnRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwicmVzZXRQYXltZW50QWdlbnRcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMyMV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XFxuXFxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XFxuICAgICAgX3RoaXM0LmVycm9yLnNldEVycm9yTWVzc2FnZSgnJyk7XFxuXFxuICAgICAgX3RoaXM0LnNldElzV2l0aGRyYXcoZmFsc2UpO1xcblxcbiAgICAgIF90aGlzNC52ZXJpZmljYXRpb24uY2xlYXJWZXJpZmljYXRpb24oKTtcXG5cXG4gICAgICBfdGhpczQuc2V0QWN0aXZlVGFiSW5kZXgoMCk7XFxuICAgIH07XFxuICB9XFxufSksIHBheW1lbnRfYWdlbnRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25Nb3VudFBheW1lbnRBZ2VudExpc3RcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMyMl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbk1vdW50UGF5bWVudEFnZW50TGlzdFxcXCIpLCBwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHBheW1lbnRfYWdlbnRfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0QWxsUGF5bWVudEFnZW50TGlzdFxcXCIsIFtwYXltZW50X2FnZW50X3N0b3JlX2RlYzIzXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldEFsbFBheW1lbnRBZ2VudExpc3RcXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX3BheW1lbnRfYWdlbnRfdmlzaWJsZV9pbl9vbmJvYXJkaW5nXFxcIiwgW2V4dGVybmFsX21vYnhfLmNvbXB1dGVkXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX3BheW1lbnRfYWdlbnRfdmlzaWJsZV9pbl9vbmJvYXJkaW5nXFxcIiksIHBheW1lbnRfYWdlbnRfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXF1ZXN0UGF5bWVudEFnZW50V2l0aGRyYXdcXFwiLCBbcGF5bWVudF9hZ2VudF9zdG9yZV9kZWMyNF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXF1ZXN0UGF5bWVudEFnZW50V2l0aGRyYXdcXFwiKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcy5wcm90b3R5cGUpKSwgcGF5bWVudF9hZ2VudF9zdG9yZV9jbGFzcykpO1xcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL1N0b3Jlcy9wYXltZW50LWFnZW50LXRyYW5zZmVyLXN0b3JlLmpzXFxudmFyIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVjLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2RlYzIsIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVjMywgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWM0LCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2RlYzUsIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVjNiwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWM3LCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2RlYzgsIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVjOSwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWMxMCwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcywgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3IyLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3IzLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I0LCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I1LCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I2LCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I3LCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I4LCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I5LCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3IxMCwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yMTE7XFxuXFxuZnVuY3Rpb24gcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XFxuXFxuZnVuY3Rpb24gcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2FzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXFxcIm5leHRcXFwiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2FzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXFxcInRocm93XFxcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxcblxcbmZ1bmN0aW9uIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7IGlmICghZGVzY3JpcHRvcikgcmV0dXJuOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgeyBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGUsIGNvbmZpZ3VyYWJsZTogZGVzY3JpcHRvci5jb25maWd1cmFibGUsIHdyaXRhYmxlOiBkZXNjcmlwdG9yLndyaXRhYmxlLCB2YWx1ZTogZGVzY3JpcHRvci5pbml0aWFsaXplciA/IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMCB9KTsgfVxcblxcbmZ1bmN0aW9uIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblxcXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXFxcInZhbHVlXFxcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHksIGRlY29yYXRvcnMsIGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgdmFyIGRlc2MgPSB7fTsgT2JqZWN0LmtleXMoZGVzY3JpcHRvcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IGRlc2Nba2V5XSA9IGRlc2NyaXB0b3Jba2V5XTsgfSk7IGRlc2MuZW51bWVyYWJsZSA9ICEhZGVzYy5lbnVtZXJhYmxlOyBkZXNjLmNvbmZpZ3VyYWJsZSA9ICEhZGVzYy5jb25maWd1cmFibGU7IGlmICgndmFsdWUnIGluIGRlc2MgfHwgZGVzYy5pbml0aWFsaXplcikgeyBkZXNjLndyaXRhYmxlID0gdHJ1ZTsgfSBkZXNjID0gZGVjb3JhdG9ycy5zbGljZSgpLnJldmVyc2UoKS5yZWR1Y2UoZnVuY3Rpb24gKGRlc2MsIGRlY29yYXRvcikgeyByZXR1cm4gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHksIGRlc2MpIHx8IGRlc2M7IH0sIGRlc2MpOyBpZiAoY29udGV4dCAmJiBkZXNjLmluaXRpYWxpemVyICE9PSB2b2lkIDApIHsgZGVzYy52YWx1ZSA9IGRlc2MuaW5pdGlhbGl6ZXIgPyBkZXNjLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDA7IGRlc2MuaW5pdGlhbGl6ZXIgPSB1bmRlZmluZWQ7IH0gaWYgKGRlc2MuaW5pdGlhbGl6ZXIgPT09IHZvaWQgMCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYyk7IGRlc2MgPSBudWxsOyB9IHJldHVybiBkZXNjOyB9XFxuXFxuZnVuY3Rpb24gcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9pbml0aWFsaXplcldhcm5pbmdIZWxwZXIoZGVzY3JpcHRvciwgY29udGV4dCkgeyB0aHJvdyBuZXcgRXJyb3IoJ0RlY29yYXRpbmcgY2xhc3MgcHJvcGVydHkgZmFpbGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgJyArICdwcm9wb3NhbC1jbGFzcy1wcm9wZXJ0aWVzIGlzIGVuYWJsZWQgYW5kIHJ1bnMgYWZ0ZXIgdGhlIGRlY29yYXRvcnMgdHJhbnNmb3JtLicpOyB9XFxuXFxuXFxuXFxuXFxuXFxudmFyIFBheW1lbnRBZ2VudFRyYW5zZmVyU3RvcmUgPSAocGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWMgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVjMiA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWMzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2RlYzQgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVjNSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWM2ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2RlYzcgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVjOCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWM5ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2RlYzEwID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCAocGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XFxuICBmdW5jdGlvbiBQYXltZW50QWdlbnRUcmFuc2ZlclN0b3JlKF9yZWYpIHtcXG4gICAgdmFyIFdTID0gX3JlZi5XUyxcXG4gICAgICAgIHJvb3Rfc3RvcmUgPSBfcmVmLnJvb3Rfc3RvcmU7XFxuXFxuICAgIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGF5bWVudEFnZW50VHJhbnNmZXJTdG9yZSk7XFxuXFxuICAgIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiY29udGFpbmVyXFxcIiwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yLCB0aGlzKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJlcnJvclxcXCIsIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjIsIHRoaXMpO1xcblxcbiAgICBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImlzX3BheW1lbnRfYWdlbnRcXFwiLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3IzLCB0aGlzKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJpc190cnlfdHJhbnNmZXJfc3VjY2Vzc2Z1bFxcXCIsIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjQsIHRoaXMpO1xcblxcbiAgICBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImlzX3RyYW5zZmVyX3N1Y2Nlc3NmdWxcXFwiLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I1LCB0aGlzKTtcXG5cXG4gICAgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJjb25maXJtXFxcIiwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yNiwgdGhpcyk7XFxuXFxuICAgIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwicmVjZWlwdFxcXCIsIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjcsIHRoaXMpO1xcblxcbiAgICBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcInRyYW5zZmVyX2xpbWl0XFxcIiwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yOCwgdGhpcyk7XFxuXFxuICAgIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwicmVxdWVzdFRyeVBheW1lbnRBZ2VudFRyYW5zZmVyXFxcIiwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yOSwgdGhpcyk7XFxuXFxuICAgIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwicmVxdWVzdFBheW1lbnRBZ2VudFRyYW5zZmVyXFxcIiwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yMTAsIHRoaXMpO1xcblxcbiAgICBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcInJlc2V0UGF5bWVudEFnZW50VHJhbnNmZXJcXFwiLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3IxMSwgdGhpcyk7XFxuXFxuICAgIHRoaXMucm9vdF9zdG9yZSA9IHJvb3Rfc3RvcmU7XFxuICAgIHRoaXMuV1MgPSBXUztcXG4gIH1cXG5cXG4gIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY3JlYXRlQ2xhc3MoUGF5bWVudEFnZW50VHJhbnNmZXJTdG9yZSwgW3tcXG4gICAga2V5OiBcXFwiaXNfcGF5bWVudF9hZ2VudF90cmFuc2Zlcl92aXNpYmxlXFxcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuaXNfcGF5bWVudF9hZ2VudDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJjaGVja0lzUGF5bWVudEFnZW50XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgX2NoZWNrSXNQYXltZW50QWdlbnQgPSBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xcbiAgICAgICAgdmFyIF9nZXRfc2V0dGluZ3MkaXNfYXV0aDtcXG5cXG4gICAgICAgIHZhciBnZXRfc2V0dGluZ3M7XFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XUy5hdXRob3JpemVkLnN0b3JhZ2UuZ2V0U2V0dGluZ3MoKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjpcXG4gICAgICAgICAgICAgICAgZ2V0X3NldHRpbmdzID0gX2NvbnRleHQuc2VudC5nZXRfc2V0dGluZ3M7XFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0SXNQYXltZW50QWdlbnQoKF9nZXRfc2V0dGluZ3MkaXNfYXV0aCA9IGdldF9zZXR0aW5ncyA9PT0gbnVsbCB8fCBnZXRfc2V0dGluZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdldF9zZXR0aW5ncy5pc19hdXRoZW50aWNhdGVkX3BheW1lbnRfYWdlbnQpICE9PSBudWxsICYmIF9nZXRfc2V0dGluZ3MkaXNfYXV0aCAhPT0gdm9pZCAwID8gX2dldF9zZXR0aW5ncyRpc19hdXRoIDogZmFsc2UpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA0OlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBjaGVja0lzUGF5bWVudEFnZW50KCkge1xcbiAgICAgICAgcmV0dXJuIF9jaGVja0lzUGF5bWVudEFnZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBjaGVja0lzUGF5bWVudEFnZW50O1xcbiAgICB9KClcXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0SXNQYXltZW50QWdlbnRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SXNQYXltZW50QWdlbnQoaXNfcGF5bWVudF9hZ2VudCkge1xcbiAgICAgIGlmICghaXNfcGF5bWVudF9hZ2VudCAmJiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuZW5kc1dpdGgoc2hhcmVkXy5yb3V0ZXMuY2FzaGllcl9wYV90cmFuc2ZlcikpIHtcXG4gICAgICAgIHRoaXMucm9vdF9zdG9yZS5jb21tb24ucm91dGVUbyhzaGFyZWRfLnJvdXRlcy5jYXNoaWVyX2RlcG9zaXQpO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLmlzX3BheW1lbnRfYWdlbnQgPSAhIWlzX3BheW1lbnRfYWdlbnQ7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0SXNUcnlUcmFuc2ZlclN1Y2Nlc3NmdWxcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SXNUcnlUcmFuc2ZlclN1Y2Nlc3NmdWwoaXNfdHJ5X3RyYW5zZmVyX3N1Y2Nlc3NmdWwpIHtcXG4gICAgICB0aGlzLmVycm9yLnNldEVycm9yTWVzc2FnZSgnJyk7XFxuICAgICAgdGhpcy5pc190cnlfdHJhbnNmZXJfc3VjY2Vzc2Z1bCA9IGlzX3RyeV90cmFuc2Zlcl9zdWNjZXNzZnVsO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldElzVHJhbnNmZXJTdWNjZXNzZnVsXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldElzVHJhbnNmZXJTdWNjZXNzZnVsKGlzX3RyYW5zZmVyX3N1Y2Nlc3NmdWwpIHtcXG4gICAgICB0aGlzLmlzX3RyYW5zZmVyX3N1Y2Nlc3NmdWwgPSBpc190cmFuc2Zlcl9zdWNjZXNzZnVsO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldENvbmZpcm1hdGlvblBheW1lbnRBZ2VudFRyYW5zZmVyXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldENvbmZpcm1hdGlvblBheW1lbnRBZ2VudFRyYW5zZmVyKF9yZWYyKSB7XFxuICAgICAgdmFyIGFtb3VudCA9IF9yZWYyLmFtb3VudCxcXG4gICAgICAgICAgY2xpZW50X2lkID0gX3JlZjIuY2xpZW50X2lkLFxcbiAgICAgICAgICBjbGllbnRfbmFtZSA9IF9yZWYyLmNsaWVudF9uYW1lLFxcbiAgICAgICAgICBkZXNjcmlwdGlvbiA9IF9yZWYyLmRlc2NyaXB0aW9uO1xcbiAgICAgIHRoaXMuY29uZmlybSA9IHtcXG4gICAgICAgIGFtb3VudDogYW1vdW50LFxcbiAgICAgICAgY2xpZW50X2lkOiBjbGllbnRfaWQsXFxuICAgICAgICBjbGllbnRfbmFtZTogY2xpZW50X25hbWUsXFxuICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cXG4gICAgICB9O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldFJlY2VpcHRQYXltZW50QWdlbnRUcmFuc2ZlclxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSZWNlaXB0UGF5bWVudEFnZW50VHJhbnNmZXIoX3JlZjMpIHtcXG4gICAgICB2YXIgYW1vdW50X3RyYW5zZmVycmVkID0gX3JlZjMuYW1vdW50X3RyYW5zZmVycmVkLFxcbiAgICAgICAgICBjbGllbnRfaWQgPSBfcmVmMy5jbGllbnRfaWQsXFxuICAgICAgICAgIGNsaWVudF9uYW1lID0gX3JlZjMuY2xpZW50X25hbWU7XFxuICAgICAgdGhpcy5yZWNlaXB0ID0ge1xcbiAgICAgICAgYW1vdW50X3RyYW5zZmVycmVkOiBhbW91bnRfdHJhbnNmZXJyZWQsXFxuICAgICAgICBjbGllbnRfaWQ6IGNsaWVudF9pZCxcXG4gICAgICAgIGNsaWVudF9uYW1lOiBjbGllbnRfbmFtZVxcbiAgICAgIH07XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZ2V0Q3VycmVudFBheW1lbnRBZ2VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIF9nZXRDdXJyZW50UGF5bWVudEFnZW50ID0gcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocmVzcG9uc2VfcGF5bWVudF9hZ2VudCkge1xcbiAgICAgICAgdmFyIF90aGlzJHJvb3Rfc3RvcmUsIGNsaWVudCwgbW9kdWxlcywgcGF5bWVudF9hZ2VudF9saXN0ZWQsIGN1cnJlbnRfcGF5bWVudF9hZ2VudDtcXG5cXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIF90aGlzJHJvb3Rfc3RvcmUgPSB0aGlzLnJvb3Rfc3RvcmUsIGNsaWVudCA9IF90aGlzJHJvb3Rfc3RvcmUuY2xpZW50LCBtb2R1bGVzID0gX3RoaXMkcm9vdF9zdG9yZS5tb2R1bGVzO1xcbiAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50X2xpc3RlZCA9IHJlc3BvbnNlX3BheW1lbnRfYWdlbnQucGF5bWVudGFnZW50X2xpc3QubGlzdC5maW5kKGZ1bmN0aW9uIChhZ2VudCkge1xcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhZ2VudC5wYXltZW50YWdlbnRfbG9naW5pZCA9PT0gY2xpZW50LmxvZ2luaWQ7XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBwYXltZW50X2FnZW50X2xpc3RlZDtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKF9jb250ZXh0Mi50MCkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNztcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7XFxuICAgICAgICAgICAgICAgIHJldHVybiBtb2R1bGVzLmNhc2hpZXIucGF5bWVudF9hZ2VudC5nZXRQYXltZW50QWdlbnREZXRhaWxzKCk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDY6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0Mi5zZW50O1xcblxcbiAgICAgICAgICAgICAgY2FzZSA3OlxcbiAgICAgICAgICAgICAgICBjdXJyZW50X3BheW1lbnRfYWdlbnQgPSBfY29udGV4dDIudDA7XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFxcXCJyZXR1cm5cXFwiLCBjdXJyZW50X3BheW1lbnRfYWdlbnQgIT09IG51bGwgJiYgY3VycmVudF9wYXltZW50X2FnZW50ICE9PSB2b2lkIDAgPyBjdXJyZW50X3BheW1lbnRfYWdlbnQgOiB7fSk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDk6XFxuICAgICAgICAgICAgICBjYXNlIFxcXCJlbmRcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTtcXG4gICAgICB9KSk7XFxuXFxuICAgICAgZnVuY3Rpb24gZ2V0Q3VycmVudFBheW1lbnRBZ2VudChfeCkge1xcbiAgICAgICAgcmV0dXJuIF9nZXRDdXJyZW50UGF5bWVudEFnZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBnZXRDdXJyZW50UGF5bWVudEFnZW50O1xcbiAgICB9KClcXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0TWluTWF4UGF5bWVudEFnZW50VHJhbnNmZXJcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TWluTWF4UGF5bWVudEFnZW50VHJhbnNmZXIoX3JlZjQpIHtcXG4gICAgICB2YXIgbWluX3dpdGhkcmF3YWwgPSBfcmVmNC5taW5fd2l0aGRyYXdhbCxcXG4gICAgICAgICAgbWF4X3dpdGhkcmF3YWwgPSBfcmVmNC5tYXhfd2l0aGRyYXdhbDtcXG4gICAgICB0aGlzLnRyYW5zZmVyX2xpbWl0ID0ge1xcbiAgICAgICAgbWluOiBtaW5fd2l0aGRyYXdhbCxcXG4gICAgICAgIG1heDogbWF4X3dpdGhkcmF3YWxcXG4gICAgICB9O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcIm9uTW91bnRQYXltZW50QWdlbnRUcmFuc2ZlclxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIF9vbk1vdW50UGF5bWVudEFnZW50VHJhbnNmZXIgPSBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHtcXG4gICAgICAgIHZhciBfdGhpcyRyb290X3N0b3JlJG1vZHUsIGdlbmVyYWxfc3RvcmUsIHBheW1lbnRfYWdlbnQsIHJlc3BvbnNlLCBjdXJyZW50X3BheW1lbnRfYWdlbnQ7XFxuXFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBfdGhpcyRyb290X3N0b3JlJG1vZHUgPSB0aGlzLnJvb3Rfc3RvcmUubW9kdWxlcy5jYXNoaWVyLCBnZW5lcmFsX3N0b3JlID0gX3RoaXMkcm9vdF9zdG9yZSRtb2R1LmdlbmVyYWxfc3RvcmUsIHBheW1lbnRfYWdlbnQgPSBfdGhpcyRyb290X3N0b3JlJG1vZHUucGF5bWVudF9hZ2VudDtcXG4gICAgICAgICAgICAgICAgZ2VuZXJhbF9zdG9yZS5zZXRMb2FkaW5nKHRydWUpO1xcbiAgICAgICAgICAgICAgICB0aGlzLm9uUmVtb3VudCA9IHRoaXMub25Nb3VudFBheW1lbnRBZ2VudFRyYW5zZmVyO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7XFxuICAgICAgICAgICAgICAgIHJldHVybiBnZW5lcmFsX3N0b3JlLm9uTW91bnRDb21tb24oKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNTpcXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNmZXJfbGltaXQubWluX3dpdGhkcmF3YWwpIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDEzO1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gODtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBheW1lbnRfYWdlbnQuZ2V0UGF5bWVudEFnZW50TGlzdCgpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA4OlxcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0My5zZW50O1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDExO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50UGF5bWVudEFnZW50KHJlc3BvbnNlKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTE6XFxuICAgICAgICAgICAgICAgIGN1cnJlbnRfcGF5bWVudF9hZ2VudCA9IF9jb250ZXh0My5zZW50O1xcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1pbk1heFBheW1lbnRBZ2VudFRyYW5zZmVyKGN1cnJlbnRfcGF5bWVudF9hZ2VudCk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDEzOlxcbiAgICAgICAgICAgICAgICBnZW5lcmFsX3N0b3JlLnNldExvYWRpbmcoZmFsc2UpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAxNDpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBvbk1vdW50UGF5bWVudEFnZW50VHJhbnNmZXIoKSB7XFxuICAgICAgICByZXR1cm4gX29uTW91bnRQYXltZW50QWdlbnRUcmFuc2Zlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gb25Nb3VudFBheW1lbnRBZ2VudFRyYW5zZmVyO1xcbiAgICB9KClcXG4gIH1dKTtcXG5cXG4gIHJldHVybiBQYXltZW50QWdlbnRUcmFuc2ZlclN0b3JlO1xcbn0oKSwgKHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvciA9IHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY29udGFpbmVyXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBjb25zdGFudHMuY29udGFpbmVycy5wYXltZW50X2FnZW50X3RyYW5zZmVyO1xcbiAgfVxcbn0pLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3IyID0gcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJlcnJvclxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gbmV3IEVycm9yU3RvcmUoKTtcXG4gIH1cXG59KSwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yMyA9IHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfcGF5bWVudF9hZ2VudFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjQgPSBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX3RyeV90cmFuc2Zlcl9zdWNjZXNzZnVsXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yNSA9IHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfdHJhbnNmZXJfc3VjY2Vzc2Z1bFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjYgPSBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNvbmZpcm1cXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIHt9O1xcbiAgfVxcbn0pLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3I3ID0gcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZWNlaXB0XFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiB7fTtcXG4gIH1cXG59KSwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZXNjcmlwdG9yOCA9IHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwidHJhbnNmZXJfbGltaXRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIHt9O1xcbiAgfVxcbn0pLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX3BheW1lbnRfYWdlbnRfdHJhbnNmZXJfdmlzaWJsZVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5jb21wdXRlZF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19wYXltZW50X2FnZW50X3RyYW5zZmVyX3Zpc2libGVcXFwiKSwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzUGF5bWVudEFnZW50XFxcIiwgW3BheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVjXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzUGF5bWVudEFnZW50XFxcIiksIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc1RyeVRyYW5zZmVyU3VjY2Vzc2Z1bFxcXCIsIFtwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2RlYzJdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0SXNUcnlUcmFuc2ZlclN1Y2Nlc3NmdWxcXFwiKSwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzVHJhbnNmZXJTdWNjZXNzZnVsXFxcIiwgW3BheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVjM10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc1RyYW5zZmVyU3VjY2Vzc2Z1bFxcXCIpLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0Q29uZmlybWF0aW9uUGF5bWVudEFnZW50VHJhbnNmZXJcXFwiLCBbcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWM0XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldENvbmZpcm1hdGlvblBheW1lbnRBZ2VudFRyYW5zZmVyXFxcIiksIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRSZWNlaXB0UGF5bWVudEFnZW50VHJhbnNmZXJcXFwiLCBbcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWM1XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFJlY2VpcHRQYXltZW50QWdlbnRUcmFuc2ZlclxcXCIpLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0TWluTWF4UGF5bWVudEFnZW50VHJhbnNmZXJcXFwiLCBbcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWM2XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldE1pbk1heFBheW1lbnRBZ2VudFRyYW5zZmVyXFxcIiksIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IocGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbk1vdW50UGF5bWVudEFnZW50VHJhbnNmZXJcXFwiLCBbcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9kZWM3XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm9uTW91bnRQYXltZW50QWdlbnRUcmFuc2ZlclxcXCIpLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVzY3JpcHRvcjkgPSBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInJlcXVlc3RUcnlQYXltZW50QWdlbnRUcmFuc2ZlclxcXCIsIFtwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2RlYzhdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfcmVmNiA9IHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KF9yZWY1KSB7XFxuICAgICAgICB2YXIgYW1vdW50LCBjdXJyZW5jeSwgZGVzY3JpcHRpb24sIHRyYW5zZmVyX3RvLCBwYXltZW50X2FnZW50X3RyYW5zZmVyO1xcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgYW1vdW50ID0gX3JlZjUuYW1vdW50LCBjdXJyZW5jeSA9IF9yZWY1LmN1cnJlbmN5LCBkZXNjcmlwdGlvbiA9IF9yZWY1LmRlc2NyaXB0aW9uLCB0cmFuc2Zlcl90byA9IF9yZWY1LnRyYW5zZmVyX3RvO1xcblxcbiAgICAgICAgICAgICAgICBfdGhpcy5lcnJvci5zZXRFcnJvck1lc3NhZ2UoJycpO1xcblxcbiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDQ7XFxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5XUy5hdXRob3JpemVkLnBheW1lbnRBZ2VudFRyYW5zZmVyKHtcXG4gICAgICAgICAgICAgICAgICBhbW91bnQ6IGFtb3VudCxcXG4gICAgICAgICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3ksXFxuICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxcbiAgICAgICAgICAgICAgICAgIHRyYW5zZmVyX3RvOiB0cmFuc2Zlcl90byxcXG4gICAgICAgICAgICAgICAgICBkcnlfcnVuOiAxXFxuICAgICAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA0OlxcbiAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50X3RyYW5zZmVyID0gX2NvbnRleHQ0LnNlbnQ7XFxuXFxuICAgICAgICAgICAgICAgIGlmICgrcGF5bWVudF9hZ2VudF90cmFuc2Zlci5wYXltZW50YWdlbnRfdHJhbnNmZXIgPT09IDIpIHtcXG4gICAgICAgICAgICAgICAgICAvLyBzaG93IGNvbmZpcm1hdGlvbiBzY3JlZW5cXG4gICAgICAgICAgICAgICAgICBfdGhpcy5zZXRDb25maXJtYXRpb25QYXltZW50QWdlbnRUcmFuc2Zlcih7XFxuICAgICAgICAgICAgICAgICAgICBjbGllbnRfaWQ6IHRyYW5zZmVyX3RvLFxcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50X25hbWU6IHBheW1lbnRfYWdlbnRfdHJhbnNmZXIuY2xpZW50X3RvX2Z1bGxfbmFtZSxcXG4gICAgICAgICAgICAgICAgICAgIGFtb3VudDogYW1vdW50LFxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXFxuICAgICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0SXNUcnlUcmFuc2ZlclN1Y2Nlc3NmdWwodHJ1ZSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgX3RoaXMuZXJyb3Iuc2V0RXJyb3JNZXNzYWdlKHBheW1lbnRfYWdlbnRfdHJhbnNmZXIuZXJyb3IsIF90aGlzLnJlc2V0UGF5bWVudEFnZW50VHJhbnNmZXIpO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KFxcXCJyZXR1cm5cXFwiLCBwYXltZW50X2FnZW50X3RyYW5zZmVyKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNzpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTQpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKF94Mikge1xcbiAgICAgICAgcmV0dXJuIF9yZWY2LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfTtcXG4gICAgfSgpO1xcbiAgfVxcbn0pLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3IxMCA9IHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwicmVxdWVzdFBheW1lbnRBZ2VudFRyYW5zZmVyXFxcIiwgW3BheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfZGVjOV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfcmVmOCA9IHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KF9yZWY3KSB7XFxuICAgICAgICB2YXIgYW1vdW50LCBjdXJyZW5jeSwgZGVzY3JpcHRpb24sIHRyYW5zZmVyX3RvLCBwYXltZW50X2FnZW50X3RyYW5zZmVyO1xcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgYW1vdW50ID0gX3JlZjcuYW1vdW50LCBjdXJyZW5jeSA9IF9yZWY3LmN1cnJlbmN5LCBkZXNjcmlwdGlvbiA9IF9yZWY3LmRlc2NyaXB0aW9uLCB0cmFuc2Zlcl90byA9IF9yZWY3LnRyYW5zZmVyX3RvO1xcblxcbiAgICAgICAgICAgICAgICBfdGhpczIuZXJyb3Iuc2V0RXJyb3JNZXNzYWdlKCcnKTtcXG5cXG4gICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSA0O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLldTLmF1dGhvcml6ZWQucGF5bWVudEFnZW50VHJhbnNmZXIoe1xcbiAgICAgICAgICAgICAgICAgIGFtb3VudDogYW1vdW50LFxcbiAgICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeSxcXG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXFxuICAgICAgICAgICAgICAgICAgdHJhbnNmZXJfdG86IHRyYW5zZmVyX3RvXFxuICAgICAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA0OlxcbiAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50X3RyYW5zZmVyID0gX2NvbnRleHQ1LnNlbnQ7XFxuXFxuICAgICAgICAgICAgICAgIGlmICgrcGF5bWVudF9hZ2VudF90cmFuc2Zlci5wYXltZW50YWdlbnRfdHJhbnNmZXIgPT09IDEpIHtcXG4gICAgICAgICAgICAgICAgICBfdGhpczIuc2V0UmVjZWlwdFBheW1lbnRBZ2VudFRyYW5zZmVyKHtcXG4gICAgICAgICAgICAgICAgICAgIGFtb3VudF90cmFuc2ZlcnJlZDogYW1vdW50LFxcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50X2lkOiB0cmFuc2Zlcl90byxcXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudF9uYW1lOiBwYXltZW50X2FnZW50X3RyYW5zZmVyLmNsaWVudF90b19mdWxsX25hbWVcXG4gICAgICAgICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICAgICAgICBfdGhpczIuc2V0SXNUcmFuc2ZlclN1Y2Nlc3NmdWwodHJ1ZSk7XFxuXFxuICAgICAgICAgICAgICAgICAgX3RoaXMyLnNldElzVHJ5VHJhbnNmZXJTdWNjZXNzZnVsKGZhbHNlKTtcXG5cXG4gICAgICAgICAgICAgICAgICBfdGhpczIuc2V0Q29uZmlybWF0aW9uUGF5bWVudEFnZW50VHJhbnNmZXIoe30pO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgIF90aGlzMi5lcnJvci5zZXRFcnJvck1lc3NhZ2UocGF5bWVudF9hZ2VudF90cmFuc2Zlci5lcnJvciwgX3RoaXMyLnJlc2V0UGF5bWVudEFnZW50VHJhbnNmZXIpO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KFxcXCJyZXR1cm5cXFwiLCBwYXltZW50X2FnZW50X3RyYW5zZmVyKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNzpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTUpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKF94Mykge1xcbiAgICAgICAgcmV0dXJuIF9yZWY4LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfTtcXG4gICAgfSgpO1xcbiAgfVxcbn0pLCBwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2Rlc2NyaXB0b3IxMSA9IHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHBheW1lbnRfYWdlbnRfdHJhbnNmZXJfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwicmVzZXRQYXltZW50QWdlbnRUcmFuc2ZlclxcXCIsIFtwYXltZW50X2FnZW50X3RyYW5zZmVyX3N0b3JlX2RlYzEwXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcXG5cXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcXG4gICAgICBfdGhpczMuc2V0SXNUcmFuc2ZlclN1Y2Nlc3NmdWwoZmFsc2UpO1xcblxcbiAgICAgIF90aGlzMy5lcnJvci5zZXRFcnJvck1lc3NhZ2UoJycpO1xcbiAgICB9O1xcbiAgfVxcbn0pKSwgcGF5bWVudF9hZ2VudF90cmFuc2Zlcl9zdG9yZV9jbGFzcykpO1xcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL1N0b3Jlcy90cmFuc2FjdGlvbi1oaXN0b3J5LXN0b3JlLmpzXFxudmFyIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2RlYzIsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjMywgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWM0LCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2RlYzUsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjNiwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWM3LCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2RlYzgsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjOSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMxMCwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMxMSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMxMiwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMxMywgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMxNCwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMxNSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMxNiwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcywgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZXNjcmlwdG9yLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3IyLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3IzLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3I0LCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3I1LCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3I2LCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3I3LCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3I4O1xcblxcbmZ1bmN0aW9uIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxcblxcbmZ1bmN0aW9uIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJuZXh0XFxcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFxcXCJ0aHJvd1xcXCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cXG5cXG5mdW5jdGlvbiB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkgeyBpZiAoIWRlc2NyaXB0b3IpIHJldHVybjsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHsgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLCBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLCB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSwgdmFsdWU6IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDAgfSk7IH1cXG5cXG5mdW5jdGlvbiB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFxcXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cXFwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFxcXCJ2YWx1ZVxcXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7IHZhciBkZXNjID0ge307IE9iamVjdC5rZXlzKGRlc2NyaXB0b3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBkZXNjW2tleV0gPSBkZXNjcmlwdG9yW2tleV07IH0pOyBkZXNjLmVudW1lcmFibGUgPSAhIWRlc2MuZW51bWVyYWJsZTsgZGVzYy5jb25maWd1cmFibGUgPSAhIWRlc2MuY29uZmlndXJhYmxlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjIHx8IGRlc2MuaW5pdGlhbGl6ZXIpIHsgZGVzYy53cml0YWJsZSA9IHRydWU7IH0gZGVzYyA9IGRlY29yYXRvcnMuc2xpY2UoKS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChkZXNjLCBkZWNvcmF0b3IpIHsgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5LCBkZXNjKSB8fCBkZXNjOyB9LCBkZXNjKTsgaWYgKGNvbnRleHQgJiYgZGVzYy5pbml0aWFsaXplciAhPT0gdm9pZCAwKSB7IGRlc2MudmFsdWUgPSBkZXNjLmluaXRpYWxpemVyID8gZGVzYy5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwOyBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkOyB9IGlmIChkZXNjLmluaXRpYWxpemVyID09PSB2b2lkIDApIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2MpOyBkZXNjID0gbnVsbDsgfSByZXR1cm4gZGVzYzsgfVxcblxcbmZ1bmN0aW9uIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyKGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgdGhyb3cgbmV3IEVycm9yKCdEZWNvcmF0aW5nIGNsYXNzIHByb3BlcnR5IGZhaWxlZC4gUGxlYXNlIGVuc3VyZSB0aGF0ICcgKyAncHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpcyBlbmFibGVkIGFuZCBydW5zIGFmdGVyIHRoZSBkZWNvcmF0b3JzIHRyYW5zZm9ybS4nKTsgfVxcblxcblxcblxcbnZhciBUcmFuc2FjdGlvbkhpc3RvcnlTdG9yZSA9ICh0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2RlYyA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMyID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2RlYzMgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjNCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWM1ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2RlYzYgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjNyA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWM4ID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2RlYzkgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjMTAgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjMTEgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjMTIgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjMTMgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjMTQgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjMTUgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjMTYgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsICh0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIFRyYW5zYWN0aW9uSGlzdG9yeVN0b3JlKF9yZWYpIHtcXG4gICAgdmFyIFdTID0gX3JlZi5XUyxcXG4gICAgICAgIHJvb3Rfc3RvcmUgPSBfcmVmLnJvb3Rfc3RvcmU7XFxuXFxuICAgIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJhbnNhY3Rpb25IaXN0b3J5U3RvcmUpO1xcblxcbiAgICB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImNyeXB0b190cmFuc2FjdGlvbnNcXFwiLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3IsIHRoaXMpO1xcblxcbiAgICB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcImlzX2NyeXB0b190cmFuc2FjdGlvbnNfY2FuY2VsX21vZGFsX3Zpc2libGVcXFwiLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3IyLCB0aGlzKTtcXG5cXG4gICAgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJpc19jcnlwdG9fdHJhbnNhY3Rpb25zX3N0YXR1c19tb2RhbF92aXNpYmxlXFxcIiwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZXNjcmlwdG9yMywgdGhpcyk7XFxuXFxuICAgIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiaXNfY3J5cHRvX3RyYW5zYWN0aW9uc192aXNpYmxlXFxcIiwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZXNjcmlwdG9yNCwgdGhpcyk7XFxuXFxuICAgIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiaXNfbG9hZGluZ1xcXCIsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVzY3JpcHRvcjUsIHRoaXMpO1xcblxcbiAgICB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcInNlbGVjdGVkX2NyeXB0b190cmFuc2FjdGlvbl9pZFxcXCIsIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVzY3JpcHRvcjYsIHRoaXMpO1xcblxcbiAgICB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcInNlbGVjdGVkX2NyeXB0b19zdGF0dXNcXFwiLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3I3LCB0aGlzKTtcXG5cXG4gICAgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJzZWxlY3RlZF9jcnlwdG9fc3RhdHVzX2Rlc2NyaXB0aW9uXFxcIiwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZXNjcmlwdG9yOCwgdGhpcyk7XFxuXFxuICAgIHRoaXMucm9vdF9zdG9yZSA9IHJvb3Rfc3RvcmU7XFxuICAgIHRoaXMuV1MgPSBXUztcXG4gIH1cXG5cXG4gIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY3JlYXRlQ2xhc3MoVHJhbnNhY3Rpb25IaXN0b3J5U3RvcmUsIFt7XFxuICAgIGtleTogXFxcIm9uTW91bnRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfb25Nb3VudCA9IHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XFxuICAgICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSRjbGllLCBjdXJyZW5jeSwgc3dpdGNoZWQsIGlzX2NyeXB0bztcXG5cXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgX3RoaXMkcm9vdF9zdG9yZSRjbGllID0gdGhpcy5yb290X3N0b3JlLmNsaWVudCwgY3VycmVuY3kgPSBfdGhpcyRyb290X3N0b3JlJGNsaWUuY3VycmVuY3ksIHN3aXRjaGVkID0gX3RoaXMkcm9vdF9zdG9yZSRjbGllLnN3aXRjaGVkO1xcbiAgICAgICAgICAgICAgICBpc19jcnlwdG8gPSAhIWN1cnJlbmN5ICYmICgwLHNoYXJlZF8uaXNDcnlwdG9jdXJyZW5jeSkoY3VycmVuY3kpO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoIShpc19jcnlwdG8gJiYgIXN3aXRjaGVkKSkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0TG9hZGluZyh0cnVlKTtcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENyeXB0b1RyYW5zYWN0aW9ucygpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA2OlxcbiAgICAgICAgICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA3OlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBvbk1vdW50KCkge1xcbiAgICAgICAgcmV0dXJuIF9vbk1vdW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBvbk1vdW50O1xcbiAgICB9KClcXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZ2V0Q3J5cHRvVHJhbnNhY3Rpb25zXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgX2dldENyeXB0b1RyYW5zYWN0aW9ucyA9IHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkge1xcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcXG5cXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuV1Muc3Vic2NyaWJlQ2FzaGllclBheW1lbnRzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xcbiAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UuZXJyb3IpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBjcnlwdG8gPSByZXNwb25zZS5jYXNoaWVyX3BheW1lbnRzLmNyeXB0bztcXG5cXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZUNyeXB0b1RyYW5zYWN0aW9ucyhjcnlwdG8pO1xcbiAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDI6XFxuICAgICAgICAgICAgICBjYXNlIFxcXCJlbmRcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTtcXG4gICAgICB9KSk7XFxuXFxuICAgICAgZnVuY3Rpb24gZ2V0Q3J5cHRvVHJhbnNhY3Rpb25zKCkge1xcbiAgICAgICAgcmV0dXJuIF9nZXRDcnlwdG9UcmFuc2FjdGlvbnMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGdldENyeXB0b1RyYW5zYWN0aW9ucztcXG4gICAgfSgpXFxuICB9LCB7XFxuICAgIGtleTogXFxcInVwZGF0ZUNyeXB0b1RyYW5zYWN0aW9uc1xcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVDcnlwdG9UcmFuc2FjdGlvbnModHJhbnNhY3Rpb25zKSB7XFxuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICAgICAgdHJhbnNhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XFxuICAgICAgICB2YXIgaW5kZXggPSBfdGhpczIuY3J5cHRvX3RyYW5zYWN0aW9ucy5maW5kSW5kZXgoZnVuY3Rpb24gKGNyeXB0bykge1xcbiAgICAgICAgICByZXR1cm4gY3J5cHRvLmlkID09PSB0cmFuc2FjdGlvbi5pZDtcXG4gICAgICAgIH0pO1xcblxcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xcbiAgICAgICAgICBfdGhpczIuY3J5cHRvX3RyYW5zYWN0aW9ucy5wdXNoKHRyYW5zYWN0aW9uKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIE9iamVjdC5hc3NpZ24oX3RoaXMyLmNyeXB0b190cmFuc2FjdGlvbnNbaW5kZXhdLCB0cmFuc2FjdGlvbik7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgICAgdGhpcy5zb3J0Q3J5cHRvVHJhbnNhY3Rpb25zKCk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic29ydENyeXB0b1RyYW5zYWN0aW9uc1xcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzb3J0Q3J5cHRvVHJhbnNhY3Rpb25zKCkge1xcbiAgICAgIHRoaXMuY3J5cHRvX3RyYW5zYWN0aW9ucyA9IHRoaXMuY3J5cHRvX3RyYW5zYWN0aW9ucy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XFxuICAgICAgICByZXR1cm4gYi5zdWJtaXRfZGF0ZSAtIGEuc3VibWl0X2RhdGU7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiY2FuY2VsQ3J5cHRvVHJhbnNhY3Rpb25cXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfY2FuY2VsQ3J5cHRvVHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyh0cmFuc2FjdGlvbl9pZCkge1xcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XFxuXFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLldTLmNhbmNlbENyeXB0b1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uX2lkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xcbiAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UuZXJyb3IpIHtcXG4gICAgICAgICAgICAgICAgICAgIF90aGlzMy5zZXRTZWxlY3RlZENyeXB0b1RyYW5zYWN0aW9uSWQoJycpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMzLnNldElzQ3J5cHRvVHJhbnNhY3Rpb25zQ2FuY2VsTW9kYWxWaXNpYmxlKGZhbHNlKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xcbiAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UuZXJyb3IpO1xcbiAgICAgICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBjYW5jZWxDcnlwdG9UcmFuc2FjdGlvbihfeCkge1xcbiAgICAgICAgcmV0dXJuIF9jYW5jZWxDcnlwdG9UcmFuc2FjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gY2FuY2VsQ3J5cHRvVHJhbnNhY3Rpb247XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRTZWxlY3RlZENyeXB0b1RyYW5zYWN0aW9uSWRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0ZWRDcnlwdG9UcmFuc2FjdGlvbklkKGlkKSB7XFxuICAgICAgdGhpcy5zZWxlY3RlZF9jcnlwdG9fdHJhbnNhY3Rpb25faWQgPSBpZDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRJc0NyeXB0b1RyYW5zYWN0aW9uc0NhbmNlbE1vZGFsVmlzaWJsZVxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc0NyeXB0b1RyYW5zYWN0aW9uc0NhbmNlbE1vZGFsVmlzaWJsZShpc192aXNpYmxlKSB7XFxuICAgICAgdGhpcy5pc19jcnlwdG9fdHJhbnNhY3Rpb25zX2NhbmNlbF9tb2RhbF92aXNpYmxlID0gaXNfdmlzaWJsZTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzaG93Q3J5cHRvVHJhbnNhY3Rpb25zQ2FuY2VsTW9kYWxcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd0NyeXB0b1RyYW5zYWN0aW9uc0NhbmNlbE1vZGFsKGlkKSB7XFxuICAgICAgdGhpcy5zZXRTZWxlY3RlZENyeXB0b1RyYW5zYWN0aW9uSWQoaWQpO1xcbiAgICAgIHRoaXMuc2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNDYW5jZWxNb2RhbFZpc2libGUodHJ1ZSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiaGlkZUNyeXB0b1RyYW5zYWN0aW9uc0NhbmNlbE1vZGFsXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVDcnlwdG9UcmFuc2FjdGlvbnNDYW5jZWxNb2RhbCgpIHtcXG4gICAgICB0aGlzLnNldFNlbGVjdGVkQ3J5cHRvVHJhbnNhY3Rpb25JZCgnJyk7XFxuICAgICAgdGhpcy5zZXRJc0NyeXB0b1RyYW5zYWN0aW9uc0NhbmNlbE1vZGFsVmlzaWJsZShmYWxzZSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0U2VsZWN0ZWRDcnlwdG9TdGF0dXNcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0ZWRDcnlwdG9TdGF0dXMoc3RhdHVzKSB7XFxuICAgICAgdGhpcy5zZWxlY3RlZF9jcnlwdG9fc3RhdHVzID0gc3RhdHVzO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldFNlbGVjdGVkQ3J5cHRvU3RhdHVzRGVzY3JpcHRpb25cXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0ZWRDcnlwdG9TdGF0dXNEZXNjcmlwdGlvbihkZXNjcmlwdGlvbikge1xcbiAgICAgIHRoaXMuc2VsZWN0ZWRfY3J5cHRvX3N0YXR1c19kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldElzQ3J5cHRvVHJhbnNhY3Rpb25zU3RhdHVzTW9kYWxWaXNpYmxlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldElzQ3J5cHRvVHJhbnNhY3Rpb25zU3RhdHVzTW9kYWxWaXNpYmxlKGlzX3Zpc2libGUpIHtcXG4gICAgICB0aGlzLmlzX2NyeXB0b190cmFuc2FjdGlvbnNfc3RhdHVzX21vZGFsX3Zpc2libGUgPSBpc192aXNpYmxlO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNob3dDcnlwdG9UcmFuc2FjdGlvbnNTdGF0dXNNb2RhbFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93Q3J5cHRvVHJhbnNhY3Rpb25zU3RhdHVzTW9kYWwoZGVzY3JpcHRpb24sIG5hbWUpIHtcXG4gICAgICB0aGlzLnNldFNlbGVjdGVkQ3J5cHRvU3RhdHVzRGVzY3JpcHRpb24oZGVzY3JpcHRpb24pO1xcbiAgICAgIHRoaXMuc2V0U2VsZWN0ZWRDcnlwdG9TdGF0dXMobmFtZSk7XFxuICAgICAgdGhpcy5zZXRJc0NyeXB0b1RyYW5zYWN0aW9uc1N0YXR1c01vZGFsVmlzaWJsZSh0cnVlKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJoaWRlQ3J5cHRvVHJhbnNhY3Rpb25zU3RhdHVzTW9kYWxcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZUNyeXB0b1RyYW5zYWN0aW9uc1N0YXR1c01vZGFsKCkge1xcbiAgICAgIHRoaXMuc2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNTdGF0dXNNb2RhbFZpc2libGUoZmFsc2UpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldExvYWRpbmdcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TG9hZGluZyhpc19sb2FkaW5nKSB7XFxuICAgICAgdGhpcy5pc19sb2FkaW5nID0gaXNfbG9hZGluZztcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRJc0NyeXB0b1RyYW5zYWN0aW9uc1Zpc2libGVcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNWaXNpYmxlKGlzX3Zpc2libGUpIHtcXG4gICAgICB0aGlzLmlzX2NyeXB0b190cmFuc2FjdGlvbnNfdmlzaWJsZSA9IGlzX3Zpc2libGU7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBUcmFuc2FjdGlvbkhpc3RvcnlTdG9yZTtcXG59KCksICh0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3IgPSB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNyeXB0b190cmFuc2FjdGlvbnNcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIFtdO1xcbiAgfVxcbn0pLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3IyID0gdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc19jcnlwdG9fdHJhbnNhY3Rpb25zX2NhbmNlbF9tb2RhbF92aXNpYmxlXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBmYWxzZTtcXG4gIH1cXG59KSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZXNjcmlwdG9yMyA9IHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfY3J5cHRvX3RyYW5zYWN0aW9uc19zdGF0dXNfbW9kYWxfdmlzaWJsZVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVzY3JpcHRvcjQgPSB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX2NyeXB0b190cmFuc2FjdGlvbnNfdmlzaWJsZVxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVzY3JpcHRvcjUgPSB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX2xvYWRpbmdcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbn0pLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3I2ID0gdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZWxlY3RlZF9jcnlwdG9fdHJhbnNhY3Rpb25faWRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuICcnO1xcbiAgfVxcbn0pLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2Rlc2NyaXB0b3I3ID0gdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZWxlY3RlZF9jcnlwdG9fc3RhdHVzXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiAnJztcXG4gIH1cXG59KSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZXNjcmlwdG9yOCA9IHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2VsZWN0ZWRfY3J5cHRvX3N0YXR1c19kZXNjcmlwdGlvblxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gJyc7XFxuICB9XFxufSksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25Nb3VudFxcXCIsIFt0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2RlY10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbk1vdW50XFxcIiksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJnZXRDcnlwdG9UcmFuc2FjdGlvbnNcXFwiLCBbdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMyXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImdldENyeXB0b1RyYW5zYWN0aW9uc1xcXCIpLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwidXBkYXRlQ3J5cHRvVHJhbnNhY3Rpb25zXFxcIiwgW3RyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjM10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJ1cGRhdGVDcnlwdG9UcmFuc2FjdGlvbnNcXFwiKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNvcnRDcnlwdG9UcmFuc2FjdGlvbnNcXFwiLCBbdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWM0XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNvcnRDcnlwdG9UcmFuc2FjdGlvbnNcXFwiKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNhbmNlbENyeXB0b1RyYW5zYWN0aW9uXFxcIiwgW3RyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjNV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJjYW5jZWxDcnlwdG9UcmFuc2FjdGlvblxcXCIpLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0U2VsZWN0ZWRDcnlwdG9UcmFuc2FjdGlvbklkXFxcIiwgW3RyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjNl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRTZWxlY3RlZENyeXB0b1RyYW5zYWN0aW9uSWRcXFwiKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldElzQ3J5cHRvVHJhbnNhY3Rpb25zQ2FuY2VsTW9kYWxWaXNpYmxlXFxcIiwgW3RyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjN10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc0NyeXB0b1RyYW5zYWN0aW9uc0NhbmNlbE1vZGFsVmlzaWJsZVxcXCIpLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2hvd0NyeXB0b1RyYW5zYWN0aW9uc0NhbmNlbE1vZGFsXFxcIiwgW3RyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjOF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzaG93Q3J5cHRvVHJhbnNhY3Rpb25zQ2FuY2VsTW9kYWxcXFwiKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImhpZGVDcnlwdG9UcmFuc2FjdGlvbnNDYW5jZWxNb2RhbFxcXCIsIFt0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2RlYzldLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaGlkZUNyeXB0b1RyYW5zYWN0aW9uc0NhbmNlbE1vZGFsXFxcIiksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRTZWxlY3RlZENyeXB0b1N0YXR1c1xcXCIsIFt0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2RlYzEwXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFNlbGVjdGVkQ3J5cHRvU3RhdHVzXFxcIiksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRTZWxlY3RlZENyeXB0b1N0YXR1c0Rlc2NyaXB0aW9uXFxcIiwgW3RyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjMTFdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0U2VsZWN0ZWRDcnlwdG9TdGF0dXNEZXNjcmlwdGlvblxcXCIpLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNTdGF0dXNNb2RhbFZpc2libGVcXFwiLCBbdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMxMl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc0NyeXB0b1RyYW5zYWN0aW9uc1N0YXR1c01vZGFsVmlzaWJsZVxcXCIpLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2hvd0NyeXB0b1RyYW5zYWN0aW9uc1N0YXR1c01vZGFsXFxcIiwgW3RyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfZGVjMTNdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2hvd0NyeXB0b1RyYW5zYWN0aW9uc1N0YXR1c01vZGFsXFxcIiksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJoaWRlQ3J5cHRvVHJhbnNhY3Rpb25zU3RhdHVzTW9kYWxcXFwiLCBbdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMxNF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJoaWRlQ3J5cHRvVHJhbnNhY3Rpb25zU3RhdHVzTW9kYWxcXFwiKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCB0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0cmFuc2FjdGlvbl9oaXN0b3J5X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldExvYWRpbmdcXFwiLCBbdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMxNV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRMb2FkaW5nXFxcIiksIHRyYW5zYWN0aW9uX2hpc3Rvcnlfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc0NyeXB0b1RyYW5zYWN0aW9uc1Zpc2libGVcXFwiLCBbdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9kZWMxNl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc0NyeXB0b1RyYW5zYWN0aW9uc1Zpc2libGVcXFwiKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcy5wcm90b3R5cGUpKSwgdHJhbnNhY3Rpb25faGlzdG9yeV9zdG9yZV9jbGFzcykpO1xcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL1N0b3Jlcy93aXRoZHJhdy1zdG9yZS5qc1xcbnZhciB3aXRoZHJhd19zdG9yZV9kZWMsIHdpdGhkcmF3X3N0b3JlX2RlYzIsIHdpdGhkcmF3X3N0b3JlX2RlYzMsIHdpdGhkcmF3X3N0b3JlX2RlYzQsIHdpdGhkcmF3X3N0b3JlX2RlYzUsIHdpdGhkcmF3X3N0b3JlX2RlYzYsIHdpdGhkcmF3X3N0b3JlX2RlYzcsIHdpdGhkcmF3X3N0b3JlX2RlYzgsIHdpdGhkcmF3X3N0b3JlX2RlYzksIHdpdGhkcmF3X3N0b3JlX2RlYzEwLCB3aXRoZHJhd19zdG9yZV9kZWMxMSwgd2l0aGRyYXdfc3RvcmVfZGVjMTIsIHdpdGhkcmF3X3N0b3JlX2RlYzEzLCB3aXRoZHJhd19zdG9yZV9kZWMxNCwgd2l0aGRyYXdfc3RvcmVfZGVjMTUsIHdpdGhkcmF3X3N0b3JlX2NsYXNzLCB3aXRoZHJhd19zdG9yZV9kZXNjcmlwdG9yLCB3aXRoZHJhd19zdG9yZV9kZXNjcmlwdG9yMiwgd2l0aGRyYXdfc3RvcmVfZGVzY3JpcHRvcjMsIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3I0LCB3aXRoZHJhd19zdG9yZV9kZXNjcmlwdG9yNSwgd2l0aGRyYXdfc3RvcmVfZGVzY3JpcHRvcjYsIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3I3LCB3aXRoZHJhd19zdG9yZV9kZXNjcmlwdG9yODtcXG5cXG5mdW5jdGlvbiB3aXRoZHJhd19zdG9yZV9hc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XFxuXFxuZnVuY3Rpb24gd2l0aGRyYXdfc3RvcmVfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgd2l0aGRyYXdfc3RvcmVfYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcXFwibmV4dFxcXCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IHdpdGhkcmF3X3N0b3JlX2FzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXFxcInRocm93XFxcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxcblxcbmZ1bmN0aW9uIHdpdGhkcmF3X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkgeyBpZiAoIWRlc2NyaXB0b3IpIHJldHVybjsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHsgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLCBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLCB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSwgdmFsdWU6IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDAgfSk7IH1cXG5cXG5mdW5jdGlvbiB3aXRoZHJhd19zdG9yZV9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcXFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXFxcIik7IH0gfVxcblxcbmZ1bmN0aW9uIHdpdGhkcmF3X3N0b3JlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXFxcInZhbHVlXFxcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiB3aXRoZHJhd19zdG9yZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIHdpdGhkcmF3X3N0b3JlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSB3aXRoZHJhd19zdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIHdpdGhkcmF3X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7IHZhciBkZXNjID0ge307IE9iamVjdC5rZXlzKGRlc2NyaXB0b3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBkZXNjW2tleV0gPSBkZXNjcmlwdG9yW2tleV07IH0pOyBkZXNjLmVudW1lcmFibGUgPSAhIWRlc2MuZW51bWVyYWJsZTsgZGVzYy5jb25maWd1cmFibGUgPSAhIWRlc2MuY29uZmlndXJhYmxlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjIHx8IGRlc2MuaW5pdGlhbGl6ZXIpIHsgZGVzYy53cml0YWJsZSA9IHRydWU7IH0gZGVzYyA9IGRlY29yYXRvcnMuc2xpY2UoKS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChkZXNjLCBkZWNvcmF0b3IpIHsgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5LCBkZXNjKSB8fCBkZXNjOyB9LCBkZXNjKTsgaWYgKGNvbnRleHQgJiYgZGVzYy5pbml0aWFsaXplciAhPT0gdm9pZCAwKSB7IGRlc2MudmFsdWUgPSBkZXNjLmluaXRpYWxpemVyID8gZGVzYy5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwOyBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkOyB9IGlmIChkZXNjLmluaXRpYWxpemVyID09PSB2b2lkIDApIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2MpOyBkZXNjID0gbnVsbDsgfSByZXR1cm4gZGVzYzsgfVxcblxcbmZ1bmN0aW9uIHdpdGhkcmF3X3N0b3JlX2luaXRpYWxpemVyV2FybmluZ0hlbHBlcihkZXNjcmlwdG9yLCBjb250ZXh0KSB7IHRocm93IG5ldyBFcnJvcignRGVjb3JhdGluZyBjbGFzcyBwcm9wZXJ0eSBmYWlsZWQuIFBsZWFzZSBlbnN1cmUgdGhhdCAnICsgJ3Byb3Bvc2FsLWNsYXNzLXByb3BlcnRpZXMgaXMgZW5hYmxlZCBhbmQgcnVucyBhZnRlciB0aGUgZGVjb3JhdG9ycyB0cmFuc2Zvcm0uJyk7IH1cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG52YXIgV2l0aGRyYXdTdG9yZSA9ICh3aXRoZHJhd19zdG9yZV9kZWMgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHdpdGhkcmF3X3N0b3JlX2RlYzIgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHdpdGhkcmF3X3N0b3JlX2RlYzMgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHdpdGhkcmF3X3N0b3JlX2RlYzQgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHdpdGhkcmF3X3N0b3JlX2RlYzUgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHdpdGhkcmF3X3N0b3JlX2RlYzYgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHdpdGhkcmF3X3N0b3JlX2RlYzcgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHdpdGhkcmF3X3N0b3JlX2RlYzggPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHdpdGhkcmF3X3N0b3JlX2RlYzkgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHdpdGhkcmF3X3N0b3JlX2RlYzEwID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCB3aXRoZHJhd19zdG9yZV9kZWMxMSA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgd2l0aGRyYXdfc3RvcmVfZGVjMTIgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsIHdpdGhkcmF3X3N0b3JlX2RlYzEzID0gZXh0ZXJuYWxfbW9ieF8uYWN0aW9uLmJvdW5kLCB3aXRoZHJhd19zdG9yZV9kZWMxNCA9IGV4dGVybmFsX21vYnhfLmFjdGlvbi5ib3VuZCwgd2l0aGRyYXdfc3RvcmVfZGVjMTUgPSBleHRlcm5hbF9tb2J4Xy5hY3Rpb24uYm91bmQsICh3aXRoZHJhd19zdG9yZV9jbGFzcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XFxuICBmdW5jdGlvbiBXaXRoZHJhd1N0b3JlKF9yZWYpIHtcXG4gICAgdmFyIFdTID0gX3JlZi5XUyxcXG4gICAgICAgIHJvb3Rfc3RvcmUgPSBfcmVmLnJvb3Rfc3RvcmU7XFxuXFxuICAgIHdpdGhkcmF3X3N0b3JlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhkcmF3U3RvcmUpO1xcblxcbiAgICB3aXRoZHJhd19zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJibG9ja2NoYWluX2FkZHJlc3NcXFwiLCB3aXRoZHJhd19zdG9yZV9kZXNjcmlwdG9yLCB0aGlzKTtcXG5cXG4gICAgd2l0aGRyYXdfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiY29udGFpbmVyXFxcIiwgd2l0aGRyYXdfc3RvcmVfZGVzY3JpcHRvcjIsIHRoaXMpO1xcblxcbiAgICB3aXRoZHJhd19zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJlcnJvclxcXCIsIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3IzLCB0aGlzKTtcXG5cXG4gICAgd2l0aGRyYXdfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiaXNfMTBrX3dpdGhkcmF3YWxfbGltaXRfcmVhY2hlZFxcXCIsIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3I0LCB0aGlzKTtcXG5cXG4gICAgd2l0aGRyYXdfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwiaXNfd2l0aGRyYXdfY29uZmlybWVkXFxcIiwgd2l0aGRyYXdfc3RvcmVfZGVzY3JpcHRvcjUsIHRoaXMpO1xcblxcbiAgICB3aXRoZHJhd19zdG9yZV9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRoaXMsIFxcXCJ2ZXJpZmljYXRpb25cXFwiLCB3aXRoZHJhd19zdG9yZV9kZXNjcmlwdG9yNiwgdGhpcyk7XFxuXFxuICAgIHdpdGhkcmF3X3N0b3JlX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXFxcIndpdGhkcmF3X2Ftb3VudFxcXCIsIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3I3LCB0aGlzKTtcXG5cXG4gICAgd2l0aGRyYXdfc3RvcmVfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcXFwibWF4X3dpdGhkcmF3X2Ftb3VudFxcXCIsIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3I4LCB0aGlzKTtcXG5cXG4gICAgdGhpcy5yb290X3N0b3JlID0gcm9vdF9zdG9yZTtcXG4gICAgdGhpcy5XUyA9IFdTO1xcbiAgfVxcblxcbiAgd2l0aGRyYXdfc3RvcmVfY3JlYXRlQ2xhc3MoV2l0aGRyYXdTdG9yZSwgW3tcXG4gICAga2V5OiBcXFwic2V0SXNXaXRoZHJhd0NvbmZpcm1lZFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc1dpdGhkcmF3Q29uZmlybWVkKGlzX3dpdGhkcmF3X2NvbmZpcm1lZCkge1xcbiAgICAgIHZhciBjb252ZXJ0ZXJfZnJvbV9hbW91bnQgPSB0aGlzLnJvb3Rfc3RvcmUubW9kdWxlcy5jYXNoaWVyLmNyeXB0b19maWF0X2NvbnZlcnRlci5jb252ZXJ0ZXJfZnJvbV9hbW91bnQ7XFxuICAgICAgdGhpcy5pc193aXRoZHJhd19jb25maXJtZWQgPSBpc193aXRoZHJhd19jb25maXJtZWQ7XFxuICAgICAgaWYgKGlzX3dpdGhkcmF3X2NvbmZpcm1lZCkgdGhpcy5zZXRXaXRoZHJhd0Ftb3VudChjb252ZXJ0ZXJfZnJvbV9hbW91bnQpO1xcblxcbiAgICAgIGlmICghaXNfd2l0aGRyYXdfY29uZmlybWVkICYmIHRoaXMudmVyaWZpY2F0aW9uKSB7XFxuICAgICAgICB0aGlzLnZlcmlmaWNhdGlvbi5jbGVhclZlcmlmaWNhdGlvbigpO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRXaXRoZHJhd0Ftb3VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRXaXRoZHJhd0Ftb3VudChhbW91bnQpIHtcXG4gICAgICB0aGlzLndpdGhkcmF3X2Ftb3VudCA9IGFtb3VudDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJyZXF1ZXN0V2l0aGRyYXdcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfcmVxdWVzdFdpdGhkcmF3ID0gd2l0aGRyYXdfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUodmVyaWZpY2F0aW9uX2NvZGUpIHtcXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSwgY2xpZW50LCBtb2R1bGVzLCBfbW9kdWxlcyRjYXNoaWVyLCBjcnlwdG9fZmlhdF9jb252ZXJ0ZXIsIGVycm9yX2RpYWxvZztcXG5cXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgX3RoaXMkcm9vdF9zdG9yZSA9IHRoaXMucm9vdF9zdG9yZSwgY2xpZW50ID0gX3RoaXMkcm9vdF9zdG9yZS5jbGllbnQsIG1vZHVsZXMgPSBfdGhpcyRyb290X3N0b3JlLm1vZHVsZXM7XFxuICAgICAgICAgICAgICAgIF9tb2R1bGVzJGNhc2hpZXIgPSBtb2R1bGVzLmNhc2hpZXIsIGNyeXB0b19maWF0X2NvbnZlcnRlciA9IF9tb2R1bGVzJGNhc2hpZXIuY3J5cHRvX2ZpYXRfY29udmVydGVyLCBlcnJvcl9kaWFsb2cgPSBfbW9kdWxlcyRjYXNoaWVyLmVycm9yX2RpYWxvZztcXG5cXG4gICAgICAgICAgICAgICAgaWYgKGNsaWVudC5pc19sb2dnZWRfaW4pIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDtcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFxcXCJyZXR1cm5cXFwiKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNDpcXG4gICAgICAgICAgICAgICAgaWYgKGNyeXB0b19maWF0X2NvbnZlcnRlci5jb252ZXJ0ZXJfZnJvbV9hbW91bnQpIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNztcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBjcnlwdG9fZmlhdF9jb252ZXJ0ZXIuc2V0Q29udmVydGVyRnJvbUVycm9yKCgwLHRyYW5zbGF0aW9uc18ubG9jYWxpemUpKCdUaGlzIGZpZWxkIGlzIHJlcXVpcmVkLicpKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcXFwicmV0dXJuXFxcIik7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDc6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XUy5jcnlwdG9XaXRoZHJhdyh7XFxuICAgICAgICAgICAgICAgICAgYWRkcmVzczogdGhpcy5ibG9ja2NoYWluX2FkZHJlc3MsXFxuICAgICAgICAgICAgICAgICAgYW1vdW50OiArY3J5cHRvX2ZpYXRfY29udmVydGVyLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCxcXG4gICAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25fY29kZTogdmVyaWZpY2F0aW9uX2NvZGUsXFxuICAgICAgICAgICAgICAgICAgZHJ5X3J1bjogMVxcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xcbiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JfZGlhbG9nLnNldEVycm9yTWVzc2FnZShyZXNwb25zZS5lcnJvci5tZXNzYWdlKTtcXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2F2ZVdpdGhkcmF3KHZlcmlmaWNhdGlvbl9jb2RlKTtcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA5OlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiByZXF1ZXN0V2l0aGRyYXcoX3gpIHtcXG4gICAgICAgIHJldHVybiBfcmVxdWVzdFdpdGhkcmF3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiByZXF1ZXN0V2l0aGRyYXc7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzYXZlV2l0aGRyYXdcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfc2F2ZVdpdGhkcmF3ID0gd2l0aGRyYXdfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHZlcmlmaWNhdGlvbl9jb2RlKSB7XFxuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgICAgIHZhciBjb252ZXJ0ZXJfZnJvbV9hbW91bnQ7XFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBjb252ZXJ0ZXJfZnJvbV9hbW91bnQgPSB0aGlzLnJvb3Rfc3RvcmUubW9kdWxlcy5jYXNoaWVyLmNyeXB0b19maWF0X2NvbnZlcnRlci5jb252ZXJ0ZXJfZnJvbV9hbW91bnQ7XFxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3Iuc2V0RXJyb3JNZXNzYWdlKCcnKTtcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XUy5jcnlwdG9XaXRoZHJhdyh7XFxuICAgICAgICAgICAgICAgICAgYWRkcmVzczogdGhpcy5ibG9ja2NoYWluX2FkZHJlc3MsXFxuICAgICAgICAgICAgICAgICAgYW1vdW50OiArY29udmVydGVyX2Zyb21fYW1vdW50LFxcbiAgICAgICAgICAgICAgICAgIHZlcmlmaWNhdGlvbl9jb2RlOiB2ZXJpZmljYXRpb25fY29kZVxcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xcbiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmVycm9yLnNldEVycm9yTWVzc2FnZShyZXNwb25zZS5lcnJvcik7XFxuXFxuICAgICAgICAgICAgICAgICAgICBpZiAodmVyaWZpY2F0aW9uX2NvZGUpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gY2xlYXIgdmVyaWZpY2F0aW9uIGNvZGUgb24gZXJyb3JcXG4gICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnZlcmlmaWNhdGlvbi5jbGVhclZlcmlmaWNhdGlvbigpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnJlc2V0V2l0aHJhd0Zvcm0oKTtcXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnNldElzV2l0aGRyYXdDb25maXJtZWQodHJ1ZSk7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNDpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBzYXZlV2l0aGRyYXcoX3gyKSB7XFxuICAgICAgICByZXR1cm4gX3NhdmVXaXRoZHJhdy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gc2F2ZVdpdGhkcmF3O1xcbiAgICB9KClcXG4gIH0sIHtcXG4gICAga2V5OiBcXFwicmVzZXRXaXRocmF3Rm9ybVxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldFdpdGhyYXdGb3JtKCkge1xcbiAgICAgIHZhciBfdGhpcyRyb290X3N0b3JlJG1vZHUgPSB0aGlzLnJvb3Rfc3RvcmUubW9kdWxlcy5jYXNoaWVyLmNyeXB0b19maWF0X2NvbnZlcnRlcixcXG4gICAgICAgICAgc2V0Q29udmVydGVyRnJvbUFtb3VudCA9IF90aGlzJHJvb3Rfc3RvcmUkbW9kdS5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50LFxcbiAgICAgICAgICBzZXRDb252ZXJ0ZXJUb0Ftb3VudCA9IF90aGlzJHJvb3Rfc3RvcmUkbW9kdS5zZXRDb252ZXJ0ZXJUb0Ftb3VudDtcXG4gICAgICB0aGlzLnNldEJsb2NrY2hhaW5BZGRyZXNzKCcnKTtcXG4gICAgICBzZXRDb252ZXJ0ZXJGcm9tQW1vdW50KCcnKTtcXG4gICAgICBzZXRDb252ZXJ0ZXJUb0Ftb3VudCgnJyk7XFxuICAgICAgdGhpcy52ZXJpZmljYXRpb24uY2xlYXJWZXJpZmljYXRpb24oKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJzZXRCbG9ja2NoYWluQWRkcmVzc1xcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRCbG9ja2NoYWluQWRkcmVzcyhhZGRyZXNzKSB7XFxuICAgICAgdGhpcy5ibG9ja2NoYWluX2FkZHJlc3MgPSBhZGRyZXNzO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcIndpbGxNb3VudFdpdGhkcmF3XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdpbGxNb3VudFdpdGhkcmF3KHZlcmlmaWNhdGlvbl9jb2RlKSB7XFxuICAgICAgaWYgKHZlcmlmaWNhdGlvbl9jb2RlKSB7XFxuICAgICAgICB0aGlzLnZlcmlmaWNhdGlvbi5jbGVhclZlcmlmaWNhdGlvbigpO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJvbk1vdW50V2l0aGRyYXdcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfb25Nb3VudFdpdGhkcmF3ID0gd2l0aGRyYXdfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKHZlcmlmaWNhdGlvbl9jb2RlKSB7XFxuICAgICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZTIsIGNsaWVudCwgbW9kdWxlcywgX21vZHVsZXMkY2FzaGllciRnZW5lLCBhY3RpdmVfY29udGFpbmVyLCBpc19jcnlwdG8sIG9uTW91bnRDb21tb24sIHNldExvYWRpbmcsIHNldE9uUmVtb3VudCwgX21vZHVsZXMkY2FzaGllciRpZnJhLCBjaGVja0lmcmFtZUxvYWRlZCwgY2xlYXJUaW1lb3V0Q2FzaGllclVybCwgY2xlYXJJZnJhbWUsIGlzX3Nlc3Npb25fdGltZW91dCwgc2V0Q29udGFpbmVySGVpZ2h0LCBzZXRJZnJhbWVVcmwsIHNldFNlc3Npb25UaW1lb3V0LCBzZXRUaW1lb3V0Q2FzaGllclVybCwgaXNfdmlydHVhbCwgY3VycmVudF9jb250YWluZXIsIHJlc3BvbnNlX2Nhc2hpZXI7XFxuXFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBfdGhpcyRyb290X3N0b3JlMiA9IHRoaXMucm9vdF9zdG9yZSwgY2xpZW50ID0gX3RoaXMkcm9vdF9zdG9yZTIuY2xpZW50LCBtb2R1bGVzID0gX3RoaXMkcm9vdF9zdG9yZTIubW9kdWxlcztcXG4gICAgICAgICAgICAgICAgX21vZHVsZXMkY2FzaGllciRnZW5lID0gbW9kdWxlcy5jYXNoaWVyLmdlbmVyYWxfc3RvcmUsIGFjdGl2ZV9jb250YWluZXIgPSBfbW9kdWxlcyRjYXNoaWVyJGdlbmUuYWN0aXZlX2NvbnRhaW5lciwgaXNfY3J5cHRvID0gX21vZHVsZXMkY2FzaGllciRnZW5lLmlzX2NyeXB0bywgb25Nb3VudENvbW1vbiA9IF9tb2R1bGVzJGNhc2hpZXIkZ2VuZS5vbk1vdW50Q29tbW9uLCBzZXRMb2FkaW5nID0gX21vZHVsZXMkY2FzaGllciRnZW5lLnNldExvYWRpbmcsIHNldE9uUmVtb3VudCA9IF9tb2R1bGVzJGNhc2hpZXIkZ2VuZS5zZXRPblJlbW91bnQ7XFxuICAgICAgICAgICAgICAgIF9tb2R1bGVzJGNhc2hpZXIkaWZyYSA9IG1vZHVsZXMuY2FzaGllci5pZnJhbWUsIGNoZWNrSWZyYW1lTG9hZGVkID0gX21vZHVsZXMkY2FzaGllciRpZnJhLmNoZWNrSWZyYW1lTG9hZGVkLCBjbGVhclRpbWVvdXRDYXNoaWVyVXJsID0gX21vZHVsZXMkY2FzaGllciRpZnJhLmNsZWFyVGltZW91dENhc2hpZXJVcmwsIGNsZWFySWZyYW1lID0gX21vZHVsZXMkY2FzaGllciRpZnJhLmNsZWFySWZyYW1lLCBpc19zZXNzaW9uX3RpbWVvdXQgPSBfbW9kdWxlcyRjYXNoaWVyJGlmcmEuaXNfc2Vzc2lvbl90aW1lb3V0LCBzZXRDb250YWluZXJIZWlnaHQgPSBfbW9kdWxlcyRjYXNoaWVyJGlmcmEuc2V0Q29udGFpbmVySGVpZ2h0LCBzZXRJZnJhbWVVcmwgPSBfbW9kdWxlcyRjYXNoaWVyJGlmcmEuc2V0SWZyYW1lVXJsLCBzZXRTZXNzaW9uVGltZW91dCA9IF9tb2R1bGVzJGNhc2hpZXIkaWZyYS5zZXRTZXNzaW9uVGltZW91dCwgc2V0VGltZW91dENhc2hpZXJVcmwgPSBfbW9kdWxlcyRjYXNoaWVyJGlmcmEuc2V0VGltZW91dENhc2hpZXJVcmw7XFxuICAgICAgICAgICAgICAgIGlzX3ZpcnR1YWwgPSBjbGllbnQuaXNfdmlydHVhbDtcXG4gICAgICAgICAgICAgICAgY3VycmVudF9jb250YWluZXIgPSBhY3RpdmVfY29udGFpbmVyO1xcbiAgICAgICAgICAgICAgICBzZXRPblJlbW91bnQodGhpcy5vbk1vdW50V2l0aGRyYXcpO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDg7XFxuICAgICAgICAgICAgICAgIHJldHVybiBvbk1vdW50Q29tbW9uKCk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDg6XFxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3Iuc2V0RXJyb3JNZXNzYWdlKCcnKTtcXG4gICAgICAgICAgICAgICAgc2V0Q29udGFpbmVySGVpZ2h0KDApO1xcbiAgICAgICAgICAgICAgICBjbGVhcklmcmFtZSgpO1xcbiAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoaXNfc2Vzc2lvbl90aW1lb3V0KSB7XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxNTtcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBjaGVja0lmcmFtZUxvYWRlZCgpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdChcXFwicmV0dXJuXFxcIik7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDE1OlxcbiAgICAgICAgICAgICAgICAvLyBpZiBzZXNzaW9uIGhhcyB0aW1lZCBvdXQgcmVzZXQgZXZlcnl0aGluZ1xcbiAgICAgICAgICAgICAgICBzZXRJZnJhbWVVcmwoJycpO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoISghdmVyaWZpY2F0aW9uX2NvZGUgfHwgaXNfdmlydHVhbCkpIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDE5O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpOyAvLyBpZiB2aXJ0dWFsLCBjbGVhciBldmVyeXRoaW5nIGFuZCBkb24ndCBwcm9jZWVkIGZ1cnRoZXJcXG4gICAgICAgICAgICAgICAgLy8gaWYgbm8gdmVyaWZpY2F0aW9uIGNvZGUsIHdlIHNob3VsZCByZXF1ZXN0IGFnYWluXFxuXFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KFxcXCJyZXR1cm5cXFwiKTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTk6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjE7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLldTLmF1dGhvcml6ZWQuY2FzaGllcihhY3RpdmVfY29udGFpbmVyLCB7XFxuICAgICAgICAgICAgICAgICAgdmVyaWZpY2F0aW9uX2NvZGU6IHZlcmlmaWNhdGlvbl9jb2RlXFxuICAgICAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAyMTpcXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VfY2FzaGllciA9IF9jb250ZXh0My5zZW50O1xcblxcbiAgICAgICAgICAgICAgICBpZiAoIShjdXJyZW50X2NvbnRhaW5lciAhPT0gYWN0aXZlX2NvbnRhaW5lcikpIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI1O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdChcXFwicmV0dXJuXFxcIik7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDI1OlxcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlX2Nhc2hpZXIuZXJyb3IpIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDMzO1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuaGFuZGxlQ2FzaGllckVycm9yKHJlc3BvbnNlX2Nhc2hpZXIuZXJyb3IpO1xcbiAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgc2V0U2Vzc2lvblRpbWVvdXQodHJ1ZSk7XFxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dENhc2hpZXJVcmwoKTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKHZlcmlmaWNhdGlvbl9jb2RlKSB7XFxuICAgICAgICAgICAgICAgICAgLy8gY2xlYXIgdmVyaWZpY2F0aW9uIGNvZGUgb24gZXJyb3JcXG4gICAgICAgICAgICAgICAgICB0aGlzLnZlcmlmaWNhdGlvbi5jbGVhclZlcmlmaWNhdGlvbigpO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDM7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAzMzpcXG4gICAgICAgICAgICAgICAgaWYgKCFpc19jcnlwdG8pIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM3O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDQzO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMzc6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMzk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBjaGVja0lmcmFtZUxvYWRlZCgpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAzOTpcXG4gICAgICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XFxuICAgICAgICAgICAgICAgIHNldElmcmFtZVVybChyZXNwb25zZV9jYXNoaWVyLmNhc2hpZXIpO1xcbiAgICAgICAgICAgICAgICBzZXRTZXNzaW9uVGltZW91dChmYWxzZSk7XFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXRDYXNoaWVyVXJsKCk7XFxuXFxuICAgICAgICAgICAgICBjYXNlIDQzOlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBfY2FsbGVlMywgdGhpcyk7XFxuICAgICAgfSkpO1xcblxcbiAgICAgIGZ1bmN0aW9uIG9uTW91bnRXaXRoZHJhdyhfeDMpIHtcXG4gICAgICAgIHJldHVybiBfb25Nb3VudFdpdGhkcmF3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBvbk1vdW50V2l0aGRyYXc7XFxuICAgIH0oKVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJvbk1vdW50Q3J5cHRvV2l0aGRyYXdcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfb25Nb3VudENyeXB0b1dpdGhkcmF3ID0gd2l0aGRyYXdfc3RvcmVfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KHZlcmlmaWNhdGlvbl9jb2RlKSB7XFxuICAgICAgICB2YXIgX3RoaXMkcm9vdF9zdG9yZSRtb2R1MiwgY3J5cHRvX2ZpYXRfY29udmVydGVyLCBnZW5lcmFsX3N0b3JlLCBpZnJhbWUsIHN0cl9yZWdfZXhwLCByZXNwb25zZV9jYXNoaWVyO1xcblxcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgX3RoaXMkcm9vdF9zdG9yZSRtb2R1MiA9IHRoaXMucm9vdF9zdG9yZS5tb2R1bGVzLmNhc2hpZXIsIGNyeXB0b19maWF0X2NvbnZlcnRlciA9IF90aGlzJHJvb3Rfc3RvcmUkbW9kdTIuY3J5cHRvX2ZpYXRfY29udmVydGVyLCBnZW5lcmFsX3N0b3JlID0gX3RoaXMkcm9vdF9zdG9yZSRtb2R1Mi5nZW5lcmFsX3N0b3JlLCBpZnJhbWUgPSBfdGhpcyRyb290X3N0b3JlJG1vZHUyLmlmcmFtZTtcXG4gICAgICAgICAgICAgICAgZ2VuZXJhbF9zdG9yZS5zZXRMb2FkaW5nKHRydWUpO1xcbiAgICAgICAgICAgICAgICBzdHJfcmVnX2V4cCA9IC9eXFxcXHd7OCwxMjh9JC87XFxuXFxuICAgICAgICAgICAgICAgIGlmICghc3RyX3JlZ19leHAudGVzdCh2ZXJpZmljYXRpb25fY29kZSkpIHtcXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDk7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA2O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XUy5jcnlwdG9XaXRoZHJhdyh7XFxuICAgICAgICAgICAgICAgICAgYWRkcmVzczogdGhpcy5ibG9ja2NoYWluX2FkZHJlc3MsXFxuICAgICAgICAgICAgICAgICAgYW1vdW50OiArY3J5cHRvX2ZpYXRfY29udmVydGVyLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCxcXG4gICAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25fY29kZTogdmVyaWZpY2F0aW9uX2NvZGUsXFxuICAgICAgICAgICAgICAgICAgZHJ5X3J1bjogMVxcbiAgICAgICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNjpcXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VfY2FzaGllciA9IF9jb250ZXh0NC5zZW50O1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDEwO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgICAgIGNhc2UgOTpcXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VfY2FzaGllciA9IHtcXG4gICAgICAgICAgICAgICAgICBlcnJvcjoge1xcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ0ludmFsaWRUb2tlbicsXFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnWW91ciB0b2tlbiBoYXMgZXhwaXJlZCBvciBpcyBpbnZhbGlkLidcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH07XFxuXFxuICAgICAgICAgICAgICBjYXNlIDEwOlxcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VfY2FzaGllci5lcnJvci5jb2RlID09PSAnSW52YWxpZFRva2VuJykge1xcbiAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuaGFuZGxlQ2FzaGllckVycm9yKHJlc3BvbnNlX2Nhc2hpZXIuZXJyb3IpO1xcbiAgICAgICAgICAgICAgICAgIGdlbmVyYWxfc3RvcmUuc2V0TG9hZGluZyhmYWxzZSk7XFxuICAgICAgICAgICAgICAgICAgaWZyYW1lLnNldFNlc3Npb25UaW1lb3V0KHRydWUpO1xcbiAgICAgICAgICAgICAgICAgIGlmcmFtZS5jbGVhclRpbWVvdXRDYXNoaWVyVXJsKCk7XFxuXFxuICAgICAgICAgICAgICAgICAgaWYgKHZlcmlmaWNhdGlvbl9jb2RlKSB7XFxuICAgICAgICAgICAgICAgICAgICAvLyBjbGVhciB2ZXJpZmljYXRpb24gY29kZSBvbiBlcnJvclxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52ZXJpZmljYXRpb24uY2xlYXJWZXJpZmljYXRpb24oKTtcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgZ2VuZXJhbF9zdG9yZS5zZXRMb2FkaW5nKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgY2FzZSAxMTpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTQsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBvbk1vdW50Q3J5cHRvV2l0aGRyYXcoX3g0KSB7XFxuICAgICAgICByZXR1cm4gX29uTW91bnRDcnlwdG9XaXRoZHJhdy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gb25Nb3VudENyeXB0b1dpdGhkcmF3O1xcbiAgICB9KClcXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiaXNfd2l0aGRyYXdhbF9sb2NrZWRcXFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICB2YXIgX2NsaWVudCRhY2NvdW50X3N0YXR1O1xcblxcbiAgICAgIHZhciBjbGllbnQgPSB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50O1xcbiAgICAgIHZhciBhdXRoZW50aWNhdGlvbiA9IGNsaWVudC5hY2NvdW50X3N0YXR1cy5hdXRoZW50aWNhdGlvbjtcXG4gICAgICBpZiAoISgoX2NsaWVudCRhY2NvdW50X3N0YXR1ID0gY2xpZW50LmFjY291bnRfc3RhdHVzKSAhPT0gbnVsbCAmJiBfY2xpZW50JGFjY291bnRfc3RhdHUgIT09IHZvaWQgMCAmJiBfY2xpZW50JGFjY291bnRfc3RhdHUuc3RhdHVzKSkgcmV0dXJuIGZhbHNlO1xcbiAgICAgIHZhciBuZWVkX3BvaSA9IGF1dGhlbnRpY2F0aW9uLm5lZWRzX3ZlcmlmaWNhdGlvbi5pbmNsdWRlcygnaWRlbnRpdHknKTtcXG4gICAgICB2YXIgbmVlZF9hdXRoZW50aWNhdGlvbiA9IHRoaXMuZXJyb3IuaXNfYXNrX2F1dGhlbnRpY2F0aW9uICYmIG5lZWRfcG9pO1xcbiAgICAgIHJldHVybiBjbGllbnQuaXNfd2l0aGRyYXdhbF9sb2NrIHx8IG5lZWRfYXV0aGVudGljYXRpb24gfHwgdGhpcy5lcnJvci5pc19hc2tfZmluYW5jaWFsX3Jpc2tfYXBwcm92YWw7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0TWF4V2l0aGRyYXdBbW91bnRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TWF4V2l0aGRyYXdBbW91bnQoYW1vdW50KSB7XFxuICAgICAgdGhpcy5tYXhfd2l0aGRyYXdfYW1vdW50ID0gYW1vdW50O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImNoZWNrMTBrTGltaXRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfY2hlY2sxMGtMaW1pdCA9IHdpdGhkcmF3X3N0b3JlX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHtcXG4gICAgICAgIHZhciBfeWllbGQkY2xpZW50JGdldExpbWksIF95aWVsZCRjbGllbnQkZ2V0TGltaTI7XFxuXFxuICAgICAgICB2YXIgY2xpZW50LCByZW1haW5kZXIsIG1pbl93aXRoZHJhd2FsLCBpc19saW1pdF9yZWFjaGVkO1xcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHtcXG4gICAgICAgICAgd2hpbGUgKDEpIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHtcXG4gICAgICAgICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgICAgICAgY2xpZW50ID0gdGhpcy5yb290X3N0b3JlLmNsaWVudDtcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAzO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmdldExpbWl0cygpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAzOlxcbiAgICAgICAgICAgICAgICBfY29udGV4dDUudDEgPSBfeWllbGQkY2xpZW50JGdldExpbWkgPSBfY29udGV4dDUuc2VudDtcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQ1LnQwID0gX2NvbnRleHQ1LnQxID09PSBudWxsO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoX2NvbnRleHQ1LnQwKSB7XFxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSA3O1xcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIF9jb250ZXh0NS50MCA9IF95aWVsZCRjbGllbnQkZ2V0TGltaSA9PT0gdm9pZCAwO1xcblxcbiAgICAgICAgICAgICAgY2FzZSA3OlxcbiAgICAgICAgICAgICAgICBpZiAoIV9jb250ZXh0NS50MCkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTE7XFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgX2NvbnRleHQ1LnQyID0gdm9pZCAwO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDEyO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMTE6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0NS50MiA9IChfeWllbGQkY2xpZW50JGdldExpbWkyID0gX3lpZWxkJGNsaWVudCRnZXRMaW1pLmdldF9saW1pdHMpID09PSBudWxsIHx8IF95aWVsZCRjbGllbnQkZ2V0TGltaTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF95aWVsZCRjbGllbnQkZ2V0TGltaTIucmVtYWluZGVyO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAxMjpcXG4gICAgICAgICAgICAgICAgcmVtYWluZGVyID0gX2NvbnRleHQ1LnQyO1xcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1heFdpdGhkcmF3QW1vdW50KHJlbWFpbmRlcik7XFxuICAgICAgICAgICAgICAgIG1pbl93aXRoZHJhd2FsID0gKDAsc2hhcmVkXy5nZXRNaW5XaXRoZHJhd2FsKShjbGllbnQuY3VycmVuY3kpO1xcbiAgICAgICAgICAgICAgICBpc19saW1pdF9yZWFjaGVkID0gISEodHlwZW9mIHJlbWFpbmRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgK3JlbWFpbmRlciA8IG1pbl93aXRoZHJhd2FsKTtcXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQxMGtMaW1pdGF0aW9uKGlzX2xpbWl0X3JlYWNoZWQpO1xcblxcbiAgICAgICAgICAgICAgY2FzZSAxNzpcXG4gICAgICAgICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTUsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBjaGVjazEwa0xpbWl0KCkge1xcbiAgICAgICAgcmV0dXJuIF9jaGVjazEwa0xpbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBjaGVjazEwa0xpbWl0O1xcbiAgICB9KClcXG4gIH0sIHtcXG4gICAga2V5OiBcXFwic2V0MTBrTGltaXRhdGlvblxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQxMGtMaW1pdGF0aW9uKGlzX2xpbWl0X3JlYWNoZWQpIHtcXG4gICAgICB0aGlzLmlzXzEwa193aXRoZHJhd2FsX2xpbWl0X3JlYWNoZWQgPSBpc19saW1pdF9yZWFjaGVkO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInNldFdpdGhkcmF3UGVyY2VudGFnZVNlbGVjdG9yUmVzdWx0XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFdpdGhkcmF3UGVyY2VudGFnZVNlbGVjdG9yUmVzdWx0KGFtb3VudCkge1xcbiAgICAgIHZhciBfdGhpcyRyb290X3N0b3JlMyA9IHRoaXMucm9vdF9zdG9yZSxcXG4gICAgICAgICAgY2xpZW50ID0gX3RoaXMkcm9vdF9zdG9yZTMuY2xpZW50LFxcbiAgICAgICAgICBtb2R1bGVzID0gX3RoaXMkcm9vdF9zdG9yZTMubW9kdWxlcztcXG4gICAgICB2YXIgX21vZHVsZXMkY2FzaGllcjIgPSBtb2R1bGVzLmNhc2hpZXIsXFxuICAgICAgICAgIGNyeXB0b19maWF0X2NvbnZlcnRlciA9IF9tb2R1bGVzJGNhc2hpZXIyLmNyeXB0b19maWF0X2NvbnZlcnRlcixcXG4gICAgICAgICAgZ2VuZXJhbF9zdG9yZSA9IF9tb2R1bGVzJGNhc2hpZXIyLmdlbmVyYWxfc3RvcmU7XFxuICAgICAgdmFyIGN1cnJlbmN5ID0gY2xpZW50LmN1cnJlbmN5LFxcbiAgICAgICAgICBjdXJyZW50X2ZpYXRfY3VycmVuY3kgPSBjbGllbnQuY3VycmVudF9maWF0X2N1cnJlbmN5O1xcblxcbiAgICAgIGlmIChhbW91bnQgPiAwKSB7XFxuICAgICAgICBjcnlwdG9fZmlhdF9jb252ZXJ0ZXIuc2V0Q29udmVydGVyRnJvbUFtb3VudChhbW91bnQpO1xcbiAgICAgICAgdGhpcy52YWxpZGF0ZVdpdGhkcmF3RnJvbUFtb3VudCgpO1xcbiAgICAgICAgY3J5cHRvX2ZpYXRfY29udmVydGVyLm9uQ2hhbmdlQ29udmVydGVyRnJvbUFtb3VudCh7XFxuICAgICAgICAgIHRhcmdldDoge1xcbiAgICAgICAgICAgIHZhbHVlOiBhbW91bnRcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgY3VycmVuY3ksIGN1cnJlbnRfZmlhdF9jdXJyZW5jeSB8fCAnVVNEJyk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIGNyeXB0b19maWF0X2NvbnZlcnRlci5yZXNldENvbnZlcnRlcigpO1xcbiAgICAgIH1cXG5cXG4gICAgICBjcnlwdG9fZmlhdF9jb252ZXJ0ZXIuc2V0SXNUaW1lclZpc2libGUoZmFsc2UpO1xcbiAgICAgIGdlbmVyYWxfc3RvcmUucGVyY2VudGFnZVNlbGVjdG9yU2VsZWN0aW9uU3RhdHVzKGZhbHNlKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJ2YWxpZGF0ZVdpdGhkcmF3RnJvbUFtb3VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZVdpdGhkcmF3RnJvbUFtb3VudCgpIHtcXG4gICAgICB2YXIgZXJyb3JfbWVzc2FnZSA9ICcnO1xcbiAgICAgIHZhciBfdGhpcyRyb290X3N0b3JlNCA9IHRoaXMucm9vdF9zdG9yZSxcXG4gICAgICAgICAgY2xpZW50ID0gX3RoaXMkcm9vdF9zdG9yZTQuY2xpZW50LFxcbiAgICAgICAgICBtb2R1bGVzID0gX3RoaXMkcm9vdF9zdG9yZTQubW9kdWxlcztcXG4gICAgICB2YXIgYmFsYW5jZSA9IGNsaWVudC5iYWxhbmNlLFxcbiAgICAgICAgICBjdXJyZW5jeSA9IGNsaWVudC5jdXJyZW5jeSxcXG4gICAgICAgICAgd2Vic2l0ZV9zdGF0dXMgPSBjbGllbnQud2Vic2l0ZV9zdGF0dXM7XFxuICAgICAgdmFyIF9tb2R1bGVzJGNhc2hpZXIkY3J5cCA9IG1vZHVsZXMuY2FzaGllci5jcnlwdG9fZmlhdF9jb252ZXJ0ZXIsXFxuICAgICAgICAgIGNvbnZlcnRlcl9mcm9tX2Ftb3VudCA9IF9tb2R1bGVzJGNhc2hpZXIkY3J5cC5jb252ZXJ0ZXJfZnJvbV9hbW91bnQsXFxuICAgICAgICAgIHNldENvbnZlcnRlckZyb21FcnJvciA9IF9tb2R1bGVzJGNhc2hpZXIkY3J5cC5zZXRDb252ZXJ0ZXJGcm9tRXJyb3I7XFxuICAgICAgdmFyIG1pbl93aXRoZHJhd19hbW91bnQgPSB3ZWJzaXRlX3N0YXR1cy5jcnlwdG9fY29uZmlnW2N1cnJlbmN5XS5taW5pbXVtX3dpdGhkcmF3YWw7XFxuICAgICAgdmFyIG1heF93aXRoZHJhd19hbW91bnQgPSArdGhpcy5tYXhfd2l0aGRyYXdfYW1vdW50ID4gK2JhbGFuY2UgPyArYmFsYW5jZSA6ICt0aGlzLm1heF93aXRoZHJhd19hbW91bnQ7XFxuXFxuICAgICAgaWYgKGNvbnZlcnRlcl9mcm9tX2Ftb3VudCkge1xcbiAgICAgICAgdmFyIF92YWxpZE51bWJlciA9ICgwLHNoYXJlZF8udmFsaWROdW1iZXIpKGNvbnZlcnRlcl9mcm9tX2Ftb3VudCwge1xcbiAgICAgICAgICB0eXBlOiAnZmxvYXQnLFxcbiAgICAgICAgICBkZWNpbWFsczogKDAsc2hhcmVkXy5nZXREZWNpbWFsUGxhY2VzKShjdXJyZW5jeSlcXG4gICAgICAgIH0pLFxcbiAgICAgICAgICAgIGlzX29rID0gX3ZhbGlkTnVtYmVyLmlzX29rLFxcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBfdmFsaWROdW1iZXIubWVzc2FnZTtcXG5cXG4gICAgICAgIGlmICghaXNfb2spIGVycm9yX21lc3NhZ2UgPSBtZXNzYWdlO1xcbiAgICAgICAgaWYgKCtiYWxhbmNlIDwgK2NvbnZlcnRlcl9mcm9tX2Ftb3VudCkgZXJyb3JfbWVzc2FnZSA9ICgwLHRyYW5zbGF0aW9uc18ubG9jYWxpemUpKCdJbnN1ZmZpY2llbnQgZnVuZHMnKTtcXG5cXG4gICAgICAgIGlmICgrY29udmVydGVyX2Zyb21fYW1vdW50IDwgK21pbl93aXRoZHJhd19hbW91bnQgfHwgK2NvbnZlcnRlcl9mcm9tX2Ftb3VudCA+ICttYXhfd2l0aGRyYXdfYW1vdW50KSB7XFxuICAgICAgICAgIGVycm9yX21lc3NhZ2UgPSAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQodHJhbnNsYXRpb25zXy5Mb2NhbGl6ZSwge1xcbiAgICAgICAgICAgIGkxOG5fZGVmYXVsdF90ZXh0OiBcXFwiVGhlIGFsbG93ZWQgd2l0aGRyYXcgYW1vdW50IGlzIHt7bWluX3dpdGhkcmF3X2Ftb3VudH19IHRvIHt7bWF4X3dpdGhkcmF3X2Ftb3VudH19IHt7Y3VycmVuY3l9fVxcXCIsXFxuICAgICAgICAgICAgdmFsdWVzOiB7XFxuICAgICAgICAgICAgICBtaW5fd2l0aGRyYXdfYW1vdW50OiBtaW5fd2l0aGRyYXdfYW1vdW50LFxcbiAgICAgICAgICAgICAgbWF4X3dpdGhkcmF3X2Ftb3VudDogbWF4X3dpdGhkcmF3X2Ftb3VudCxcXG4gICAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgfVxcblxcbiAgICAgIHNldENvbnZlcnRlckZyb21FcnJvcihlcnJvcl9tZXNzYWdlKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJ2YWxpZGF0ZVdpdGhkcmF3VG9BbW91bnRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVXaXRoZHJhd1RvQW1vdW50KCkge1xcbiAgICAgIHZhciBlcnJvcl9tZXNzYWdlID0gJyc7XFxuICAgICAgdmFyIF90aGlzJHJvb3Rfc3RvcmU1ID0gdGhpcy5yb290X3N0b3JlLFxcbiAgICAgICAgICBjbGllbnQgPSBfdGhpcyRyb290X3N0b3JlNS5jbGllbnQsXFxuICAgICAgICAgIG1vZHVsZXMgPSBfdGhpcyRyb290X3N0b3JlNS5tb2R1bGVzO1xcbiAgICAgIHZhciBjdXJyZW50X2ZpYXRfY3VycmVuY3kgPSBjbGllbnQuY3VycmVudF9maWF0X2N1cnJlbmN5O1xcbiAgICAgIHZhciBfbW9kdWxlcyRjYXNoaWVyJGNyeXAyID0gbW9kdWxlcy5jYXNoaWVyLmNyeXB0b19maWF0X2NvbnZlcnRlcixcXG4gICAgICAgICAgY29udmVydGVyX3RvX2Ftb3VudCA9IF9tb2R1bGVzJGNhc2hpZXIkY3J5cDIuY29udmVydGVyX3RvX2Ftb3VudCxcXG4gICAgICAgICAgc2V0Q29udmVydGVyVG9FcnJvciA9IF9tb2R1bGVzJGNhc2hpZXIkY3J5cDIuc2V0Q29udmVydGVyVG9FcnJvcjtcXG5cXG4gICAgICBpZiAoY29udmVydGVyX3RvX2Ftb3VudCkge1xcbiAgICAgICAgdmFyIF92YWxpZE51bWJlcjIgPSAoMCxzaGFyZWRfLnZhbGlkTnVtYmVyKShjb252ZXJ0ZXJfdG9fYW1vdW50LCB7XFxuICAgICAgICAgIHR5cGU6ICdmbG9hdCcsXFxuICAgICAgICAgIGRlY2ltYWxzOiAoMCxzaGFyZWRfLmdldERlY2ltYWxQbGFjZXMpKGN1cnJlbnRfZmlhdF9jdXJyZW5jeSlcXG4gICAgICAgIH0pLFxcbiAgICAgICAgICAgIGlzX29rID0gX3ZhbGlkTnVtYmVyMi5pc19vayxcXG4gICAgICAgICAgICBtZXNzYWdlID0gX3ZhbGlkTnVtYmVyMi5tZXNzYWdlO1xcblxcbiAgICAgICAgaWYgKCFpc19vaykgZXJyb3JfbWVzc2FnZSA9IG1lc3NhZ2U7XFxuICAgICAgfVxcblxcbiAgICAgIHNldENvbnZlcnRlclRvRXJyb3IoZXJyb3JfbWVzc2FnZSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiYWNjb3VudF9wbGF0Zm9ybV9pY29uXFxcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgdmFyIF90aGlzJHJvb3Rfc3RvcmUkY2xpZSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQsXFxuICAgICAgICAgIGFjY291bnRfbGlzdCA9IF90aGlzJHJvb3Rfc3RvcmUkY2xpZS5hY2NvdW50X2xpc3QsXFxuICAgICAgICAgIGxvZ2luaWQgPSBfdGhpcyRyb290X3N0b3JlJGNsaWUubG9naW5pZDtcXG4gICAgICB2YXIgcGxhdGZvcm1faWNvbiA9IGFjY291bnRfbGlzdC5maW5kKGZ1bmN0aW9uIChhY2MpIHtcXG4gICAgICAgIHJldHVybiBsb2dpbmlkID09PSBhY2MubG9naW5pZDtcXG4gICAgICB9KS5pY29uO1xcbiAgICAgIHJldHVybiBwbGF0Zm9ybV9pY29uO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gV2l0aGRyYXdTdG9yZTtcXG59KCksICh3aXRoZHJhd19zdG9yZV9kZXNjcmlwdG9yID0gd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImJsb2NrY2hhaW5fYWRkcmVzc1xcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gJyc7XFxuICB9XFxufSksIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3IyID0gd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImNvbnRhaW5lclxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gY29uc3RhbnRzLmNvbnRhaW5lcnMud2l0aGRyYXc7XFxuICB9XFxufSksIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3IzID0gd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImVycm9yXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiBuZXcgRXJyb3JTdG9yZSgpO1xcbiAgfVxcbn0pLCB3aXRoZHJhd19zdG9yZV9kZXNjcmlwdG9yNCA9IHdpdGhkcmF3X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc18xMGtfd2l0aGRyYXdhbF9saW1pdF9yZWFjaGVkXFxcIiwgW2V4dGVybmFsX21vYnhfLm9ic2VydmFibGVdLCB7XFxuICBjb25maWd1cmFibGU6IHRydWUsXFxuICBlbnVtZXJhYmxlOiB0cnVlLFxcbiAgd3JpdGFibGU6IHRydWUsXFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XFxuICAgIHJldHVybiB1bmRlZmluZWQ7XFxuICB9XFxufSksIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3I1ID0gd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImlzX3dpdGhkcmF3X2NvbmZpcm1lZFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gZmFsc2U7XFxuICB9XFxufSksIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3I2ID0gd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInZlcmlmaWNhdGlvblxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gbmV3IFZlcmlmaWNhdGlvblN0b3JlKHtcXG4gICAgICByb290X3N0b3JlOiB0aGlzLnJvb3Rfc3RvcmUsXFxuICAgICAgV1M6IHRoaXMuV1NcXG4gICAgfSk7XFxuICB9XFxufSksIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3I3ID0gd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIndpdGhkcmF3X2Ftb3VudFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5vYnNlcnZhYmxlXSwge1xcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcXG4gIHdyaXRhYmxlOiB0cnVlLFxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xcbiAgICByZXR1cm4gJyc7XFxuICB9XFxufSksIHdpdGhkcmF3X3N0b3JlX2Rlc2NyaXB0b3I4ID0gd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIm1heF93aXRoZHJhd19hbW91bnRcXFwiLCBbZXh0ZXJuYWxfbW9ieF8ub2JzZXJ2YWJsZV0sIHtcXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcXG4gIGVudW1lcmFibGU6IHRydWUsXFxuICB3cml0YWJsZTogdHJ1ZSxcXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcXG4gICAgcmV0dXJuIDA7XFxuICB9XFxufSksIHdpdGhkcmF3X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRJc1dpdGhkcmF3Q29uZmlybWVkXFxcIiwgW3dpdGhkcmF3X3N0b3JlX2RlY10sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0SXNXaXRoZHJhd0NvbmZpcm1lZFxcXCIpLCB3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCB3aXRoZHJhd19zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0V2l0aGRyYXdBbW91bnRcXFwiLCBbd2l0aGRyYXdfc3RvcmVfZGVjMl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0V2l0aGRyYXdBbW91bnRcXFwiKSwgd2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInJlcXVlc3RXaXRoZHJhd1xcXCIsIFt3aXRoZHJhd19zdG9yZV9kZWMzXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJyZXF1ZXN0V2l0aGRyYXdcXFwiKSwgd2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNhdmVXaXRoZHJhd1xcXCIsIFt3aXRoZHJhd19zdG9yZV9kZWM0XSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzYXZlV2l0aGRyYXdcXFwiKSwgd2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInJlc2V0V2l0aHJhd0Zvcm1cXFwiLCBbd2l0aGRyYXdfc3RvcmVfZGVjNV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwicmVzZXRXaXRocmF3Rm9ybVxcXCIpLCB3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCB3aXRoZHJhd19zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0QmxvY2tjaGFpbkFkZHJlc3NcXFwiLCBbd2l0aGRyYXdfc3RvcmVfZGVjNl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0QmxvY2tjaGFpbkFkZHJlc3NcXFwiKSwgd2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIndpbGxNb3VudFdpdGhkcmF3XFxcIiwgW3dpdGhkcmF3X3N0b3JlX2RlYzddLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcIndpbGxNb3VudFdpdGhkcmF3XFxcIiksIHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHdpdGhkcmF3X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbk1vdW50V2l0aGRyYXdcXFwiLCBbd2l0aGRyYXdfc3RvcmVfZGVjOF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25Nb3VudFdpdGhkcmF3XFxcIiksIHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHdpdGhkcmF3X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJvbk1vdW50Q3J5cHRvV2l0aGRyYXdcXFwiLCBbd2l0aGRyYXdfc3RvcmVfZGVjOV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwib25Nb3VudENyeXB0b1dpdGhkcmF3XFxcIiksIHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHdpdGhkcmF3X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJpc193aXRoZHJhd2FsX2xvY2tlZFxcXCIsIFtleHRlcm5hbF9tb2J4Xy5jb21wdXRlZF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiaXNfd2l0aGRyYXdhbF9sb2NrZWRcXFwiKSwgd2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldE1heFdpdGhkcmF3QW1vdW50XFxcIiwgW3dpdGhkcmF3X3N0b3JlX2RlYzEwXSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJzZXRNYXhXaXRoZHJhd0Ftb3VudFxcXCIpLCB3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCB3aXRoZHJhd19zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY2hlY2sxMGtMaW1pdFxcXCIsIFt3aXRoZHJhd19zdG9yZV9kZWMxMV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwiY2hlY2sxMGtMaW1pdFxcXCIpLCB3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCB3aXRoZHJhd19zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0MTBrTGltaXRhdGlvblxcXCIsIFt3aXRoZHJhd19zdG9yZV9kZWMxMl0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0MTBrTGltaXRhdGlvblxcXCIpLCB3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUpLCB3aXRoZHJhd19zdG9yZV9hcHBseURlY29yYXRlZERlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwic2V0V2l0aGRyYXdQZXJjZW50YWdlU2VsZWN0b3JSZXN1bHRcXFwiLCBbd2l0aGRyYXdfc3RvcmVfZGVjMTNdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInNldFdpdGhkcmF3UGVyY2VudGFnZVNlbGVjdG9yUmVzdWx0XFxcIiksIHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHdpdGhkcmF3X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJ2YWxpZGF0ZVdpdGhkcmF3RnJvbUFtb3VudFxcXCIsIFt3aXRoZHJhd19zdG9yZV9kZWMxNF0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwidmFsaWRhdGVXaXRoZHJhd0Zyb21BbW91bnRcXFwiKSwgd2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlKSwgd2l0aGRyYXdfc3RvcmVfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcInZhbGlkYXRlV2l0aGRyYXdUb0Ftb3VudFxcXCIsIFt3aXRoZHJhd19zdG9yZV9kZWMxNV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2l0aGRyYXdfc3RvcmVfY2xhc3MucHJvdG90eXBlLCBcXFwidmFsaWRhdGVXaXRoZHJhd1RvQW1vdW50XFxcIiksIHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSksIHdpdGhkcmF3X3N0b3JlX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUsIFxcXCJhY2NvdW50X3BsYXRmb3JtX2ljb25cXFwiLCBbZXh0ZXJuYWxfbW9ieF8uY29tcHV0ZWRdLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpdGhkcmF3X3N0b3JlX2NsYXNzLnByb3RvdHlwZSwgXFxcImFjY291bnRfcGxhdGZvcm1faWNvblxcXCIpLCB3aXRoZHJhd19zdG9yZV9jbGFzcy5wcm90b3R5cGUpKSwgd2l0aGRyYXdfc3RvcmVfY2xhc3MpKTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9TdG9yZXMvY2FzaGllci1zdG9yZS5qc1xcbmZ1bmN0aW9uIGNhc2hpZXJfc3RvcmVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblxcXCIpOyB9IH1cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG52YXIgQ2FzaGllclN0b3JlID0gZnVuY3Rpb24gQ2FzaGllclN0b3JlKF9yZWYpIHtcXG4gIHZhciByb290X3N0b3JlID0gX3JlZi5yb290X3N0b3JlLFxcbiAgICAgIFdTID0gX3JlZi5XUztcXG5cXG4gIGNhc2hpZXJfc3RvcmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2FzaGllclN0b3JlKTtcXG5cXG4gIHRoaXMuYWNjb3VudF9wcm9tcHRfZGlhbG9nID0gbmV3IEFjY291bnRQcm9tcHREaWFsb2dTdG9yZShyb290X3N0b3JlKTtcXG4gIHRoaXMuYWNjb3VudF90cmFuc2ZlciA9IG5ldyBBY2NvdW50VHJhbnNmZXJTdG9yZSh7XFxuICAgIHJvb3Rfc3RvcmU6IHJvb3Rfc3RvcmUsXFxuICAgIFdTOiBXU1xcbiAgfSk7XFxuICB0aGlzLmNyeXB0b19maWF0X2NvbnZlcnRlciA9IG5ldyBDcnlwdG9GaWF0Q29udmVydGVyU3RvcmUoe1xcbiAgICByb290X3N0b3JlOiByb290X3N0b3JlLFxcbiAgICBXUzogV1NcXG4gIH0pO1xcbiAgdGhpcy5kZXBvc2l0ID0gbmV3IERlcG9zaXRTdG9yZSh7XFxuICAgIHJvb3Rfc3RvcmU6IHJvb3Rfc3RvcmUsXFxuICAgIFdTOiBXU1xcbiAgfSk7XFxuICB0aGlzLmVycm9yX2RpYWxvZyA9IG5ldyBFcnJvckRpYWxvZ1N0b3JlKCk7XFxuICB0aGlzLmVycm9yID0gbmV3IEVycm9yU3RvcmUoKTtcXG4gIHRoaXMuZ2VuZXJhbF9zdG9yZSA9IG5ldyBHZW5lcmFsU3RvcmUoe1xcbiAgICByb290X3N0b3JlOiByb290X3N0b3JlLFxcbiAgICBXUzogV1NcXG4gIH0pO1xcbiAgdGhpcy5pZnJhbWUgPSBuZXcgSWZyYW1lU3RvcmUoe1xcbiAgICByb290X3N0b3JlOiByb290X3N0b3JlLFxcbiAgICBXUzogV1NcXG4gIH0pO1xcbiAgdGhpcy5vbnJhbXAgPSBuZXcgT25SYW1wU3RvcmUoe1xcbiAgICByb290X3N0b3JlOiByb290X3N0b3JlLFxcbiAgICBXUzogV1NcXG4gIH0pO1xcbiAgdGhpcy5wYXltZW50X2FnZW50ID0gbmV3IFBheW1lbnRBZ2VudFN0b3JlKHtcXG4gICAgcm9vdF9zdG9yZTogcm9vdF9zdG9yZSxcXG4gICAgV1M6IFdTXFxuICB9KTtcXG4gIHRoaXMucGF5bWVudF9hZ2VudF90cmFuc2ZlciA9IG5ldyBQYXltZW50QWdlbnRUcmFuc2ZlclN0b3JlKHtcXG4gICAgcm9vdF9zdG9yZTogcm9vdF9zdG9yZSxcXG4gICAgV1M6IFdTXFxuICB9KTtcXG4gIHRoaXMudHJhbnNhY3Rpb25faGlzdG9yeSA9IG5ldyBUcmFuc2FjdGlvbkhpc3RvcnlTdG9yZSh7XFxuICAgIHJvb3Rfc3RvcmU6IHJvb3Rfc3RvcmUsXFxuICAgIFdTOiBXU1xcbiAgfSk7XFxuICB0aGlzLnZlcmlmaWNhdGlvbiA9IG5ldyBWZXJpZmljYXRpb25TdG9yZSh7XFxuICAgIHJvb3Rfc3RvcmU6IHJvb3Rfc3RvcmUsXFxuICAgIFdTOiBXU1xcbiAgfSk7XFxuICB0aGlzLndpdGhkcmF3ID0gbmV3IFdpdGhkcmF3U3RvcmUoe1xcbiAgICByb290X3N0b3JlOiByb290X3N0b3JlLFxcbiAgICBXUzogV1NcXG4gIH0pO1xcbn07XFxuXFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5VGRHOXlaWE12WTJGemFHbGxjaTF6ZEc5eVpTNXFjeTVxY3lJc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVVGQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRMEU3UVVGRFFUczdPenRCUVU5Qk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3UVVGRFFUczdPenRCUVVWQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVkQk8wRkJSVUU3UVVGRFFUdEJRVVZCTzBGQlFVRTdRVUZCUVRzN1FVRlNRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenM3T3pzN096czdPenRCUVZsQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJTVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCVEVFN1FVRkJRVHM3UVVGQlFUdEJRVkZCTzBGQlEwRTdRVUZEUVRzN1FVRldRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN096czdPenM3T3p0QlFXRkJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlFUTkVRVHM3T3pzN1FVRkJRVHM3UVVGRFFUczdPenM3UVVGQlFUczdRVUZEUVRzN096czdRVUZCUVRzN1FVRkRRVHM3T3pzN1FVRkJRVHM3T3pzN096czdPenRCUTFoQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVeEJPMEZCVVVFN1FVRkRRVHRCUVVOQk8wRkJSa0U3UVVGTFFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMkpCTzBGQlEwRTdRVUZGUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVZkQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU2tFN1FVRk5RVHRCUVVSQk96dEJRVXRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVRkZRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGNlFrRTdRVUV5UWtFN096dEJRVVZCTzBGQlJVRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVU5CT3pzN1FVRkZRVHRCUVVWQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPenM3TzBGQmVFWkJPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMXBCTzBGQlEwRTdRVUZEUVR0QlFXRkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVUZCTzBGQlFVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZHUVR0QlFVdEJPenRCUVVWQk8wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZHUVR0QlFVdEJPenRCUVVWQk8wRkJRMEU3UVVGQlFUczdRVUZCUVR0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZ0WVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkZRVHM3UVVGS1FUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHM3UVVGQlFUdEJRV1ZCT3p0QlFVTkJPenRCUVVWQk8wRkJSVUU3UVVGRlFUdEJRWFJDUVR0QlFVRkJPenRCUVVGQk8wRkJkVUpCTzBGQlQwRTdPMEZCT1VKQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVUZCTzBGQlFVRTdPMEZCUVVFN1FVRnRRMEU3TzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVhSRFFUdEJRWGREUVRzN1FVRjRRMEU3UVVGQlFUczdRVUZCUVR0QlFUQkRRVHRCUVVGQk8wRkJRVUU3TzBGQlEwRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCT3p0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVVZCT3pzN1FVRkZRVHRCUVVOQk8wRkJSMEU3UVVGQlFUdEJRVUZCT3p0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3TzBGQk0wVkJPMEZCTmtWQk8wRkJOMFZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFXNWhRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVRnJRa0U3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVVkJPenRCUVVOQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUjBFN1FVRkRRVHRCUVVOQk96czdPenRCUVVOQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJTVUU3UVVGRlFUdEJRVU5CTzBGQlVFRTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZYUVR0QlFVTkJPMEZCUjBFN1FVRkJRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZIUVR0QlFVTkJPenM3UVVGMlFrRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFYbENRVHM3UVVGNlFrRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJORUpCTzBGQlEwRTdRVUUzUWtFN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCUVVFN1FVRnpRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUczdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRnlSRUU3UVVGMVJFRTdPMEZCZGtSQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenM3T3pzN096czdPMEZCTUVSQk8wRkJRMEU3TzBGQlJVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRFFUdEJRVU5CT3pzN1FVRkZRVHRCUVVWQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVMUJPMEZCUTBFN096dEJRVVZCTzBGQlJVRTdPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUlVFN08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGTFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkpRVHRCUVV4Qk8wRkJUMEU3T3pzN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJSVUU3TzBGQlJrRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJVMEU3UVVGVVFUdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJWMEU3UVVGSFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRlFUdEJRVVZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPenRCUVVOQk8wRkJTMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPenRCUVVWQk8wRkJSVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkJRVHM3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGR1FUdEJRVWxCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJTa0U3UVVGTlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU2tFN08wRkJWVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVZCQk8wRkJVMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU2tFN1FVRkdRVHM3TzBGQlYwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVVZCTzBGQlEwRTdPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRWEpKUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdPenM3T3pzN096dEJRWGRKUVR0QlFVVkJPMEZCUTBFN096dEJRVVZCTzBGQlJVRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVU5CT3pzN1FVRkZRVHRCUVVWQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJFRTdRVUZIUVRzN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVkQk96dEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJUVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3TzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVRjVSa0U3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkpRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPMEZCUVVFN1FVRkJRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJTa0U3UVVGQlFUdEJRVUZCT3p0QlFVMUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVUZCTzBGQlFVRTdPMEZCUlVFN1FVRkRRVHM3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZHUVR0QlFVRkJPMEZCUVVFN08wRkJTVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVUZ5YWtKQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVVWQk96czdPenM3TzBGQloyVkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUczdRVUZEUVRzN1FVRkdRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU0zYUVKQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHM3UVVGQlFUczdRVUZCUVRzN1FVRkJRVHM3UVVGQlFUczdRVUZCUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVRlJRVHRCUVVWQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3UVVGRFFUczdPMEZCUlVFN1FVRkZRVHRCUVVOQk96czdPMEZCUlVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkhRVHRCUVVOQk8wRkJSa0U3TzBGQlJrRTdRVUZCUVR0QlFVVkJPMEZCUmtFN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN096czdPenM3T3pzN1FVRlRRVHRCUVVWQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZCUlVFN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVRkZRVHRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkVRVHRCUVVsQk96dEJRVXBCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVUxQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFWUkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVmRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCWkVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCUVVFN1FVRm5Ra0U3UVVGRFFUdEJRVU5CT3p0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJNMEpCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVRoQ1FUczdRVUU1UWtFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPenM3T3pzN096czdPMEZCYTBOQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVSQk8wRkJTVUU3TzBGQlNrRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJUVUU3UVVGRFFUczdRVUZRUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGVFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFWcEJPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCWTBFN1FVRkRRVHRCUVVOQk96dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCYUVOQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFXMURRVHM3UVVGdVEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3T3pzN096czdPenM3UVVGMVEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUVhCS1FUczdPenM3UVVGQlFUczdRVUZEUVRzN096czdRVUZCUVRzN1FVRkRRVHM3T3pzN1FVRkJRVHM3UVVGRFFUczdPenM3UVVGQlFUczdRVUZEUVRzN096czdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5pUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRVUU3UVVGQlFUczdRVUZCUVRzN1FVRkJRVHM3UVVGQlFUczdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPMEZCUzBFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVdGQk8wRkJRMEU3UVVGRlFUdEJRV2hDUVR0QlFVRkJPenRCUVVGQk8wRkJiVUpCTzBGQlEwRTdRVUZEUVRzN1FVRnlRa0U3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCZDBKQk8wRkJlRUpCT3p0QlFVRkJPMEZCTkVKQk8wRkJRMEU3TzBGQk4wSkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRU3RDUVR0QlFVVkJPenRCUVdwRFFUczdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUYxUTBFN1FVRkVRVHM3UVVGMFEwRTdRVUZ6UTBFN08wRkJkRU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVRSRFFUdEJRVFZEUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFXZEVRVHRCUVVOQk8wRkJRMEU3UVVGc1JFRTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZ4UkVFN1FVRkRRVHRCUVVOQk96dEJRWFpFUVR0QlFUQkVRVHM3UVVFeFJFRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3T3pzN096czdPenM3UVVFMlJFRTdRVUZGUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFWZEJPMEZCUlVFN1FVRkRRVHM3UVVGSFFUdEJRVWRCTzBGQlFVRTdRVUZKUVR0QlFVOUJPenM3UVVGRlFUdEJRVU5CT3p0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVUUxUjBFN096czdPMEZCUVVFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQkswUkJPenM3T3pzN096czdPenM3T3pzN096dEJRekZGUVR0QlFVVkJPenM3T3pzN096czdPenRCUVVsQk8wRkJSVUU3UVVGRFFUczdPMEZCUlVFN1FVRkZRVHRCUVVOQk8wRkJRMEU3T3pzN1FVRmFRVHM3T3pzN1FVRkJRVHM3UVVGRFFUczdPenM3UVVGQlFUczdPenM3T3pzN096dEJRMHBCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRklRVHM3UVVGUFFUdEJRVU5CTzBGQlJFRTdRVUZKUVRzN096dEJRMlpCT3p0QlFVVkJPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkJRVHM3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVVZCT3p0QlFXbERRVHRCUVVGQk8wRkJRVUU3T3p0QlFVZEJPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96czdPenM3T3pzN08wRkRkRWRCTzBGQlEwRTdRVUZCUVRzN1FVRkRRVHRCUVVOQk96czdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVVZCTzBGQlEwRTdRVUZEUVRzN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFN1FVRkRRVHM3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdPMEZCUlVFN1FVRkRRVHRCUVVOQk96czdPenM3UVVGSFFUczdPenM3T3pzN1FVTjJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkJRVHM3UVVGQlFUczdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPMEZCUTBFN1FVRkRRVHM3UVVGRFFUdEJRVU5CTzBGQlIwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMEZCUTBFN1FVRkJRVHM3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPenRCUVUxQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVaQk8wRkJTMEU3UVVGRlFUdEJRVU5CT3pzN096czdRVUZIUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVVXZSMEU3UVVGRFFUdEJRVVZCTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRnRRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVWkJPMEZCU1VFN1FVRkRRVHRCUVVOQk8wRkJSa0U3UVVGSlFUdEJRVU5CTzBGQlEwRTdRVUZHUVR0QlFVdEJPenRCUVVsQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJTRUU3UVVGTFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dEJRVU5CTzBGQlFVRTdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVVkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkJRMEU3UVVGQlFUczdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlJVRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlFVTkJPMEZCUTBFN08wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMEZCUTBFN1FVRkRRVHM3UVVGRFFUdEJRVUZCTzBGQlJVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRklRVHM3UVVGSlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUVVOQk8wRkJRMEU3TzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGQlEwRTdRVUZEUVRzN1FVRkRRVHRCUVVWQk8wRkJRMEU3TzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVGRFFUdEJRVU5CT3p0QlFVTkJPenRCUVVOQk96dEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkJRMEU3UVVGRFFUczdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3TzBGQlJVRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlJVRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk96czdRVUZGUVR0QlFVTkJPenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZGUVR0QlFVTkJPenRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3T3p0QlFVVkJPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJSVUU3TzBGQlJrRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJTVUU3UVVGRFFUczdRVUZEUVR0QlFVTkJPMEZCVUVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCV1VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZvUWtFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZ2UWtFN1FVRkRRVHM3TzBGQlJVRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkZRVHM3UVVGR1FUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkpRVHRCUVVOQk96dEJRVU5CTzBGQlEwRTdRVUZRUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZaUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRV2hDUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVzlDUVR0QlFVTkJPenM3UVVGRlFUdEJRVU5CT3p0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSMEU3UVVGRFFUczdPMEZCUlVFN1FVRkRRVHM3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVZEJPMEZCUTBFN096dEJRVVZCTzBGQlEwRTdPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJSVUU3UVVGRFFUczdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZIUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRFFUdEJRVU5CT3pzN1FVRkZRVHRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZEUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRFFUdEJRVU5CT3pzN1FVRkZRVHRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZEUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlJrRTdRVUZGUVRzN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVGNlowSkJPMEZCUTBFN1FVRkRRVHRCUVVaQk96czdPenRCUVUxQk96dEJRVVZCT3pzN096dEJRVU5CT3p0QlFYVkNRVHM3T3pzN1FVRkJRVHM3UVVGblNVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU01UzBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVRzN096czdRVUZEUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3TzBGQlFVRTdPMEZCUTBFN1FVRkJRVHRCUVVGQk96dEJRVVJCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZGUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVGQk8wRkJSVUU3TzBGQlEwRTdRVUZEUVRzN1FVRkhRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVRkJPMEZCVFVFN1FVRkRRVHRCUVhwQ1FUdEJRVEpDUVRzN096dEJRWEZDUVR0QlFVVkJPMEZCUTBFN096dEJRVVZCTzBGQlJVRTdRVUZEUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3UVVGQlFUdEJRVUZCTzBGQlJVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3TzBGQlIwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPMEZCUVVFN1FVRkJRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVU1Qk8wRkJVVUU3T3p0QlFVVkJPMEZCUlVFN1FVRkJRVHRCUVVGQk8wRkJSVUU3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlRrRTdRVUZWUVRzN08wRkJSVUU3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZGUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJSVUU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHM3T3p0QlFVVkJPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGSlFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFN1FVRkRRVHRCUVVWQk96dEJRVlpCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZaUVR0QlFVTkJPenRCUVdKQk8wRkJaVUU3TzBGQlprRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3T3pzN096czdPenM3UVVGclFrRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVVZCTzBGQlJVRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVU5CT3pzN1FVRkZRVHRCUVVWQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlFVZEJPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZGUVRzN1FVRkdRVHRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJUMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVMUJPenRCUVU1Qk8wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFWRkJPMEZCUlVFN096dEJRVlpCTzBGQlFVRTdPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZwUWtFN1FVRkRRVHRCUVVGQk8wRkJSVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdPenM3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVUZCTzBGQlJVRTdRVUZEUVRzN1FVRklRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN096czdPenM3T3p0QlFVMUJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlFVVkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVUZCT3p0QlFVRkJPMEZCV1VFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlJVRTdPenRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJTVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCZUVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenM3T3pzN096czdPMEZCTkVOQk8wRkJSVUU3UVVGRFFUczdPMEZCUlVFN1FVRkZRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPenRCUVVOQk8wRkJRVUU3TzBGQlEwRTdRVUZIUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlJVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVVkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPenM3UVVGRlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVVZCTzBGQlJVRTdRVUZEUVRzN096dEJRWFpZUVRzN096czdRVUU0UWtFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPMEZCUTBFN096czdPMEZCUVVFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPMEZCUTBFN096czdPMEZCUVVFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPMEZCUTBFN096czdPMEZCUVVFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPMEZCUTBFN096czdPMEZCUVVFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPMEZCVlVFN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRemxFUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3TzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGQlUwRTdRVUZGUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUVVWQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVsQk96dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVRzN1FVRkRRVHRCUVVOQk96dEJRVU5CT3p0QlFXNUNRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN096czdPenM3T3p0QlFYTkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenRCUVVWQk8wRkJRMEU3TzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlFXeEdRVHM3T3pzN1FVRkJRVHM3UVVGRFFUczdPenM3UVVGQlFUczdRVUZEUVRzN096czdRVUZCUVRzN1FVRkhRVHM3T3pzN1FVRkJRVHM3T3pzN1FVTmtRVHM3UVVGRlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVWxCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGaVFUdEJRV1ZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlNFRTdRVUZMUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPenRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCYkVSQk8wRkJRVUU3TzBGQmNVUkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCU1VFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVaQk8wRkJTVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGc1EwRTdRVUZCUVRzN1FVRnhRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGSlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJWa0U3UVVGWlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUYyUTBFN1FVRkJRVHM3UVVFd1EwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRklRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZEVsQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVRzN096czdRVUZsUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3TzBGQlFVRTdPMEZCUTBFN1FVRkJRVHRCUVVGQk96dEJRVVJCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk8wRkJSVUU3TzBGQlJVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk96dEJRVVJCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVXBCTzBGQlYwRTdPenM3UVVGRlFUdEJRVVZCTzBGQlJVRTdRVUZMUVRzN08wRkJSVUU3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRk1RVHRCUVZGQk8wRkJRMEU3UVVGRFFUdEJRVVZCT3pzN1FVRkZRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk96dEJRVU5CTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3UVVGRFFUczdPMEZCUlVFN1FVRkRRVHM3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZFUVR0QlFVVkJPenRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdRVUZMUVRzN1FVRk1RVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFWVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJURUU3UVVGUFFUczdRVUZ5UWtFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCUmtFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQk5FSkJPMEZCUTBFN1FVRkJRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVOQk8wRkJSMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZCUlVFN1FVRkRRVHM3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHM3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3UVVGRFFUdEJRVU5CT3pzN1FVRkZRVHRCUVVOQk96dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVWQk8wRkJRVUU3UVVGQlFUczdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVRkZRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3UVVGRFFUczdPMEZCUlVFN1FVRkZRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPMEZCUTBFN096dEJRVVZCTzBGQlJVRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVU5CT3pzN1FVRkZRVHRCUVVWQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3UVVGRFFUczdPMEZCUlVFN1FVRkZRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPMEZCUTBFN096czdRVUYwVTBFN096czdPMEZCUTBFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPMEZCUTBFN096czdPMEZCUVVFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPenM3T3pzN1FVRkRRVHM3T3pzN096dEJRVU5CT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFXbENRVHM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGJFTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGQlFUdEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUVZOQk8wRkJSVUU3UVVGRFFUczdPMEZCUlVFN1FVRkZRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPMEZCUTBFN096dEJRVVZCTzBGQlJVRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVU5CT3pzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVRkZRVHRCUVVOQk96dEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUlVFN096czdRVUZGUVR0QlFVRkJPenRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkhRVHRCUVVOQk8wRkJRMEU3TzBGQlRFRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdRVUZYUVR0QlFVTkJPMEZCUTBFN1FVRmlRVHRCUVVGQk96dEJRVUZCTzBGQlkwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVZEJPMEZCUTBFN1FVRkhRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFXaERRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN096czdPenM3T3p0QlFXMURRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVUZGUVR0QlFVRkJPenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZCUlVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUVhSSVFUczdPenM3UVVGQlFUczdRVUZEUVRzN096czdRVUZCUVRzN1FVRkRRVHM3T3pzN1FVRkJRVHM3UVVGRFFUczdPenM3UVVGQlFUczdRVUZEUVRzN096czdRVUZCUVRzN1FVRkRRVHM3T3pzN1FVRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3TzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGQmJVSkJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZCUlVFN1FVRkZRVHRCUVVOQk96czdPMEZCUlVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3pzN096czdPenM3T3p0QlFWTkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGRlFUdEJRVVpCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3pzN096czdPenM3TzBGQlRVRTdRVUZGUVR0QlFVTkJPMEZCUVVFN08wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN096dEJRVVZCTzBGQlJVRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZEUVR0QlFVTkJPMEZCUlVFN096dEJRVVZCTzBGQlJVRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVU5CT3pzN08wRkJSVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlRFRTdPMEZCVDBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN08wRkJlRUpCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96czdPenM3T3pzN08wRkJNa0pCTzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZKUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVVZCTzBGQlJVRTdRVUZEUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdPenRCUVVWQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJTa0U3UVVGTlFUczdPMEZCUlVFN1FVRlJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVTVCTzBGQlVVRTdPenRCUVVWQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVZCQk8wRkJVMEU3T3pzN1FVRkZRVHRCUVVGQk96dEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVXRCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGWVFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVVGQk96dEJRVUZCTzBGQlkwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEU3UVVGSlFUdEJRVU5CT3p0QlFYWkNRVHRCUVhsQ1FUczdRVUY2UWtFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPenM3T3pzN096czdPMEZCTkVKQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkdRVHRCUVVGQk8wRkJTVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVeEJPenRCUVVoQk8wRkJSMEU3TzBGQlQwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVWhCTzBGQlNVRTdRVUZCUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRWEpDUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdPenM3T3pzN096czdRVUZuUTBFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCU1VFN1FVRkRRVHRCUVV4Qk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJVMEU3TzBGQlZFRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3T3pzN096czdPenM3TzBGQldVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN096czdPenM3T3p0QlFVdEJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk96czdPMEZCUlVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVWkJPMEZCUVVFN1FVRkpRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVXBCT3p0QlFVaEJPMEZCUjBFN08wRkJUVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUkVFN1FVRkhRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlRFRTdRVUZSUVR0QlFVUkJPMEZCU1VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFUZENRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN096czdPenM3T3pzN1FVRndVMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPMEZCUTBFN096czdPMEZCUVVFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPMEZCUTBFN096czdPMEZCUVVFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPMEZCUTBFN096czdPMEZCUVVFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPMEZCUTBFN096czdPMEZCUVVFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRMEU3T3pzN08wRkJRVUU3TzBGQlEwRTdPenM3TzBGQlFVRTdPMEZCWjBKQk96czdPenM3TzBGQmJVOUJPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN1FVRkRRVHM3UVVGM1FrRTdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUXpOVFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkJRVHRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dEJRVmRCTzBGQlJVRTdRVUZEUVRzN096dEJRVVZCTzBGQlFVRTdPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCUVVFN1FVRkRRVHRCUVVOQk96dEJRVVpCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96czdPenM3T3pzN08wRkJTMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN096dEJRVVZCTzBGQlJVRTdRVUZEUVRzN08wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGS1FUdEJRVTFCT3pzN1FVRkZRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU0VFN1FVRkxRVHM3T3p0QlFVVkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVVkJPMEZCUTBFN1FVRkJRVHRCUVVoQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVV0Qk8wRkJURUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3T3pzN096czdPenM3UVVGVlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkdRVHRCUVVsQk96czdPMEZCUlVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCU1VFN1FVRkRRVHRCUVV4Qk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCVVVFN1FVRlNRVHRCUVVGQk96dEJRVUZCTzBGQlUwRTdRVUZEUVRzN1FVRldRVHRCUVZsQk96dEJRVnBCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96czdPenM3T3pzN096dEJRVE5GUVRzN096czdRVUZCUVRzN1FVRkRRVHM3T3pzN1FVRkJRVHM3UVVGRFFUczdPenM3UVVGQlFUczdRVUZEUVRzN096czdRVUZCUVRzN1FVRkRRVHM3T3pzN1FVRkJRVHM3UVVGRFFUczdPenM3UVVGQlFUczdRVUZEUVRzN096czdRVUZCUVRzN1FVRkRRVHM3T3pzN1FVRkJRVHM3UVVGRlFUczdPenM3T3pzN1FVRnJSa0U3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRMEU3TzBGQlJFRTdRVUZCUVR0QlFVZEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGTVFUczdRVUZHUVR0QlFVVkJPenRCUVU5Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU2tFN08wRkJUVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCY0VKQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96czdPenM3T3pzN096czdPenM3UVVFd1FrRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlEwRTdPMEZCUkVFN1FVRkJRVHRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlNrRTdPMEZCUmtFN1FVRkZRVHM3UVVGTlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU0VFN08wRkJTMEU3TzBGQlEwRTdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQmJrSkJPenRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenM3T3pzN096czdPenM3T3p0QlFYbENRVHRCUVVOQk96dEJRVU5CTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE5VcEJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRVUU3UVVGQlFUczdRVUZCUVRzN1FVRkJRVHM3UVVGQlFUczdRVUZCUVRzN1FVRkJRVHM3UVVGQlFUczdRVUZCUVRzN1FVRkJRVHM3UVVGQlFUczdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPMEZCVlVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUjBFN08wRkJTRUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCVFVFN1FVRk9RVHRCUVVGQk96dEJRVUZCTzBGQlVVRTdPMEZCVWtFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPenM3T3pzN096czdPMEZCV1VFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkhRVHRCUVVOQk96dEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRlFRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN096czdPenM3T3p0QlFWVkJPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZEUVRzN096dEJRVVZCTzBGQlFVRTdPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlIwRTdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUdEJRVU5CT3p0QlFVTkJPMEZCUTBFN08wRkJWRUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN096czdPenM3T3pzN1FVRlpRVHRCUVVWQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHM3TzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN096dEJRVVZCTzBGQlJVRTdRVUZEUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3UVVGRFFUczdPMEZCUlVFN1FVRkZRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPMEZCUTBFN096dEJRVVZCTzBGQlJVRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVU5CT3pzN08wRkJkRWhCT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEyWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdPMEZCUVVFN08wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkJWMEU3UVVGRlFUdEJRVU5CTzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3p0QlFVVkJPMEZCUlVFN1FVRkRRVHM3T3p0QlFVVkJPMEZCUVVFN08wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJWVUU3UVVGV1FUczdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRmxRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVXBCTzBGQlRVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRWHBDUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdPenM3T3pzN096czdRVUUwUWtFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkZRVHRCUVVwQk8wRkJRVUU3UVVGTlFUdEJRVU5CTzBGQlEwRTdRVUZJUVR0QlFVdEJPMEZCUTBFN08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZ3UWtFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPenM3T3pzN096czdRVUYxUWtFN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3UVVGRlFUdEJRVVZCTzBGQlEwRTdPenRCUVVWQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVGRlFUdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlkwRTdRVUZEUVR0QlFVVkJPMEZCYWtKQk8wRkJRVUU3TzBGQlFVRTdRVUZ2UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQmRrSkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVEJDUVR0QlFURkNRVHM3UVVGQlFUdEJRVGhDUVR0QlFVTkJPenRCUVM5Q1FUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRnBRMEU3UVVGRlFUczdRVUZ1UTBFN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQmQwTkJPMEZCUkVFN08wRkJka05CTzBGQmRVTkJPenRCUVhaRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRTJRMEU3UVVFM1EwRTdPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZwUkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJlRVJCTzBGQlFVRTdPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUV3UkVFN1FVRXhSRUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3UVVFMlJFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJhRVZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96czdPenM3T3pzN096dEJRVzlGUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZKUVR0QlFVTkJPenRCUVV4Qk8wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRlZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVXBCT3p0QlFWUkJPMEZCVTBFN1FVRlVRVHRCUVVGQk96dEJRVUZCTzBGQlowSkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZvUWtFN1FVRnRRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRTVRa0U3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN096czdPenM3T3pzN1FVRnBRMEU3UVVGRFFUczdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUczdPMEZCUlVFN1FVRkZRVHRCUVVOQk96czdPMEZCUlVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkdRVHRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCU1VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZTUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdPenM3T3pzN096dEJRVmRCTzBGQlJVRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGSlFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVUZGUVR0QlFVVkJPMEZCUlVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVWkJPMEZCUVVFN1FVRkJRVHM3UVVGSlFUdEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlNFRTdRVUZHUVR0QlFWTkJPMEZCUTBFN08wRkJRMEU3UVVGRFFUczdPMEZCUlVFN1FVRkZRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJrRTdRVUZCUVR0QlFVRkJPenRCUVVsQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN08wRkJSVUU3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkZRVHRCUVVOQk96czdPMEZCZWxSQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVU5CT3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3p0QlFVRkJPenRCUVdkTlFUczdPenM3UVVOeVRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlFVRTdPMEZCUVVFN08wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CSWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZRR1JsY21sMkwyTmhjMmhwWlhJdkxpOVRkRzl5WlhNdllXTmpiM1Z1ZEMxd2NtOXRjSFF0WkdsaGJHOW5MWE4wYjNKbExtcHpQemRqWXpRaUxDSjNaV0p3WVdOck9pOHZRR1JsY21sMkwyTmhjMmhwWlhJdkxpOURiMjV6ZEdGdWRITXZZMjl1YzNSaGJuUnpMbXB6UDJRd1pEZ2lMQ0ozWldKd1lXTnJPaTh2UUdSbGNtbDJMMk5oYzJocFpYSXZMaTlUZEc5eVpYTXZaWEp5YjNJdGMzUnZjbVV1YW5NL01HSm1OU0lzSW5kbFluQmhZMnM2THk5QVpHVnlhWFl2WTJGemFHbGxjaTh1TDFOMGIzSmxjeTloWTJOdmRXNTBMWFJ5WVc1elptVnlMWE4wYjNKbExtcHpQekExWkRRaUxDSjNaV0p3WVdOck9pOHZRR1JsY21sMkwyTmhjMmhwWlhJdkxpOVRkRzl5WlhNdlkzSjVjSFJ2TFdacFlYUXRZMjl1ZG1WeWRHVnlMWE4wYjNKbExtcHpQelUyT0RjaUxDSjNaV0p3WVdOck9pOHZRR1JsY21sMkwyTmhjMmhwWlhJdkxpOVRkRzl5WlhNdlpHVndiM05wZEMxemRHOXlaUzVxY3o4M1pEUmpJaXdpZDJWaWNHRmphem92TDBCa1pYSnBkaTlqWVhOb2FXVnlMeTR2VTNSdmNtVnpMMlZ5Y205eUxXUnBZV3h2WnkxemRHOXlaUzVxY3o4elpqUmhJaXdpZDJWaWNHRmphem92TDBCa1pYSnBkaTlqWVhOb2FXVnlMeTR2UTI5dWRHRnBibVZ5Y3k5allYTm9hV1Z5TFc1dmRHbG1hV05oZEdsdmJuTXVhbk40UDJaaU1qUWlMQ0ozWldKd1lXTnJPaTh2UUdSbGNtbDJMMk5oYzJocFpYSXZMaTlmWTI5dGJXOXVMM1YwYVd4cGRIa3Vhbk0vWWpSaU1DSXNJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMkZ6YUdsbGNpOHVMMVYwYVd4ekwxWmhiR2xrWVhSdmNpOWxjbkp2Y25NdWFuTS9abU0wWmlJc0luZGxZbkJoWTJzNkx5OUFaR1Z5YVhZdlkyRnphR2xsY2k4dUwxVjBhV3h6TDFaaGJHbGtZWFJ2Y2k5MllXeHBaR0YwYjNJdWFuTS9aVGRtWWlJc0luZGxZbkJoWTJzNkx5OUFaR1Z5YVhZdlkyRnphR2xsY2k4dUwxVjBhV3h6TDFaaGJHbGtZWFJ2Y2k5cGJtUmxlQzVxY3o4NU4yTTRJaXdpZDJWaWNHRmphem92TDBCa1pYSnBkaTlqWVhOb2FXVnlMeTR2VTNSdmNtVnpMMkpoYzJVdGMzUnZjbVV1YW5NL1l6UmhNU0lzSW5kbFluQmhZMnM2THk5QVpHVnlhWFl2WTJGemFHbGxjaTh1TDFOMGIzSmxjeTluWlc1bGNtRnNMWE4wYjNKbExtcHpQMlkxTkRFaUxDSjNaV0p3WVdOck9pOHZRR1JsY21sMkwyTmhjMmhwWlhJdkxpOVRkRzl5WlhNdmFXWnlZVzFsTFhOMGIzSmxMbXB6UDJJMFpqa2lMQ0ozWldKd1lXTnJPaTh2UUdSbGNtbDJMMk5oYzJocFpYSXZMaTlEYjI1bWFXY3ZiMjR0Y21GdGNDMXdjbTkyYVdSbGNuTXVhbk0vTmpFNU15SXNJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMkZ6YUdsbGNpOHVMMU4wYjNKbGN5OXZiaTF5WVcxd0xYTjBiM0psTG1welB6VXpOMlVpTENKM1pXSndZV05yT2k4dlFHUmxjbWwyTDJOaGMyaHBaWEl2TGk5VGRHOXlaWE12ZG1WeWFXWnBZMkYwYVc5dUxYTjBiM0psTG1welAyWTRObVlpTENKM1pXSndZV05yT2k4dlFHUmxjbWwyTDJOaGMyaHBaWEl2TGk5VGRHOXlaWE12Y0dGNWJXVnVkQzFoWjJWdWRDMXpkRzl5WlM1cWN6OW1NR0ZrSWl3aWQyVmljR0ZqYXpvdkwwQmtaWEpwZGk5allYTm9hV1Z5THk0dlUzUnZjbVZ6TDNCaGVXMWxiblF0WVdkbGJuUXRkSEpoYm5ObVpYSXRjM1J2Y21VdWFuTS9NV1JoWWlJc0luZGxZbkJoWTJzNkx5OUFaR1Z5YVhZdlkyRnphR2xsY2k4dUwxTjBiM0psY3k5MGNtRnVjMkZqZEdsdmJpMW9hWE4wYjNKNUxYTjBiM0psTG1welB6UXlaRFVpTENKM1pXSndZV05yT2k4dlFHUmxjbWwyTDJOaGMyaHBaWEl2TGk5VGRHOXlaWE12ZDJsMGFHUnlZWGN0YzNSdmNtVXVhbk0vWkRKbFlpSXNJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMkZ6YUdsbGNpOHVMMU4wYjNKbGN5OWpZWE5vYVdWeUxYTjBiM0psTG1welB6bGhZMlVpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhzZ2IySnpaWEoyWVdKc1pTd2dZV04wYVc5dUlIMGdabkp2YlNBbmJXOWllQ2M3WEc1cGJYQnZjblFnZXlCcGMwTnllWEIwYjJOMWNuSmxibU41SUgwZ1puSnZiU0FuUUdSbGNtbDJMM05vWVhKbFpDYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFRmpZMjkxYm5SUWNtOXRjSFJFYVdGc2IyZFRkRzl5WlNCN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2NtOXZkRjl6ZEc5eVpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1JmYzNSdmNtVWdQU0J5YjI5MFgzTjBiM0psTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUhOb2IzVnNaRjl6YUc5M0lEMGdabUZzYzJVN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2FYTmZZMjl1Wm1seWJXVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVWdiR0Z6ZEY5c2IyTmhkR2x2YmlBOUlHNTFiR3c3WEc0Z0lDQWdRRzlpYzJWeWRtRmliR1VnWTNWeWNtVnVkRjlzYjJOaGRHbHZiaUE5SUc1MWJHdzdYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdjMmh2ZFd4a1RtRjJhV2RoZEdWQlpuUmxjbEJ5YjIxd2RDaHVaWGgwWDJ4dlkyRjBhVzl1TENCamRYSnlaVzUwWDJ4dlkyRjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NXBjMTlqYjI1bWFYSnRaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJHRnpkRjlzYjJOaGRHbHZiaUE5SUc1bGVIUmZiRzlqWVhScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5vYjNWc1pGOXphRzkzSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNWeWNtVnVkRjlzYjJOaGRHbHZiaUE5SUdOMWNuSmxiblJmYkc5allYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnY21WelpYUk1ZWE4wVEc5allYUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YkdGemRGOXNiMk5oZEdsdmJpQTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhKbGMyVjBTWE5EYjI1bWFYSnRaV1FvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVhOZlkyOXVabWx5YldWa0lEMGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUdGemVXNWpJRzl1UTI5dVptbHliU2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCamJHbGxiblFzSUcxdlpIVnNaWE1nZlNBOUlIUm9hWE11Y205dmRGOXpkRzl5WlR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCaFkyTnZkVzUwYzE5c2FYTjBJSDBnUFNCdGIyUjFiR1Z6TG1OaGMyaHBaWEl1WVdOamIzVnVkRjkwY21GdWMyWmxjanRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbk5vYjNWc1pGOXphRzkzSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE5mWTI5dVptbHliV1ZrSUQwZ2RISjFaVHRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0JvWVhOZlptbGhkRjloWTJOdmRXNTBJRDBnWVdOamIzVnVkSE5mYkdsemRDNXpiMjFsS0hnZ1BUNGdJWGd1YVhOZlkzSjVjSFJ2S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6UTNKNWNIUnZZM1Z5Y21WdVkza29ZMnhwWlc1MFB5NWpkWEp5Wlc1amVTa2dKaVlnYUdGelgyWnBZWFJmWVdOamIzVnVkQ2tnWVhkaGFYUWdkR2hwY3k1a2IxTjNhWFJqYUNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdGemVXNWpJR1J2VTNkcGRHTm9LQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUdOc2FXVnVkQ3dnYlc5a2RXeGxjeUI5SUQwZ2RHaHBjeTV5YjI5MFgzTjBiM0psTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUdGalkyOTFiblJmZEhKaGJuTm1aWElzSUdkbGJtVnlZV3hmYzNSdmNtVWdmU0E5SUcxdlpIVnNaWE11WTJGemFHbGxjanRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0J1YjI1ZlkzSjVjSFJ2WDJGalkyOTFiblJ6SUQwZ1lXTmpiM1Z1ZEY5MGNtRnVjMlpsY2k1aFkyTnZkVzUwYzE5c2FYTjBMbVpwYkhSbGNpaDRJRDArSUNGNExtbHpYMk55ZVhCMGJ5azdYRzRnSUNBZ0lDQWdJR052Ym5OMElHeHZaMmx1YVdRZ1BTQnViMjVmWTNKNWNIUnZYMkZqWTI5MWJuUnpMbTFoY0NoNElEMCtJSGd1ZG1Gc2RXVXBXekJkTzF4dUlDQWdJQ0FnSUNCaGQyRnBkQ0JqYkdsbGJuUXVjM2RwZEdOb1FXTmpiM1Z1ZENoc2IyZHBibWxrS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWpkWEp5Wlc1MFgyeHZZMkYwYVc5dUlEMDlQU0FuWkdWd2IzTnBkQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RsYm1WeVlXeGZjM1J2Y21VdWMyVjBTWE5FWlhCdmMybDBLSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lHOXVRMkZ1WTJWc0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTm9iM1ZzWkY5emFHOTNJRDBnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lHTnZiblJwYm5WbFVtOTFkR1VvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtbHpYMk52Ym1acGNtMWxaQ0FtSmlCMGFHbHpMbXhoYzNSZmJHOWpZWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEY5emRHOXlaUzVqYjIxdGIyNHVjbTkxZEdWVWJ5aDBhR2x6TG14aGMzUmZiRzlqWVhScGIyNHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lZMjl1YzNRZ1kyOXVkR0ZwYm1WeWN5QTlJSHRjYmlBZ0lDQmhZMk52ZFc1MFgzUnlZVzV6Wm1WeU9pQW5ZV05qYjNWdWRGOTBjbUZ1YzJabGNpY3NYRzRnSUNBZ1pHVndiM05wZERvZ0oyUmxjRzl6YVhRbkxGeHVJQ0FnSUhCaGVXMWxiblJmWVdkbGJuUTZJQ2R3WVhsdFpXNTBYMkZuWlc1MEp5eGNiaUFnSUNCd1lYbHRaVzUwWDJGblpXNTBYM1J5WVc1elptVnlPaUFuY0dGNWJXVnVkRjloWjJWdWRGOTBjbUZ1YzJabGNpY3NYRzRnSUNBZ2QybDBhR1J5WVhjNklDZDNhWFJvWkhKaGR5Y3NYRzU5TzF4dVhHNWpiMjV6ZENCdFlYQmZZV04wYVc5dUlEMGdlMXh1SUNBZ0lIZHBkR2hrY21GM09pQW5jR0Y1YldWdWRGOTNhWFJvWkhKaGR5Y3NYRzRnSUNBZ2NHRjViV1Z1ZEY5aFoyVnVkRG9nSjNCaGVXMWxiblJmWVdkbGJuUmZkMmwwYUdSeVlYY25MRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ2V5QmpiMjUwWVdsdVpYSnpMQ0J0WVhCZllXTjBhVzl1SUgwN1hHNGlMQ0pwYlhCdmNuUWdleUJoWTNScGIyNHNJRzlpYzJWeWRtRmliR1VnZlNCbWNtOXRJQ2R0YjJKNEp6dGNibWx0Y0c5eWRDQjdJR2RsZEZCeWIzQmxjblI1Vm1Gc2RXVWdmU0JtY205dElDZEFaR1Z5YVhZdmMyaGhjbVZrSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUlhKeWIzSlRkRzl5WlNCN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2JXVnpjMkZuWlNBOUlDY25PMXh1SUNBZ0lFQnZZbk5sY25aaFlteGxJR052WkdVZ1BTQW5KenRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0JtYVdWc1pITWdQU0FuSnp0Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCcGMxOXphRzkzWDJaMWJHeGZjR0ZuWlNBOUlHWmhiSE5sTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUc5dVEyeHBZMnRDZFhSMGIyNGdQU0J1ZFd4c08xeHVJQ0FnSUVCdlluTmxjblpoWW14bElHbHpYMkZ6YTE5MWExOW1kVzVrYzE5d2NtOTBaV04wYVc5dUlEMGdabUZzYzJVN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2FYTmZjMlZzWmw5bGVHTnNkWE5wYjI1ZmJXRjRYM1IxY201dmRtVnlYM05sZENBOUlHWmhiSE5sTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdselgyRnphMTloZFhSb1pXNTBhV05oZEdsdmJpQTlJR1poYkhObE8xeHVJQ0FnSUVCdlluTmxjblpoWW14bElHbHpYMkZ6YTE5bWFXNWhibU5wWVd4ZmNtbHphMTloY0hCeWIzWmhiQ0E5SUdaaGJITmxPMXh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSE5sZEVWeWNtOXlUV1Z6YzJGblpTaGxjbkp2Y2l3Z2IyNURiR2xqYTBKMWRIUnZiaXdnYVhOZmMyaHZkMTltZFd4c1gzQmhaMlVwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdabTl5SUdWeWNtOXljeUIwYUdGMElHNWxaV1FnZEc4Z2MyaHZkeUJoSUdKMWRIUnZiaXdnY21WelpYUWdkR2hsSUdadmNtMWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pYSnliM0pmYjJKcVpXTjBJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVEYkdsamEwSjFkSFJ2Yml4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052WkdVNklHVnljbTl5TG1OdlpHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsT2lCbGNuSnZjaTV0WlhOellXZGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTmZjMmh2ZDE5bWRXeHNYM0JoWjJVNklHbHpYM05vYjNkZlpuVnNiRjl3WVdkbElIeDhJQzlKYm5aaGJHbGtWRzlyWlc1OFYzSnZibWRTWlhOd2IyNXpaUzh1ZEdWemRDaGxjbkp2Y2k1amIyUmxLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDNHVMaWhuWlhSUWNtOXdaWEowZVZaaGJIVmxLR1Z5Y205eUxDQmJKMlJsZEdGcGJITW5MQ0FuWm1sbGJHUnpKMTBwSUNZbUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV1ZzWkhNNklHVnljbTl5TG1SbGRHRnBiSE11Wm1sbGJHUnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtOc2FXTnJRblYwZEc5dUlEMGdaWEp5YjNKZmIySnFaV04wTG05dVEyeHBZMnRDZFhSMGIyNDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOWtaU0E5SUdWeWNtOXlYMjlpYW1WamRDNWpiMlJsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTFsYzNOaFoyVWdQU0JsY25KdmNsOXZZbXBsWTNRdWJXVnpjMkZuWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYzE5emFHOTNYMloxYkd4ZmNHRm5aU0E5SUdWeWNtOXlYMjlpYW1WamRDNXBjMTl6YUc5M1gyWjFiR3hmY0dGblpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWFXVnNaSE1nUFNCbGNuSnZjbDl2WW1wbFkzUXVabWxsYkdSek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1selgyRnphMTkxYTE5bWRXNWtjMTl3Y205MFpXTjBhVzl1SUQwZ1pYSnliM0pmYjJKcVpXTjBQeTVwYzE5aGMydGZkV3RmWm5WdVpITmZjSEp2ZEdWamRHbHZianRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBjMTl6Wld4bVgyVjRZMngxYzJsdmJsOXRZWGhmZEhWeWJtOTJaWEpmYzJWMElEMGdaWEp5YjNKZmIySnFaV04wUHk1cGMxOXpaV3htWDJWNFkyeDFjMmx2Ymw5dFlYaGZkSFZ5Ym05MlpYSmZjMlYwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx6WDJGemExOWhkWFJvWlc1MGFXTmhkR2x2YmlBOUlHVnljbTl5WDI5aWFtVmpkRDh1YVhOZllYTnJYMkYxZEdobGJuUnBZMkYwYVc5dU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1selgyRnphMTltYVc1aGJtTnBZV3hmY21semExOWhjSEJ5YjNaaGJDQTlJR1Z5Y205eVgyOWlhbVZqZEQ4dWFYTmZZWE5yWDJacGJtRnVZMmxoYkY5eWFYTnJYMkZ3Y0hKdmRtRnNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQm9ZVzVrYkdWRFlYTm9hV1Z5UlhKeWIzSW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdjM2RwZEdOb0lDaGxjbkp2Y2k1amIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkQlUwdGZWRTVEWDBGUVVGSlBWa0ZNSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVWeWNtOXlUV1Z6YzJGblpTaGxjbkp2Y2l3Z2JuVnNiQ3dnZEhKMVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZEJVMHRmUmtsWVgwUkZWRUZKVEZNbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFJYSnliM0pOWlhOellXZGxLR1Z5Y205eUxDQnVkV3hzTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMEZUUzE5VlMxOUdWVTVFVTE5UVVrOVVSVU5VU1U5T0p6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHpRWE5yVld0R2RXNWtjMUJ5YjNSbFkzUnBiMjRvZEhKMVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZEJVMHRmVTBWTVJsOUZXRU5NVlZOSlQwNWZUVUZZWDFSVlVrNVBWa1ZTWDFORlZDYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkpjMU5sYkdaRmVHTnNkWE5wYjI1TllYaFVkWEp1YjNabGNsTmxkQ2gwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0owRlRTMTlCVlZSSVJVNVVTVU5CVkVVbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5RVk5MWDBGSFJWOVdSVkpKUmtsRFFWUkpUMDRuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwU1hOQmMydEJkWFJvWlc1MGFXTmhkR2x2YmloMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMEZUUzE5R1NVNUJUa05KUVV4ZlVrbFRTMTlCVUZCU1QxWkJUQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJKYzBGemEwWnBibUZ1WTJsaGJGSnBjMnRCY0hCeWIzWmhiQ2gwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkZjbkp2Y2sxbGMzTmhaMlVvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBTWE5CYzJ0VmEwWjFibVJ6VUhKdmRHVmpkR2x2YmlobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJKYzFObGJHWkZlR05zZFhOcGIyNU5ZWGhVZFhKdWIzWmxjbE5sZENobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJKYzBGemEwRjFkR2hsYm5ScFkyRjBhVzl1S0daaGJITmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRWx6UVhOclJtbHVZVzVqYVdGc1VtbHphMEZ3Y0hKdmRtRnNLR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJOWlhOellXZGxLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXVnpjMkZuWlNBOUlIWmhiSFZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSSmMwRnphMVZyUm5WdVpITlFjbTkwWldOMGFXOXVLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFYTmZZWE5yWDNWclgyWjFibVJ6WDNCeWIzUmxZM1JwYjI0Z1BTQjJZV3gxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYzJWMFNYTlRaV3htUlhoamJIVnphVzl1VFdGNFZIVnlibTkyWlhKVFpYUW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGMxOXpaV3htWDJWNFkyeDFjMmx2Ymw5dFlYaGZkSFZ5Ym05MlpYSmZjMlYwSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSE5sZEVselFYTnJRWFYwYUdWdWRHbGpZWFJwYjI0b2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYzE5aGMydGZZWFYwYUdWdWRHbGpZWFJwYjI0Z1BTQjJZV3gxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYzJWMFNYTkJjMnRHYVc1aGJtTnBZV3hTYVhOclFYQndjbTkyWVd3b2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYzE5aGMydGZabWx1WVc1amFXRnNYM0pwYzJ0ZllYQndjbTkyWVd3Z1BTQjJZV3gxWlR0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJSHNnWVdOMGFXOXVMQ0JqYjIxd2RYUmxaQ3dnYjJKelpYSjJZV0pzWlNCOUlHWnliMjBnSjIxdlluZ25PMXh1YVcxd2IzSjBJSHRjYmlBZ0lDQm1iM0p0WVhSTmIyNWxlU3hjYmlBZ0lDQnBjMFZ0Y0hSNVQySnFaV04wTEZ4dUlDQWdJR2x6UTNKNWNIUnZZM1Z5Y21WdVkza3NYRzRnSUNBZ1oyVjBRM1Z5Y21WdVkybGxjeXhjYmlBZ0lDQm5aWFJEZFhKeVpXNWplVVJwYzNCc1lYbERiMlJsTEZ4dUlDQWdJR2RsZEVSbFkybHRZV3hRYkdGalpYTXNYRzRnSUNBZ1oyVjBRMFpFUVdOamIzVnVkRVJwYzNCc1lYa3NYRzRnSUNBZ1oyVjBRMFpFUVdOamIzVnVkQ3hjYmlBZ0lDQm5aWFJRY205d1pYSjBlVlpoYkhWbExGeHVJQ0FnSUhaaGJHbGtUblZ0WW1WeUxGeHVJQ0FnSUVOR1JGOVFURUZVUms5U1RWTXNYRzU5SUdaeWIyMGdKMEJrWlhKcGRpOXphR0Z5WldRbk8xeHVhVzF3YjNKMElIc2diRzlqWVd4cGVtVXNJRXh2WTJGc2FYcGxJSDBnWm5KdmJTQW5RR1JsY21sMkwzUnlZVzV6YkdGMGFXOXVjeWM3WEc1cGJYQnZjblFnUTI5dWMzUmhiblJ6SUdaeWIyMGdKME52Ym5OMFlXNTBjeTlqYjI1emRHRnVkSE1uTzF4dWFXMXdiM0owSUVWeWNtOXlVM1J2Y21VZ1puSnZiU0FuTGk5bGNuSnZjaTF6ZEc5eVpTYzdYRzVjYm1OdmJuTjBJR2hoYzFSeVlXNXpabVZ5VG05MFFXeHNiM2RsWkV4dloybHVhV1FnUFNCc2IyZHBibWxrSUQwK0lHeHZaMmx1YVdRdWMzUmhjblJ6VjJsMGFDZ25UVmduS1R0Y2JseHVZMjl1YzNRZ1oyVjBVMlZzWldOMFpXUkZjbkp2Y2lBOUlDaHpaV3hsWTNSbFpGOTJZV3gxWlN3Z2FYTmZabkp2YlY5aFkyTnZkVzUwS1NBOVBpQjdYRzRnSUNBZ2FXWWdLR2x6WDJaeWIyMWZZV05qYjNWdWRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BFeHZZMkZzYVhwbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FURTRibDlrWldaaGRXeDBYM1JsZUhROUoxUnlZVzV6Wm1WeUlHWnliMjBnZTN0elpXeGxZM1JsWkY5MllXeDFaWDE5SUdseklHNXZkQ0JoYkd4dmQyVmtMQ0JRYkdWaGMyVWdZMmh2YjNObElHRnViM1JvWlhJZ1lXTmpiM1Z1ZENCbWNtOXRJR1J5YjNCa2IzZHVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbGN6MTdleUJ6Wld4bFkzUmxaRjkyWVd4MVpTQjlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ0lDQThURzlqWVd4cGVtVmNiaUFnSUNBZ0lDQWdJQ0FnSUdreE9HNWZaR1ZtWVhWc2RGOTBaWGgwUFNkVWNtRnVjMlpsY2lCMGJ5QjdlM05sYkdWamRHVmtYM1poYkhWbGZYMGdhWE1nYm05MElHRnNiRzkzWldRc0lGQnNaV0Z6WlNCamFHOXZjMlVnWVc1dmRHaGxjaUJoWTJOdmRXNTBJR1p5YjIwZ1pISnZjR1J2ZDI0blhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpYTTllM3NnYzJWc1pXTjBaV1JmZG1Gc2RXVWdmWDFjYmlBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FwTzF4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1FXTmpiM1Z1ZEZSeVlXNXpabVZ5VTNSdmNtVWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLSHNnVjFNc0lISnZiM1JmYzNSdmNtVWdmU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNSZmMzUnZjbVVnUFNCeWIyOTBYM04wYjNKbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxkVElEMGdWMU03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRRzlpYzJWeWRtRmliR1VnWVdOamIzVnVkSE5mYkdsemRDQTlJRnRkTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdOdmJuUmhhVzVsY2lBOUlFTnZibk4wWVc1MGN5NWpiMjUwWVdsdVpYSnpMbUZqWTI5MWJuUmZkSEpoYm5ObVpYSTdYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVWdaWEp5YjNJZ1BTQnVaWGNnUlhKeWIzSlRkRzl5WlNncE8xeHVJQ0FnSUVCdlluTmxjblpoWW14bElHaGhjMTl1YjE5aFkyTnZkVzUwSUQwZ1ptRnNjMlU3WEc0Z0lDQWdRRzlpYzJWeWRtRmliR1VnYUdGelgyNXZYMkZqWTI5MWJuUnpYMkpoYkdGdVkyVWdQU0JtWVd4elpUdGNiaUFnSUNCQWIySnpaWEoyWVdKc1pTQnBjMTkwY21GdWMyWmxjbDlqYjI1bWFYSnRJRDBnWm1Gc2MyVTdYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVWdhWE5mZEhKaGJuTm1aWEpmYzNWalkyVnpjMloxYkNBOUlHWmhiSE5sTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdselgyMTBOVjkwY21GdWMyWmxjbDlwYmw5d2NtOW5jbVZ6Y3lBOUlHWmhiSE5sTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUcxcGJtbHRkVzFmWm1WbElEMGdiblZzYkR0Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCeVpXTmxhWEIwSUQwZ2UzMDdYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVWdjMlZzWldOMFpXUmZabkp2YlNBOUlIdDlPMXh1SUNBZ0lFQnZZbk5sY25aaFlteGxJSE5sYkdWamRHVmtYM1J2SUQwZ2UzMDdYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVWdZV05qYjNWdWRGOTBjbUZ1YzJabGNsOWhiVzkxYm5RZ1BTQW5KenRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0IwY21GdWMyWmxjbDltWldVZ1BTQnVkV3hzTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUhSeVlXNXpabVZ5WDJ4cGJXbDBJRDBnZTMwN1hHNWNiaUFnSUNCQVkyOXRjSFYwWldSY2JpQWdJQ0JuWlhRZ2FYTmZZV05qYjNWdWRGOTBjbUZ1YzJabGNsOTJhWE5wWW14bEtDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJR2hoYzE5dFlXeDBZV2x1ZG1WemRGOWhZMk52ZFc1MExDQnNZVzVrYVc1blgyTnZiWEJoYm5sZmMyaHZjblJqYjJSbExDQnlaWE5wWkdWdVkyVWdmU0E5SUhSb2FYTXVjbTl2ZEY5emRHOXlaUzVqYkdsbGJuUTdYRzRnSUNBZ0lDQWdJQzh2SUdOaGMyaHBaWElnVkhKaGJuTm1aWElnWVdOamIzVnVkQ0IwWVdJZ2FYTWdhR2xrWkdWdUlHWnZjaUJwYjIwZ1kyeHBaVzUwYzF4dUlDQWdJQ0FnSUNBdkx5QmphR1ZqYXlCbWIzSWdjbVZ6YVdSbGJtTmxJSFJ2SUdocFpHVWdkR2hsSUhSaFlpQmlaV1p2Y21VZ1kzSmxZWFJwYm1jZ1lTQnlaV0ZzSUcxdmJtVjVJR0ZqWTI5MWJuUmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjMmxrWlc1alpTQWhQVDBnSjJsdEp5QW1KaUFvYkdGdVpHbHVaMTlqYjIxd1lXNTVYM05vYjNKMFkyOWtaU0FoUFQwZ0oyMWhiSFJoSnlCOGZDQm9ZWE5mYldGc2RHRnBiblpsYzNSZllXTmpiM1Z1ZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhObGRFSmhiR0Z1WTJWQ2VVeHZaMmx1U1dRb2JHOW5hVzVwWkN3Z1ltRnNZVzVqWlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GalkyOTFiblJ6WDJ4cGMzUXVabWx1WkNoaFkyTWdQVDRnYkc5bmFXNXBaQ0E5UFQwZ1lXTmpMblpoYkhWbEtTNWlZV3hoYm1ObElEMGdZbUZzWVc1alpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyVjBRbUZzWVc1alpWTmxiR1ZqZEdWa1JuSnZiU2hpWVd4aGJtTmxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlZzWldOMFpXUmZabkp2YlM1aVlXeGhibU5sSUQwZ1ltRnNZVzVqWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYzJWMFFtRnNZVzVqWlZObGJHVmpkR1ZrVkc4b1ltRnNZVzVqWlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJHVmpkR1ZrWDNSdkxtSmhiR0Z1WTJVZ1BTQmlZV3hoYm1ObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklIQnZjM05wWW14bElIUnlZVzV6Wm1WeWN6cGNiaUFnSUNBdkx5QXhMaUJtYVdGMElIUnZJR055ZVhCMGJ5QW1JSFpwWTJVZ2RtVnljMkZjYmlBZ0lDQXZMeUF5TGlCbWFXRjBJSFJ2SUcxMElDWWdkbWxqWlNCMlpYSnpZVnh1SUNBZ0lDOHZJRE11SUdOeWVYQjBieUIwYnlCdGRDQW1JSFpwWTJVZ2RtVnljMkZjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdZWE41Ym1NZ2IyNU5iM1Z1ZEVGalkyOTFiblJVY21GdWMyWmxjaWdwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCamJHbGxiblFzSUcxdlpIVnNaWE1nZlNBOUlIUm9hWE11Y205dmRGOXpkRzl5WlR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCdmJrMXZkVzUwUTI5dGJXOXVMQ0J6WlhSTWIyRmthVzVuSUgwZ1BTQnRiMlIxYkdWekxtTmhjMmhwWlhJdVoyVnVaWEpoYkY5emRHOXlaVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJoWTNScGRtVmZZV05qYjNWdWRITXNJR2x6WDJ4dloyZGxaRjlwYmlCOUlEMGdZMnhwWlc1ME8xeHVYRzRnSUNBZ0lDQWdJSE5sZEV4dllXUnBibWNvZEhKMVpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNVNaVzF2ZFc1MElEMGdkR2hwY3k1dmJrMXZkVzUwUVdOamIzVnVkRlJ5WVc1elptVnlPMXh1SUNBZ0lDQWdJQ0JoZDJGcGRDQnZiazF2ZFc1MFEyOXRiVzl1S0NrN1hHNGdJQ0FnSUNBZ0lHRjNZV2wwSUhSb2FYTXVWMU11ZDJGcGRDZ25kMlZpYzJsMFpWOXpkR0YwZFhNbktUdGNibHh1SUNBZ0lDQWdJQ0F2THlCamFHVmpheUJwWmlCemIyMWxJR0poYkdGdVkyVWdkWEJrWVhSbElHaGhjeUJqYjIxbElHbHVJSE5wYm1ObElIUm9aU0JzWVhOMElHMXZkVzUwWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2hoYzE5MWNHUmhkR1ZrWDJGalkyOTFiblJmWW1Gc1lXNWpaU0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGMxOXViMTloWTJOdmRXNTBjMTlpWVd4aGJtTmxJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQlBZbXBsWTNRdWEyVjVjeWhoWTNScGRtVmZZV05qYjNWdWRITXBMbVpwYm1Rb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXTmpiM1Z1ZENBOVBpQWhZV04wYVhabFgyRmpZMjkxYm5SelcyRmpZMjkxYm5SZExtbHpYM1pwY25SMVlXd2dKaVlnWVdOMGFYWmxYMkZqWTI5MWJuUnpXMkZqWTI5MWJuUmRMbUpoYkdGdVkyVmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hvWVhOZmRYQmtZWFJsWkY5aFkyTnZkVzUwWDJKaGJHRnVZMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBTR0Z6VG05QlkyTnZkVzUwYzBKaGJHRnVZMlVvWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkbUZ5YVc5MWN5QnBjM04xWlhNZ2FHRndjR1Z1SUhkb1pXNGdiRzloWkdsdVp5Qm1jbTl0SUdOaFkyaGxYRzRnSUNBZ0lDQWdJQzh2SUdVdVp5NGdibVYzSUdGalkyOTFiblFnYldGNUlHaGhkbVVnWW1WbGJpQmpjbVZoZEdWa0xDQjBjbUZ1YzJabGNpQnRZWGtnYUdGMlpTQmlaV1Z1SUdSdmJtVWdaV3h6Wlhkb1pYSmxMQ0JsZEdOY2JpQWdJQ0FnSUNBZ0x5OGdjMjhnYjI0Z2JHOWhaQ0J2WmlCMGFHbHpJSEJoWjJVZ2FuVnpkQ0JqWVd4c0lHbDBJR0ZuWVdsdVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzE5c2IyZG5aV1JmYVc0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFJ5WVc1elptVnlYMkpsZEhkbFpXNWZZV05qYjNWdWRITWdQU0JoZDJGcGRDQjBhR2x6TGxkVExtRjFkR2h2Y21sNlpXUXVkSEpoYm5ObVpYSkNaWFIzWldWdVFXTmpiM1Z1ZEhNb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJ5WVc1elptVnlYMkpsZEhkbFpXNWZZV05qYjNWdWRITXVaWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlMbk5sZEVWeWNtOXlUV1Z6YzJGblpTaDBjbUZ1YzJabGNsOWlaWFIzWldWdVgyRmpZMjkxYm5SekxtVnljbTl5TENCMGFHbHpMbTl1VFc5MWJuUkJZMk52ZFc1MFZISmhibk5tWlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRXh2WVdScGJtY29abUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbU5oYmtSdlFXTmpiM1Z1ZEZSeVlXNXpabVZ5S0hSeVlXNXpabVZ5WDJKbGRIZGxaVzVmWVdOamIzVnVkSE11WVdOamIzVnVkSE1wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhkMkZwZENCMGFHbHpMbk52Y25SQlkyTnZkVzUwYzFSeVlXNXpabVZ5S0hSeVlXNXpabVZ5WDJKbGRIZGxaVzVmWVdOamIzVnVkSE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUlVjbUZ1YzJabGNrWmxaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUk5hVzVwYlhWdFJtVmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGUnlZVzV6Wm1WeVRHbHRhWFFvS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WVdOamIzVnVkSE5mYkdsemREOHViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR05tWkY5MGNtRnVjMlpsY2w5MGIxOXNiMmRwYmw5cFpDQTlJSE5sYzNOcGIyNVRkRzl5WVdkbExtZGxkRWwwWlcwb0oyTm1aRjkwY21GdWMyWmxjbDkwYjE5c2IyZHBibDlwWkNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxjM05wYjI1VGRHOXlZV2RsTG5KbGJXOTJaVWwwWlcwb0oyTm1aRjkwY21GdWMyWmxjbDkwYjE5c2IyZHBibDlwWkNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5aWFsOTJZV3gxWlhNZ1BTQjBhR2x6TG1GalkyOTFiblJ6WDJ4cGMzUXVabWx1WkNoaFkyTnZkVzUwSUQwK0lHRmpZMjkxYm5RdWRtRnNkV1VnUFQwOUlHTm1aRjkwY21GdWMyWmxjbDkwYjE5c2IyZHBibDlwWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzlpYWw5MllXeDFaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0doaGMxUnlZVzV6Wm1WeVRtOTBRV3hzYjNkbFpFeHZaMmx1YVdRb2IySnFYM1poYkhWbGN5NTJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR05vWldOcklHbG1JSE5sYkdWamRHVmtJSFJ2SUdseklHNXZkQ0JoYkd4dmQyVmtJR0ZqWTI5MWJuUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOWlhbDkyWVd4MVpYTXVaWEp5YjNJZ1BTQm5aWFJUWld4bFkzUmxaRVZ5Y205eUtHOWlhbDkyWVd4MVpYTXVkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFUyVnNaV04wWldSVWJ5aHZZbXBmZG1Gc2RXVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYzJWMFRHOWhaR2x1WnlobVlXeHpaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMkZ1Ukc5QlkyTnZkVzUwVkhKaGJuTm1aWElvWVdOamIzVnVkSE1wSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR05oYmw5MGNtRnVjMlpsY2lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUM4dklITm9iM1ZzWkNCb1lYWmxJR0YwSUd4bFlYTjBJRzl1WlNCaFkyTnZkVzUwSUhkcGRHZ2dZbUZzWVc1alpWeHVJQ0FnSUNBZ0lDQnBaaUFvSVdGalkyOTFiblJ6TG1acGJtUW9ZV05qYjNWdWRDQTlQaUFyWVdOamIzVnVkQzVpWVd4aGJtTmxJRDRnTUNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGJsOTBjbUZ1YzJabGNpQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJJWVhOT2IwRmpZMjkxYm5SelFtRnNZVzVqWlNoMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFNHRnpUbTlCWTJOdmRXNTBjMEpoYkdGdVkyVW9abUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUhOb2IzVnNaQ0JvWVhabElHRjBJR3hsWVhOMElIUjNieUJ5WldGc0xXMXZibVY1SUdGalkyOTFiblJ6WEc0Z0lDQWdJQ0FnSUdsbUlDaGhZMk52ZFc1MGN5NXNaVzVuZEdnZ1BEMGdNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ1WDNSeVlXNXpabVZ5SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFaGhjMDV2UVdOamIzVnVkQ2gwY25WbEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwU0dGelRtOUJZMk52ZFc1MEtHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVdOaGJsOTBjbUZ1YzJabGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MFgzTjBiM0psTG0xdlpIVnNaWE11WTJGemFHbGxjaTVuWlc1bGNtRnNYM04wYjNKbExuTmxkRXh2WVdScGJtY29abUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZVzVmZEhKaGJuTm1aWEk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSE5sZEVoaGMwNXZRV05qYjNWdWRITkNZV3hoYm1ObEtHaGhjMTl1YjE5aFkyTnZkVzUwYzE5aVlXeGhibU5sS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YUdGelgyNXZYMkZqWTI5MWJuUnpYMkpoYkdGdVkyVWdQU0JvWVhOZmJtOWZZV05qYjNWdWRITmZZbUZzWVc1alpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyVjBTR0Z6VG05QlkyTnZkVzUwS0doaGMxOXViMTloWTJOdmRXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhR0Z6WDI1dlgyRmpZMjkxYm5RZ1BTQm9ZWE5mYm05ZllXTmpiM1Z1ZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYzJWMFZISmhibk5tWlhKR1pXVW9LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJ5WVc1elptVnlYMlpsWlNBOUlHZGxkRkJ5YjNCbGNuUjVWbUZzZFdVb1oyVjBRM1Z5Y21WdVkybGxjeWdwTENCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxiR1ZqZEdWa1gyWnliMjB1WTNWeWNtVnVZM2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5kSEpoYm5ObVpYSmZZbVYwZDJWbGJsOWhZMk52ZFc1MGN5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBblptVmxjeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJHVmpkR1ZrWDNSdkxtTjFjbkpsYm1ONUxGeHVJQ0FnSUNBZ0lDQmRLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBjbUZ1YzJabGNsOW1aV1VnUFNCT2RXMWlaWElvZEhKaGJuTm1aWEpmWm1WbElIeDhJREFwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSTmFXNXBiWFZ0Um1WbEtDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmtaV05wYldGc2N5QTlJR2RsZEVSbFkybHRZV3hRYkdGalpYTW9kR2hwY3k1elpXeGxZM1JsWkY5bWNtOXRMbU4xY25KbGJtTjVLVHRjYmlBZ0lDQWdJQ0FnTHk4Z2QyVWdibVZsWkNBdWRHOUdhWGhsWkNncElITnZJSFJvWVhRZ2FYUWdaRzlsYzI0bmRDQmthWE53YkdGNUlHbHVJSE5qYVdWdWRHbG1hV01nYm05MFlYUnBiMjRzSUdVdVp5NGdNV1V0T0NCbWIzSWdZM1Z5Y21WdVkybGxjeUIzYVhSb0lEZ2daR1ZqYVcxaGJDQndiR0ZqWlhOY2JpQWdJQ0FnSUNBZ2RHaHBjeTV0YVc1cGJYVnRYMlpsWlNBOUlDZ3hJQzhnVFdGMGFDNXdiM2NvTVRBc0lHUmxZMmx0WVd4ektTa3VkRzlHYVhobFpDaGtaV05wYldGc2N5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRlJ5WVc1elptVnlUR2x0YVhRb0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHpYMjEwWDNSeVlXNXpabVZ5SUQwZ2RHaHBjeTV6Wld4bFkzUmxaRjltY205dExtbHpYMjEwSUh4OElIUm9hWE11YzJWc1pXTjBaV1JmZEc4dWFYTmZiWFE3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2x6WDJSNGRISmhaR1ZmZEhKaGJuTm1aWElnUFNCMGFHbHpMbk5sYkdWamRHVmtYMlp5YjIwdWFYTmZaSGgwY21Ga1pTQjhmQ0IwYUdsekxuTmxiR1ZqZEdWa1gzUnZMbWx6WDJSNGRISmhaR1U3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR3hwYldsMGMxOXJaWGs3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMTl0ZEY5MGNtRnVjMlpsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdsdGFYUnpYMnRsZVNBOUlDZHNhVzFwZEhOZmJYUTFKenRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNocGMxOWtlSFJ5WVdSbFgzUnlZVzV6Wm1WeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc2FXMXBkSE5mYTJWNUlEMGdKMnhwYldsMGMxOWtlSFJ5WVdSbEp6dGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4cGJXbDBjMTlyWlhrZ1BTQW5iR2x0YVhSekp6dGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJ5WVc1elptVnlYMnhwYldsMElEMGdaMlYwVUhKdmNHVnlkSGxXWVd4MVpTaG5aWFJEZFhKeVpXNWphV1Z6S0Nrc0lGdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZzWldOMFpXUmZabkp2YlM1amRYSnlaVzVqZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2QwY21GdWMyWmxjbDlpWlhSM1pXVnVYMkZqWTI5MWJuUnpKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHBiV2wwYzE5clpYa3NYRzRnSUNBZ0lDQWdJRjBwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JpWVd4aGJtTmxJRDBnZEdocGN5NXpaV3hsWTNSbFpGOW1jbTl0TG1KaGJHRnVZMlU3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1JsWTJsdFlXeGZjR3hoWTJWeklEMGdaMlYwUkdWamFXMWhiRkJzWVdObGN5aDBhR2x6TG5ObGJHVmpkR1ZrWDJaeWIyMHVZM1Z5Y21WdVkza3BPMXh1SUNBZ0lDQWdJQ0F2THlCM1pTQnVaV1ZrSUM1MGIwWnBlR1ZrS0NrZ2MyOGdkR2hoZENCcGRDQmtiMlZ6YmlkMElHUnBjM0JzWVhrZ2FXNGdjMk5wWlc1MGFXWnBZeUJ1YjNSaGRHbHZiaXdnWlM1bkxpQXhaUzA0SUdadmNpQmpkWEp5Wlc1amFXVnpJSGRwZEdnZ09DQmtaV05wYldGc0lIQnNZV05sYzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ5WVc1elptVnlYMnhwYldsMElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXRjRPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0YwY21GdWMyWmxjbDlzYVcxcGREOHViV0Y0SUh4OElDZ3JZbUZzWVc1alpTQStQU0FvZEhKaGJuTm1aWEpmYkdsdGFYUS9MbTFwYmlCOGZDQXdLU0FtSmlBclltRnNZVzVqWlNBOFBTQjBjbUZ1YzJabGNsOXNhVzFwZEQ4dWJXRjRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lHSmhiR0Z1WTJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUIwY21GdWMyWmxjbDlzYVcxcGREOHViV0Y0TG5SdlJtbDRaV1FvWkdWamFXMWhiRjl3YkdGalpYTXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXbHVPaUIwY21GdWMyWmxjbDlzYVcxcGREOHViV2x1SUQ4Z0tDdDBjbUZ1YzJabGNsOXNhVzFwZEQ4dWJXbHVLUzUwYjBacGVHVmtLR1JsWTJsdFlXeGZjR3hoWTJWektTQTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lHRnplVzVqSUhOdmNuUkJZMk52ZFc1MGMxUnlZVzV6Wm1WeUtISmxjM0J2Ym5ObFgyRmpZMjkxYm5SektTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIUnlZVzV6Wm1WeVgySmxkSGRsWlc1ZllXTmpiM1Z1ZEhNZ1BTQnlaWE53YjI1elpWOWhZMk52ZFc1MGN5QjhmQ0FvWVhkaGFYUWdkR2hwY3k1WFV5NWhkWFJvYjNKcGVtVmtMblJ5WVc1elptVnlRbVYwZDJWbGJrRmpZMjkxYm5SektDa3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WVdOamIzVnVkSE5mYkdsemRDNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBjbUZ1YzJabGNsOWlaWFIzWldWdVgyRmpZMjkxYm5SekxtVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYlhRMVgyeHZaMmx1WDJ4cGMzUWdQU0FvWVhkaGFYUWdkR2hwY3k1WFV5NXpkRzl5WVdkbExtMTBOVXh2WjJsdVRHbHpkQ2dwS1Q4dWJYUTFYMnh2WjJsdVgyeHBjM1E3WEc0Z0lDQWdJQ0FnSUM4dklGUlBSRTg2SUcxdmRtVWdZSFJ5WVdScGJtZFFiR0YwWm05eWJVRmpZMjkxYm5SelRHbHpkR0FnZEc4Z1pHVnlhWFl0WVhCcElIUnZJSFZ6WlNCemRHOXlZV2RsWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1I0ZEhKaFpHVmZZV05qYjNWdWRITmZiR2x6ZENBOUlDaGhkMkZwZENCMGFHbHpMbGRUTG5SeVlXUnBibWRRYkdGMFptOXliVUZqWTI5MWJuUnpUR2x6ZENoRFJrUmZVRXhCVkVaUFVrMVRMa1JZVkZKQlJFVXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ1B5NTBjbUZrYVc1blgzQnNZWFJtYjNKdFgyRmpZMjkxYm5Sek8xeHVYRzRnSUNBZ0lDQWdJQzh2SUZSUFJFODZJSEpsYlc5MlpTQjBhR2x6SUhSbGJYQnZjbUZ5ZVNCdFlYQndhVzVuSUhkb1pXNGdRVkJKSUdGa1pITWdiV0Z5YTJWMFgzUjVjR1VnWVc1a0lITjFZbDloWTJOdmRXNTBYM1I1Y0dVZ2RHOGdkSEpoYm5ObVpYSmZZbVYwZDJWbGJsOWhZMk52ZFc1MGMxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCaFkyTnZkVzUwY3lBOUlIUnlZVzV6Wm1WeVgySmxkSGRsWlc1ZllXTmpiM1Z1ZEhNdVlXTmpiM1Z1ZEhNdWJXRndLR0ZqWTI5MWJuUWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGalkyOTFiblF1WVdOamIzVnVkRjkwZVhCbElEMDlQU0JEUmtSZlVFeEJWRVpQVWsxVExrMVVOU0FtSmlCQmNuSmhlUzVwYzBGeWNtRjVLRzEwTlY5c2IyZHBibDlzYVhOMEtTQW1KaUJ0ZERWZmJHOW5hVzVmYkdsemRDNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJoWTJOdmRXNTBYM1I1Y0dVZ2FXNGdkSEpoYm5ObVpYSmZZbVYwZDJWbGJsOWhZMk52ZFc1MGN5QW9iWFExZkdKcGJtRnllU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCblpYUnpJRzkyWlhKeWFXUmtaVzRnWW5rZ1lXTmpiM1Z1ZEY5MGVYQmxJR2x1SUcxME5WOXNiMmRwYmw5c2FYTjBJQ2hrWlcxdmZISmxZV3dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MybHVZMlVnYVc0Z1kyRnphR2xsY2lCaGJHd2dkR2hsYzJVZ1lYSmxJSEpsWVd3Z1lXTmpiM1Z1ZEhNc0lIUm9aU0J0ZERVZ1lXTmpiM1Z1ZENCMGVYQmxJR2x6SUhkb1lYUWdkMlVnZDJGdWRDQjBieUJyWldWd1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWm05MWJtUmZZV05qYjNWdWRDQTlJRzEwTlY5c2IyZHBibDlzYVhOMExtWnBibVFvWVdOaklEMCtJR0ZqWXk1c2IyZHBiaUE5UFQwZ1lXTmpiM1Z1ZEM1c2IyZHBibWxrS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htYjNWdVpGOWhZMk52ZFc1MElEMDlQU0IxYm1SbFptbHVaV1FwSUhKbGRIVnliaUJoWTJOdmRXNTBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSHNnTGk0dVlXTmpiM1Z1ZEN3Z0xpNHVabTkxYm1SZllXTmpiM1Z1ZEN3Z1lXTmpiM1Z1ZEY5MGVYQmxPaUJEUmtSZlVFeEJWRVpQVWsxVExrMVVOU0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZqWTI5MWJuUXVZV05qYjNWdWRGOTBlWEJsSUQwOVBTQkRSa1JmVUV4QlZFWlBVazFUTGtSWVZGSkJSRVVnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCQmNuSmhlUzVwYzBGeWNtRjVLR1I0ZEhKaFpHVmZZV05qYjNWdWRITmZiR2x6ZENrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtlSFJ5WVdSbFgyRmpZMjkxYm5SelgyeHBjM1F1YkdWdVozUm9YRzRnSUNBZ0lDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJoWTJOdmRXNTBYM1I1Y0dVZ2FXNGdkSEpoYm5ObVpYSmZZbVYwZDJWbGJsOWhZMk52ZFc1MGN5QW9iWFExZkdKcGJtRnllU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCblpYUnpJRzkyWlhKeWFXUmtaVzRnWW5rZ1lXTmpiM1Z1ZEY5MGVYQmxJR2x1SUdSNGRISmhaR1ZmWVdOamIzVnVkSE5mYkdsemRDQW9aR1Z0YjN4eVpXRnNLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhOcGJtTmxJR2x1SUdOaGMyaHBaWElnWVd4c0lIUm9aWE5sSUdGeVpTQnlaV0ZzSUdGalkyOTFiblJ6TENCMGFHVWdiWFExSUdGalkyOTFiblFnZEhsd1pTQnBjeUIzYUdGMElIZGxJSGRoYm5RZ2RHOGdhMlZsY0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1p2ZFc1a1gyRmpZMjkxYm5RZ1BTQmtlSFJ5WVdSbFgyRmpZMjkxYm5SelgyeHBjM1F1Wm1sdVpDaGhZMk1nUFQ0Z1lXTmpMbUZqWTI5MWJuUmZhV1FnUFQwOUlHRmpZMjkxYm5RdWJHOW5hVzVwWkNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm05MWJtUmZZV05qYjNWdWRDQTlQVDBnZFc1a1pXWnBibVZrS1NCeVpYUjFjbTRnWVdOamIzVnVkRHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3SUM0dUxtRmpZMjkxYm5Rc0lDNHVMbVp2ZFc1a1gyRmpZMjkxYm5Rc0lHRmpZMjkxYm5SZmRIbHdaVG9nUTBaRVgxQk1RVlJHVDFKTlV5NUVXRlJTUVVSRklIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZV05qYjNWdWREdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUM4dklITnZjblFnWVdOamIzVnVkSE1nWVhNZ1ptOXNiRzkzY3pwY2JpQWdJQ0FnSUNBZ0x5OGdabTl5SUUxVU5Td2djM2x1ZEdobGRHbGpMQ0JtYVc1aGJtTnBZV3dzSUdacGJtRnVZMmxoYkNCemRIQmNiaUFnSUNBZ0lDQWdMeThnWm05eUlHNXZiaTFOVkRVc0lHWnBZWFFzSUdOeWVYQjBieUFvWVd4d2FHRmlaWFJwWTJGc2JIa2dZbmtnWTNWeWNtVnVZM2twWEc0Z0lDQWdJQ0FnSUM4dklITm9iM1ZzWkNCb1lYWmxJRzF2Y21VZ2RHaGhiaUJ2Ym1VZ1lXTmpiM1Z1ZEZ4dUlDQWdJQ0FnSUNCcFppQW9kSEpoYm5ObVpYSmZZbVYwZDJWbGJsOWhZMk52ZFc1MGN5NWhZMk52ZFc1MGN5NXNaVzVuZEdnZ1BpQXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZMk52ZFc1MGN5NXpiM0owS0NoaExDQmlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWVY5cGMxOXRkQ0E5SUdFdVlXTmpiM1Z1ZEY5MGVYQmxJRDA5UFNCRFJrUmZVRXhCVkVaUFVrMVRMazFVTlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JpWDJselgyMTBJRDBnWWk1aFkyTnZkVzUwWDNSNWNHVWdQVDA5SUVOR1JGOVFURUZVUms5U1RWTXVUVlExTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR0ZmYVhOZlkzSjVjSFJ2SUQwZ0lXRmZhWE5mYlhRZ0ppWWdhWE5EY25sd2RHOWpkWEp5Wlc1amVTaGhMbU4xY25KbGJtTjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmlYMmx6WDJOeWVYQjBieUE5SUNGaVgybHpYMjEwSUNZbUlHbHpRM0o1Y0hSdlkzVnljbVZ1WTNrb1lpNWpkWEp5Wlc1amVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1lWOXBjMTltYVdGMElEMGdJV0ZmYVhOZmJYUWdKaVlnSVdGZmFYTmZZM0o1Y0hSdk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdKZmFYTmZabWxoZENBOUlDRmlYMmx6WDIxMElDWW1JQ0ZpWDJselgyTnllWEIwYnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZVjlwYzE5dGRDQW1KaUJpWDJselgyMTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoTG0xaGNtdGxkRjkwZVhCbElEMDlQU0FuWjJGdGFXNW5KeUI4ZkNCaExtMWhjbXRsZEY5MGVYQmxJRDA5UFNBbmMzbHVkR2hsZEdsakp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDMHhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaExuTjFZbDloWTJOdmRXNTBYM1I1Y0dVZ1BUMDlJQ2RtYVc1aGJtTnBZV3duS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWWk1dFlYSnJaWFJmZEhsd1pTQTlQVDBnSjJkaGJXbHVaeWNnZkh3Z1lpNXRZWEpyWlhSZmRIbHdaU0E5UFQwZ0ozTjViblJvWlhScFl5Y2dQeUF4SURvZ0xURTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2dvWVY5cGMxOWpjbmx3ZEc4Z0ppWWdZbDlwYzE5amNubHdkRzhwSUh4OElDaGhYMmx6WDJacFlYUWdKaVlnWWw5cGMxOW1hV0YwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZUzVqZFhKeVpXNWplU0E4SUdJdVkzVnljbVZ1WTNrZ1B5QXRNU0E2SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ29ZVjlwYzE5amNubHdkRzhnSmlZZ1lsOXBjMTl0ZENrZ2ZId2dLR0ZmYVhOZlptbGhkQ0FtSmlCaVgybHpYMk55ZVhCMGJ5a2dmSHdnS0dGZmFYTmZabWxoZENBbUppQmlYMmx6WDIxMEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTFRFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaFgybHpYMjEwSUQ4Z0xURWdPaUF4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWVhKeVgyRmpZMjkxYm5SeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVTJWc1pXTjBaV1JVYnloN2ZTazdJQzh2SUhObGRDQnpaV3hsWTNSbFpDQjBieUJsYlhCMGVTQmxZV05vSUhScGJXVWdjMjhnZDJVZ1kyRnVJSEpsWkdWMFpYSnRhVzVsSUdsMGN5QjJZV3gxWlNCdmJpQnlaV3h2WVdSY2JseHVJQ0FnSUNBZ0lDQmhZMk52ZFc1MGN5NW1iM0pGWVdOb0tHRmpZMjkxYm5RZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTJaa1gzQnNZWFJtYjNKdGN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0ZERVNklIc2dibUZ0WlRvZ0owUk5WRFVuTENCcFkyOXVPaUFuU1dOTmREVW5JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkhoMGNtRmtaVG9nZXlCdVlXMWxPaUFuUkdWeWFYWWdXQ2NzSUdsamIyNDZJQ2RKWTBSNGRISmhaR1VuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2FYTmZZMlprSUQwZ1QySnFaV04wTG10bGVYTW9ZMlprWDNCc1lYUm1iM0p0Y3lrdWFXNWpiSFZrWlhNb1lXTmpiM1Z1ZEM1aFkyTnZkVzUwWDNSNWNHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTJaa1gzUmxlSFJmWkdsemNHeGhlU0E5SUdObVpGOXdiR0YwWm05eWJYTmJZV05qYjNWdWRDNWhZMk52ZFc1MFgzUjVjR1ZkUHk1dVlXMWxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTJaa1gybGpiMjVmWkdsemNHeGhlU0E5SUdBa2UyTm1aRjl3YkdGMFptOXliWE5iWVdOamIzVnVkQzVoWTJOdmRXNTBYM1I1Y0dWZFB5NXBZMjl1ZlMwa2UyZGxkRU5HUkVGalkyOTFiblFvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGNtdGxkRjkwZVhCbE9pQmhZMk52ZFc1MExtMWhjbXRsZEY5MGVYQmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4xWWw5aFkyTnZkVzUwWDNSNWNHVTZJR0ZqWTI5MWJuUXVjM1ZpWDJGalkyOTFiblJmZEhsd1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiR0YwWm05eWJUb2dZV05qYjNWdWRDNWhZMk52ZFc1MFgzUjVjR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhOZlpYVTZJSFJvYVhNdWNtOXZkRjl6ZEc5eVpTNWpiR2xsYm5RdWFYTmZaWFVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLWDFnTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1lXTmpiM1Z1ZEY5MFpYaDBYMlJwYzNCc1lYa2dQU0JwYzE5alptUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JR0FrZTJObVpGOTBaWGgwWDJScGMzQnNZWGw5SUNSN1oyVjBRMFpFUVdOamIzVnVkRVJwYzNCc1lYa29lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbXRsZEY5MGVYQmxPaUJoWTJOdmRXNTBMbTFoY210bGRGOTBlWEJsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4xWWw5aFkyTnZkVzUwWDNSNWNHVTZJR0ZqWTI5MWJuUXVjM1ZpWDJGalkyOTFiblJmZEhsd1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JHRjBabTl5YlRvZ1lXTmpiM1Z1ZEM1aFkyTnZkVzUwWDNSNWNHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYTmZaWFU2SUhSb2FYTXVjbTl2ZEY5emRHOXlaUzVqYkdsbGJuUXVhWE5mWlhVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLWDFnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCblpYUkRkWEp5Wlc1amVVUnBjM0JzWVhsRGIyUmxLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmpZMjkxYm5RdVkzVnljbVZ1WTNrZ0lUMDlJQ2RsVlZORVZDY2dQeUJoWTJOdmRXNTBMbU4xY25KbGJtTjVMblJ2VlhCd1pYSkRZWE5sS0NrZ09pQmhZMk52ZFc1MExtTjFjbkpsYm1ONVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdlltcGZkbUZzZFdWeklEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsZUhRNklHRmpZMjkxYm5SZmRHVjRkRjlrYVhOd2JHRjVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmhZMk52ZFc1MExteHZaMmx1YVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRnNZVzVqWlRvZ1lXTmpiM1Z1ZEM1aVlXeGhibU5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxibU41T2lCaFkyTnZkVzUwTG1OMWNuSmxibU41TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdselgyTnllWEIwYnpvZ2FYTkRjbmx3ZEc5amRYSnlaVzVqZVNoaFkyTnZkVzUwTG1OMWNuSmxibU41S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGMxOXRkRG9nWVdOamIzVnVkQzVoWTJOdmRXNTBYM1I1Y0dVZ1BUMDlJRU5HUkY5UVRFRlVSazlTVFZNdVRWUTFMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x6WDJSNGRISmhaR1U2SUdGalkyOTFiblF1WVdOamIzVnVkRjkwZVhCbElEMDlQU0JEUmtSZlVFeEJWRVpQVWsxVExrUllWRkpCUkVVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xpNHVLR2x6WDJObVpDQW1KaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnNZWFJtYjNKdFgybGpiMjQ2SUdObVpGOXBZMjl1WDJScGMzQnNZWGtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbXRsZEY5MGVYQmxPaUJuWlhSRFJrUkJZMk52ZFc1MEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbXRsZEY5MGVYQmxPaUJoWTJOdmRXNTBMbTFoY210bGRGOTBlWEJsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNWaVgyRmpZMjkxYm5SZmRIbHdaVG9nWVdOamIzVnVkQzV6ZFdKZllXTmpiM1Z1ZEY5MGVYQmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR3hoZEdadmNtMDZJR0ZqWTI5MWJuUXVZV05qYjNWdWRGOTBlWEJsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhOZlpYVTZJSFJvYVhNdWNtOXZkRjl6ZEc5eVpTNWpiR2xsYm5RdWFYTmZaWFVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5sZENCamRYSnlaVzUwSUd4dloyZGxaQ0JwYmlCamJHbGxiblFnWVhNZ2RHaGxJR1JsWm1GMWJIUWdkSEpoYm5ObVpYSWdabkp2YlNCaFkyTnZkVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVdOamIzVnVkQzVzYjJkcGJtbGtJRDA5UFNCMGFHbHpMbkp2YjNSZmMzUnZjbVV1WTJ4cFpXNTBMbXh2WjJsdWFXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCamFHVmpheUJwWmlCelpXeGxZM1JsWkNCbWNtOXRJR2x6SUc1dmRDQmhiR3h2ZDJWa0lHRmpZMjkxYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hR0Z6VkhKaGJuTm1aWEpPYjNSQmJHeHZkMlZrVEc5bmFXNXBaQ2h2WW1wZmRtRnNkV1Z6TG5aaGJIVmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZZbXBmZG1Gc2RXVnpMbVZ5Y205eUlEMGdaMlYwVTJWc1pXTjBaV1JGY25KdmNpaHZZbXBmZG1Gc2RXVnpMblpoYkhWbExDQjBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGTmxiR1ZqZEdWa1JuSnZiU2h2WW1wZmRtRnNkV1Z6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYVhORmJYQjBlVTlpYW1WamRDaDBhR2x6TG5ObGJHVmpkR1ZrWDNSdktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNob1lYTlVjbUZ1YzJabGNrNXZkRUZzYkc5M1pXUk1iMmRwYm1sa0tHOWlhbDkyWVd4MVpYTXVkbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHTm9aV05ySUdsbUlITmxiR1ZqZEdWa0lIUnZJR2x6SUc1dmRDQmhiR3h2ZDJWa0lHRmpZMjkxYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMkpxWDNaaGJIVmxjeTVsY25KdmNpQTlJR2RsZEZObGJHVmpkR1ZrUlhKeWIzSW9iMkpxWDNaaGJIVmxjeTUyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhObGRDQjBhR1VnWm1seWMzUWdZWFpoYVd4aFlteGxJR0ZqWTI5MWJuUWdZWE1nZEdobElHUmxabUYxYkhRZ2RISmhibk5tWlhJZ2RHOGdZV05qYjNWdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFUyVnNaV04wWldSVWJ5aHZZbXBmZG1Gc2RXVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWNsOWhZMk52ZFc1MGN5NXdkWE5vS0c5aWFsOTJZV3gxWlhNcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJCWTJOdmRXNTBjeWhoY25KZllXTmpiM1Z1ZEhNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCelpYUlRaV3hsWTNSbFpFWnliMjBvYjJKcVgzWmhiSFZsY3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJHVmpkR1ZrWDJaeWIyMGdQU0J2WW1wZmRtRnNkV1Z6TzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSVFpXeGxZM1JsWkZSdktHOWlhbDkyWVd4MVpYTXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaV3hsWTNSbFpGOTBieUE5SUc5aWFsOTJZV3gxWlhNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhObGRFRmpZMjkxYm5SektHRnljbDloWTJOdmRXNTBjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbUZqWTI5MWJuUnpYMnhwYzNRZ1BTQmhjbkpmWVdOamIzVnVkSE03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSE5sZEVselZISmhibk5tWlhKRGIyNW1hWEp0S0dselgzUnlZVzV6Wm1WeVgyTnZibVpwY20wcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGMxOTBjbUZ1YzJabGNsOWpiMjVtYVhKdElEMGdhWE5mZEhKaGJuTm1aWEpmWTI5dVptbHliVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdjMlYwUVdOamIzVnVkRlJ5WVc1elptVnlRVzF2ZFc1MEtHRnRiM1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GalkyOTFiblJmZEhKaGJuTm1aWEpmWVcxdmRXNTBJRDBnWVcxdmRXNTBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJKYzFSeVlXNXpabVZ5VTNWalkyVnpjMloxYkNocGMxOTBjbUZ1YzJabGNsOXpkV05qWlhOelpuVnNLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE5mZEhKaGJuTm1aWEpmYzNWalkyVnpjMloxYkNBOUlHbHpYM1J5WVc1elptVnlYM04xWTJObGMzTm1kV3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSE5sZEVselRWUTFWSEpoYm5ObVpYSkpibEJ5YjJkeVpYTnpLR2x6WDIxME5WOTBjbUZ1YzJabGNsOXBibDl3Y205bmNtVnpjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx6WDIxME5WOTBjbUZ1YzJabGNsOXBibDl3Y205bmNtVnpjeUE5SUdselgyMTBOVjkwY21GdWMyWmxjbDlwYmw5d2NtOW5jbVZ6Y3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYzJWMFVtVmpaV2x3ZEZSeVlXNXpabVZ5S0hzZ1lXMXZkVzUwSUgwcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXTmxhWEIwSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVcxdmRXNTBYM1J5WVc1elptVnljbVZrT2lCaGJXOTFiblFzWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUc5dVEyaGhibWRsVkhKaGJuTm1aWEpHY205dEtIc2dkR0Z5WjJWMElIMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y2k1elpYUkZjbkp2Y2sxbGMzTmhaMlVvSnljcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJHVmpkR1ZrWDJaeWIyMHVaWEp5YjNJZ1BTQW5KenRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0JoWTJOdmRXNTBjeUE5SUhSb2FYTXVZV05qYjNWdWRITmZiR2x6ZER0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJWc1pXTjBaV1JmWm5KdmJTQTlJR0ZqWTI5MWJuUnpMbVpwYm1Rb1lXTmpiM1Z1ZENBOVBpQmhZMk52ZFc1MExuWmhiSFZsSUQwOVBTQjBZWEpuWlhRdWRtRnNkV1VwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR2xtSUc1bGR5QjJZV3gxWlNCdlppQnpaV3hsWTNSbFpGOW1jbTl0SUdseklIUm9aU0J6WVcxbElHRnpJSFJvWlNCamRYSnlaVzUwSUhObGJHVmpkR1ZrWDNSdlhHNGdJQ0FnSUNBZ0lDOHZJSE4zYVhSamFDQjBhR1VnZG1Gc2RXVWdiMllnYzJWc1pXTjBaV1JmWm5KdmJTQmhibVFnYzJWc1pXTjBaV1JmZEc5Y2JpQWdJQ0FnSUNBZ2FXWWdLSE5sYkdWamRHVmtYMlp5YjIwdWRtRnNkV1VnUFQwOUlIUm9hWE11YzJWc1pXTjBaV1JmZEc4dWRtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNURhR0Z1WjJWVWNtRnVjMlpsY2xSdktIc2dkR0Z5WjJWME9pQjdJSFpoYkhWbE9pQjBhR2x6TG5ObGJHVmpkR1ZrWDJaeWIyMHVkbUZzZFdVZ2ZTQjlLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ2h6Wld4bFkzUmxaRjltY205dExtbHpYMjEwSUNZbUlIUm9hWE11YzJWc1pXTjBaV1JmZEc4dWFYTmZiWFFwSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FvYzJWc1pXTjBaV1JmWm5KdmJTNXBjMTlrZUhSeVlXUmxJQ1ltSUhSb2FYTXVjMlZzWldOMFpXUmZkRzh1YVhOZlpIaDBjbUZrWlNrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNoelpXeGxZM1JsWkY5bWNtOXRMbWx6WDJSNGRISmhaR1VnSmlZZ2RHaHBjeTV6Wld4bFkzUmxaRjkwYnk1cGMxOXRkQ2tnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2h6Wld4bFkzUmxaRjltY205dExtbHpYMjEwSUNZbUlIUm9hWE11YzJWc1pXTjBaV1JmZEc4dWFYTmZaSGgwY21Ga1pTbGNiaUFnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ1YjNRZ1lXeHNiM2RsWkNCMGJ5QjBjbUZ1YzJabGNpQm1jbTl0SUUxVUlIUnZJRTFVWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ1YjNRZ1lXeHNiM2RsWkNCMGJ5QjBjbUZ1YzJabGNpQm1jbTl0SUVSNGRISmhaR1VnZEc4Z1JIaDBjbUZrWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYm05MElHRnNiRzkzWldRZ2RHOGdkSEpoYm5ObVpYSWdZbVYwZDJWbGJpQk5WQ0JoYm1RZ1JIaDBjbUZrWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1ptbHljM1JmYm05dVgyTm1aQ0E5SUhSb2FYTXVZV05qYjNWdWRITmZiR2x6ZEM1bWFXNWtLR0ZqWTI5MWJuUWdQVDRnSVdGalkyOTFiblF1YVhOZmJYUWdKaVlnSVdGalkyOTFiblF1YVhOZlpIaDBjbUZrWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXVRMmhoYm1kbFZISmhibk5tWlhKVWJ5aDdJSFJoY21kbGREb2dleUIyWVd4MVpUb2dabWx5YzNSZmJtOXVYMk5tWkM1MllXeDFaU0I5SUgwcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5sYkdWamRHVmtYMlp5YjIwdWFYTmZZM0o1Y0hSdklDWW1JSFJvYVhNdWMyVnNaV04wWldSZmRHOHVhWE5mWTNKNWNIUnZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ1YjNRZ1lXeHNiM2RsWkNCMGJ5QjBjbUZ1YzJabGNpQmpjbmx3ZEc4Z2RHOGdZM0o1Y0hSdlhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQm1hWEp6ZEY5bWFXRjBJRDBnZEdocGN5NWhZMk52ZFc1MGMxOXNhWE4wTG1acGJtUW9ZV05qYjNWdWRDQTlQaUFoWVdOamIzVnVkQzVwYzE5amNubHdkRzhwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJrTm9ZVzVuWlZSeVlXNXpabVZ5Vkc4b2V5QjBZWEpuWlhRNklIc2dkbUZzZFdVNklHWnBjbk4wWDJacFlYUXVkbUZzZFdVZ2ZTQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hvWVhOVWNtRnVjMlpsY2s1dmRFRnNiRzkzWldSTWIyZHBibWxrS0hObGJHVmpkR1ZrWDJaeWIyMHVkbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeGxZM1JsWkY5bWNtOXRMbVZ5Y205eUlEMGdaMlYwVTJWc1pXTjBaV1JGY25KdmNpaHpaV3hsWTNSbFpGOW1jbTl0TG5aaGJIVmxMQ0IwY25WbEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlZzWldOMFpXUmZabkp2YlNBOUlITmxiR1ZqZEdWa1gyWnliMjA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVkhKaGJuTm1aWEpHWldVb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUk5hVzVwYlhWdFJtVmxLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVkhKaGJuTm1aWEpNYVcxcGRDZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnZia05vWVc1blpWUnlZVzV6Wm1WeVZHOG9leUIwWVhKblpYUWdmU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eUxuTmxkRVZ5Y205eVRXVnpjMkZuWlNnbkp5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVnNaV04wWldSZmRHOHVaWEp5YjNJZ1BTQW5KenRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0JoWTJOdmRXNTBjeUE5SUhSb2FYTXVZV05qYjNWdWRITmZiR2x6ZER0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6Wld4bFkzUmxaRjkwYnlBOUlHRmpZMjkxYm5SekxtWnBibVFvWVdOamIzVnVkQ0E5UGlCaFkyTnZkVzUwTG5aaGJIVmxJRDA5UFNCMFlYSm5aWFF1ZG1Gc2RXVXBJSHg4SUh0OU8xeHVJQ0FnSUNBZ0lDQnBaaUFvYUdGelZISmhibk5tWlhKT2IzUkJiR3h2ZDJWa1RHOW5hVzVwWkNoMGFHbHpMbk5sYkdWamRHVmtYM1J2TG5aaGJIVmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXeGxZM1JsWkY5MGJ5NWxjbkp2Y2lBOUlHZGxkRk5sYkdWamRHVmtSWEp5YjNJb2RHaHBjeTV6Wld4bFkzUmxaRjkwYnk1MllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSVWNtRnVjMlpsY2tabFpTZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRTFwYm1sdGRXMUdaV1VvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSVWNtRnVjMlpsY2t4cGJXbDBLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVZ4ZFdWemRGUnlZVzV6Wm1WeVFtVjBkMlZsYmtGalkyOTFiblJ6SUQwZ1lYTjVibU1nS0hzZ1lXMXZkVzUwSUgwcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJqYkdsbGJuUXNJRzF2WkhWc1pYTWdmU0E5SUhSb2FYTXVjbTl2ZEY5emRHOXlaVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJ6WlhSTWIyRmthVzVuSUgwZ1BTQnRiMlIxYkdWekxtTmhjMmhwWlhJdVoyVnVaWEpoYkY5emRHOXlaVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTmZiRzluWjJWa1gybHVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpjRzl1YzJWTmREVk1iMmRwYmt4cGMzUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTndiMjV6WlZSeVlXUnBibWRRYkdGMFptOXliVUZqWTI5MWJuUnpUR2x6ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEVGalkyOTFiblJUZEdGMGRYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYUkNZV3hoYm1ObFQzUm9aWEpCWTJOdmRXNTBjeXhjYmlBZ0lDQWdJQ0FnZlNBOUlHTnNhV1Z1ZER0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvSVdselgyeHZaMmRsWkY5cGJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCelpYUk1iMkZrYVc1bktIUnlkV1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eUxuTmxkRVZ5Y205eVRXVnpjMkZuWlNnbkp5azdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhWE5mYlhSZmRISmhibk5tWlhJZ1BTQjBhR2x6TG5ObGJHVmpkR1ZrWDJaeWIyMHVhWE5mYlhRZ2ZId2dkR2hwY3k1elpXeGxZM1JsWkY5MGJ5NXBjMTl0ZER0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYVhOZmJYUmZkSEpoYm5ObVpYSXBJSFJvYVhNdWMyVjBTWE5OVkRWVWNtRnVjMlpsY2tsdVVISnZaM0psYzNNb2RISjFaU2s3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTNWeWNtVnVZM2tnUFNCMGFHbHpMbk5sYkdWamRHVmtYMlp5YjIwdVkzVnljbVZ1WTNrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSeVlXNXpabVZ5WDJKbGRIZGxaVzVmWVdOamIzVnVkSE1nUFNCaGQyRnBkQ0IwYUdsekxsZFRMbUYxZEdodmNtbDZaV1F1ZEhKaGJuTm1aWEpDWlhSM1pXVnVRV05qYjNWdWRITW9YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYkdWamRHVmtYMlp5YjIwdWRtRnNkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJHVmpkR1ZrWDNSdkxuWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdVkza3NYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJXOTFiblJjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYVhOZmJYUmZkSEpoYm5ObVpYSXBJSFJvYVhNdWMyVjBTWE5OVkRWVWNtRnVjMlpsY2tsdVVISnZaM0psYzNNb1ptRnNjMlVwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwY21GdWMyWmxjbDlpWlhSM1pXVnVYMkZqWTI5MWJuUnpMbVZ5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaaUIwYUdWeVpTQnBjeUJtYVdGME1tTnllWEIwYnlCMGNtRnVjMlpsY2lCc2FXMXBkQ0JsY25KdmNpd2dkMlVnYm1WbFpDQjBieUJ5WldaeVpYTm9JSFJvWlNCaFkyTnZkVzUwWDNOMFlYUjFjeUJtYjNJZ1lYVjBhR1Z1ZEdsallYUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwY21GdWMyWmxjbDlpWlhSM1pXVnVYMkZqWTI5MWJuUnpMbVZ5Y205eUxtTnZaR1VnUFQwOUlDZEdhV0YwTWtOeWVYQjBiMVJ5WVc1elptVnlUM1psY2t4cGJXbDBKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR0ZqWTI5MWJuUmZjM1JoZEhWelgzSmxjM0J2Ym5ObElEMGdZWGRoYVhRZ2RHaHBjeTVYVXk1aGRYUm9iM0pwZW1Wa0xtZGxkRUZqWTI5MWJuUlRkR0YwZFhNb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdGalkyOTFiblJmYzNSaGRIVnpYM0psYzNCdmJuTmxMbVZ5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRFRmpZMjkxYm5SVGRHRjBkWE1vWVdOamIzVnVkRjl6ZEdGMGRYTmZjbVZ6Y0c5dWMyVXVaMlYwWDJGalkyOTFiblJmYzNSaGRIVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eUxuTmxkRVZ5Y205eVRXVnpjMkZuWlNoMGNtRnVjMlpsY2w5aVpYUjNaV1Z1WDJGalkyOTFiblJ6TG1WeWNtOXlLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFVtVmpaV2x3ZEZSeVlXNXpabVZ5S0hzZ1lXMXZkVzUwT2lCbWIzSnRZWFJOYjI1bGVTaGpkWEp5Wlc1amVTd2dZVzF2ZFc1MExDQjBjblZsS1NCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpabVZ5WDJKbGRIZGxaVzVmWVdOamIzVnVkSE11WVdOamIzVnVkSE11Wm05eVJXRmphQ2hoWTJOdmRXNTBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVKaGJHRnVZMlZDZVV4dloybHVTV1FvWVdOamIzVnVkQzVzYjJkcGJtbGtMQ0JoWTJOdmRXNTBMbUpoYkdGdVkyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaFkyTnZkVzUwTG14dloybHVhV1FnUFQwOUlIUm9hWE11YzJWc1pXTjBaV1JmWm5KdmJTNTJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRUpoYkdGdVkyVlRaV3hsWTNSbFpFWnliMjBvWVdOamIzVnVkQzVpWVd4aGJtTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dGalkyOTFiblF1Ykc5bmFXNXBaQ0E5UFQwZ2RHaHBjeTV6Wld4bFkzUmxaRjkwYnk1MllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFSmhiR0Z1WTJWVFpXeGxZM1JsWkZSdktHRmpZMjkxYm5RdVltRnNZVzVqWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2xtSUc5dVpTQnZaaUIwYUdVZ1lXTmpiM1Z1ZEhNZ2QyRnpJRzEwTlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhZMk52ZFc1MExtRmpZMjkxYm5SZmRIbHdaU0E5UFQwZ1EwWkVYMUJNUVZSR1QxSk5VeTVOVkRVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVUhKdmJXbHpaUzVoYkd3b1czUm9hWE11VjFNdWJYUTFURzluYVc1TWFYTjBLQ2tzSUhSb2FYTXVWMU11WW1Gc1lXNWpaVUZzYkNncFhTa3VkR2hsYmloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoYmJYUTFYMnh2WjJsdVgyeHBjM1JmY21WemNHOXVjMlVzSUdKaGJHRnVZMlZmY21WemNHOXVjMlZkS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RYQmtZWFJsSUhSb1pTQmlZV3hoYm1ObElHWnZjaUJoWTJOdmRXNTBJSE4zYVhSamFHVnlJR0o1SUhKbGJtVjNhVzVuSUhSb1pTQnRkRFZmYkc5bmFXNWZiR2x6ZENCeVpYTndiMjV6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM0J2Ym5ObFRYUTFURzluYVc1TWFYTjBLRzEwTlY5c2IyZHBibDlzYVhOMFgzSmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCMWNHUmhkR1VnZEc5MFlXd2dZbUZzWVc1alpTQnphVzVqWlNCTlZEVWdkRzkwWVd3Z2IyNXNlU0JqYjIxbGN5QnBiaUJ1YjI0dGMzUnlaV0Z0SUdKaGJHRnVZMlVnWTJGc2JGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEVKaGJHRnVZMlZQZEdobGNrRmpZMjkxYm5SektHSmhiR0Z1WTJWZmNtVnpjRzl1YzJVdVltRnNZVzVqWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHbG1JRzl1WlNCdlppQjBhR1VnWVdOamIzVnVkSE1nZDJGeklHUjRkSEpoWkdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZV05qYjNWdWRDNWhZMk52ZFc1MFgzUjVjR1VnUFQwOUlFTkdSRjlRVEVGVVJrOVNUVk11UkZoVVVrRkVSU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlFjbTl0YVhObExtRnNiQ2hiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsZFRMblJ5WVdScGJtZFFiR0YwWm05eWJVRmpZMjkxYm5SelRHbHpkQ2hEUmtSZlVFeEJWRVpQVWsxVExrUllWRkpCUkVVcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVYVXk1aVlXeGhibU5sUVd4c0tDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUYwcExuUm9aVzRvS0Z0a2VIUnlZV1JsWDJ4dloybHVYMnhwYzNSZmNtVnpjRzl1YzJVc0lHSmhiR0Z1WTJWZmNtVnpjRzl1YzJWZEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCMWNHUmhkR1VnZEdobElHSmhiR0Z1WTJVZ1ptOXlJR0ZqWTI5MWJuUWdjM2RwZEdOb1pYSWdZbmtnY21WdVpYZHBibWNnZEdobElHUjRkSEpoWkdWZmJHOW5hVzVmYkdsemRGOXlaWE53YjI1elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpjRzl1YzJWVWNtRmthVzVuVUd4aGRHWnZjbTFCWTJOdmRXNTBjMHhwYzNRb1pIaDBjbUZrWlY5c2IyZHBibDlzYVhOMFgzSmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFZ3WkdGMFpTQjBiM1JoYkNCaVlXeGhibU5sSUhOcGJtTmxJRVI0ZEhKaFpHVWdkRzkwWVd3Z2IyNXNlU0JqYjIxbGN5QnBiaUJ1YjI0dGMzUnlaV0Z0SUdKaGJHRnVZMlVnWTJGc2JGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBRbUZzWVc1alpVOTBhR1Z5UVdOamIzVnVkSE1vWW1Gc1lXNWpaVjl5WlhOd2IyNXpaUzVpWVd4aGJtTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVGalkyOTFiblJVY21GdWMyWmxja0Z0YjNWdWRDaHVkV3hzS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBTWE5VY21GdWMyWmxja052Ym1acGNtMG9kSEoxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjMlYwVEc5aFpHbHVaeWhtWVd4elpTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjbUZ1YzJabGNsOWlaWFIzWldWdVgyRmpZMjkxYm5Sek8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2NtVnpaWFJCWTJOdmRXNTBWSEpoYm5ObVpYSWdQU0JoYzNsdVl5QW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFNYTlVjbUZ1YzJabGNrTnZibVpwY20wb1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEZSeVlXNXpabVZ5VEdsdGFYUW9LVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSE5sZEZSeVlXNXpabVZ5VUdWeVkyVnVkR0ZuWlZObGJHVmpkRzl5VW1WemRXeDBLR0Z0YjNWdWRDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJR055ZVhCMGIxOW1hV0YwWDJOdmJuWmxjblJsY2l3Z1oyVnVaWEpoYkY5emRHOXlaU0I5SUQwZ2RHaHBjeTV5YjI5MFgzTjBiM0psTG0xdlpIVnNaWE11WTJGemFHbGxjanRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6Wld4bFkzUmxaRjltY205dFgyTjFjbkpsYm1ONUlEMGdkR2hwY3k1elpXeGxZM1JsWkY5bWNtOXRMbU4xY25KbGJtTjVPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpaV3hsWTNSbFpGOTBiMTlqZFhKeVpXNWplU0E5SUhSb2FYTXVjMlZzWldOMFpXUmZkRzh1WTNWeWNtVnVZM2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR0Z0YjNWdWRDQStJREFnZkh3Z0szUm9hWE11YzJWc1pXTjBaV1JmWm5KdmJTNWlZV3hoYm1ObElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqY25sd2RHOWZabWxoZEY5amIyNTJaWEowWlhJdWMyVjBRMjl1ZG1WeWRHVnlSbkp2YlVGdGIzVnVkQ2hoYlc5MWJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4cFpHRjBaVlJ5WVc1elptVnlSbkp2YlVGdGIzVnVkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZM0o1Y0hSdlgyWnBZWFJmWTI5dWRtVnlkR1Z5TG05dVEyaGhibWRsUTI5dWRtVnlkR1Z5Um5KdmJVRnRiM1Z1ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lIUmhjbWRsZERvZ2V5QjJZV3gxWlRvZ1lXMXZkVzUwSUgwZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3hsWTNSbFpGOW1jbTl0WDJOMWNuSmxibU41TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHVmpkR1ZrWDNSdlgyTjFjbkpsYm1ONVhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tDdDBhR2x6TG5ObGJHVmpkR1ZrWDJaeWIyMHVZbUZzWVc1alpTQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNKNWNIUnZYMlpwWVhSZlkyOXVkbVZ5ZEdWeUxuTmxkRU52Ym5abGNuUmxja1p5YjIxQmJXOTFiblFvWVcxdmRXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2FXUmhkR1ZVY21GdWMyWmxja1p5YjIxQmJXOTFiblFvS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR055ZVhCMGIxOW1hV0YwWDJOdmJuWmxjblJsY2k1eVpYTmxkRU52Ym5abGNuUmxjaWdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTnllWEIwYjE5bWFXRjBYMk52Ym5abGNuUmxjaTV6WlhSSmMxUnBiV1Z5Vm1semFXSnNaU2htWVd4elpTazdYRzRnSUNBZ0lDQWdJR2RsYm1WeVlXeGZjM1J2Y21VdWNHVnlZMlZ1ZEdGblpWTmxiR1ZqZEc5eVUyVnNaV04wYVc5dVUzUmhkSFZ6S0daaGJITmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdkbUZzYVdSaGRHVlVjbUZ1YzJabGNrWnliMjFCYlc5MWJuUW9LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHNnWTI5dWRtVnlkR1Z5WDJaeWIyMWZZVzF2ZFc1MExDQnpaWFJEYjI1MlpYSjBaWEpHY205dFJYSnliM0lnZlNBOUlIUm9hWE11Y205dmRGOXpkRzl5WlM1dGIyUjFiR1Z6TG1OaGMyaHBaWEl1WTNKNWNIUnZYMlpwWVhSZlkyOXVkbVZ5ZEdWeU8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNnaFkyOXVkbVZ5ZEdWeVgyWnliMjFmWVcxdmRXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFJEYjI1MlpYSjBaWEpHY205dFJYSnliM0lvYkc5allXeHBlbVVvSjFSb2FYTWdabWxsYkdRZ2FYTWdjbVZ4ZFdseVpXUXVKeWtwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2V5QnBjMTl2YXl3Z2JXVnpjMkZuWlNCOUlEMGdkbUZzYVdST2RXMWlaWElvWTI5dWRtVnlkR1Z5WDJaeWIyMWZZVzF2ZFc1MExDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyWnNiMkYwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXTnBiV0ZzY3pvZ1oyVjBSR1ZqYVcxaGJGQnNZV05sY3loMGFHbHpMbk5sYkdWamRHVmtYMlp5YjIwdVkzVnljbVZ1WTNrcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXBiam9nZEdocGN5NTBjbUZ1YzJabGNsOXNhVzFwZEM1dGFXNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Y0T2lCMGFHbHpMblJ5WVc1elptVnlYMnhwYldsMExtMWhlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZwYzE5dmF5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEVOdmJuWmxjblJsY2taeWIyMUZjbkp2Y2lodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvSzNSb2FYTXVjMlZzWldOMFpXUmZabkp2YlM1aVlXeGhibU5sSUR3Z0syTnZiblpsY25SbGNsOW1jbTl0WDJGdGIzVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRFTnZiblpsY25SbGNrWnliMjFGY25KdmNpaHNiMk5oYkdsNlpTZ25TVzV6ZFdabWFXTnBaVzUwSUdaMWJtUnpKeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFJEYjI1MlpYSjBaWEpHY205dFJYSnliM0lvSnljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhaaGJHbGtZWFJsVkhKaGJuTm1aWEpVYjBGdGIzVnVkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCamIyNTJaWEowWlhKZmRHOWZZVzF2ZFc1MExDQnpaWFJEYjI1MlpYSjBaWEpVYjBWeWNtOXlJSDBnUFNCMGFHbHpMbkp2YjNSZmMzUnZjbVV1Ylc5a2RXeGxjeTVqWVhOb2FXVnlMbU55ZVhCMGIxOW1hV0YwWDJOdmJuWmxjblJsY2p0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWTI5dWRtVnlkR1Z5WDNSdlgyRnRiM1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZM1Z5Y21WdVkza2dQU0IwYUdsekxuTmxiR1ZqZEdWa1gzUnZMbU4xY25KbGJtTjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCcGMxOXZheXdnYldWemMyRm5aU0I5SUQwZ2RtRnNhV1JPZFcxaVpYSW9ZMjl1ZG1WeWRHVnlYM1J2WDJGdGIzVnVkQ3dnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2RtYkc5aGRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZqYVcxaGJITTZJR2RsZEVSbFkybHRZV3hRYkdGalpYTW9ZM1Z5Y21WdVkza3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV2x6WDI5cktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwUTI5dWRtVnlkR1Z5Vkc5RmNuSnZjaWh0WlhOellXZGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBRMjl1ZG1WeWRHVnlWRzlGY25KdmNpZ25KeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2V5QmhZM1JwYjI0c0lHOWljMlZ5ZG1GaWJHVWdmU0JtY205dElDZHRiMko0Snp0Y2JtbHRjRzl5ZENCN0lHZGxkRVJsWTJsdFlXeFFiR0ZqWlhNZ2ZTQm1jbTl0SUNkQVpHVnlhWFl2YzJoaGNtVmtKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdRM0o1Y0hSdlJtbGhkRU52Ym5abGNuUmxjbE4wYjNKbElIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDdJRmRUTENCeWIyOTBYM04wYjNKbElIMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwWDNOMGIzSmxJRDBnY205dmRGOXpkRzl5WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVYVXlBOUlGZFRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQnZZbk5sY25aaFlteGxJR052Ym5abGNuUmxjbDltY205dFgyRnRiM1Z1ZENBOUlDY25PMXh1SUNBZ0lFQnZZbk5sY25aaFlteGxJR052Ym5abGNuUmxjbDkwYjE5aGJXOTFiblFnUFNBbkp6dGNiaUFnSUNCQWIySnpaWEoyWVdKc1pTQmpiMjUyWlhKMFpYSmZabkp2YlY5bGNuSnZjaUE5SUNjbk8xeHVJQ0FnSUVCdlluTmxjblpoWW14bElHTnZiblpsY25SbGNsOTBiMTlsY25KdmNpQTlJQ2NuTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdselgzUnBiV1Z5WDNacGMybGliR1VnUFNCbVlXeHpaVHRjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSRGIyNTJaWEowWlhKR2NtOXRRVzF2ZFc1MEtHRnRiM1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuWmxjblJsY2w5bWNtOXRYMkZ0YjNWdWRDQTlJR0Z0YjNWdWREdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyVjBRMjl1ZG1WeWRHVnlWRzlCYlc5MWJuUW9ZVzF2ZFc1MEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkbVZ5ZEdWeVgzUnZYMkZ0YjNWdWRDQTlJR0Z0YjNWdWREdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyVjBRMjl1ZG1WeWRHVnlSbkp2YlVWeWNtOXlLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkbVZ5ZEdWeVgyWnliMjFmWlhKeWIzSWdQU0JsY25KdmNqdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyVjBRMjl1ZG1WeWRHVnlWRzlGY25KdmNpaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuWmxjblJsY2w5MGIxOWxjbkp2Y2lBOUlHVnljbTl5TzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSSmMxUnBiV1Z5Vm1semFXSnNaU2hwYzE5MGFXMWxjbDkyYVhOcFlteGxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE5mZEdsdFpYSmZkbWx6YVdKc1pTQTlJR2x6WDNScGJXVnlYM1pwYzJsaWJHVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lISmxjMlYwVkdsdFpYSW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwU1hOVWFXMWxjbFpwYzJsaWJHVW9abUZzYzJVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCaGMzbHVZeUJuWlhSRmVHTm9ZVzVuWlZKaGRHVW9abkp2YlY5amRYSnlaVzVqZVN3Z2RHOWZZM1Z5Y21WdVkza3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJsZUdOb1lXNW5aVjl5WVhSbGN5QjlJRDBnWVhkaGFYUWdkR2hwY3k1WFV5NXpaVzVrS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0WTJoaGJtZGxYM0poZEdWek9pQXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ltRnpaVjlqZFhKeVpXNWplVG9nWm5KdmJWOWpkWEp5Wlc1amVTeGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsZUdOb1lXNW5aVjl5WVhSbGN5NXlZWFJsYzF0MGIxOWpkWEp5Wlc1amVWMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lIWmhiR2xrWVhSbFJuSnZiVUZ0YjNWdWRDZ3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJoWTJOdmRXNTBYM1J5WVc1elptVnlMQ0JuWlc1bGNtRnNYM04wYjNKbExDQjNhWFJvWkhKaGR5QjlJRDBnZEdocGN5NXliMjkwWDNOMGIzSmxMbTF2WkhWc1pYTXVZMkZ6YUdsbGNqdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1oyVnVaWEpoYkY5emRHOXlaUzVoWTNScGRtVmZZMjl1ZEdGcGJtVnlJRDA5UFNCaFkyTnZkVzUwWDNSeVlXNXpabVZ5TG1OdmJuUmhhVzVsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdOamIzVnVkRjkwY21GdWMyWmxjaTUyWVd4cFpHRjBaVlJ5WVc1elptVnlSbkp2YlVGdGIzVnVkQ2dwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkMmwwYUdSeVlYY3VkbUZzYVdSaGRHVlhhWFJvWkhKaGQwWnliMjFCYlc5MWJuUW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0IyWVd4cFpHRjBaVlJ2UVcxdmRXNTBLQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUdGalkyOTFiblJmZEhKaGJuTm1aWElzSUdkbGJtVnlZV3hmYzNSdmNtVXNJSGRwZEdoa2NtRjNJSDBnUFNCMGFHbHpMbkp2YjNSZmMzUnZjbVV1Ylc5a2RXeGxjeTVqWVhOb2FXVnlPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaG5aVzVsY21Gc1gzTjBiM0psTG1GamRHbDJaVjlqYjI1MFlXbHVaWElnUFQwOUlHRmpZMjkxYm5SZmRISmhibk5tWlhJdVkyOXVkR0ZwYm1WeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaFkyTnZkVzUwWDNSeVlXNXpabVZ5TG5aaGJHbGtZWFJsVkhKaGJuTm1aWEpVYjBGdGIzVnVkQ2dwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkMmwwYUdSeVlYY3VkbUZzYVdSaGRHVlhhWFJvWkhKaGQxUnZRVzF2ZFc1MEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdZWE41Ym1NZ2IyNURhR0Z1WjJWRGIyNTJaWEowWlhKR2NtOXRRVzF2ZFc1MEtIc2dkR0Z5WjJWMElIMHNJR1p5YjIxZlkzVnljbVZ1WTNrc0lIUnZYMk4xY25KbGJtTjVLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHNnWVdOamIzVnVkRjkwY21GdWMyWmxjaXdnWjJWdVpYSmhiRjl6ZEc5eVpTQjlJRDBnZEdocGN5NXliMjkwWDNOMGIzSmxMbTF2WkhWc1pYTXVZMkZ6YUdsbGNqdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxjMlYwVkdsdFpYSW9LVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUmhjbWRsZEM1MllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkRiMjUyWlhKMFpYSkdjbTl0UVcxdmRXNTBLSFJoY21kbGRDNTJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuWmhiR2xrWVhSbFJuSnZiVUZ0YjNWdWRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVnVaWEpoYkY5emRHOXlaUzV3WlhKalpXNTBZV2RsVTJWc1pXTjBiM0pUWld4bFkzUnBiMjVUZEdGMGRYTW9kSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlc1bGNtRnNYM04wYjNKbExtTmhiR04xYkdGMFpWQmxjbU5sYm5SaFoyVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtTnZiblpsY25SbGNsOW1jbTl0WDJWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJEYjI1MlpYSjBaWEpVYjBGdGIzVnVkQ2duSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSRGIyNTJaWEowWlhKVWIwVnljbTl5S0NjbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHpWR2x0WlhKV2FYTnBZbXhsS0daaGJITmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWTJOdmRXNTBYM1J5WVc1elptVnlMbk5sZEVGalkyOTFiblJVY21GdWMyWmxja0Z0YjNWdWRDZ25KeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKaGRHVWdQU0JoZDJGcGRDQjBhR2x6TG1kbGRFVjRZMmhoYm1kbFVtRjBaU2htY205dFgyTjFjbkpsYm1ONUxDQjBiMTlqZFhKeVpXNWplU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaR1ZqYVcxaGJITWdQU0JuWlhSRVpXTnBiV0ZzVUd4aFkyVnpLSFJ2WDJOMWNuSmxibU41S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JoYlc5MWJuUWdQU0FvY21GMFpTQXFJSFJoY21kbGRDNTJZV3gxWlNrdWRHOUdhWGhsWkNoa1pXTnBiV0ZzY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ3RoYlc5MWJuUWdmSHdnZEdocGN5NWpiMjUyWlhKMFpYSmZabkp2YlY5aGJXOTFiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkRiMjUyWlhKMFpYSlViMEZ0YjNWdWRDaGhiVzkxYm5RcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBRMjl1ZG1WeWRHVnlWRzlCYlc5MWJuUW9KeWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpoYkdsa1lYUmxWRzlCYlc5MWJuUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRU52Ym5abGNuUmxjbFJ2UlhKeWIzSW9KeWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwU1hOVWFXMWxjbFpwYzJsaWJHVW9kSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXTmpiM1Z1ZEY5MGNtRnVjMlpsY2k1elpYUkJZMk52ZFc1MFZISmhibk5tWlhKQmJXOTFiblFvZEdGeVoyVjBMblpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVnpaWFJEYjI1MlpYSjBaWElvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCaGMzbHVZeUJ2YmtOb1lXNW5aVU52Ym5abGNuUmxjbFJ2UVcxdmRXNTBLSHNnZEdGeVoyVjBJSDBzSUdaeWIyMWZZM1Z5Y21WdVkza3NJSFJ2WDJOMWNuSmxibU41S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhzZ1lXTmpiM1Z1ZEY5MGNtRnVjMlpsY2l3Z1oyVnVaWEpoYkY5emRHOXlaU0I5SUQwZ2RHaHBjeTV5YjI5MFgzTjBiM0psTG0xdlpIVnNaWE11WTJGemFHbGxjanRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbkpsYzJWMFZHbHRaWElvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJoY21kbGRDNTJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJEYjI1MlpYSjBaWEpVYjBGdGIzVnVkQ2gwWVhKblpYUXVkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJZV3hwWkdGMFpWUnZRVzF2ZFc1MEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1amIyNTJaWEowWlhKZmRHOWZaWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFTnZiblpsY25SbGNrWnliMjFCYlc5MWJuUW9KeWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwUTI5dWRtVnlkR1Z5Um5KdmJVVnljbTl5S0NjbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHpWR2x0WlhKV2FYTnBZbXhsS0daaGJITmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWTJOdmRXNTBYM1J5WVc1elptVnlMbk5sZEVGalkyOTFiblJVY21GdWMyWmxja0Z0YjNWdWRDZ25KeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKaGRHVWdQU0JoZDJGcGRDQjBhR2x6TG1kbGRFVjRZMmhoYm1kbFVtRjBaU2htY205dFgyTjFjbkpsYm1ONUxDQjBiMTlqZFhKeVpXNWplU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaR1ZqYVcxaGJITWdQU0JuWlhSRVpXTnBiV0ZzVUd4aFkyVnpLSFJ2WDJOMWNuSmxibU41S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JoYlc5MWJuUWdQU0FvY21GMFpTQXFJSFJoY21kbGRDNTJZV3gxWlNrdWRHOUdhWGhsWkNoa1pXTnBiV0ZzY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ3RoYlc5MWJuUWdmSHdnZEdocGN5NWpiMjUyWlhKMFpYSmZkRzlmWVcxdmRXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFEyOXVkbVZ5ZEdWeVJuSnZiVUZ0YjNWdWRDaGhiVzkxYm5RcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBRMjl1ZG1WeWRHVnlSbkp2YlVGdGIzVnVkQ2duSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxibVZ5WVd4ZmMzUnZjbVV1Y0dWeVkyVnVkR0ZuWlZObGJHVmpkRzl5VTJWc1pXTjBhVzl1VTNSaGRIVnpLSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxibVZ5WVd4ZmMzUnZjbVV1WTJGc1kzVnNZWFJsVUdWeVkyVnVkR0ZuWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2FXUmhkR1ZHY205dFFXMXZkVzUwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyOXVkbVZ5ZEdWeVgyWnliMjFmWlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSSmMxUnBiV1Z5Vm1semFXSnNaU2htWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGalkyOTFiblJmZEhKaGJuTm1aWEl1YzJWMFFXTmpiM1Z1ZEZSeVlXNXpabVZ5UVcxdmRXNTBLQ2NuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFTnZiblpsY25SbGNrWnliMjFGY25KdmNpZ25KeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFNYTlVhVzFsY2xacGMybGliR1VvZEhKMVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGalkyOTFiblJmZEhKaGJuTm1aWEl1YzJWMFFXTmpiM1Z1ZEZSeVlXNXpabVZ5UVcxdmRXNTBLR0Z0YjNWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaWE5sZEVOdmJuWmxjblJsY2lncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lISmxjMlYwUTI5dWRtVnlkR1Z5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFTnZiblpsY25SbGNrWnliMjFCYlc5MWJuUW9KeWNwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEVOdmJuWmxjblJsY2xSdlFXMXZkVzUwS0NjbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUkRiMjUyWlhKMFpYSkdjbTl0UlhKeWIzSW9KeWNwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEVOdmJuWmxjblJsY2xSdlJYSnliM0lvSnljcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHpWR2x0WlhKV2FYTnBZbXhsS0daaGJITmxLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwWDNOMGIzSmxMbTF2WkhWc1pYTXVZMkZ6YUdsbGNpNW5aVzVsY21Gc1gzTjBiM0psTG5CbGNtTmxiblJoWjJWVFpXeGxZM1J2Y2xObGJHVmpkR2x2YmxOMFlYUjFjeWgwY25WbEtUdGNiaUFnSUNCOVhHNTlYRzRpTENKcGJYQnZjblFnZXlCaFkzUnBiMjRzSUdOdmJYQjFkR1ZrTENCdlluTmxjblpoWW14bElIMGdabkp2YlNBbmJXOWllQ2M3WEc1cGJYQnZjblFnUTI5dWMzUmhiblJ6SUdaeWIyMGdKME52Ym5OMFlXNTBjeTlqYjI1emRHRnVkSE1uTzF4dWFXMXdiM0owSUVWeWNtOXlVM1J2Y21VZ1puSnZiU0FuTGk5bGNuSnZjaTF6ZEc5eVpTYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFUmxjRzl6YVhSVGRHOXlaU0I3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvZXlCWFV5d2djbTl2ZEY5emRHOXlaU0I5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y205dmRGOXpkRzl5WlNBOUlISnZiM1JmYzNSdmNtVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVYxTWdQU0JYVXp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCamIyNTBZV2x1WlhJZ1BTQkRiMjV6ZEdGdWRITXVZMjl1ZEdGcGJtVnljeTVrWlhCdmMybDBPMXh1SUNBZ0lFQnZZbk5sY25aaFlteGxJR1Z5Y205eUlEMGdibVYzSUVWeWNtOXlVM1J2Y21Vb0tUdGNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQmhjM2x1WXlCdmJrMXZkVzUwUkdWd2IzTnBkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCamJHbGxiblFzSUcxdlpIVnNaWE1nZlNBOUlIUm9hWE11Y205dmRGOXpkRzl5WlR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCaFkzUnBkbVZmWTI5dWRHRnBibVZ5TENCcGMxOWpjbmx3ZEc4c0lHOXVUVzkxYm5SRGIyMXRiMjRzSUhObGRFeHZZV1JwYm1jc0lITmxkRTl1VW1WdGIzVnVkQ0I5SUQwZ2JXOWtkV3hsY3k1allYTm9hV1Z5TG1kbGJtVnlZV3hmYzNSdmNtVTdYRzRnSUNBZ0lDQWdJR052Ym5OMElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1pXTnJTV1p5WVcxbFRHOWhaR1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhsWVhKVWFXMWxiM1YwUTJGemFHbGxjbFZ5YkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6WDNObGMzTnBiMjVmZEdsdFpXOTFkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkRU52Ym5SaGFXNWxja2hsYVdkb2RDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRFbG1jbUZ0WlZWeWJDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRGTmxjM05wYjI1VWFXMWxiM1YwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkRU5oYzJocFpYSlZjbXdzWEc0Z0lDQWdJQ0FnSUgwZ1BTQnRiMlIxYkdWekxtTmhjMmhwWlhJdWFXWnlZVzFsTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUdselgzWnBjblIxWVd3Z2ZTQTlJR05zYVdWdWREdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kzVnljbVZ1ZEY5amIyNTBZV2x1WlhJZ1BTQmhZM1JwZG1WZlkyOXVkR0ZwYm1WeU8xeHVYRzRnSUNBZ0lDQWdJSE5sZEU5dVVtVnRiM1Z1ZENoMGFHbHpMbTl1VFc5MWJuUkVaWEJ2YzJsMEtUdGNiaUFnSUNBZ0lDQWdZWGRoYVhRZ2IyNU5iM1Z1ZEVOdmJXMXZiaWdwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSXVjMlYwUlhKeWIzSk5aWE56WVdkbEtDY25LVHRjYmlBZ0lDQWdJQ0FnYzJWMFEyOXVkR0ZwYm1WeVNHVnBaMmgwS0RBcE8xeHVJQ0FnSUNBZ0lDQnpaWFJNYjJGa2FXNW5LSFJ5ZFdVcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNnaGFYTmZjMlZ6YzJsdmJsOTBhVzFsYjNWMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHVmphMGxtY21GdFpVeHZZV1JsWkNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdhV1lnYzJWemMybHZiaUJvWVhNZ2RHbHRaV1FnYjNWMElISmxjMlYwSUdWMlpYSjVkR2hwYm1kY2JpQWdJQ0FnSUNBZ2MyVjBTV1p5WVcxbFZYSnNLQ2NuS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6WDNacGNuUjFZV3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEV4dllXUnBibWNvWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhV1lnZG1seWRIVmhiQ3dnWTJ4bFlYSWdaWFpsY25sMGFHbHVaeUJoYm1RZ1pHOXVKM1FnY0hKdlkyVmxaQ0JtZFhKMGFHVnlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaaUJ1YnlCMlpYSnBabWxqWVhScGIyNGdZMjlrWlN3Z2QyVWdjMmh2ZFd4a0lISmxjWFZsYzNRZ1lXZGhhVzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNnaGFYTmZZM0o1Y0hSdktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5WlhOd2IyNXpaVjlqWVhOb2FXVnlJRDBnWVhkaGFYUWdkR2hwY3k1WFV5NWhkWFJvYjNKcGVtVmtMbU5oYzJocFpYSW9ZV04wYVhabFgyTnZiblJoYVc1bGNpd2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpsY21sbWFXTmhkR2x2Ymw5amIyUmxPaUFuZFc1a1pXWnBibVZrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCcFppQjBZV0lnWTJoaGJtZGxaQ0IzYUdsc1pTQjNZV2wwYVc1bklHWnZjaUJ5WlhOd2IyNXpaU3dnYVdkdWIzSmxJR2wwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTNWeWNtVnVkRjlqYjI1MFlXbHVaWElnSVQwOUlHRmpkR2wyWlY5amIyNTBZV2x1WlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFJNYjJGa2FXNW5LR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WemNHOXVjMlZmWTJGemFHbGxjaTVsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0l1YUdGdVpHeGxRMkZ6YUdsbGNrVnljbTl5S0hKbGMzQnZibk5sWDJOaGMyaHBaWEl1WlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEZObGMzTnBiMjVVYVcxbGIzVjBLSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z5VkdsdFpXOTFkRU5oYzJocFpYSlZjbXdvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWGRoYVhRZ1kyaGxZMnRKWm5KaGJXVk1iMkZrWldRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFJKWm5KaGJXVlZjbXdvY21WemNHOXVjMlZmWTJGemFHbGxjaTVqWVhOb2FXVnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSVFpYTnphVzl1VkdsdFpXOTFkQ2htWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkRU5oYzJocFpYSlZjbXdvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCelpYUk1iMkZrYVc1bktHWmhiSE5sS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWTI5dGNIVjBaV1JjYmlBZ0lDQm5aWFFnYVhOZlpHVndiM05wZEY5c2IyTnJaV1FvS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6WDJGMWRHaGxiblJwWTJGMGFXOXVYMjVsWldSbFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdselgzUnVZMTl1WldWa1pXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcGMxOW1hVzVoYm1OcFlXeGZZV05qYjNWdWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdselgyWnBibUZ1WTJsaGJGOXBibVp2Y20xaGRHbHZibDlwYm1OdmJYQnNaWFJsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhWE5mZEhKaFpHbHVaMTlsZUhCbGNtbGxibU5sWDJsdVkyOXRjR3hsZEdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoWTJOdmRXNTBYM04wWVhSMWN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdselgyVjFMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JYUTFYMnh2WjJsdVgyeHBjM1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMTlrWlhCdmMybDBYMnh2WTJzc1hHNGdJQ0FnSUNBZ0lIMGdQU0IwYUdsekxuSnZiM1JmYzNSdmNtVXVZMnhwWlc1ME8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVdGalkyOTFiblJmYzNSaGRIVnpQeTV6ZEdGMGRYTXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdVpXVmtYMkYxZEdobGJuUnBZMkYwYVc5dUlEMGdkR2hwY3k1bGNuSnZjaTVwYzE5aGMydGZZWFYwYUdWdWRHbGpZWFJwYjI0Z2ZId2dLR2x6WDJGMWRHaGxiblJwWTJGMGFXOXVYMjVsWldSbFpDQW1KaUJwYzE5bGRTazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHNWxaV1JmWm1sdVlXNWphV0ZzWDJGemMyVnpjMjFsYm5RZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhOZlptbHVZVzVqYVdGc1gyRmpZMjkxYm5RZ0ppWWdLR2x6WDJacGJtRnVZMmxoYkY5cGJtWnZjbTFoZEdsdmJsOXBibU52YlhCc1pYUmxJSHg4SUdselgzUnlZV1JwYm1kZlpYaHdaWEpwWlc1alpWOXBibU52YlhCc1pYUmxLVHRjYmlBZ0lDQWdJQ0FnTHk4Z1ExSWdZMkZ1SUdSbGNHOXphWFFnZDJsMGFHOTFkQ0JoWTJObGNIUnBibWNnYkdGMFpYTjBJSFJ1WXlCbGVHTmxjSFFnZEdodmMyVWdkMmwwYUNCR2FXNWhibU5wWVd3Z1UxUlFYRzRnSUNBZ0lDQWdJR052Ym5OMElHNWxaV1JmZEc1aklEMWNiaUFnSUNBZ0lDQWdJQ0FnSUNocGMxOWxkU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxME5WOXNiMmRwYmw5c2FYTjBMbk52YldVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcwZ1BUNGdhWFJsYlM1aFkyTnZkVzUwWDNSNWNHVWdQVDA5SUNkeVpXRnNKeUFtSmlCcGRHVnRMbk4xWWw5aFkyTnZkVzUwWDNSNWNHVWdQVDA5SUNkbWFXNWhibU5wWVd4ZmMzUndKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2twSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzE5MGJtTmZibVZsWkdWa08xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJQ0FnSUNCcGMxOWtaWEJ2YzJsMFgyeHZZMnNnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsWldSZllYVjBhR1Z1ZEdsallYUnBiMjRnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsWldSZmRHNWpJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaV1ZrWDJacGJtRnVZMmxoYkY5aGMzTmxjM050Wlc1MElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eUxtbHpYMkZ6YTE5bWFXNWhibU5wWVd4ZmNtbHphMTloY0hCeWIzWmhiRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6ZFdKdGFYUkdkVzVrYzFCeWIzUmxZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVYxTXVjMlZ1WkNoN0lIVnJaMk5mWm5WdVpITmZjSEp2ZEdWamRHbHZiam9nTVN3Z2RHNWpYMkZ3Y0hKdmRtRnNPaUF4SUgwcExuUm9aVzRvY21WemNHOXVjMlVnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM0J2Ym5ObExtVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNpNXpaWFJOWlhOellXZGxLSEpsYzNCdmJuTmxMbVZ5Y205eUxtMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJOaGRHbHZiaTV5Wld4dllXUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElIc2diMkp6WlhKMllXSnNaU3dnWVdOMGFXOXVJSDBnWm5KdmJTQW5iVzlpZUNjN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUVWeWNtOXlSR2xoYkc5blUzUnZjbVVnZTF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdWeWNtOXlYMjFsYzNOaFoyVWdQU0FuSnp0Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCemFHOTFiR1JmYzJodmR5QTlJR1poYkhObE8xeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRk5vYjNWc1pGTm9iM2NvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXphRzkxYkdSZmMyaHZkeUE5SUhaaGJIVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJGY25KdmNrMWxjM05oWjJVb2JXVnpjMkZuWlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlYMjFsYzNOaFoyVWdQU0J0WlhOellXZGxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRk5vYjNWc1pGTm9iM2NvZEhKMVpTazdYRzRnSUNBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2V5QkpZMjl1TENCRGIzVnVkR1Z5SUgwZ1puSnZiU0FuUUdSbGNtbDJMMk52YlhCdmJtVnVkSE1uTzF4dVhHNWpiMjV6ZENCRFlYTm9hV1Z5VG05MGFXWnBZMkYwYVc5dWN5QTlJQ2g3SUhBeWNGOXViM1JwWm1sallYUnBiMjVmWTI5MWJuUWdmU2tnUFQ0Z0tGeHVJQ0FnSUR4U1pXRmpkQzVHY21GbmJXVnVkRDVjYmlBZ0lDQWdJQ0FnUEVsamIyNGdhV052YmowblNXTkRZWE5vYVdWeUp5QmpiR0Z6YzA1aGJXVTlKMmhsWVdSbGNsOWZhV052YmljZ0x6NWNiaUFnSUNBZ0lDQWdleUVoY0RKd1gyNXZkR2xtYVdOaGRHbHZibDlqYjNWdWRDQW1KaUE4UTI5MWJuUmxjaUJqYkdGemMwNWhiV1U5SjJOaGMyaHBaWEpmWDJOdmRXNTBaWEluSUdOdmRXNTBQWHR3TW5CZmJtOTBhV1pwWTJGMGFXOXVYMk52ZFc1MGZTQXZQbjFjYmlBZ0lDQThMMUpsWVdOMExrWnlZV2R0Wlc1MFBseHVLVHRjYmx4dVEyRnphR2xsY2s1dmRHbG1hV05oZEdsdmJuTXVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQWdJSEF5Y0Y5dWIzUnBabWxqWVhScGIyNWZZMjkxYm5RNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJc1hHNTlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JEWVhOb2FXVnlUbTkwYVdacFkyRjBhVzl1Y3p0Y2JpSXNJbWx0Y0c5eWRDQjdJR2RsZEVOMWNuSmxibU41UkdsemNHeGhlVU52WkdVZ2ZTQm1jbTl0SUNkQVpHVnlhWFl2YzJoaGNtVmtKenRjYmx4dVkyOXVjM1FnZEdWdGNHeGhkR1VnUFNBb2MzUnlhVzVuTENCamIyNTBaVzUwS1NBOVBpQjdYRzRnSUNBZ2JHVjBJSFJ2WDNKbGNHeGhZMlVnUFNCamIyNTBaVzUwTzF4dUlDQWdJR2xtSUNoamIyNTBaVzUwSUNZbUlDRkJjbkpoZVM1cGMwRnljbUY1S0dOdmJuUmxiblFwS1NCN1hHNGdJQ0FnSUNBZ0lIUnZYM0psY0d4aFkyVWdQU0JiWTI5dWRHVnVkRjA3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCemRISnBibWN1Y21Wd2JHRmpaU2d2WEZ4Ylh5aGNYR1FyS1Ywdlp5d2dLSE1zSUdsdVpHVjRLU0E5UGlCMGIxOXlaWEJzWVdObFd5dHBibVJsZUNBdElERmRLVHRjYm4wN1hHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJRVJQVFNCbGJHVnRaVzUwSUdGdVpDQmhaR1J6SUdGdWVTQmhkSFJ5YVdKMWRHVnpJSFJ2SUdsMExseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCMFlXZGZibUZ0WlRvZ2RHaGxJSFJoWnlCMGJ5QmpjbVZoZEdVc0lHVXVaeTRnSjJScGRpY3NJQ2RoSnl3Z1pYUmpYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnWVhSMGNtbGlkWFJsY3pvZ1lXeHNJSFJvWlNCaGRIUnlhV0oxZEdWeklIUnZJR0Z6YzJsbmJpd2daUzVuTGlCN0lHbGtPaUFuTGk0dUp5d2dZMnhoYzNNNklDY3VMaTRuTENCb2RHMXNPaUFuTGk0dUp5d2dMaTR1SUgxY2JpQXFJRUJ5WlhSMWNtNGdkR2hsSUdOeVpXRjBaV1FnUkU5TklHVnNaVzFsYm5SY2JpQXFMMXh1WTI5dWMzUWdZM0psWVhSbFJXeGxiV1Z1ZENBOUlDaDBZV2RmYm1GdFpTd2dZWFIwY21saWRYUmxjeUE5SUh0OUtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1pXd2dQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtIUmhaMTl1WVcxbEtUdGNiaUFnSUNCUFltcGxZM1F1YTJWNWN5aGhkSFJ5YVdKMWRHVnpLUzVtYjNKRllXTm9LR0YwZEhJZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlNBOUlHRjBkSEpwWW5WMFpYTmJZWFIwY2wwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoZEhSeUlEMDlQU0FuZEdWNGRDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNMblJsZUhSRGIyNTBaVzUwSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1lYUjBjaUE5UFQwZ0oyaDBiV3duS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkM1b2RHMXNLSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWc0xuTmxkRUYwZEhKcFluVjBaU2hoZEhSeUxDQjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnWld3N1hHNTlPMXh1WEc1c1pYUWdjM1JoZEdsalgyaGhjMmc3WEc1amIyNXpkQ0JuWlhSVGRHRjBhV05JWVhOb0lEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUhOMFlYUnBZMTlvWVhOb0lEMWNiaUFnSUNBZ0lDQWdjM1JoZEdsalgyaGhjMmdnZkh3Z0tHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSjNOamNtbHdkRnR6Y21NcVBWd2liV0ZwYmx3aVhTY3BMbWRsZEVGMGRISnBZblYwWlNnbmMzSmpKeWtnZkh3Z0p5Y3BMbk53YkdsMEtDY3VKeWxiTVYwN1hHNGdJQ0FnY21WMGRYSnVJSE4wWVhScFkxOW9ZWE5vTzF4dWZUdGNibHh1WTJ4aGMzTWdVSEp2YldselpVTnNZWE56SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXRhWE5sSUQwZ2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXcGxZM1FnUFNCeVpXcGxZM1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMyOXNkbVVnUFNCeVpYTnZiSFpsTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNTlYRzVjYm1OdmJuTjBJR052Y0hsVWIwTnNhWEJpYjJGeVpDQTlJSFJsZUhRZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhSbGVIUkdhV1ZzWkNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjNSbGVIUmhjbVZoSnlrN1hHNGdJQ0FnZEdWNGRFWnBaV3hrTG1sdWJtVnlWR1Y0ZENBOUlIUmxlSFE3WEc0Z0lDQWdaRzlqZFcxbGJuUXVZbTlrZVM1aGNIQmxibVJEYUdsc1pDaDBaWGgwUm1sbGJHUXBPMXh1SUNBZ0lIUmxlSFJHYVdWc1pDNXpaV3hsWTNRb0tUdGNiaUFnSUNCa2IyTjFiV1Z1ZEM1bGVHVmpRMjl0YldGdVpDZ25ZMjl3ZVNjcE8xeHVJQ0FnSUhSbGVIUkdhV1ZzWkM1eVpXMXZkbVVvS1R0Y2JuMDdYRzR2THlCbGRTQmpiM1Z1ZEhKcFpYTWdkRzhnYzNWd2NHOXlkRnh1WTI5dWMzUWdaWFZmWTI5MWJuUnlhV1Z6SUQwZ1cxeHVJQ0FnSUNkcGRDY3NYRzRnSUNBZ0oyUmxKeXhjYmlBZ0lDQW5abkluTEZ4dUlDQWdJQ2RzZFNjc1hHNGdJQ0FnSjJkeUp5eGNiaUFnSUNBbmJXWW5MRnh1SUNBZ0lDZGxjeWNzWEc0Z0lDQWdKM05ySnl4Y2JpQWdJQ0FuYkhRbkxGeHVJQ0FnSUNkdWJDY3NYRzRnSUNBZ0oyRjBKeXhjYmlBZ0lDQW5ZbWNuTEZ4dUlDQWdJQ2R6YVNjc1hHNGdJQ0FnSjJONUp5eGNiaUFnSUNBblltVW5MRnh1SUNBZ0lDZHlieWNzWEc0Z0lDQWdKMmh5Snl4Y2JpQWdJQ0FuY0hRbkxGeHVJQ0FnSUNkd2JDY3NYRzRnSUNBZ0oyeDJKeXhjYmlBZ0lDQW5aV1VuTEZ4dUlDQWdJQ2RqZWljc1hHNGdJQ0FnSjJacEp5eGNiaUFnSUNBbmFIVW5MRnh1SUNBZ0lDZGtheWNzWEc0Z0lDQWdKM05sSnl4Y2JpQWdJQ0FuYVdVbkxGeHVJQ0FnSUNkcGJTY3NYRzRnSUNBZ0oyZGlKeXhjYmlBZ0lDQW5iWFFuTEZ4dVhUdGNiaTh2SUdOb1pXTnJJR2xtSUdOc2FXVnVkQ0JwY3lCbWNtOXRJRVZWWEc1amIyNXpkQ0JwYzBWMVEyOTFiblJ5ZVNBOUlHTnZkVzUwY25rZ1BUNGdaWFZmWTI5MWJuUnlhV1Z6TG1sdVkyeDFaR1Z6S0dOdmRXNTBjbmtwTzF4dVhHNHZMeUJqYUdWamF5QnBaaUJ0YkhRZ2IzSWdaSGgwY21Ga1pTQm1iM0lnWVdOamIzVnVkQ0IwWlhoMFhHNWpiMjV6ZENCblpYUkJZMk52ZFc1MFZHVjRkQ0E5SUdGalkyOTFiblFnUFQ0Z2UxeHVJQ0FnSUd4bGRDQmhZMk52ZFc1MFgzUmxlSFFnUFNBbkp6dGNiaUFnSUNCcFppQW9ZV05qYjNWdWRDNXBjMTlrZUhSeVlXUmxJSHg4SUdGalkyOTFiblF1YVhOZmJYUXBJSHRjYmlBZ0lDQWdJQ0FnWVdOamIzVnVkRjkwWlhoMElEMGdZV05qYjNWdWRDNTBaWGgwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR0ZqWTI5MWJuUmZkR1Y0ZENBOUlHZGxkRU4xY25KbGJtTjVSR2x6Y0d4aGVVTnZaR1VvWVdOamIzVnVkQzUwWlhoMEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWVdOamIzVnVkRjkwWlhoME8xeHVmVHRjYmx4dVpYaHdiM0owSUhzZ1kyOXdlVlJ2UTJ4cGNHSnZZWEprTENCamNtVmhkR1ZGYkdWdFpXNTBMQ0JuWlhSQlkyTnZkVzUwVkdWNGRDd2daMlYwVTNSaGRHbGpTR0Z6YUN3Z2FYTkZkVU52ZFc1MGNua3NJRkJ5YjIxcGMyVkRiR0Z6Y3l3Z2RHVnRjR3hoZEdVZ2ZUdGNiaUlzSW1Oc1lYTnpJRVZ5Y205eWN5QjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNKeklEMGdlMzA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZV1JrS0dGMGRISnBZblYwWlN3Z2JXVnpjMkZuWlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVhR0Z6S0dGMGRISnBZblYwWlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNKelcyRjBkSEpwWW5WMFpWMGdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVZ5Y205eWMxdGhkSFJ5YVdKMWRHVmRMbWx1WkdWNFQyWW9iV1Z6YzJGblpTa2dQVDA5SUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eWMxdGhkSFJ5YVdKMWRHVmRMbkIxYzJnb2JXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCaGJHd29LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtVnljbTl5Y3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JtYVhKemRDaGhkSFJ5YVdKMWRHVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YUdGektHRjBkSEpwWW5WMFpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZ5Y205eWMxdGhkSFJ5YVdKMWRHVmRXekJkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHZGxkQ2hoZEhSeWFXSjFkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFHRnpLR0YwZEhKcFluVjBaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1WeWNtOXljMXRoZEhSeWFXSjFkR1ZkTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHaGhjeWhoZEhSeWFXSjFkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoMGFHbHpMbVZ5Y205eWN5d2dZWFIwY21saWRYUmxLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVWeWNtOXljenRjYmlJc0ltbHRjRzl5ZENCN0lHZGxkRkJ5WlVKMWFXeGtSRlpTY3lCOUlHWnliMjBnSjBCa1pYSnBkaTl6YUdGeVpXUW5PMXh1YVcxd2IzSjBJSHNnZEdWdGNHeGhkR1VnZlNCbWNtOXRJQ2RmWTI5dGJXOXVMM1YwYVd4cGRIa25PMXh1YVcxd2IzSjBJRVZ5Y205eUlHWnliMjBnSnk0dlpYSnliM0p6Snp0Y2JseHVZMnhoYzNNZ1ZtRnNhV1JoZEc5eUlIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHBibkIxZEN3Z2NuVnNaWE1zSUhOMGIzSmxJRDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbHVjSFYwSUQwZ2FXNXdkWFE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjblZzWlhNZ1BTQnlkV3hsY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEc5eVpTQTlJSE4wYjNKbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXljeUE5SUc1bGR5QkZjbkp2Y2lncE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0pmWTI5MWJuUWdQU0F3TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVGa1pDQm1ZV2xzZFhKbElHRnVaQ0JsY25KdmNpQnRaWE56WVdkbElHWnZjaUJuYVhabGJpQnlkV3hsWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZWFIwY21saWRYUmxYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlISjFiR1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQmhaR1JHWVdsc2RYSmxLR0YwZEhKcFluVjBaU3dnY25Wc1pTd2daWEp5YjNKZmJXVnpjMkZuWlNrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYldWemMyRm5aU0E5SUdWeWNtOXlYMjFsYzNOaFoyVWdmSHdnY25Wc1pTNXZjSFJwYjI1ekxtMWxjM05oWjJVZ2ZId2daMlYwVUhKbFFuVnBiR1JFVmxKektDbGJjblZzWlM1dVlXMWxYUzV0WlhOellXZGxLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlkV3hsTG01aGJXVWdQVDA5SUNkc1pXNW5kR2duS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxJRDBnZEdWdGNHeGhkR1VvYldWemMyRm5aU3dnVzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKMWJHVXViM0IwYVc5dWN5NXRhVzRnUFQwOUlISjFiR1V1YjNCMGFXOXVjeTV0WVhnZ1B5QnlkV3hsTG05d2RHbHZibk11YldsdUlEb2dZQ1I3Y25Wc1pTNXZjSFJwYjI1ekxtMXBibjB0Skh0eWRXeGxMbTl3ZEdsdmJuTXViV0Y0ZldBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JkS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHlkV3hsTG01aGJXVWdQVDA5SUNkdGFXNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbElEMGdkR1Z0Y0d4aGRHVW9iV1Z6YzJGblpTd2dXM0oxYkdVdWIzQjBhVzl1Y3k1dGFXNWRLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoeWRXeGxMbTVoYldVZ1BUMDlJQ2R1YjNSZlpYRjFZV3duS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxJRDBnZEdWdGNHeGhkR1VvYldWemMyRm5aU3dnVzNKMWJHVXViM0IwYVc5dWN5NXVZVzFsTVN3Z2NuVnNaUzV2Y0hScGIyNXpMbTVoYldVeVhTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y25NdVlXUmtLR0YwZEhKcFluVjBaU3dnYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNKZlkyOTFiblFyS3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU2RXNXpJSFpoYkdsa1lYUnZjbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdZbTl2YkdWaGJuMGdWMmhsZEdobGNpQnBkQ0J3WVhOelpYTTdJSFJ5ZFdVZ1BTQndZWE56WlhNc0lHWmhiSE5sSUQwZ1ptRnBiSE5jYmlBZ0lDQWdLaTljYmlBZ0lDQmphR1ZqYXlncElIdGNiaUFnSUNBZ0lDQWdUMkpxWldOMExtdGxlWE1vZEdocGN5NXBibkIxZENrdVptOXlSV0ZqYUNoaGRIUnlhV0oxZEdVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvZEdocGN5NXlkV3hsY3l3Z1lYUjBjbWxpZFhSbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlkV3hsYzF0aGRIUnlhV0oxZEdWZExtWnZja1ZoWTJnb2NuVnNaU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY25Wc1pVOWlhbVZqZENBOUlGWmhiR2xrWVhSdmNpNW5aWFJTZFd4bFQySnFaV04wS0hKMWJHVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnlkV3hsVDJKcVpXTjBMblpoYkdsa1lYUnZjaUFtSmlCMGVYQmxiMllnY25Wc1pVOWlhbVZqZEM1MllXeHBaR0YwYjNJZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeWRXeGxUMkpxWldOMExtOXdkR2x2Ym5NdVkyOXVaR2wwYVc5dUlDWW1JQ0Z5ZFd4bFQySnFaV04wTG05d2RHbHZibk11WTI5dVpHbDBhVzl1S0hSb2FYTXVjM1J2Y21VcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1cGJuQjFkRnRoZEhSeWFXSjFkR1ZkSUQwOVBTQW5KeUFtSmlCeWRXeGxUMkpxWldOMExtNWhiV1VnSVQwOUlDZHlaWEVuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FYTmZkbUZzYVdRc0lHVnljbTl5WDIxbGMzTmhaMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISjFiR1ZQWW1wbFkzUXVibUZ0WlNBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCcGMxOXZheXdnYldWemMyRm5aU0I5SUQwZ2NuVnNaVTlpYW1WamRDNTJZV3hwWkdGMGIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sdWNIVjBXMkYwZEhKcFluVjBaVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5ZFd4bFQySnFaV04wTG05d2RHbHZibk1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTjBiM0psTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBibkIxZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGMxOTJZV3hwWkNBOUlHbHpYMjlyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2w5dFpYTnpZV2RsSUQwZ2JXVnpjMkZuWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjMTkyWVd4cFpDQTlJSEoxYkdWUFltcGxZM1F1ZG1Gc2FXUmhkRzl5S0hSb2FYTXVhVzV3ZFhSYllYUjBjbWxpZFhSbFhTd2djblZzWlU5aWFtVmpkQzV2Y0hScGIyNXpMQ0IwYUdsekxuTjBiM0psTENCMGFHbHpMbWx1Y0hWMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXbHpYM1poYkdsa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZV1JrUm1GcGJIVnlaU2hoZEhSeWFXSjFkR1VzSUhKMWJHVlBZbXBsWTNRc0lHVnljbTl5WDIxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRjBhR2x6TG1WeWNtOXlYMk52ZFc1ME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFUmxkR1Z5YldsdVpTQnBaaUIyWVd4cFpHRjBhVzl1SUhCaGMzTmxjMXh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdZbTl2YkdWaGJuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGMxQmhjM05sWkNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTJobFkyc29LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYjI1MlpYSjBjeUIwYUdVZ2NuVnNaU0JoY25KaGVTQjBieUJoYmlCdlltcGxZM1JjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdZWEp5WVhsOUlISjFiR1ZjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHR2WW1wbFkzUjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzUmhkR2xqSUdkbGRGSjFiR1ZQWW1wbFkzUW9jblZzWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCcGMxOXlkV3hsWDNOMGNtbHVaeUE5SUhSNWNHVnZaaUJ5ZFd4bElEMDlQU0FuYzNSeWFXNW5KenRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjblZzWlY5dlltcGxZM1FnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQnBjMTl5ZFd4bFgzTjBjbWx1WnlBL0lISjFiR1VnT2lCeWRXeGxXekJkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN6b2dhWE5mY25Wc1pWOXpkSEpwYm1jZ1B5QjdmU0E2SUhKMWJHVmJNVjBnZkh3Z2UzMHNYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ2NuVnNaVjl2WW1wbFkzUXVkbUZzYVdSaGRHOXlJRDBnY25Wc1pWOXZZbXBsWTNRdWJtRnRaU0E5UFQwZ0oyTjFjM1J2YlNjZ1B5QnlkV3hsV3pGZExtWjFibU1nT2lCblpYUlFjbVZDZFdsc1pFUldVbk1vS1Z0eWRXeGxYMjlpYW1WamRDNXVZVzFsWFM1bWRXNWpPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5ZFd4bFgyOWlhbVZqZER0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGWmhiR2xrWVhSdmNqdGNiaUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJR1p5YjIwZ0p5NHZkbUZzYVdSaGRHOXlKenRjYmlJc0ltbHRjRzl5ZENCN0lHRmpkR2x2Yml3Z2FXNTBaWEpqWlhCMExDQnZZbk5sY25aaFlteGxMQ0J5WldGamRHbHZiaXdnZEc5S1V5d2dkMmhsYmlCOUlHWnliMjBnSjIxdlluZ25PMXh1YVcxd2IzSjBJSHNnYVhOUWNtOWtkV04wYVc5dUxDQnBjMFZ0Y0hSNVQySnFaV04wSUgwZ1puSnZiU0FuUUdSbGNtbDJMM05vWVhKbFpDYzdYRzVjYm1sdGNHOXlkQ0JXWVd4cFpHRjBiM0lnWm5KdmJTQW5WWFJwYkhNdlZtRnNhV1JoZEc5eUp6dGNibHh1THlvcVhHNGdLaUJDWVhObFUzUnZjbVVnWTJ4aGMzTWdhWE1nZEdobElHSmhjMlVnWTJ4aGMzTWdabTl5SUdGc2JDQmtaV1pwYm1Wa0lITjBiM0psY3lCcGJpQjBhR1VnWVhCd2JHbGpZWFJwYjI0dUlFbDBJR2hoYm1Sc1pYTWdjMjl0WlNCemRIVm1aaUJ6ZFdOb0lHRnpPbHh1SUNvZ0lERXVJRU55WldGMGFXNW5JSE51WVhCemFHOTBJRzlpYW1WamRDQm1jbTl0SUhSb1pTQnpkRzl5WlM1Y2JpQXFJQ0F5TGlCVFlYWnBibWNnZEdobElITjBiM0psSjNNZ2MyNWhjSE5vYjNRZ2FXNGdiRzlqWVd3dmMyVnpjMmx2YmlCemRHOXlZV2RsSUdGdVpDQnJaV1Z3YVc1bklIUm9aVzBnYVc0Z2MzbHVZeTVjYmlBcUwxeHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUW1GelpWTjBiM0psSUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQmJpQmxiblZ0SUc5aWFtVmpkQ0IwYnlCa1pXWnBibVVnVEU5RFFVeGZVMVJQVWtGSFJTQmhibVFnVTBWVFUwbFBUbDlUVkU5U1FVZEZYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzUmhkR2xqSUZOVVQxSkJSMFZUSUQwZ1QySnFaV04wTG1aeVpXVjZaU2g3WEc0Z0lDQWdJQ0FnSUV4UFEwRk1YMU5VVDFKQlIwVTZJRk41YldKdmJDZ25URTlEUVV4ZlUxUlBVa0ZIUlNjcExGeHVJQ0FnSUNBZ0lDQlRSVk5UU1U5T1gxTlVUMUpCUjBVNklGTjViV0p2YkNnblUwVlRVMGxQVGw5VFZFOVNRVWRGSnlrc1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCQWIySnpaWEoyWVdKc1pWeHVJQ0FnSUhaaGJHbGtZWFJwYjI1ZlpYSnliM0p6SUQwZ2UzMDdYRzVjYmlBZ0lDQkFiMkp6WlhKMllXSnNaVnh1SUNBZ0lIWmhiR2xrWVhScGIyNWZjblZzWlhNZ1BTQjdmVHRjYmx4dUlDQWdJSEJ5WlZOM2FYUmphRUZqWTI5MWJuUkVhWE53YjNObGNpQTlJRzUxYkd3N1hHNGdJQ0FnY0hKbFgzTjNhWFJqYUY5aFkyTnZkVzUwWDJ4cGMzUmxibVZ5SUQwZ2JuVnNiRHRjYmx4dUlDQWdJSE4zYVhSamFFRmpZMjkxYm5SRWFYTndiM05sY2lBOUlHNTFiR3c3WEc0Z0lDQWdjM2RwZEdOb1gyRmpZMjkxYm5SZmJHbHpkR1Z1WlhJZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnYkc5bmIzVjBSR2x6Y0c5elpYSWdQU0J1ZFd4c08xeHVJQ0FnSUd4dloyOTFkRjlzYVhOMFpXNWxjaUE5SUc1MWJHdzdYRzVjYmlBZ0lDQmpiR2xsYm5SSmJtbDBSR2x6Y0c5elpYSWdQU0J1ZFd4c08xeHVJQ0FnSUdOc2FXVnVkRjlwYm1sMFgyeHBjM1JsYm1WeUlEMGdiblZzYkR0Y2JseHVJQ0FnSUc1bGRIZHZjbXRUZEdGMGRYTkRhR0Z1WjJWRWFYTndiM05sY2lBOUlHNTFiR3c3WEc0Z0lDQWdibVYwZDI5eWExOXpkR0YwZFhOZlkyaGhibWRsWDJ4cGMzUmxibVZ5SUQwZ2JuVnNiRHRjYmx4dUlDQWdJSFJvWlcxbFEyaGhibWRsUkdsemNHOXpaWElnUFNCdWRXeHNPMXh1SUNBZ0lIUm9aVzFsWDJOb1lXNW5aVjlzYVhOMFpXNWxjaUE5SUc1MWJHdzdYRzVjYmlBZ0lDQnlaV0ZzUVdOamIzVnVkRk5wWjI1MWNFVnVaR1ZrUkdsemNHOXpaWElnUFNCdWRXeHNPMXh1SUNBZ0lISmxZV3hmWVdOamIzVnVkRjl6YVdkdWRYQmZaVzVrWldSZmJHbHpkR1Z1WlhJZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2NHRnlkR2xoYkY5bVpYUmphRjkwYVcxbElEMGdNRHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOdmJuTjBjblZqZEc5eUlHOW1JSFJvWlNCaVlYTmxJR05zWVhOeklIUm9ZWFFnWjJWMGN5QndjbTl3WlhKMGFXVnpKeUJ1WVcxbElHOW1JR05vYVd4a0lIZG9hV05vSUhOb2IzVnNaQ0JpWlNCellYWmxaQ0JwYmlCemRHOXlZV2RsYzF4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0JCYmlCdlltcGxZM1FnZEdoaGRDQmpiMjUwWVdsdWN5QjBhR1VnWm05c2JHOTNhVzVuSUhCeWIzQmxjblJwWlhNNlhHNGdJQ0FnSUNvZ0lDQWdJRUJ3Y205d1pYSjBlU0I3VDJKcVpXTjBmU0FnSUhKdmIzUmZjM1J2Y21VZ0xTQkJiaUJ2WW1wbFkzUWdkR2hoZENCamIyNTBZV2x1Y3lCMGFHVWdjbTl2ZENCemRHOXlaU0J2WmlCMGFHVWdZWEJ3TGx4dUlDQWdJQ0FxSUNBZ0lDQkFjSEp2Y0dWeWRIa2dlMU4wY21sdVoxdGRmU0JzYjJOaGJGOXpkRzl5WVdkbFgzQnliM0JsY25ScFpYTWdMU0JCSUd4cGMzUWdiMllnY0hKdmNHVnlkR2xsY3ljZ2JtRnRaWE1nZEdoaGRDQnphRzkxYkdRZ1ltVWdhMlZ3ZENCcGJpQnNiMk5oYkZOMGIzSmhaMlV1WEc0Z0lDQWdJQ29nSUNBZ0lFQndjbTl3WlhKMGVTQjdVM1J5YVc1blcxMTlJSE5sYzNOcGIyNWZjM1J2Y21GblpWOXdjbTl3WlhKMGFXVnpJQzBnUVNCc2FYTjBJRzltSUhCeWIzQmxjblJwWlhNbklHNWhiV1Z6SUhSb1lYUWdjMmh2ZFd4a0lHSmxJR3RsY0hRZ2FXNGdjMlZ6YzJsdmJsTjBiM0poWjJVdVhHNGdJQ0FnSUNvZ0lDQWdJRUJ3Y205d1pYSjBlU0I3VDJKcVpXTjBmU0FnSUhaaGJHbGtZWFJwYjI1ZmNuVnNaWE1nTFNCQmJpQnZZbXBsWTNRZ2RHaGhkQ0JqYjI1MFlXbHVjeUIwYUdVZ2RtRnNhV1JoZEdsdmJpQnlkV3hsY3lCbWIzSWdaV0ZqYUNCd2NtOXdaWEowZVNCdlppQjBhR1VnYzNSdmNtVXVYRzRnSUNBZ0lDb2dJQ0FnSUVCd2NtOXdaWEowZVNCN1UzUnlhVzVuZlNBZ0lITjBiM0psWDI1aGJXVWdMU0JGZUhCc2FXTnBkQ0J6ZEc5eVpTQnVZVzFsSUdadmNpQmljbTkzYzJWeUlHRndjR3hwWTJGMGFXOXVJSE4wYjNKaFoyVWdLSFJ2SUdKNWNHRnpjeUJ0YVc1cFptbGpZWFJwYjI0cFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2IzQjBhVzl1Y3lBOUlIdDlLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHNnY205dmRGOXpkRzl5WlN3Z2JHOWpZV3hmYzNSdmNtRm5aVjl3Y205d1pYSjBhV1Z6TENCelpYTnphVzl1WDNOMGIzSmhaMlZmY0hKdmNHVnlkR2xsY3l3Z2RtRnNhV1JoZEdsdmJsOXlkV3hsY3l3Z2MzUnZjbVZmYm1GdFpTQjlJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NN1hHNWNiaUFnSUNBZ0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ2R5YjI5MFgzTjBiM0psSnl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjNjbWwwWVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMGFHbHpMQ0FuYkc5allXeGZjM1J2Y21GblpWOXdjbTl3WlhKMGFXVnpKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwYUdsekxDQW5jMlZ6YzJsdmJsOXpkRzl5WVdkbFgzQnliM0JsY25ScFpYTW5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCb1lYTmZiRzlqWVd4ZmIzSmZjMlZ6YzJsdmJsOXpkRzl5WVdkbElEMWNiaUFnSUNBZ0lDQWdJQ0FnSUNoc2IyTmhiRjl6ZEc5eVlXZGxYM0J5YjNCbGNuUnBaWE1nSmlZZ2JHOWpZV3hmYzNSdmNtRm5aVjl3Y205d1pYSjBhV1Z6TG14bGJtZDBhQ2tnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2h6WlhOemFXOXVYM04wYjNKaFoyVmZjSEp2Y0dWeWRHbGxjeUFtSmlCelpYTnphVzl1WDNOMGIzSmhaMlZmY0hKdmNHVnlkR2xsY3k1c1pXNW5kR2dwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hvWVhOZmJHOWpZV3hmYjNKZmMyVnpjMmx2Ymw5emRHOXlZV2RsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYTjBiM0psWDI1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM04wYjNKbFgyNWhiV1VnYVhNZ2NtVnhkV2x5WldRZ1ptOXlJR3h2WTJGc0wzTmxjM05wYjI0Z2MzUnZjbUZuWlNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHaHBjeXdnSjNOMGIzSmxYMjVoYldVbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklITjBiM0psWDI1aGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1JmYzNSdmNtVWdQU0J5YjI5MFgzTjBiM0psTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbXh2WTJGc1gzTjBiM0poWjJWZmNISnZjR1Z5ZEdsbGN5QTlJR3h2WTJGc1gzTjBiM0poWjJWZmNISnZjR1Z5ZEdsbGN5QjhmQ0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhOemFXOXVYM04wYjNKaFoyVmZjSEp2Y0dWeWRHbGxjeUE5SUhObGMzTnBiMjVmYzNSdmNtRm5aVjl3Y205d1pYSjBhV1Z6SUh4OElGdGRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRlpoYkdsa1lYUnBiMjVTZFd4bGN5aDJZV3hwWkdGMGFXOXVYM0oxYkdWektUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkSFZ3VW1WaFkzUnBiMjVHYjNKTWIyTmhiRk4wYjNKaFoyVW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFIxY0ZKbFlXTjBhVzl1Um05eVUyVnpjMmx2YmxOMGIzSmhaMlVvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhSeWFXVjJaVVp5YjIxVGRHOXlZV2RsS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCaGJpQnpibUZ3YzJodmRDQnZaaUIwYUdVZ1kzVnljbVZ1ZENCemRHOXlaVnh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kYlhYMGdjSEp2Y0dWeWRHbGxjeUF0SUVFZ2JHbHpkQ0J2WmlCd2NtOXdaWEowYVdWekp5QnVZVzFsY3lCMGFHRjBJSE5vYjNWc1pDQmlaU0JwYmlCMGFHVWdjMjVoY0hOb2IzUXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFBZbXBsWTNSOUlGSmxkSFZ5Ym5NZ1lTQmpiRzl1WldRZ2IySnFaV04wSUc5bUlIUm9aU0J6ZEc5eVpTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCblpYUlRibUZ3YzJodmRDaHdjbTl3WlhKMGFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnpibUZ3YzJodmRDQTlJSFJ2U2xNb2RHaHBjeWs3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZwYzBWdGNIUjVUMkpxWldOMEtIUm9hWE11Y205dmRGOXpkRzl5WlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOdVlYQnphRzkwTG5KdmIzUmZjM1J2Y21VZ1BTQjBhR2x6TG5KdmIzUmZjM1J2Y21VN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2NISnZjR1Z5ZEdsbGN5QW1KaUJ3Y205d1pYSjBhV1Z6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMjVoY0hOb2IzUWdQU0J3Y205d1pYSjBhV1Z6TG5KbFpIVmpaU2dvY21WemRXeDBMQ0J3S1NBOVBpQlBZbXBsWTNRdVlYTnphV2R1S0hKbGMzVnNkQ3dnZXlCYmNGMDZJSE51WVhCemFHOTBXM0JkSUgwcExDQjdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyNWhjSE5vYjNRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIxY0NCaElISmxZV04wYVc5dUlHOXVJSEJ5YjNCbGNuUnBaWE1nZDJocFkyZ2dZWEpsSUcxbGJuUnBiMjVsWkNCcGJpQmdiRzlqWVd4ZmMzUnZjbUZuWlY5d2NtOXdaWEowYVdWellGeHVJQ0FnSUNBcUlDQmhibVFnYVc1MmIydGxjeUJnYzJGMlpWUnZVM1J2Y21GblpXQWdkMmhsYmlCMGFHVnlaU0JoY21VZ1lXNTVJR05vWVc1blpYTWdiMjRnZEdobGJTNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRIVndVbVZoWTNScGIyNUdiM0pNYjJOaGJGTjBiM0poWjJVb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbXh2WTJGc1gzTjBiM0poWjJWZmNISnZjR1Z5ZEdsbGN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFlXTjBhVzl1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNncElEMCtJSFJvYVhNdWJHOWpZV3hmYzNSdmNtRm5aVjl3Y205d1pYSjBhV1Z6TG0xaGNDaHBJRDArSUhSb2FYTmJhVjBwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNncElEMCtJSFJvYVhNdWMyRjJaVlJ2VTNSdmNtRm5aU2gwYUdsekxteHZZMkZzWDNOMGIzSmhaMlZmY0hKdmNHVnlkR2xsY3l3Z1FtRnpaVk4wYjNKbExsTlVUMUpCUjBWVExreFBRMEZNWDFOVVQxSkJSMFVwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMGN5QjFjQ0JoSUhKbFlXTjBhVzl1SUc5dUlIQnliM0JsY25ScFpYTWdkMmhwWTJnZ1lYSmxJRzFsYm5ScGIyNWxaQ0JwYmlCZ2MyVnpjMmx2Ymw5emRHOXlZV2RsWDNCeWIzQmxjblJwWlhOZ1hHNGdJQ0FnSUNvZ0lHRnVaQ0JwYm5admEyVnpJR0J6WVhabFZHOVRkRzl5WVdkbFlDQjNhR1Z1SUhSb1pYSmxJR0Z5WlNCaGJua2dZMmhoYm1kbGN5QnZiaUIwYUdWdExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMGRYQlNaV0ZqZEdsdmJrWnZjbE5sYzNOcGIyNVRkRzl5WVdkbEtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6WlhOemFXOXVYM04wYjNKaFoyVmZjSEp2Y0dWeWRHbGxjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZV04wYVc5dUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhSb2FYTXVjMlZ6YzJsdmJsOXpkRzl5WVdkbFgzQnliM0JsY25ScFpYTXViV0Z3S0drZ1BUNGdkR2hwYzF0cFhTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z2RHaHBjeTV6WVhabFZHOVRkRzl5WVdkbEtIUm9hWE11YzJWemMybHZibDl6ZEc5eVlXZGxYM0J5YjNCbGNuUnBaWE1zSUVKaGMyVlRkRzl5WlM1VFZFOVNRVWRGVXk1VFJWTlRTVTlPWDFOVVQxSkJSMFVwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WdGIzWmxjeUJ3Y205d1pYSjBhV1Z6SUhSb1lYUWdZWEpsSUc1dmRDQndZWE56WldRZ1puSnZiU0IwYUdVZ2MyNWhjSE5vYjNRZ2IyWWdkR2hsSUhOMGIzSmxJR0Z1WkNCellYWmxjeUJwZENCMGJ5QjBhR1VnY0dGemMyVmtJSE4wYjNKaFoyVmNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuVzExOUlIQnliM0JsY25ScFpYTWdMU0JCSUd4cGMzUWdiMllnZEdobElITjBiM0psSjNNZ2NISnZjR1Z5ZEdsbGN5Y2dibUZ0WlhNZ2QyaHBZMmdnYzJodmRXeGtJR0psSUhOaGRtVmtJR2x1SUhSb1pTQnpkRzl5WVdkbExseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzbHRZbTlzZlNBZ0lITjBiM0poWjJVZ0lDQWdMU0JCSUhONWJXSnZiQ0J2WW1wbFkzUWdkR2hoZENCa1pXWnBibVZ6SUhSb1pTQnpkRzl5WVdkbElIZG9hV05vSUhSb1pTQnpibUZ3YzJodmRDQnphRzkxYkdRZ1ltVWdjM1J2Y21Wa0lHbHVJR2wwTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ292WEc0Z0lDQWdjMkYyWlZSdlUzUnZjbUZuWlNod2NtOXdaWEowYVdWekxDQnpkRzl5WVdkbEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElITnVZWEJ6YUc5MElEMGdTbE5QVGk1emRISnBibWRwWm5rb2RHaHBjeTVuWlhSVGJtRndjMmh2ZENod2NtOXdaWEowYVdWektTd2dLR3RsZVN3Z2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNBaFBUMGdiblZzYkNrZ2NtVjBkWEp1SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tITjBiM0poWjJVZ1BUMDlJRUpoYzJWVGRHOXlaUzVUVkU5U1FVZEZVeTVNVDBOQlRGOVRWRTlTUVVkRktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc2IyTmhiRk4wYjNKaFoyVXVjMlYwU1hSbGJTaDBhR2x6TG5OMGIzSmxYMjVoYldVc0lITnVZWEJ6YUc5MEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6ZEc5eVlXZGxJRDA5UFNCQ1lYTmxVM1J2Y21VdVUxUlBVa0ZIUlZNdVUwVlRVMGxQVGw5VFZFOVNRVWRGS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhOemFXOXVVM1J2Y21GblpTNXpaWFJKZEdWdEtIUm9hWE11YzNSdmNtVmZibUZ0WlN3Z2MyNWhjSE5vYjNRcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVYwY21sbGRtVnpJSE5oZG1Wa0lITnVZWEJ6YUc5MElHOW1JSFJvWlNCemRHOXlaU0JoYm1RZ1lYTnphV2R1Y3lCMGJ5QjBhR1VnWTNWeWNtVnVkQ0JwYm5OMFlXNWpaUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFMMXh1SUNBZ0lFQmhZM1JwYjI1Y2JpQWdJQ0J5WlhSeWFXVjJaVVp5YjIxVGRHOXlZV2RsS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCc2IyTmhiRjl6ZEc5eVlXZGxYM051WVhCemFHOTBJRDBnU2xOUFRpNXdZWEp6WlNoc2IyTmhiRk4wYjNKaFoyVXVaMlYwU1hSbGJTaDBhR2x6TG5OMGIzSmxYMjVoYldVc0lIdDlLU2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE5sYzNOcGIyNWZjM1J2Y21GblpWOXpibUZ3YzJodmRDQTlJRXBUVDA0dWNHRnljMlVvYzJWemMybHZibE4wYjNKaFoyVXVaMlYwU1hSbGJTaDBhR2x6TG5OMGIzSmxYMjVoYldVc0lIdDlLU2s3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzI1aGNITm9iM1FnUFNCN0lDNHVMbXh2WTJGc1gzTjBiM0poWjJWZmMyNWhjSE5vYjNRc0lDNHVMbk5sYzNOcGIyNWZjM1J2Y21GblpWOXpibUZ3YzJodmRDQjlPMXh1WEc0Z0lDQWdJQ0FnSUU5aWFtVmpkQzVyWlhsektITnVZWEJ6YUc5MEtTNW1iM0pGWVdOb0tHc2dQVDRnS0hSb2FYTmJhMTBnUFNCemJtRndjMmh2ZEZ0clhTa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RtRnNhV1JoZEdsdmJpQmxjbkp2Y2lCdFpYTnpZV2RsY3lCbWIzSWdZVzRnYjJKelpYSjJZV0pzWlNCd2NtOXdaWEowZVNCdlppQjBhR1VnYzNSdmNtVmNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCd2NtOXdaWEowZVU1aGJXVWdMU0JVYUdVZ2IySnpaWEoyWVdKc1pTQndjbTl3WlhKMGVTZHpJRzVoYldWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnVzN0VGRISnBibWQ5WFNCdFpYTnpZV2RsY3lBdElFRnVJR0Z5Y21GNUlHOW1JSE4wY21sdVozTWdkR2hoZENCamIyNTBZV2x1Y3lCMllXeHBaR0YwYVc5dUlHVnljbTl5SUcxbGMzTmhaMlZ6SUdadmNpQjBhR1VnY0dGeWRHbGpkV3hoY2lCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxTDF4dUlDQWdJRUJoWTNScGIyNWNiaUFnSUNCelpYUldZV3hwWkdGMGFXOXVSWEp5YjNKTlpYTnpZV2RsY3lod2NtOXdaWEowZVU1aGJXVXNJRzFsYzNOaFoyVnpLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2x6WDJScFptWmxjbVZ1ZENBOUlDZ3BJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWhJWFJvYVhNdWRtRnNhV1JoZEdsdmJsOWxjbkp2Y25OYmNISnZjR1Z5ZEhsT1lXMWxYVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVtYVd4MFpYSW9lQ0E5UGlBaGJXVnpjMkZuWlhNdWFXNWpiSFZrWlhNb2VDa3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbU52Ym1OaGRDaHRaWE56WVdkbGN5NW1hV3gwWlhJb2VDQTlQaUFoZEdocGN5NTJZV3hwWkdGMGFXOXVYMlZ5Y205eWMxdHdjbTl3WlhKMGVVNWhiV1ZkTG1sdVkyeDFaR1Z6S0hncEtTa3ViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVkbUZzYVdSaGRHbHZibDlsY25KdmNuTmJjSEp2Y0dWeWRIbE9ZVzFsWFNCOGZDQnBjMTlrYVdabVpYSmxiblFvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJZV3hwWkdGMGFXOXVYMlZ5Y205eWMxdHdjbTl3WlhKMGVVNWhiV1ZkSUQwZ2JXVnpjMkZuWlhNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUhaaGJHbGtZWFJwYjI0Z2NuVnNaWE5jYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnlkV3hsYzF4dUlDQWdJQ0FxWEc0Z0lDQWdJQ292WEc0Z0lDQWdRR0ZqZEdsdmJseHVJQ0FnSUhObGRGWmhiR2xrWVhScGIyNVNkV3hsY3loeWRXeGxjeUE5SUh0OUtTQjdYRzRnSUNBZ0lDQWdJRTlpYW1WamRDNXJaWGx6S0hKMWJHVnpLUzVtYjNKRllXTm9LR3RsZVNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZrWkZKMWJHVW9hMlY1TENCeWRXeGxjMXRyWlhsZEtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVdSa2N5QnlkV3hsY3lCMGJ5QjBhR1VnY0dGeWRHbGpkV3hoY2lCd2NtOXdaWEowZVZ4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlISjFiR1Z6WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaTljYmlBZ0lDQkFZV04wYVc5dVhHNGdJQ0FnWVdSa1VuVnNaU2h3Y205d1pYSjBlU3dnY25Wc1pYTXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJZV3hwWkdGMGFXOXVYM0oxYkdWelczQnliM0JsY25SNVhTQTlJSEoxYkdWek8xeHVYRzRnSUNBZ0lDQWdJR2x1ZEdWeVkyVndkQ2gwYUdsekxDQndjbTl3WlhKMGVTd2dZMmhoYm1kbElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2FXUmhkR1ZRY205d1pYSjBlU2h3Y205d1pYSjBlU3dnWTJoaGJtZGxMbTVsZDFaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamFHRnVaMlU3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGWmhiR2xrWVhSbGN5QmhJSEJoY25ScFkzVnNZWElnY0hKdmNHVnlkSGtnYjJZZ2RHaGxJSE4wYjNKbFhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnY0hKdmNHVnlkSGtnTFNCVWFHVWdibUZ0WlNCdlppQjBhR1VnY0hKdmNHVnlkSGtnYVc0Z2RHaGxJSE4wYjNKbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhaaGJIVmxJQ0FnSUMwZ1ZHaGxJSFpoYkhWbElHOW1JSFJvWlNCd2NtOXdaWEowZVN3Z2FYUWdZMkZ1SUdKbElIVnVaR1ZtYVc1bFpDNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUwxeHVJQ0FnSUVCaFkzUnBiMjVjYmlBZ0lDQjJZV3hwWkdGMFpWQnliM0JsY25SNUtIQnliM0JsY25SNUxDQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGNtbG5aMlZ5SUQwZ2RHaHBjeTUyWVd4cFpHRjBhVzl1WDNKMWJHVnpXM0J5YjNCbGNuUjVYUzUwY21sbloyVnlPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBibkIxZEhNZ1BTQjdJRnR3Y205d1pYSjBlVjA2SUhaaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRZ1B5QjJZV3gxWlNBNklIUm9hWE5iY0hKdmNHVnlkSGxkSUgwN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhaaGJHbGtZWFJwYjI1ZmNuVnNaWE1nUFNCN0lGdHdjbTl3WlhKMGVWMDZJSFJvYVhNdWRtRnNhV1JoZEdsdmJsOXlkV3hsYzF0d2NtOXdaWEowZVYwdWNuVnNaWE1nZkh3Z1cxMGdmVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9JU0YwY21sbloyVnlJQ1ltSUU5aWFtVmpkQzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0hSb2FYTXNJSFJ5YVdkblpYSXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEhOYmRISnBaMmRsY2wwZ1BTQjBhR2x6VzNSeWFXZG5aWEpkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzYVdSaGRHbHZibDl5ZFd4bGMxdDBjbWxuWjJWeVhTQTlJSFJvYVhNdWRtRnNhV1JoZEdsdmJsOXlkV3hsYzF0MGNtbG5aMlZ5WFM1eWRXeGxjeUI4ZkNCYlhUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFpoYkdsa1lYUnZjaUE5SUc1bGR5QldZV3hwWkdGMGIzSW9hVzV3ZFhSekxDQjJZV3hwWkdGMGFXOXVYM0oxYkdWekxDQjBhR2x6S1R0Y2JseHVJQ0FnSUNBZ0lDQjJZV3hwWkdGMGIzSXVhWE5RWVhOelpXUW9LVHRjYmx4dUlDQWdJQ0FnSUNCUFltcGxZM1F1YTJWNWN5aHBibkIxZEhNcExtWnZja1ZoWTJnb2EyVjVJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBWbUZzYVdSaGRHbHZia1Z5Y205eVRXVnpjMkZuWlhNb2EyVjVMQ0IyWVd4cFpHRjBiM0l1WlhKeWIzSnpMbWRsZENoclpYa3BLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZtRnNhV1JoZEdWeklHRnNiQ0J3Y205d1pYSjBhV1Z6SUhkb2FXTm9JSFpoYkdsa1lYUnBiMjRnY25Wc1pTQm9ZWE1nWW1WbGJpQnpaWFFnWm05eUxseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvdlhHNGdJQ0FnUUdGamRHbHZibHh1SUNBZ0lIWmhiR2xrWVhSbFFXeHNVSEp2Y0dWeWRHbGxjeWdwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZG1Gc2FXUmhkR2x2Ymw5eWRXeGxjeUE5SUU5aWFtVmpkQzVyWlhsektIUm9hWE11ZG1Gc2FXUmhkR2x2Ymw5eWRXeGxjeWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFpoYkdsa1lYUnBiMjVmWlhKeWIzSnpJRDBnVDJKcVpXTjBMbXRsZVhNb2RHaHBjeTUyWVd4cFpHRjBhVzl1WDJWeWNtOXljeWs3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnNhV1JoZEdsdmJsOXlkV3hsY3k1bWIzSkZZV05vS0hBZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4cFpHRjBaVkJ5YjNCbGNuUjVLSEFzSUhSb2FYTmJjRjBwTzF4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCU1pXMXZkbVVnYTJWNWN5QjBhR0YwSUdGeVpTQndjbVZ6Wlc1MElHbHVJR1Z5Y205eUxDQmlkWFFnYm05MElHbHVJSEoxYkdWek9seHVJQ0FnSUNBZ0lDQjJZV3hwWkdGMGFXOXVYMlZ5Y205eWN5NW1iM0pGWVdOb0tHVnljbTl5SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkbUZzYVdSaGRHbHZibDl5ZFd4bGN5NXBibU5zZFdSbGN5aGxjbkp2Y2lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2RHaHBjeTUyWVd4cFpHRjBhVzl1WDJWeWNtOXljMXRsY25KdmNsMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnZibE4zYVhSamFFRmpZMjkxYm5Rb2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0d4cGMzUmxibVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTjNhWFJqYUY5aFkyTnZkVzUwWDJ4cGMzUmxibVZ5SUQwZ2JHbHpkR1Z1WlhJN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM2RwZEdOb1FXTmpiM1Z1ZEVScGMzQnZjMlZ5SUQwZ2QyaGxiaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQjBhR2x6TG5KdmIzUmZjM1J2Y21VdVkyeHBaVzUwTG5OM2FYUmphRjlpY205aFpHTmhjM1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpkV3gwSUQwZ2RHaHBjeTV6ZDJsMFkyaGZZV05qYjNWdWRGOXNhWE4wWlc1bGNpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQ0FtSmlCeVpYTjFiSFF1ZEdobGJpQW1KaUIwZVhCbGIyWWdjbVZ6ZFd4MExuUm9aVzRnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1ZEdobGJpZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEY5emRHOXlaUzVqYkdsbGJuUXVjM2RwZEdOb1JXNWtVMmxuYm1Gc0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjI1VGQybDBZMmhCWTJOdmRXNTBLSFJvYVhNdWMzZHBkR05vWDJGalkyOTFiblJmYkdsemRHVnVaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMU4zYVhSamFHbHVaeUJoWTJOdmRXNTBJR3hwYzNSbGJtVnljeUJoY21VZ2NtVnhkV2x5WldRZ2RHOGdjbVYwZFhKdUlHRWdjSEp2YldselpTNG5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIUm9aWEpsSUdseklHNXZJR3hwYzNSbGJtVnlJR04xY25KbGJuUnNlU0JoWTNScGRtVXVJSE52SUhkbElHTmhiaUJxZFhOMElHbG5ibTl5WlNCMGFHVWdaWEp5YjNJZ2NtRnBjMlZrSUdaeWIyMGdkSEpsWVhScGJtZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0VnYm5Wc2JDQnZZbXBsWTNRZ1lYTWdZU0JtZFc1amRHbHZiaTRnUVd4MGFHOTFaMmdzSUdsdUlHUmxkbVZzYjNCdFpXNTBJRzF2WkdVc0lIZGxJSFJvY205M0lHRWdZMjl1YzI5c1pTQmxjbkp2Y2k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hhWE5RY205a2RXTjBhVzl1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtHVnljbTl5S1RzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCdmJsQnlaVk4zYVhSamFFRmpZMjkxYm5Rb2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0d4cGMzUmxibVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaVjl6ZDJsMFkyaGZZV05qYjNWdWRGOXNhWE4wWlc1bGNpQTlJR3hwYzNSbGJtVnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3Y21WVGQybDBZMmhCWTJOdmRXNTBSR2x6Y0c5elpYSWdQU0IzYUdWdUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhSb2FYTXVjbTl2ZEY5emRHOXlaUzVqYkdsbGJuUXVjSEpsWDNOM2FYUmphRjlpY205aFpHTmhjM1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpkV3gwSUQwZ2RHaHBjeTV3Y21WZmMzZHBkR05vWDJGalkyOTFiblJmYkdsemRHVnVaWElvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE4xYkhRZ0ppWWdjbVZ6ZFd4MExuUm9aVzRnSmlZZ2RIbHdaVzltSUhKbGMzVnNkQzUwYUdWdUlEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExuUm9aVzRvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KdmIzUmZjM1J2Y21VdVkyeHBaVzUwTG5ObGRGQnlaVk4zYVhSamFFRmpZMjkxYm5Rb1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXVVSEpsVTNkcGRHTm9RV05qYjNWdWRDaDBhR2x6TG5CeVpWOXpkMmwwWTJoZllXTmpiM1Z1ZEY5c2FYTjBaVzVsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVUhKbExYTjNhWFJqYUNCaFkyTnZkVzUwSUd4cGMzUmxibVZ5Y3lCaGNtVWdjbVZ4ZFdseVpXUWdkRzhnY21WMGRYSnVJR0VnY0hKdmJXbHpaUzRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJvWlhKbElHbHpJRzV2SUd4cGMzUmxibVZ5SUdOMWNuSmxiblJzZVNCaFkzUnBkbVV1SUhOdklIZGxJR05oYmlCcWRYTjBJR2xuYm05eVpTQjBhR1VnWlhKeWIzSWdjbUZwYzJWa0lHWnliMjBnZEhKbFlYUnBibWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdFZ2JuVnNiQ0J2WW1wbFkzUWdZWE1nWVNCbWRXNWpkR2x2Ymk0Z1FXeDBhRzkxWjJnc0lHbHVJR1JsZG1Wc2IzQnRaVzUwSUcxdlpHVXNJSGRsSUhSb2NtOTNJR0VnWTI5dWMyOXNaU0JsY25KdmNpNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYVhOUWNtOWtkV04wYVc5dUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLR1Z5Y205eUtUc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnZia3h2WjI5MWRDaHNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxteHZaMjkxZEVScGMzQnZjMlZ5SUQwZ2QyaGxiaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhSb2FYTXVjbTl2ZEY5emRHOXlaUzVqYkdsbGJuUXVhR0Z6WDJ4dloyZGxaRjl2ZFhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoYzNsdVl5QW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY21WemRXeDBJRDBnZEdocGN5NXNiMmR2ZFhSZmJHbHpkR1Z1WlhJb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBbUppQnlaWE4xYkhRdWRHaGxiaUFtSmlCMGVYQmxiMllnY21WemRXeDBMblJvWlc0Z1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzUwYUdWdUtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KdmIzUmZjM1J2Y21VdVkyeHBaVzUwTG5ObGRFeHZaMjkxZENobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2Ymt4dloyOTFkQ2gwYUdsekxteHZaMjkxZEY5c2FYTjBaVzVsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25URzluYjNWMElHeHBjM1JsYm1WeWN5QmhjbVVnY21WeGRXbHlaV1FnZEc4Z2NtVjBkWEp1SUdFZ2NISnZiV2x6WlM0bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJvWlhKbElHbHpJRzV2SUd4cGMzUmxibVZ5SUdOMWNuSmxiblJzZVNCaFkzUnBkbVV1SUhOdklIZGxJR05oYmlCcWRYTjBJR2xuYm05eVpTQjBhR1VnWlhKeWIzSWdjbUZwYzJWa0lHWnliMjBnZEhKbFlYUnBibWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZU0J1ZFd4c0lHOWlhbVZqZENCaGN5QmhJR1oxYm1OMGFXOXVMaUJCYkhSb2IzVm5hQ3dnYVc0Z1pHVjJaV3h2Y0cxbGJuUWdiVzlrWlN3Z2QyVWdkR2h5YjNjZ1lTQmpiMjV6YjJ4bElHVnljbTl5TGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdselVISnZaSFZqZEdsdmJpZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtHVnljbTl5S1RzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG14dloyOTFkRjlzYVhOMFpXNWxjaUE5SUd4cGMzUmxibVZ5TzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J2YmtOc2FXVnVkRWx1YVhRb2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amJHbGxiblJKYm1sMFJHbHpjRzl6WlhJZ1BTQjNhR1Z1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z2RHaHBjeTV5YjI5MFgzTjBiM0psTG1Oc2FXVnVkQzVwYm1sMGFXRnNhWHBsWkY5aWNtOWhaR05oYzNRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoYzNsdVl5QW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY21WemRXeDBJRDBnZEdocGN5NWpiR2xsYm5SZmFXNXBkRjlzYVhOMFpXNWxjaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WemRXeDBJQ1ltSUhKbGMzVnNkQzUwYUdWdUlDWW1JSFI1Y0dWdlppQnlaWE4xYkhRdWRHaGxiaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExuUm9aVzRvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEY5emRHOXlaUzVqYkdsbGJuUXVjMlYwU1c1cGRHbGhiR2w2WldRb1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjI1RGJHbGxiblJKYm1sMEtIUm9hWE11WTJ4cFpXNTBYMmx1YVhSZmJHbHpkR1Z1WlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KME5zYVdWdWRDQnBibWwwSUd4cGMzUmxibVZ5Y3lCaGNtVWdjbVZ4ZFdseVpXUWdkRzhnY21WMGRYSnVJR0VnY0hKdmJXbHpaUzRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIUm9aWEpsSUdseklHNXZJR3hwYzNSbGJtVnlJR04xY25KbGJuUnNlU0JoWTNScGRtVXVJSE52SUhkbElHTmhiaUJxZFhOMElHbG5ibTl5WlNCMGFHVWdaWEp5YjNJZ2NtRnBjMlZrSUdaeWIyMGdkSEpsWVhScGJtZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1lTQnVkV3hzSUc5aWFtVmpkQ0JoY3lCaElHWjFibU4wYVc5dUxpQkJiSFJvYjNWbmFDd2dhVzRnWkdWMlpXeHZjRzFsYm5RZ2JXOWtaU3dnZDJVZ2RHaHliM2NnWVNCamIyNXpiMnhsSUdWeWNtOXlMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV2x6VUhKdlpIVmpkR2x2YmlncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0dWeWNtOXlLVHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5zYVdWdWRGOXBibWwwWDJ4cGMzUmxibVZ5SUQwZ2JHbHpkR1Z1WlhJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUc5dVRtVjBkMjl5YTFOMFlYUjFjME5vWVc1blpTaHNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtNWxkSGR2Y210VGRHRjBkWE5EYUdGdVoyVkVhWE53YjNObGNpQTlJSEpsWVdOMGFXOXVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZEdocGN5NXliMjkwWDNOMGIzSmxMbU52YlcxdmJpNXBjMTl1WlhSM2IzSnJYMjl1YkdsdVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdselgyOXViR2x1WlNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dVpYUjNiM0pyWDNOMFlYUjFjMTlqYUdGdVoyVmZiR2x6ZEdWdVpYSW9hWE5mYjI1c2FXNWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QjBhR1Z5WlNCcGN5QnVieUJzYVhOMFpXNWxjaUJqZFhKeVpXNTBiSGtnWVdOMGFYWmxMaUJ6YnlCM1pTQmpZVzRnYW5WemRDQnBaMjV2Y21VZ2RHaGxJR1Z5Y205eUlISmhhWE5sWkNCbWNtOXRJSFJ5WldGMGFXNW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHRWdiblZzYkNCdlltcGxZM1FnWVhNZ1lTQm1kVzVqZEdsdmJpNGdRV3gwYUc5MVoyZ3NJR2x1SUdSbGRtVnNiM0J0Wlc1MElHMXZaR1VzSUhkbElIUm9jbTkzSUdFZ1kyOXVjMjlzWlNCbGNuSnZjaTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZwYzFCeWIyUjFZM1JwYjI0b0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lobGNuSnZjaWs3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG01bGRIZHZjbXRmYzNSaGRIVnpYMk5vWVc1blpWOXNhWE4wWlc1bGNpQTlJR3hwYzNSbGJtVnlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnZibFJvWlcxbFEyaGhibWRsS0d4cGMzUmxibVZ5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEdobGJXVkRhR0Z1WjJWRWFYTndiM05sY2lBOUlISmxZV04wYVc5dUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdkR2hwY3k1eWIyOTBYM04wYjNKbExuVnBMbWx6WDJSaGNtdGZiVzlrWlY5dmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdselgyUmhjbXRmYlc5a1pWOXZiaUE5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwYUdWdFpWOWphR0Z1WjJWZmJHbHpkR1Z1WlhJb2FYTmZaR0Z5YTE5dGIyUmxYMjl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUIwYUdWeVpTQnBjeUJ1YnlCc2FYTjBaVzVsY2lCamRYSnlaVzUwYkhrZ1lXTjBhWFpsTGlCemJ5QjNaU0JqWVc0Z2FuVnpkQ0JwWjI1dmNtVWdkR2hsSUdWeWNtOXlJSEpoYVhObFpDQm1jbTl0SUhSeVpXRjBhVzVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0VnYm5Wc2JDQnZZbXBsWTNRZ1lYTWdZU0JtZFc1amRHbHZiaTRnUVd4MGFHOTFaMmdzSUdsdUlHUmxkbVZzYjNCdFpXNTBJRzF2WkdVc0lIZGxJSFJvY205M0lHRWdZMjl1YzI5c1pTQmxjbkp2Y2k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGcGMxQnliMlIxWTNScGIyNG9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGxjbkp2Y2lrN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuUm9aVzFsWDJOb1lXNW5aVjlzYVhOMFpXNWxjaUE5SUd4cGMzUmxibVZ5TzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J2YmxKbFlXeEJZMk52ZFc1MFUybG5iblZ3Ulc1a0tHeHBjM1JsYm1WeUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVmhiRUZqWTI5MWJuUlRhV2R1ZFhCRmJtUmxaRVJwYzNCdmMyVnlJRDBnZDJobGJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJSFJvYVhNdWNtOXZkRjl6ZEc5eVpTNTFhUzVvWVhOZmNtVmhiRjloWTJOdmRXNTBYM05wWjI1MWNGOWxibVJsWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYTjFiSFFnUFNCMGFHbHpMbkpsWVd4ZllXTmpiM1Z1ZEY5emFXZHVkWEJmWlc1a1pXUmZiR2x6ZEdWdVpYSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDQW1KaUJ5WlhOMWJIUXVkR2hsYmlBbUppQjBlWEJsYjJZZ2NtVnpkV3gwTG5Sb1pXNGdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEM1MGFHVnVLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1JmYzNSdmNtVXVkV2t1YzJWMFVtVmhiRUZqWTI5MWJuUlRhV2R1ZFhCRmJtUW9abUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNVNaV0ZzUVdOamIzVnVkRk5wWjI1MWNFVnVaQ2gwYUdsekxuSmxZV3hmWVdOamIzVnVkRjl6YVdkdWRYQmZaVzVrWldSZmJHbHpkR1Z1WlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMUpsWVd3Z1lXTmpiM1Z1ZENCemFXZHVkWEFnYkdsemRHVnVaWEp6SUdGeVpTQnlaWEYxYVhKbFpDQjBieUJ5WlhSMWNtNGdZU0J3Y205dGFYTmxMaWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RHaGxjbVVnYVhNZ2JtOGdiR2x6ZEdWdVpYSWdZM1Z5Y21WdWRHeDVJR0ZqZEdsMlpTNGdjMjhnZDJVZ1kyRnVJR3AxYzNRZ2FXZHViM0psSUhSb1pTQmxjbkp2Y2lCeVlXbHpaV1FnWm5KdmJTQjBjbVZoZEdsdVoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCaElHNTFiR3dnYjJKcVpXTjBJR0Z6SUdFZ1puVnVZM1JwYjI0dUlFRnNkR2h2ZFdkb0xDQnBiaUJrWlhabGJHOXdiV1Z1ZENCdGIyUmxMQ0IzWlNCMGFISnZkeUJoSUdOdmJuTnZiR1VnWlhKeWIzSXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hhWE5RY205a2RXTjBhVzl1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvWlhKeWIzSXBPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WldGc1gyRmpZMjkxYm5SZmMybG5iblZ3WDJWdVpHVmtYMnhwYzNSbGJtVnlJRDBnYkdsemRHVnVaWEk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJR1JwYzNCdmMyVlFjbVZUZDJsMFkyaEJZMk52ZFc1MEtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhSb2FYTXVjSEpsVTNkcGRHTm9RV05qYjNWdWRFUnBjM0J2YzJWeUlEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaVk4zYVhSamFFRmpZMjkxYm5SRWFYTndiM05sY2lncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISmxYM04zYVhSamFGOWhZMk52ZFc1MFgyeHBjM1JsYm1WeUlEMGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnWkdsemNHOXpaVk4zYVhSamFFRmpZMjkxYm5Rb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NXpkMmwwWTJoQlkyTnZkVzUwUkdsemNHOXpaWElnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNkcGRHTm9RV05qYjNWdWRFUnBjM0J2YzJWeUtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkMmwwWTJoZllXTmpiM1Z1ZEY5c2FYTjBaVzVsY2lBOUlHNTFiR3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJR1JwYzNCdmMyVk1iMmR2ZFhRb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NXNiMmR2ZFhSRWFYTndiM05sY2lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1c2IyZHZkWFJFYVhOd2IzTmxjaWdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11Ykc5bmIzVjBYMnhwYzNSbGJtVnlJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ1pHbHpjRzl6WlVOc2FXVnVkRWx1YVhRb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NWpiR2xsYm5SSmJtbDBSR2x6Y0c5elpYSWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMnhwWlc1MFNXNXBkRVJwYzNCdmMyVnlLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYkdsbGJuUmZhVzVwZEY5c2FYTjBaVzVsY2lBOUlHNTFiR3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJR1JwYzNCdmMyVk9aWFIzYjNKclUzUmhkSFZ6UTJoaGJtZGxLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIUm9hWE11Ym1WMGQyOXlhMU4wWVhSMWMwTm9ZVzVuWlVScGMzQnZjMlZ5SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG01bGRIZHZjbXRUZEdGMGRYTkRhR0Z1WjJWRWFYTndiM05sY2lncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtVjBkMjl5YTE5emRHRjBkWE5mWTJoaGJtZGxYMnhwYzNSbGJtVnlJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ1pHbHpjRzl6WlZSb1pXMWxRMmhoYm1kbEtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhSb2FYTXVkR2hsYldWRGFHRnVaMlZFYVhOd2IzTmxjaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwYUdWdFpVTm9ZVzVuWlVScGMzQnZjMlZ5S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1MGFHVnRaVjlqYUdGdVoyVmZiR2x6ZEdWdVpYSWdQU0J1ZFd4c08xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCa2FYTndiM05sVW1WaGJFRmpZMjkxYm5SVGFXZHVkWEJGYm1Rb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NXlaV0ZzUVdOamIzVnVkRk5wWjI1MWNFVnVaR1ZrUkdsemNHOXpaWElnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WaGJFRmpZMjkxYm5SVGFXZHVkWEJGYm1SbFpFUnBjM0J2YzJWeUtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaV0ZzWDJGalkyOTFiblJmYzJsbmJuVndYMlZ1WkdWa1gyeHBjM1JsYm1WeUlEMGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYjI1VmJtMXZkVzUwS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzQnZjMlZRY21WVGQybDBZMmhCWTJOdmRXNTBLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR2x6Y0c5elpWTjNhWFJqYUVGalkyOTFiblFvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrYVhOd2IzTmxURzluYjNWMEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHbHpjRzl6WlVOc2FXVnVkRWx1YVhRb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a2FYTndiM05sVG1WMGQyOXlhMU4wWVhSMWMwTm9ZVzVuWlNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzQnZjMlZVYUdWdFpVTm9ZVzVuWlNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzQnZjMlZTWldGc1FXTmpiM1Z1ZEZOcFoyNTFjRVZ1WkNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCaGMzTmxjblJJWVhOV1lXeHBaRU5oWTJobEtHeHZaMmx1YVdRc0lDNHVMbkpsWVdOMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QmhZMk52ZFc1MElIZGhjeUJqYUdGdVoyVmtJSGRvWlc0Z2RHaHBjeUIzWVhNZ2RXNXRiM1Z1ZEdWa0xseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXliMjkwWDNOMGIzSmxMbU5zYVdWdWRDNXNiMmRwYm1sa0lDRTlQU0JzYjJkcGJtbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV0ZqZEdsdmJuTXVabTl5UldGamFDaGhZM1FnUFQ0Z1lXTjBLQ2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1lYSjBhV0ZzWDJabGRHTm9YM1JwYldVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnZXlCaFkzUnBiMjRzSUdOdmJYQjFkR1ZrTENCdlluTmxjblpoWW14bExDQnlaV0ZqZEdsdmJpd2dkMmhsYmlCOUlHWnliMjBnSjIxdlluZ25PMXh1YVcxd2IzSjBJSHNnYVhORGNubHdkRzlqZFhKeVpXNWplU3dnWjJWMFVISnZjR1Z5ZEhsV1lXeDFaU3dnY205MWRHVnpJSDBnWm5KdmJTQW5RR1JsY21sMkwzTm9ZWEpsWkNjN1hHNXBiWEJ2Y25RZ2V5QnNiMk5oYkdsNlpTQjlJR1p5YjIwZ0owQmtaWEpwZGk5MGNtRnVjMnhoZEdsdmJuTW5PMXh1YVcxd2IzSjBJRU52Ym5OMFlXNTBjeUJtY205dElDZERiMjV6ZEdGdWRITXZZMjl1YzNSaGJuUnpKenRjYm1sdGNHOXlkQ0JEWVhOb2FXVnlUbTkwYVdacFkyRjBhVzl1Y3lCbWNtOXRJQ2REYjI1MFlXbHVaWEp6TDJOaGMyaHBaWEl0Ym05MGFXWnBZMkYwYVc5dWN5NXFjM2duTzF4dWFXMXdiM0owSUVKaGMyVlRkRzl5WlNCbWNtOXRJQ2N1TDJKaGMyVXRjM1J2Y21Vbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCSFpXNWxjbUZzVTNSdmNtVWdaWGgwWlc1a2N5QkNZWE5sVTNSdmNtVWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLSHNnY205dmRGOXpkRzl5WlN3Z1YxTWdmU2tnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWg3SUhKdmIzUmZjM1J2Y21VZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVYxTWdQU0JYVXp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MFgzTjBiM0psSUQwZ2NtOXZkRjl6ZEc5eVpUdGNibHh1SUNBZ0lDQWdJQ0IzYUdWdUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdkR2hwY3k1eWIyOTBYM04wYjNKbExtTnNhV1Z1ZEM1cGMxOXNiMmRuWldSZmFXNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJJWVhOVFpYUkRkWEp5Wlc1amVTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlYUjBZV05vUTJGemFHbGxjbFJ2VFdWdWRTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1b1lYTmZjMlYwWDJOMWNuSmxibU41S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTm9ZVzVuWlZObGRFTjFjbkpsYm1ONVRXOWtZV3hVYVhSc1pTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVmhZM1JwYjI0b1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eWIyOTBYM04wYjNKbExtTnNhV1Z1ZEM1emQybDBZMmhsWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkp2YjNSZmMzUnZjbVV1WTJ4cFpXNTBMbWx6WDJ4dloyZGxaRjlwYml4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkp2YjNSZmMzUnZjbVV1WTJ4cFpXNTBMbU4xY25KbGJtTjVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtbHVhWFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCcGMxOXNiMkZrYVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2FYTmZjREp3WDNacGMybGliR1VnUFNCbVlXeHpaVHRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0J3TW5CZmJtOTBhV1pwWTJGMGFXOXVYMk52ZFc1MElEMGdNRHRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0JqWVhOb2FXVnlYM0p2ZFhSbFgzUmhZbDlwYm1SbGVDQTlJREE3WEc0Z0lDQWdRRzlpYzJWeWRtRmliR1VnYVhOZlpHVndiM05wZENBOUlHWmhiSE5sTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUhOb2IzVnNaRjl6YUc5M1gyRnNiRjloZG1GcGJHRmliR1ZmWTNWeWNtVnVZMmxsY3lBOUlHWmhiSE5sTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdselgyTmhjMmhwWlhKZlpHVm1ZWFZzZENBOUlIUnlkV1U3WEc0Z0lDQWdRRzlpYzJWeWRtRmliR1VnWkdWd2IzTnBkRjkwWVhKblpYUWdQU0FuSnp0Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCemFHOTFiR1JmYzJWMFgyTjFjbkpsYm1ONVgyMXZaR0ZzWDNScGRHeGxYMk5vWVc1blpTQTlJR1poYkhObE8xeHVJQ0FnSUVCdlluTmxjblpoWW14bElIQXljRjloWkhabGNuUnBjMlZ5WDJWeWNtOXlJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdoaGMxOXpaWFJmWTNWeWNtVnVZM2tnUFNCbVlXeHpaVHRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0J6YUc5MWJHUmZjR1Z5WTJWdWRHRm5aVjl5WlhObGRDQTlJR1poYkhObE8xeHVJQ0FnSUVCdlluTmxjblpoWW14bElIQmxjbU5sYm5SaFoyVWdQU0F3TzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUhOb2IzZGZjREp3WDJsdVgyTmhjMmhwWlhKZlpHVm1ZWFZzZENBOUlHWmhiSE5sTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUc5dVVtVnRiM1Z1ZENBOUlDZ3BJRDArSUh0OU8xeHVYRzRnSUNBZ1lXTjBhWFpsWDJOdmJuUmhhVzVsY2lBOUlFTnZibk4wWVc1MGN5NWpiMjUwWVdsdVpYSnpMbVJsY0c5emFYUTdYRzRnSUNBZ2FYTmZjRzl3ZFd4aGRHbHVaMTkyWVd4MVpYTWdQU0JtWVd4elpUdGNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJQYmxKbGJXOTFiblFvWm5WdVl5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXVVbVZ0YjNWdWRDQTlJR1oxYm1NN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdOdmJYQjFkR1ZrWEc0Z0lDQWdaMlYwSUdselgyTnllWEIwYnlncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QmpkWEp5Wlc1amVTQjlJRDBnZEdocGN5NXliMjkwWDNOMGIzSmxMbU5zYVdWdWREdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRWhZM1Z5Y21WdVkza2dKaVlnYVhORGNubHdkRzlqZFhKeVpXNWplU2hqZFhKeVpXNWplU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR052YlhCMWRHVmtYRzRnSUNBZ1oyVjBJR2x6WDNBeWNGOWxibUZpYkdWa0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1cGMxOXdNbkJmZG1semFXSnNaU0FtSmlBaGRHaHBjeTV5YjI5MFgzTjBiM0psTG1Oc2FXVnVkQzVwYzE5bGRUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyaHZkMUF5Y0VsdVEyRnphR2xsY2tSbFptRjFiSFFvS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhzZ1lXTmpiM1Z1ZEY5c2FYTjBMQ0JwYzE5MmFYSjBkV0ZzSUgwZ1BTQjBhR2x6TG5KdmIzUmZjM1J2Y21VdVkyeHBaVzUwTzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdselgzQXljRjl5WlhOMGNtbGpkR1ZrSUQwZ2RHaHBjeTV3TW5CZllXUjJaWEowYVhObGNsOWxjbkp2Y2lBOVBUMGdKMUpsYzNSeWFXTjBaV1JEYjNWdWRISjVKenRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhR0Z6WDNWelpGOWpkWEp5Wlc1amVTQTlJR0ZqWTI5MWJuUmZiR2x6ZEM1emIyMWxLR0ZqWTI5MWJuUWdQVDRnWVdOamIzVnVkQzUwYVhSc1pTQTlQVDBnSjFWVFJDY3BPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQm9ZWE5mZFhObGNsOW1hV0YwWDJOMWNuSmxibU41SUQwZ1lXTmpiM1Z1ZEY5c2FYTjBMbk52YldVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoWTJOdmRXNTBJRDArSUNGcGMwTnllWEIwYjJOMWNuSmxibU41S0dGalkyOTFiblF1ZEdsMGJHVXBJQ1ltSUdGalkyOTFiblF1ZEdsMGJHVWdJVDA5SUNkU1pXRnNKMXh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzE5d01uQmZjbVZ6ZEhKcFkzUmxaQ0I4ZkNCcGMxOTJhWEowZFdGc0lIeDhJQ2hvWVhOZmRYTmxjbDltYVdGMFgyTjFjbkpsYm1ONUlDWW1JQ0ZvWVhOZmRYTmtYMk4xY25KbGJtTjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emFHOTNYM0F5Y0Y5cGJsOWpZWE5vYVdWeVgyUmxabUYxYkhRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyaHZkMTl3TW5CZmFXNWZZMkZ6YUdsbGNsOWtaV1poZFd4MElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCaGRIUmhZMmhEWVhOb2FXVnlWRzlOWlc1MUtDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJRzFsYm5Vc0lIVnBJSDBnUFNCMGFHbHpMbkp2YjNSZmMzUnZjbVU3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtaGhjMTl6WlhSZlkzVnljbVZ1WTNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwU0dGelUyVjBRM1Z5Y21WdVkza29LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHMWxiblV1WVhSMFlXTm9LSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUFuWkhSZlkyRnphR2xsY2w5MFlXSW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXTnZiam9nUEVOaGMyaHBaWEpPYjNScFptbGpZWFJwYjI1eklIQXljRjl1YjNScFptbGpZWFJwYjI1ZlkyOTFiblE5ZTNSb2FYTXVjREp3WDI1dmRHbG1hV05oZEdsdmJsOWpiM1Z1ZEgwZ0x6NHNYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUFvS1NBOVBpQnNiMk5oYkdsNlpTZ25RMkZ6YUdsbGNpY3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHbHVhMTkwYnpvZ2RHaHBjeTVvWVhOZmMyVjBYMk4xY25KbGJtTjVJQ1ltSUhKdmRYUmxjeTVqWVhOb2FXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXpvZ0lYUm9hWE11YUdGelgzTmxkRjlqZFhKeVpXNWplU0FtSmlCMWFTNTBiMmRuYkdWVFpYUkRkWEp5Wlc1amVVMXZaR0ZzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiRzluYVc1ZmIyNXNlVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSEpsY0d4aFkyVkRZWE5vYVdWeVRXVnVkVTl1WTJ4cFkyc29LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHNnYldWdWRTd2dkV2tnZlNBOUlIUm9hWE11Y205dmRGOXpkRzl5WlR0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFaGhjMU5sZEVOMWNuSmxibU41S0NrN1hHNWNiaUFnSUNBZ0lDQWdiV1Z1ZFM1MWNHUmhkR1VvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1E2SUNka2RGOWpZWE5vYVdWeVgzUmhZaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdOdmJqb2dQRU5oYzJocFpYSk9iM1JwWm1sallYUnBiMjV6SUhBeWNGOXViM1JwWm1sallYUnBiMjVmWTI5MWJuUTllM1JvYVhNdWNESndYMjV2ZEdsbWFXTmhkR2x2Ymw5amIzVnVkSDBnTHo0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRG9nS0NrZ1BUNGdiRzlqWVd4cGVtVW9KME5oYzJocFpYSW5LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYVc1clgzUnZPaUIwYUdsekxtaGhjMTl6WlhSZlkzVnljbVZ1WTNrZ0ppWWdjbTkxZEdWekxtTmhjMmhwWlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXpvZ0lYUm9hWE11YUdGelgzTmxkRjlqZFhKeVpXNWplU0EvSUhWcExuUnZaMmRzWlZObGRFTjFjbkpsYm1ONVRXOWtZV3dnT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJkcGJsOXZibXg1T2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSURGY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyVjBTR0Z6VTJWMFEzVnljbVZ1WTNrb0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2dZV05qYjNWdWRGOXNhWE4wTENCb1lYTmZZV04wYVhabFgzSmxZV3hmWVdOamIzVnVkQ0I5SUQwZ2RHaHBjeTV5YjI5MFgzTjBiM0psTG1Oc2FXVnVkRHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbWhoYzE5elpYUmZZM1Z5Y21WdVkza2dQVnh1SUNBZ0lDQWdJQ0FnSUNBZ1lXTmpiM1Z1ZEY5c2FYTjBMbVpwYkhSbGNpaGhZMk52ZFc1MElEMCtJQ0ZoWTJOdmRXNTBMbWx6WDNacGNuUjFZV3dwTG5OdmJXVW9ZV05qYjNWdWRDQTlQaUJoWTJOdmRXNTBMblJwZEd4bElDRTlQU0FuVW1WaGJDY3BJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWhhR0Z6WDJGamRHbDJaVjl5WldGc1gyRmpZMjkxYm5RN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUdOb1lXNW5aVk5sZEVOMWNuSmxibU41VFc5a1lXeFVhWFJzWlNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emFHOTFiR1JmYzJWMFgyTjFjbkpsYm1ONVgyMXZaR0ZzWDNScGRHeGxYMk5vWVc1blpTQTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUdGemVXNWpJRzl1VFc5MWJuUkRZWE5vYVdWeVJHVm1ZWFZzZENncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QmhZMk52ZFc1MFgzQnliMjF3ZEY5a2FXRnNiMmNzSUhCaGVXMWxiblJmWVdkbGJuUWdmU0E5SUhSb2FYTXVjbTl2ZEY5emRHOXlaUzV0YjJSMWJHVnpMbU5oYzJocFpYSTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG1oaGMxOXpaWFJmWTNWeWNtVnVZM2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBTR0Z6VTJWMFEzVnljbVZ1WTNrb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRWx6UTJGemFHbGxja1JsWm1GMWJIUW9kSEoxWlNrN1hHNGdJQ0FnSUNBZ0lHRmpZMjkxYm5SZmNISnZiWEIwWDJScFlXeHZaeTV5WlhObGRFbHpRMjl1Wm1seWJXVmtLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSTWIyRmthVzVuS0hSeWRXVXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYQmhlVzFsYm5SZllXZGxiblF1WVd4c1gzQmhlVzFsYm5SZllXZGxiblJmYkdsemREOHVjR0Y1YldWdWRHRm5aVzUwWDJ4cGMzUS9MbXhwYzNRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR0ZuWlc1MFgyeHBjM1FnUFNCaGQyRnBkQ0J3WVhsdFpXNTBYMkZuWlc1MExtZGxkRUZzYkZCaGVXMWxiblJCWjJWdWRFeHBjM1FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoZVcxbGJuUmZZV2RsYm5RdWMyVjBRV3hzVUdGNWJXVnVkRUZuWlc1MFRHbHpkQ2hoWjJWdWRGOXNhWE4wS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFeHZZV1JwYm1jb1ptRnNjMlVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0JqWVd4amRXeGhkR1ZRWlhKalpXNTBZV2RsS0dGdGIzVnVkQ0E5SUhSb2FYTXVjbTl2ZEY5emRHOXlaUzV0YjJSMWJHVnpMbU5oYzJocFpYSXVZM0o1Y0hSdlgyWnBZWFJmWTI5dWRtVnlkR1Z5TG1OdmJuWmxjblJsY2w5bWNtOXRYMkZ0YjNWdWRDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJR05zYVdWdWRDd2diVzlrZFd4bGN5QjlJRDBnZEdocGN5NXliMjkwWDNOMGIzSmxPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJR0ZqWTI5MWJuUmZkSEpoYm5ObVpYSWdmU0E5SUcxdlpIVnNaWE11WTJGemFHbGxjanRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1aFkzUnBkbVZmWTI5dWRHRnBibVZ5SUQwOVBTQmhZMk52ZFc1MFgzUnlZVzV6Wm1WeUxtTnZiblJoYVc1bGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WlhKalpXNTBZV2RsSUQwZ0t5Z29ZVzF2ZFc1MElDOGdLMkZqWTI5MWJuUmZkSEpoYm5ObVpYSXVjMlZzWldOMFpXUmZabkp2YlM1aVlXeGhibU5sS1NBcUlERXdNQ2t1ZEc5R2FYaGxaQ2d3S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHVnlZMlZ1ZEdGblpTQTlJQ3NvS0dGdGIzVnVkQ0F2SUN0amJHbGxiblF1WW1Gc1lXNWpaU2tnS2lBeE1EQXBMblJ2Um1sNFpXUW9NQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZwYzBacGJtbDBaU2gwYUdsekxuQmxjbU5sYm5SaFoyVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CbGNtTmxiblJoWjJVZ1BTQXdPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSEJsY21ObGJuUmhaMlZUWld4bFkzUnZjbE5sYkdWamRHbHZibE4wWVhSMWN5aHphRzkxYkdSZmNHVnlZMlZ1ZEdGblpWOXlaWE5sZENrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5Ob2IzVnNaRjl3WlhKalpXNTBZV2RsWDNKbGMyVjBJRDBnYzJodmRXeGtYM0JsY21ObGJuUmhaMlZmY21WelpYUTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tITm9iM1ZzWkY5d1pYSmpaVzUwWVdkbFgzSmxjMlYwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmxjbU5sYm5SaFoyVWdQU0F3TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhObGRFbHpSR1Z3YjNOcGRDaHBjMTlrWlhCdmMybDBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE5mWkdWd2IzTnBkQ0E5SUdselgyUmxjRzl6YVhRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhObGRGTm9iM1ZzWkZOb2IzZEJiR3hCZG1GcGJHRmliR1ZEZFhKeVpXNWphV1Z6S0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMmh2ZFd4a1gzTm9iM2RmWVd4c1gyRjJZV2xzWVdKc1pWOWpkWEp5Wlc1amFXVnpJRDBnZG1Gc2RXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRWx6UTJGemFHbGxja1JsWm1GMWJIUW9hWE5mWTJGemFHbGxjbDlrWldaaGRXeDBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE5mWTJGemFHbGxjbDlrWldaaGRXeDBJRDBnYVhOZlkyRnphR2xsY2w5a1pXWmhkV3gwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSRVpYQnZjMmwwVkdGeVoyVjBLSFJoY21kbGRDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmxjRzl6YVhSZmRHRnlaMlYwSUQwZ2RHRnlaMlYwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0JqYjI1MGFXNTFaVkp2ZFhSbEtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1JmYzNSdmNtVXVZMjl0Ylc5dUxuSnZkWFJsVkc4b2RHaHBjeTVrWlhCdmMybDBYM1JoY21kbGRDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRUZqWTI5MWJuUlRkMmwwWTJoTWFYTjBaVzVsY2lncElIdGNiaUFnSUNBZ0lDQWdMeThnWTJGemFHbGxjaUJwYm1sMGN5QnZibU5sSUdGdVpDQjBjbWxsY3lCMGJ5QnpkR0Y1SUdGamRHbDJaU0IxYm5ScGJDQnpkMmwwWTJocGJtY2dZV05qYjNWdWRGeHVJQ0FnSUNBZ0lDQXZMeUJ6YVc1alpTQmpZWE5vYVdWeUlHTmhiR3h6SUhSaGEyVWdZU0JzYjI1bklIUnBiV1VnZEc4Z2NtVnpjRzl1WkNCdmNpQmthWE53YkdGNUlHbHVJR2xtY21GdFpWeHVJQ0FnSUNBZ0lDQXZMeUJ6YnlCM1pTQmtiMjRuZENCb1lYWmxJR0Z1ZVNCMWJtMXZkVzUwSUdaMWJtTjBhVzl1SUdobGNtVWdZVzVrSUdWMlpYSjVkR2hwYm1jZ1oyVjBjeUJ5WlhObGRDQnZiaUJ6ZDJsMFkyZ2dhVzV6ZEdWaFpGeHVJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzQnZjMlZUZDJsMFkyaEJZMk52ZFc1MEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNVRkMmwwWTJoQlkyTnZkVzUwS0hSb2FYTXVZV05qYjNWdWRGTjNhWFJqYUdWeVRHbHpkR1Z1WlhJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFbHVhWFJwWVd4cGMyVWdVREpRSUdGMGRISnBZblYwWlhNZ2IyNGdZWEJ3SUd4dllXUWdkMmwwYUc5MWRDQnRiM1Z1ZEdsdVp5QjBhR1VnWlc1MGFYSmxJR05oYzJocFpYSmNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2FXNXBkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNtOXZkRjl6ZEc5eVpTNXRiMlIxYkdWekxtTmhjMmhwWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSHNnWTJ4cFpXNTBMQ0J0YjJSMWJHVnpJSDBnUFNCMGFHbHpMbkp2YjNSZmMzUnZjbVU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHRmpZMjkxYm5SZmNISnZiWEIwWDJScFlXeHZaeXdnZDJsMGFHUnlZWGNnZlNBOUlHMXZaSFZzWlhNdVkyRnphR2xsY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIc2dZM1Z5Y21WdVkza3NJR2x6WDJ4dloyZGxaRjlwYml3Z2MzZHBkR05vWldRZ2ZTQTlJR05zYVdWdWREdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2QyaGxiaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQnBjMTlzYjJkblpXUmZhVzRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhONWJtTWdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZDJGcGRDQjBhR2x6TG1kbGRFRmtkbVZ5ZEdsNlpYSkZjbkp2Y2lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTm9aV05yVURKd1UzUmhkSFZ6S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0YzWVdsMElIZHBkR2hrY21GM0xtTm9aV05yTVRCclRHbHRhWFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldGamRHbHZiaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQmJjM2RwZEdOb1pXUXNJR2x6WDJ4dloyZGxaRjlwYml3Z1kzVnljbVZ1WTNsZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnplVzVqSUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkMkZwZENCbWIzSWdZMnhwWlc1MElITmxkSFJwYm1keklIUnZJR0psSUhCdmNIVnNZWFJsWkNCcGJpQmpiR2xsYm5RdGMzUnZjbVZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYZGhhWFFnZEdocGN5NVhVeTUzWVdsMEtDZG5aWFJmYzJWMGRHbHVaM01uS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTmZiRzluWjJWa1gybHVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZDJGcGRDQjBhR2x6TG1kbGRFRmtkbVZ5ZEdsNlpYSkZjbkp2Y2lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXTmpiM1Z1ZEY5d2NtOXRjSFJmWkdsaGJHOW5MbkpsYzJWMFRHRnpkRXh2WTJGMGFXOXVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYTjNhWFJqYUdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWphR1ZqYTFBeWNGTjBZWFIxY3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOb1pXTnJJR2xtSUhkcGRHaGtjbUYzWVd3Z2JHbHRhWFFnYVhNZ2NtVmhZMmhsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2xtSUhsbGN5d2dkR2hwY3lCM2FXeHNJSFJ5YVdkblpYSWdkRzhnYzJodmR5QmhJRzV2ZEdsbWFXTmhkR2x2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjNZV2wwSUhSb2FYTXVZMmhsWTJzeE1HdE1hVzFwZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZoWTNScGIyNG9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z1kzVnljbVZ1WTNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhWFJvWkhKaGR5NXpaWFJKYzFkcGRHaGtjbUYzUTI5dVptbHliV1ZrS0daaGJITmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJR0Z6ZVc1aklHZGxkRUZrZG1WeWRHbDZaWEpGY25KdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZV1IyWlhKMGFYTmxjbDlwYm1adklEMGdZWGRoYVhRZ2RHaHBjeTVYVXk1aGRYUm9iM0pwZW1Wa0xuQXljRUZrZG1WeWRHbHpaWEpKYm1adktDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVREp3UVdSMlpYSjBhWE5sY2tWeWNtOXlLR2RsZEZCeWIzQmxjblI1Vm1Gc2RXVW9ZV1IyWlhKMGFYTmxjbDlwYm1adkxDQmJKMlZ5Y205eUp5d2dKMk52WkdVblhTa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJRTW5CQlpIWmxjblJwYzJWeVJYSnliM0lvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdNbkJmWVdSMlpYSjBhWE5sY2w5bGNuSnZjaUE5SUhaaGJIVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQmphR1ZqYTFBeWNGTjBZWFIxY3lncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1lXUjJaWEowYVhObGNsOWxjbkp2Y2lBOUlIUm9hWE11Y0RKd1gyRmtkbVZ5ZEdselpYSmZaWEp5YjNJN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdselgzQXljRjl5WlhOMGNtbGpkR1ZrSUQwZ1lXUjJaWEowYVhObGNsOWxjbkp2Y2lBOVBUMGdKMUpsYzNSeWFXTjBaV1JEYjNWdWRISjVKeUI4ZkNCaFpIWmxjblJwYzJWeVgyVnljbTl5SUQwOVBTQW5VbVZ6ZEhKcFkzUmxaRU4xY25KbGJtTjVKenRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJKYzFBeWNGWnBjMmxpYkdVb0lTaHBjMTl3TW5CZmNtVnpkSEpwWTNSbFpDQjhmQ0IwYUdsekxuSnZiM1JmYzNSdmNtVXVZMnhwWlc1MExtbHpYM1pwY25SMVlXd3BLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdZWE41Ym1NZ2IyNU5iM1Z1ZEVOdmJXMXZiaWh6YUc5MWJHUmZjbVZ0YjNWdWRDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJR05zYVdWdWRDd2dZMjl0Ylc5dUxDQnRiMlIxYkdWeklIMGdQU0IwYUdsekxuSnZiM1JmYzNSdmNtVTdYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2dZV05qYjNWdWRGOTBjbUZ1YzJabGNpd2diMjV5WVcxd0xDQndZWGx0Wlc1MFgyRm5aVzUwTENCd1lYbHRaVzUwWDJGblpXNTBYM1J5WVc1elptVnlMQ0IwY21GdWMyRmpkR2x2Ymw5b2FYTjBiM0o1SUgwZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnYlc5a2RXeGxjeTVqWVhOb2FXVnlPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiR2xsYm5RdWFYTmZiRzluWjJWa1gybHVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJoZG05cFpDQmpZV3hzYVc1bklIUm9hWE1nWVdkaGFXNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1selgzQnZjSFZzWVhScGJtZGZkbUZzZFdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtbHpYM0J2Y0hWc1lYUnBibWRmZG1Gc2RXVnpJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5vYjNWc1pGOXlaVzF2ZFc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUlBibEpsYlc5MWJuUW9kR2hwY3k1dmJrMXZkVzUwUTI5dGJXOXVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIZGxJRzVsWldRZ2RHOGdjMlZsSUdsbUlHTnNhV1Z1ZENkeklHTnZkVzUwY25rZ2FHRnpJRkJCWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJwWmlCNVpYTXNJSGRsSUdOaGJpQnphRzkzSUhSb1pTQlFRU0IwWVdJZ2FXNGdZMkZ6YUdsbGNseHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGNWJXVnVkRjloWjJWdWRDNXpaWFJRWVhsdFpXNTBRV2RsYm5STWFYTjBLQ2t1ZEdobGJpaHdZWGx0Wlc1MFgyRm5aVzUwTG1acGJIUmxjbEJoZVcxbGJuUkJaMlZ1ZEV4cGMzUXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhCaGVXMWxiblJmWVdkbGJuUmZkSEpoYm5ObVpYSXVhWE5mY0dGNWJXVnVkRjloWjJWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoZVcxbGJuUmZZV2RsYm5SZmRISmhibk5tWlhJdVkyaGxZMnRKYzFCaGVXMWxiblJCWjJWdWRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV0ZqWTI5MWJuUmZkSEpoYm5ObVpYSXVZV05qYjNWdWRITmZiR2x6ZEM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFkyTnZkVzUwWDNSeVlXNXpabVZ5TG5OdmNuUkJZMk52ZFc1MGMxUnlZVzV6Wm1WeUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hiMjV5WVcxd0xtbHpYMjl1Y21GdGNGOTBZV0pmZG1semFXSnNaU0FtSmlCM2FXNWtiM2N1Ykc5allYUnBiMjR1Y0dGMGFHNWhiV1V1Wlc1a2MxZHBkR2dvY205MWRHVnpMbU5oYzJocFpYSmZiMjV5WVcxd0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YlcxdmJpNXliM1YwWlZSdktISnZkWFJsY3k1allYTm9hV1Z5WDJSbGNHOXphWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSVhSeVlXNXpZV04wYVc5dVgyaHBjM1J2Y25rdWFYTmZZM0o1Y0hSdlgzUnlZVzV6WVdOMGFXOXVjMTkyYVhOcFlteGxJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJsdVpHOTNMbXh2WTJGMGFXOXVMbkJoZEdodVlXMWxMbVZ1WkhOWGFYUm9LSEp2ZFhSbGN5NWpZWE5vYVdWeVgyTnllWEIwYjE5MGNtRnVjMkZqZEdsdmJuTXBYRzRnSUNBZ0lDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjF0YjI0dWNtOTFkR1ZVYnloeWIzVjBaWE11WTJGemFHbGxjbDlrWlhCdmMybDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyRmpkR2x2Ymw5b2FYTjBiM0o1TG5ObGRFbHpRM0o1Y0hSdlZISmhibk5oWTNScGIyNXpWbWx6YVdKc1pTaDBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJsOW9hWE4wYjNKNUxtOXVUVzkxYm5Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCelpYUkRZWE5vYVdWeVZHRmlTVzVrWlhnb2FXNWtaWGdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqWVhOb2FXVnlYM0p2ZFhSbFgzUmhZbDlwYm1SbGVDQTlJR2x1WkdWNE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCelpYUk9iM1JwWm1sallYUnBiMjVEYjNWdWRDaHViM1JwWm1sallYUnBiMjVmWTI5MWJuUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdNbkJmYm05MGFXWnBZMkYwYVc5dVgyTnZkVzUwSUQwZ2JtOTBhV1pwWTJGMGFXOXVYMk52ZFc1ME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCelpYUkpjMUF5Y0ZacGMybGliR1VvYVhOZmNESndYM1pwYzJsaWJHVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBjMTl3TW5CZmRtbHphV0pzWlNBOUlHbHpYM0F5Y0Y5MmFYTnBZbXhsTzF4dUlDQWdJQ0FnSUNCcFppQW9JV2x6WDNBeWNGOTJhWE5wWW14bElDWW1JSGRwYm1SdmR5NXNiMk5oZEdsdmJpNXdZWFJvYm1GdFpTNWxibVJ6VjJsMGFDaHliM1YwWlhNdVkyRnphR2xsY2w5d01uQXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KdmIzUmZjM1J2Y21VdVkyOXRiVzl1TG5KdmRYUmxWRzhvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXliMjkwWDNOMGIzSmxMbTF2WkhWc1pYTXVZMkZ6YUdsbGNpNWhZMk52ZFc1MFgzQnliMjF3ZEY5a2FXRnNiMmN1YkdGemRGOXNiMk5oZEdsdmJpQS9QeUJ5YjNWMFpYTXVZMkZ6YUdsbGNsOWtaWEJ2YzJsMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdOdmJYQjFkR1ZrWEc0Z0lDQWdaMlYwSUdselgyTmhjMmhwWlhKZmJHOWphMlZrS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHRmpZMjkxYm5SZmMzUmhkSFZ6SUgwZ1BTQjBhR2x6TG5KdmIzUmZjM1J2Y21VdVkyeHBaVzUwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doWVdOamIzVnVkRjl6ZEdGMGRYTS9Mbk4wWVhSMWN5a2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWVdOamIzVnVkRjl6ZEdGMGRYTXVjM1JoZEhWekxuTnZiV1VvYzNSaGRIVnpYMjVoYldVZ1BUNGdjM1JoZEhWelgyNWhiV1VnUFQwOUlDZGpZWE5vYVdWeVgyeHZZMnRsWkNjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCamIyMXdkWFJsWkZ4dUlDQWdJR2RsZENCcGMxOXplWE4wWlcxZmJXRnBiblJsYm1GdVkyVW9LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHNnWVdOamIzVnVkRjl6ZEdGMGRYTWdmU0E5SUhSb2FYTXVjbTl2ZEY5emRHOXlaUzVqYkdsbGJuUTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmhZMk52ZFc1MFgzTjBZWFIxY3o4dVkyRnphR2xsY2w5MllXeHBaR0YwYVc5dUtTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTJOdmRXNTBYM04wWVhSMWN5NWpZWE5vYVdWeVgzWmhiR2xrWVhScGIyNHVjMjl0WlNoMllXeHBaR0YwYVc5dUlEMCtJSFpoYkdsa1lYUnBiMjRnUFQwOUlDZHplWE4wWlcxZmJXRnBiblJsYm1GdVkyVW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdjMlYwVEc5aFpHbHVaeWhwYzE5c2IyRmthVzVuS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVhOZmJHOWhaR2x1WnlBOUlHbHpYMnh2WVdScGJtYzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRUZqZEdsMlpWUmhZaWhqYjI1MFlXbHVaWElwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoWTNScGRtVmZZMjl1ZEdGcGJtVnlJRDBnWTI5dWRHRnBibVZ5TzF4dUlDQWdJSDFjYmx4dUlDQWdJR0ZqWTI5MWJuUlRkMmwwWTJobGNreHBjM1JsYm1WeUtDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJR2xtY21GdFpTd2djR0Y1YldWdWRGOWhaMlZ1ZEN3Z2QybDBhR1J5WVhjZ2ZTQTlJSFJvYVhNdWNtOXZkRjl6ZEc5eVpTNXRiMlIxYkdWekxtTmhjMmhwWlhJN1hHNWNiaUFnSUNBZ0lDQWdkMmwwYUdSeVlYY3VkbVZ5YVdacFkyRjBhVzl1TG1Oc1pXRnlWbVZ5YVdacFkyRjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lIQmhlVzFsYm5SZllXZGxiblF1ZG1WeWFXWnBZMkYwYVc5dUxtTnNaV0Z5Vm1WeWFXWnBZMkYwYVc5dUtDazdYRzRnSUNBZ0lDQWdJR2xtY21GdFpTNWpiR1ZoY2tsbWNtRnRaU2dwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGNWJXVnVkRjloWjJWdWRDQTlJSEJoZVcxbGJuUmZZV2RsYm5RN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVhOZmNHOXdkV3hoZEdsdVoxOTJZV3gxWlhNZ1BTQm1ZV3h6WlR0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG05dVVtVnRiM1Z1ZENncE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb0tUdGNiaUFnSUNCOVhHNTlYRzRpTENKcGJYQnZjblFnZXlCaFkzUnBiMjRzSUc5aWMyVnlkbUZpYkdVZ2ZTQm1jbTl0SUNkdGIySjRKenRjYm1sdGNHOXlkQ0JEYjI1emRHRnVkSE1nWm5KdmJTQW5RMjl1YzNSaGJuUnpMMk52Ym5OMFlXNTBjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRWxtY21GdFpWTjBiM0psSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loN0lGZFRMQ0J5YjI5MFgzTjBiM0psSUgwcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBYM04wYjNKbElEMGdjbTl2ZEY5emRHOXlaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVhVeUE5SUZkVE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCdlluTmxjblpoWW14bElHbG1jbUZ0WlY5b1pXbG5hSFFnUFNBd08xeHVJQ0FnSUVCdlluTmxjblpoWW14bElHbG1jbUZ0WlY5MWNtd2dQU0FuSnp0Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCcGMxOXpaWE56YVc5dVgzUnBiV1Z2ZFhRZ1BTQjBjblZsTzF4dVhHNGdJQ0FnYjI1SlpuSmhiV1ZNYjJGa1pXUWdQU0FuSnp0Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCMGFXMWxiM1YwWDNObGMzTnBiMjRnUFNBbkp6dGNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJUWlhOemFXOXVWR2x0Wlc5MWRDaHBjMTl6WlhOemFXOXVYM1JwYldWZmIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE5mYzJWemMybHZibDkwYVcxbGIzVjBJRDBnYVhOZmMyVnpjMmx2Ymw5MGFXMWxYMjkxZER0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6WDNObGMzTnBiMjVmZEdsdFpWOXZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVnRiM1psVDI1SlpuSmhiV1ZNYjJGa1pXUW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0JoYzNsdVl5QmphR1ZqYTBsbWNtRnRaVXh2WVdSbFpDZ3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJ0YjJSMWJHVnpMQ0IxYVNCOUlEMGdkR2hwY3k1eWIyOTBYM04wYjNKbE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnRiM1psVDI1SlpuSmhiV1ZNYjJGa1pXUW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXZia2xtY21GdFpVeHZZV1JsWkNBOUlHWjFibU4wYVc5dUlDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvTDJOaGMyaHBaWEo4Wkc5MVoyaG1iRzkzTHk1MFpYTjBLR1V1YjNKcFoybHVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdlpIVnNaWE11WTJGemFHbGxjaTVuWlc1bGNtRnNYM04wYjNKbExuTmxkRXh2WVdScGJtY29abUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5sZENCMGFHVWdhR1ZwWjJoMElHOW1JSFJvWlNCamIyNTBZV2x1WlhJZ1lXWjBaWElnWTI5dWRHVnVkQ0JzYjJGa2N5QnpieUIwYUdGMElIUm9aVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUd4dllXUnBibWNnWW1GeUlITjBZWGx6SUhabGNuUnBZMkZzYkhrZ1kyVnVkR1Z5WldRZ2RXNTBhV3dnZEdobElHVnVaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMWFTNXBjMTl0YjJKcGJHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSRGIyNTBZV2x1WlhKSVpXbG5hSFFvZDJsdVpHOTNMbWx1Ym1WeVNHVnBaMmgwSUMwZ01UQXdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVOdmJuUmhhVzVsY2tobGFXZG9kQ2gzYVc1a2IzY3VhVzV1WlhKSVpXbG5hSFFnTFNBeE9UQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCa2J5QnViM1FnY21WdGIzWmxJSFJvWlNCc2FYTjBaVzVsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHOXVJR1YyWlhKNUlHbG1jbUZ0WlNCelkzSmxaVzRnWTJoaGJtZGxJSGRsSUc1bFpXUWdkRzhnZFhCa1lYUmxJSFJvWlNCb1pXbG5hSFFnZEc4Z2JXOXlaUzlzWlhOeklIUnZJRzFoZEdOb0lIUm9aU0J1WlhjZ1kyOXVkR1Z1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TG1KcGJtUW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdFpYTnpZV2RsSnl3Z2RHaHBjeTV2YmtsbWNtRnRaVXh2WVdSbFpDd2dabUZzYzJVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGJXOTJaVTl1U1daeVlXMWxURzloWkdWa0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2YmtsbWNtRnRaVXh2WVdSbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0oyMWxjM05oWjJVbkxDQjBhR2x6TG05dVNXWnlZVzFsVEc5aFpHVmtMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1U1daeVlXMWxURzloWkdWa0lEMGdKeWM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnWTJ4bFlYSlVhVzFsYjNWMFEyRnphR2xsY2xWeWJDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZEdsdFpXOTFkRjl6WlhOemFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdocGN5NTBhVzFsYjNWMFgzTmxjM05wYjI0cE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRlJwYldWdmRYUkRZWE5vYVdWeVZYSnNLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5zWldGeVZHbHRaVzkxZEVOaGMyaHBaWEpWY213b0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGFXMWxiM1YwWDNObGMzTnBiMjRnUFNCelpYUlVhVzFsYjNWMEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVMlZ6YzJsdmJsUnBiV1Z2ZFhRb2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUgwc0lEWXdNREF3S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYzJWMFNXWnlZVzFsVlhKc0tIVnliQ3dnWTI5dWRHRnBibVZ5SUQwZ2RHaHBjeTV5YjI5MFgzTjBiM0psTG0xdlpIVnNaWE11WTJGemFHbGxjaTVuWlc1bGNtRnNYM04wYjNKbExtRmpkR2wyWlY5amIyNTBZV2x1WlhJcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QmpiR2xsYm5Rc0lIVnBJSDBnUFNCMGFHbHpMbkp2YjNSZmMzUnZjbVU3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFZ5YkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBabkpoYldWZmRYSnNJRDBnWUNSN2RYSnNmU1owYUdWdFpUMGtlM1ZwTG1selgyUmhjbXRmYlc5a1pWOXZiaUEvSUNka1lYSnJKeUE2SUNkc2FXZG9kQ2Q5WUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGbWRHVnlJSGRsSUhObGRDQnBabkpoYldVZ2RYSnNJSGRsSUdOaGJpQmpiR1ZoY2lCMlpYSnBabWxqWVhScGIyNGdZMjlrWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhwWlc1MExuTmxkRlpsY21sbWFXTmhkR2x2YmtOdlpHVW9KeWNzSUVOdmJuTjBZVzUwY3k1dFlYQmZZV04wYVc5dVcyTnZiblJoYVc1bGNsMHBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwWm5KaGJXVmZkWEpzSUQwZ2RYSnNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSE5sZEVOdmJuUmhhVzVsY2tobGFXZG9kQ2hvWldsbmFIUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBabkpoYldWZmFHVnBaMmgwSUQwZ2FHVnBaMmgwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0JqYkdWaGNrbG1jbUZ0WlNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUkpabkpoYldWVmNtd29KeWNwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5zWldGeVZHbHRaVzkxZEVOaGMyaHBaWEpWY213b0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUlRaWE56YVc5dVZHbHRaVzkxZENoMGNuVmxLVHRjYmlBZ0lDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2V5QnNiMk5oYkdsNlpTQjlJR1p5YjIwZ0owQmtaWEpwZGk5MGNtRnVjMnhoZEdsdmJuTW5PMXh1WEc1amIyNXpkQ0JqY21WaGRHVkNZVzU0WVZCeWIzWnBaR1Z5SUQwZ2MzUnZjbVVnUFQ0Z0tIdGNiaUFnSUNCcFkyOXVPaUI3SUdSaGNtczZJQ2RKWTBOaGMyaHBaWEpDWVc1NFlVUmhjbXNuTENCc2FXZG9kRG9nSjBsalEyRnphR2xsY2tKaGJuaGhUR2xuYUhRbklIMHNYRzRnSUNBZ2JtRnRaVG9nSjBKaGJuaGhKeXhjYmlBZ0lDQm5aWFJFWlhOamNtbHdkR2x2YmpvZ0tDa2dQVDVjYmlBZ0lDQWdJQ0FnYkc5allXeHBlbVVvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5RU0JtWVhOMElHRnVaQ0J6WldOMWNtVWdabWxoZEMxMGJ5MWpjbmx3ZEc4Z2NHRjViV1Z1ZENCelpYSjJhV05sTGlCRVpYQnZjMmwwSUdOeWVYQjBiMk4xY25KbGJtTnBaWE1nWm5KdmJTQmhibmwzYUdWeVpTQnBiaUIwYUdVZ2QyOXliR1FnZFhOcGJtY2dlVzkxY2lCamNtVmthWFF2WkdWaWFYUWdZMkZ5WkhNZ1lXNWtJR0poYm1zZ2RISmhibk5tWlhKekxpZGNiaUFnSUNBZ0lDQWdLU3hjYmlBZ0lDQm5aWFJCYkd4dmQyVmtVbVZ6YVdSbGJtTnBaWE02SUNncElEMCtJRnNuS2lkZExGeHVJQ0FnSUdkbGRGQmhlVzFsYm5SSlkyOXVjem9nS0NrZ1BUNGdXMXh1SUNBZ0lDQWdJQ0I3SUdSaGNtczZJQ2RKWTBOaGMyaHBaWEpXYVhOaFJHRnlheWNzSUd4cFoyaDBPaUFuU1dORFlYTm9hV1Z5Vm1sellVeHBaMmgwSnlCOUxGeHVJQ0FnSUNBZ0lDQjdJR1JoY21zNklDZEpZME5oYzJocFpYSk5ZWE4wWlhKallYSmtSR0Z5YXljc0lHeHBaMmgwT2lBblNXTkRZWE5vYVdWeVRXRnpkR1Z5WTJGeVpFeHBaMmgwSnlCOUxGeHVJQ0FnSUNBZ0lDQjdJR1JoY21zNklDZEpZME5oYzJocFpYSkNjR0Y1UkdGeWF5Y3NJR3hwWjJoME9pQW5TV05EWVhOb2FXVnlRbkJoZVV4cFoyaDBKeUI5TEZ4dUlDQWdJQ0FnSUNCN0lHUmhjbXM2SUNkSlkwTmhjMmhwWlhKVFpYQmhSR0Z5YXljc0lHeHBaMmgwT2lBblNXTkRZWE5vYVdWeVUyVndZVXhwWjJoMEp5QjlMRnh1SUNBZ0lDQWdJQ0I3SUdSaGNtczZJQ2RKWTBOaGMyaHBaWEpDYkhWbGMyaDVablJFWVhKckp5d2diR2xuYUhRNklDZEpZME5oYzJocFpYSkNiSFZsYzJoNVpuUk1hV2RvZENjZ2ZTeGNiaUFnSUNBZ0lDQWdleUJrWVhKck9pQW5TV05EWVhOb2FXVnlSbXhsZUdWd2FXNUVZWEpySnl3Z2JHbG5hSFE2SUNkSlkwTmhjMmhwWlhKR2JHVjRaWEJwYmt4cFoyaDBKeUI5TEZ4dUlDQWdJQ0FnSUNCN0lHUmhjbXM2SUNkSlkwTmhjMmhwWlhKUVlYbEpaRVJoY21zbkxDQnNhV2RvZERvZ0owbGpRMkZ6YUdsbGNsQmhlVWxrVEdsbmFIUW5JSDBzWEc0Z0lDQWdJQ0FnSUhzZ1pHRnlhem9nSjBsalEyRnphR2xsY2xCdmJHbEVZWEpySnl3Z2JHbG5hSFE2SUNkSlkwTmhjMmhwWlhKUWIyeHBUR2xuYUhRbklIMHNYRzRnSUNBZ0lDQWdJSHNnWkdGeWF6b2dKMGxqUTJGemFHbGxja0Z3Y0d4bFVHRjVKeXdnYkdsbmFIUTZJQ2RKWTBOaGMyaHBaWEpCY0hCc1pWQmhlU2NnZlN4Y2JpQWdJQ0FnSUNBZ2V5QmtZWEpyT2lBblNXTkRZWE5vYVdWeVNXNTBaWEpoWTBWMGNtRnVjMlpsY2ljc0lHeHBaMmgwT2lBblNXTkRZWE5vYVdWeVNXNTBaWEpoWTBWMGNtRnVjMlpsY2ljZ2ZTeGNiaUFnSUNBZ0lDQWdleUJrWVhKck9pQW5TV05EWVhOb2FXVnlTV1JsWVd3bkxDQnNhV2RvZERvZ0owbGpRMkZ6YUdsbGNrbGtaV0ZzSnlCOUxGeHVJQ0FnSUNBZ0lDQjdJR1JoY21zNklDZEpZME5oYzJocFpYSlFiM04wUW1sc2JGQmhlVVJoY21zbkxDQnNhV2RvZERvZ0owbGpRMkZ6YUdsbGNsQnZjM1JDYVd4c1VHRjVUR2xuYUhRbklIMHNYRzRnSUNBZ0lDQWdJSHNnWkdGeWF6b2dKMGxqUTJGemFHbGxjbE52Wm05eWRDY3NJR3hwWjJoME9pQW5TV05EWVhOb2FXVnlVMjltYjNKMEp5QjlMRnh1SUNBZ0lGMHNYRzRnSUNBZ1oyVjBVMk55YVhCMFJHVndaVzVrWlc1amFXVnpPaUFvS1NBOVBpQmJYU3dnTHk4Z1RtOXVaUzVjYmlBZ0lDQm5aWFJFWldaaGRXeDBSbkp2YlVOMWNuSmxibU41T2lBb0tTQTlQaUFuSnl4Y2JpQWdJQ0JuWlhSR2NtOXRRM1Z5Y21WdVkybGxjem9nS0NrZ1BUNGdXeWNxSjEwc1hHNGdJQ0FnWjJWMFZHOURkWEp5Wlc1amFXVnpPaUFvS1NBOVBpQmJKeW9uWFN4Y2JpQWdJQ0JuWlhSWGFXUm5aWFJJZEcxc09pQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkRzl5WlM1WFV5NXpaWEoyYVdObFZHOXJaVzRvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGNuWnBZMlZmZEc5clpXNDZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWeWRtbGpaVG9nSjJKaGJuaGhKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldabGNuSmxjam9nZDJsdVpHOTNMbXh2WTJGMGFXOXVMbWh5WldZc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLSEpsYzNCdmJuTmxJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ6Y0c5dWMyVXVaWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLSEpsYzNCdmJuTmxMbVZ5Y205eUxtMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIc2dkWEpzSUgwZ1BTQnlaWE53YjI1elpTNXpaWEoyYVdObFgzUnZhMlZ1TG1KaGJuaGhPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gxY213cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1dmNHVnVLSFZ5YkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJTWlhOdmJIWnBibWNnWlcxd2RIa2dkMmxzYkM5emFHOTFiR1FnY21Wa2FYSmxZM1FnZFhObGNpNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOUxGeHVJQ0FnSUc5dVRXOTFiblJYYVdSblpYUkRiMjUwWVdsdVpYSTZJQ2dwSUQwK0lIdDlMRnh1SUNBZ0lITm9iM1ZzWkY5emFHOTNYMlJsY0c5emFYUmZZV1JrY21WemN6b2dabUZzYzJVc1hHNTlLVHRjYmx4dVkyOXVjM1FnWTNKbFlYUmxRMmhoYm1kbGJHeDVVSEp2ZG1sa1pYSWdQU0J6ZEc5eVpTQTlQaUFvZTF4dUlDQWdJR2xqYjI0NklIc2daR0Z5YXpvZ0owbGpRMkZ6YUdsbGNrTm9ZVzVuWld4c2VVUmhjbXNuTENCc2FXZG9kRG9nSjBsalEyRnphR2xsY2tOb1lXNW5aV3hzZVV4cFoyaDBKeUI5TEZ4dUlDQWdJRzVoYldVNklDZERhR0Z1WjJWc2JIa25MRnh1SUNBZ0lHZGxkRVJsYzJOeWFYQjBhVzl1T2lBb0tTQTlQbHh1SUNBZ0lDQWdJQ0JzYjJOaGJHbDZaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFpiM1Z5SUhOcGJYQnNaU0JoWTJObGMzTWdkRzhnWTNKNWNIUnZMaUJHWVhOMElHRnVaQ0J6WldOMWNtVWdkMkY1SUhSdklHVjRZMmhoYm1kbElHRnVaQ0J3ZFhKamFHRnpaU0JqY25sd2RHOWpkWEp5Wlc1amFXVnpMaUF5TkM4M0lHeHBkbVVnWTJoaGRDQnpkWEJ3YjNKMExpZGNiaUFnSUNBZ0lDQWdLU3hjYmlBZ0lDQm5aWFJCYkd4dmQyVmtVbVZ6YVdSbGJtTnBaWE02SUNncElEMCtJRnNuS2lkZExGeHVJQ0FnSUdkbGRGQmhlVzFsYm5SSlkyOXVjem9nS0NrZ1BUNGdXMXh1SUNBZ0lDQWdJQ0I3SUdSaGNtczZJQ2RKWTBOaGMyaHBaWEpXYVhOaFJHRnlheWNzSUd4cFoyaDBPaUFuU1dORFlYTm9hV1Z5Vm1sellVeHBaMmgwSnlCOUxGeHVJQ0FnSUNBZ0lDQjdJR1JoY21zNklDZEpZME5oYzJocFpYSk5ZWE4wWlhKallYSmtSR0Z5YXljc0lHeHBaMmgwT2lBblNXTkRZWE5vYVdWeVRXRnpkR1Z5WTJGeVpFeHBaMmgwSnlCOUxGeHVJQ0FnSUYwc1hHNGdJQ0FnWjJWMFUyTnlhWEIwUkdWd1pXNWtaVzVqYVdWek9pQW9LU0E5UGlCYlhTeGNiaUFnSUNCblpYUkVaV1poZFd4MFJuSnZiVU4xY25KbGJtTjVPaUFvS1NBOVBpQW5kWE5rSnl4Y2JpQWdJQ0JuWlhSR2NtOXRRM1Z5Y21WdVkybGxjem9nS0NrZ1BUNGdXeWQxYzJRbkxDQW5aWFZ5Snl3Z0oyZGljQ2RkTEZ4dUlDQWdJR2RsZEZSdlEzVnljbVZ1WTJsbGN6b2dLQ2tnUFQ0Z1d5ZGlZMmduTENBblluUmpKeXdnSjJWMFl5Y3NJQ2RsZEdnbkxDQW5iSFJqSnl3Z0ozVnpkQ2RkTEZ4dUlDQWdJR2RsZEZkcFpHZGxkRWgwYld3b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2h5WlhOdmJIWmxJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIVnliQ0E5SUc1bGR5QlZVa3dvSjJoMGRIQnpPaTh2ZDJsa1oyVjBMbU5vWVc1blpXeHNlUzVqYjIwdlAzWTlNeVowYUdWdFpUMWtaV1poZFd4MEp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMWNtd3VjMlZoY21Ob1VHRnlZVzF6TG1Gd2NHVnVaQ2duWm5KdmJVUmxabUYxYkhRbkxDQjBhR2x6TG1kbGRFUmxabUYxYkhSR2NtOXRRM1Z5Y21WdVkza29LU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamRYSnlaVzVqZVNBOUlITjBiM0psTG5KdmIzUmZjM1J2Y21VdVkyeHBaVzUwTG1OMWNuSmxibU41TG5SdlRHOTNaWEpEWVhObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1blpYUlViME4xY25KbGJtTnBaWE1vS1M1cGJtTnNkV1JsY3loamRYSnlaVzVqZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIxOWpkWEp5Wlc1amVTQTlJR04xY25KbGJtTjVJRDA5UFNBbmRYTjBKeUEvSUNkMWMyUjBKeUE2SUdOMWNuSmxibU41TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWeWJDNXpaV0Z5WTJoUVlYSmhiWE11WVhCd1pXNWtLQ2QwYnljc0lIUnZYMk4xY25KbGJtTjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY213dWMyVmhjbU5vVUdGeVlXMXpMbUZ3Y0dWdVpDZ25kRzlFWldaaGRXeDBKeXdnZEc5ZlkzVnljbVZ1WTNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IxY213dWMyVmhjbU5vVUdGeVlXMXpMbUZ3Y0dWdVpDZ25ZVzF2ZFc1MEp5d2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjbXd1YzJWaGNtTm9VR0Z5WVcxekxtRndjR1Z1WkNnbmJXVnlZMmhoYm5SZmFXUW5MQ0FuYVdseE0ycGtkREp3TkRSNWNtWmllQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkMmx1Wkc5M0xtOXdaVzRvZFhKc0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTeGNiaUFnSUNCdmJrMXZkVzUwVjJsa1oyVjBRMjl1ZEdGcGJtVnlPaUFvS1NBOVBpQjdmU3hjYmlBZ0lDQnphRzkxYkdSZmMyaHZkMTlrWlhCdmMybDBYMkZrWkhKbGMzTTZJSFJ5ZFdVc1hHNTlLVHRjYmx4dVkyOXVjM1FnWTNKbFlYUmxXR0Z1VUc5dmJGQnliM1pwWkdWeUlEMGdjM1J2Y21VZ1BUNGdLSHRjYmlBZ0lDQnBZMjl1T2lCN0lHUmhjbXM2SUNkSlkwTmhjMmhwWlhKWVlXNXdiMjlzUkdGeWF5Y3NJR3hwWjJoME9pQW5TV05EWVhOb2FXVnlXR0Z1Y0c5dmJFeHBaMmgwSnlCOUxGeHVJQ0FnSUc1aGJXVTZJQ2RZWVc1UWIyOXNKeXhjYmlBZ0lDQm5aWFJFWlhOamNtbHdkR2x2YmpvZ0tDa2dQVDVjYmlBZ0lDQWdJQ0FnYkc5allXeHBlbVVvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5RblY1SUdOeWVYQjBiMk4xY25KbGJtTnBaWE1nYVc0Z1lXNGdhVzV6ZEdGdWRDNGdSVzVxYjNrZ1pXRnplU3dnY1hWcFkyc3NJR0Z1WkNCelpXTjFjbVVnWlhoamFHRnVaMlZ6SUhWemFXNW5JSGx2ZFhJZ2JHOWpZV3dnY0dGNWJXVnVkQ0J0WlhSb2IyUnpMaWRjYmlBZ0lDQWdJQ0FnS1N4Y2JpQWdJQ0JuWlhSQmJHeHZkMlZrVW1WemFXUmxibU5wWlhNNklDZ3BJRDArSUZzbktpZGRMRnh1SUNBZ0lHZGxkRkJoZVcxbGJuUkpZMjl1Y3pvZ0tDa2dQVDRnVzF4dUlDQWdJQ0FnSUNCN0lHUmhjbXM2SUNkSlkwTmhjMmhwWlhKR2NITkVZWEpySnl3Z2JHbG5hSFE2SUNkSlkwTmhjMmhwWlhKR2NITk1hV2RvZENjZ2ZTeGNiaUFnSUNBZ0lDQWdleUJrWVhKck9pQW5TV05EWVhOb2FXVnlRV3hwVUdGNVJHRnlheWNzSUd4cFoyaDBPaUFuU1dORFlYTm9hV1Z5UVd4cFVHRjVUR2xuYUhRbklIMHNYRzRnSUNBZ0lDQWdJSHNnWkdGeWF6b2dKMGxqUTJGemFHbGxja2R2VUdGNVJHRnlheWNzSUd4cFoyaDBPaUFuU1dORFlYTm9hV1Z5UjI5UVlYbE1hV2RvZENjZ2ZTeGNiaUFnSUNBZ0lDQWdleUJrWVhKck9pQW5TV05EWVhOb2FXVnlUV0Z1WkdseWFWQmhlU2NzSUd4cFoyaDBPaUFuU1dORFlYTm9hV1Z5VFdGdVpHbHlhVkJoZVNjZ2ZTeGNiaUFnSUNBZ0lDQWdleUJrWVhKck9pQW5TV05EWVhOb2FXVnlTVzV6ZEdGUVlYbE1hV2RvZENjc0lHeHBaMmgwT2lBblNXTkRZWE5vYVdWeVNXNXpkR0ZRWVhsRVlYSnJKeUI5TEZ4dUlDQWdJQ0FnSUNCN0lHUmhjbXM2SUNkSlkwTmhjMmhwWlhKRFpXSjFZVzVoVEdoMWFXeHNhV1Z5UkdGeWF5Y3NJR3hwWjJoME9pQW5TV05EWVhOb2FXVnlRMlZpZFdGdVlVeG9kV2xzYkdsbGNreHBaMmgwSnlCOUxGeHVJQ0FnSUNBZ0lDQjdJR1JoY21zNklDZEpZME5oYzJocFpYSlFZWGxPYjNkRVlYSnJKeXdnYkdsbmFIUTZJQ2RKWTBOaGMyaHBaWEpRWVhsT2IzZE1hV2RvZENjZ2ZTeGNiaUFnSUNBZ0lDQWdleUJrWVhKck9pQW5TV05EWVhOb2FXVnlWWEJwUkdGeWF5Y3NJR3hwWjJoME9pQW5TV05EWVhOb2FXVnlWWEJwVEdsbmFIUW5JSDBzWEc0Z0lDQWdJQ0FnSUhzZ1pHRnlhem9nSjBsalEyRnphR2xsY2xCeWIyMXdkRkJoZVVSaGNtc25MQ0JzYVdkb2REb2dKMGxqUTJGemFHbGxjbEJ5YjIxd2RGQmhlVXhwWjJoMEp5QjlMRnh1SUNBZ0lDQWdJQ0I3SUdSaGNtczZJQ2RKWTBOaGMyaHBaWEpXYVdWMGRHeGxVR0Y1Snl3Z2JHbG5hSFE2SUNkSlkwTmhjMmhwWlhKV2FXVjBkR3hsVUdGNUp5QjlMRnh1SUNBZ0lGMHNYRzRnSUNBZ1oyVjBVMk55YVhCMFJHVndaVzVrWlc1amFXVnpPaUFvS1NBOVBpQmJYU3hjYmlBZ0lDQm5aWFJVYjBOMWNuSmxibU5wWlhNNklDZ3BJRDArSUZzblluUmpKeXdnSjJWMGFDY3NJQ2QxYzNRbkxDQW5lbWxzSnl3Z0oyNWxiU2RkTEZ4dUlDQWdJR2RsZEZkcFpHZGxkRWgwYld3b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2h5WlhOdmJIWmxJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIc2dZM1Z5Y21WdVkza2dmU0E5SUhOMGIzSmxMbkp2YjNSZmMzUnZjbVV1WTJ4cFpXNTBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZFhKc0lEMGdKMmgwZEhCek9pOHZZMmhsWTJ0dmRYUXVlR0Z1Y0c5dmJDNWpiMjB2Snp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZFhKc0lDczlJR0EvWVhCcFMyVjVQV1JpTkdWak5qTTRaR1ptT1dFMk9HRmlaR0V4WldZMllqYzJNemhqTWpJd1lEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhWeWJDQXJQU0JnSm5KbFpHbHlaV04wVlhKc1BTUjdkMmx1Wkc5M0xteHZZMkYwYVc5dUxtaHlaV1o5WUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZ5YkNBclBTQmdKbmRoYkd4bGREMGtlM04wYjNKbExtUmxjRzl6YVhSZllXUmtjbVZ6YzMxZ08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZFhKc0lDczlJR0FtWTNKNWNIUnZRM1Z5Y21WdVkzazlKSHRqZFhKeVpXNWplU0E5UFQwZ0oxVlRWQ2NnUHlBblZWTkVWQ2NnT2lCamRYSnlaVzVqZVgxZ08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZFhKc0lDczlJR0FtZEhKaGJuTmhZM1JwYjI1VWVYQmxQV0oxZVdBN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTV2Y0dWdUtIVnliQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtDazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDBzWEc0Z0lDQWdiMjVOYjNWdWRGZHBaR2RsZEVOdmJuUmhhVzVsY2pvZ0tDa2dQVDRnZTMwc1hHNGdJQ0FnYzJodmRXeGtYM05vYjNkZlpHVndiM05wZEY5aFpHUnlaWE56T2lCbVlXeHpaU3hjYm4wcE8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUNBZ1kzSmxZWFJsUW1GdWVHRlFjbTkyYVdSbGNpeGNiaUFnSUNCamNtVmhkR1ZEYUdGdVoyVnNiSGxRY205MmFXUmxjaXhjYmlBZ0lDQmpjbVZoZEdWWVlXNVFiMjlzVUhKdmRtbGtaWElzWEc1OU8xeHVJaXdpYVcxd2IzSjBJSHNnWVdOMGFXOXVMQ0JqYjIxd2RYUmxaQ3dnYjJKelpYSjJZV0pzWlN3Z2NtVmhZM1JwYjI0Z2ZTQm1jbTl0SUNkdGIySjRKenRjYm1sdGNHOXlkQ0I3SUd4dlkyRnNhWHBsSUgwZ1puSnZiU0FuUUdSbGNtbDJMM1J5WVc1emJHRjBhVzl1Y3ljN1hHNXBiWEJ2Y25RZ2V5Qm5aWFJMWldKaFlrTmhjMlVzSUdselEzSjVjSFJ2WTNWeWNtVnVZM2tzSUhKdmRYUmxjeXdnZDJWaWMybDBaVlZ5YkNCOUlHWnliMjBnSjBCa1pYSnBkaTl6YUdGeVpXUW5PMXh1YVcxd2IzSjBJRTl1Y21GdGNGQnliM1pwWkdWeWN5Qm1jbTl0SUNkRGIyNW1hV2N2YjI0dGNtRnRjQzF3Y205MmFXUmxjbk1uTzF4dWFXMXdiM0owSUVKaGMyVlRkRzl5WlNCbWNtOXRJQ2N1TDJKaGMyVXRjM1J2Y21Vbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCUGJsSmhiWEJUZEc5eVpTQmxlSFJsYm1SeklFSmhjMlZUZEc5eVpTQjdYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVWdZWEJwWDJWeWNtOXlJRDBnYm5Wc2JEdGNiaUFnSUNCQWIySnpaWEoyWVdKc1pTQmtaWEJ2YzJsMFgyRmtaSEpsYzNNZ1BTQnVkV3hzTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdselgyUmxjRzl6YVhSZllXUmtjbVZ6YzE5c2IyRmthVzVuSUQwZ2RISjFaVHRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0JwYzE5a1pYQnZjMmwwWDJGa1pISmxjM05mY0c5d2IzWmxjbDl2Y0dWdUlEMGdabUZzYzJVN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2FYTmZiMjV5WVcxd1gyMXZaR0ZzWDI5d1pXNGdQU0JtWVd4elpUdGNiaUFnSUNCQWIySnpaWEoyWVdKc1pTQnBjMTl5WlhGMVpYTjBhVzVuWDNkcFpHZGxkRjlvZEcxc0lEMGdabUZzYzJVN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVdWMyaGhiR3h2ZHlCdmJuSmhiWEJmY0hKdmRtbGtaWEp6SUQwZ1cxMDdYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVXVjbVZtSUhObGJHVmpkR1ZrWDNCeWIzWnBaR1Z5SUQwZ2JuVnNiRHRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0J6YUc5MWJHUmZjMmh2ZDE5M2FXUm5aWFFnUFNCbVlXeHpaVHRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0IzYVdSblpYUmZaWEp5YjNJZ1BTQnVkV3hzTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUhkcFpHZGxkRjlvZEcxc0lEMGdiblZzYkR0Y2JseHVJQ0FnSUdSbGNHOXphWFJmWVdSa2NtVnpjMTl5WldZZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2V5QlhVeXdnY205dmRGOXpkRzl5WlNCOUtTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtIc2djbTl2ZEY5emRHOXlaU0I5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVYVXlBOUlGZFRPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVEYkdsbGJuUkpibWwwS0dGemVXNWpJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVDI1eVlXMXdVSEp2ZG1sa1pYSnpLRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JQYm5KaGJYQlFjbTkyYVdSbGNuTXVZM0psWVhSbFEyaGhibWRsYkd4NVVISnZkbWxrWlhJb2RHaHBjeWtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVDI1eVlXMXdVSEp2ZG1sa1pYSnpMbU55WldGMFpWaGhibEJ2YjJ4UWNtOTJhV1JsY2loMGFHbHpLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JQYm5KaGJYQlFjbTkyYVdSbGNuTXVZM0psWVhSbFFtRnVlR0ZRY205MmFXUmxjaWgwYUdsektTeGNiaUFnSUNBZ0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZMjl0Y0hWMFpXUmNiaUFnSUNCblpYUWdhWE5mYjI1eVlXMXdYM1JoWWw5MmFYTnBZbXhsS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHTnNhV1Z1ZENCOUlEMGdkR2hwY3k1eWIyOTBYM04wYjNKbE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJQ0FnSUNCamJHbGxiblF1YVhOZmRtbHlkSFZoYkNBOVBUMGdabUZzYzJVZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUdselEzSjVjSFJ2WTNWeWNtVnVZM2tvWTJ4cFpXNTBMbU4xY25KbGJtTjVLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWFXeDBaWEpsWkY5dmJuSmhiWEJmY0hKdmRtbGtaWEp6TG14bGJtZDBhQ0ErSURCY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVkyOXRjSFYwWldSY2JpQWdJQ0JuWlhRZ1ptbHNkR1Z5WldSZmIyNXlZVzF3WDNCeWIzWnBaR1Z5Y3lncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QmpiR2xsYm5RZ2ZTQTlJSFJvYVhNdWNtOXZkRjl6ZEc5eVpUdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2Ym5KaGJYQmZjSEp2ZG1sa1pYSnpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUlc1emRYSmxJSEJ5YjNacFpHVnlJSE4xY0hCdmNuUnpJSFJvYVhNZ2RYTmxjaWR6SUdGalkyOTFiblFnWTNWeWNtVnVZM2t1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1acGJIUmxjaWh3Y205MmFXUmxjaUE5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUnZYMk4xY25KbGJtTnBaWE1nUFNCd2NtOTJhV1JsY2k1blpYUlViME4xY25KbGJtTnBaWE1vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnZYMk4xY25KbGJtTnBaWE11YVc1amJIVmtaWE1vSnlvbktTQjhmQ0IwYjE5amRYSnlaVzVqYVdWekxtbHVZMngxWkdWektHTnNhV1Z1ZEM1amRYSnlaVzVqZVM1MGIweHZkMlZ5UTJGelpTZ3BLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFVnVjM1Z5WlNCd2NtOTJhV1JsY2lCemRYQndiM0owY3lCMGFHbHpJSFZ6WlhJbmN5QnlaWE5wWkdWdVkza3VYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbVpwYkhSbGNpaHdjbTkyYVdSbGNpQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdGc2JHOTNaV1JmY21WemFXUmxibU5wWlhNZ1BTQndjbTkyYVdSbGNpNW5aWFJCYkd4dmQyVmtVbVZ6YVdSbGJtTnBaWE1vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHRnNiRzkzWldSZmNtVnphV1JsYm1OcFpYTXVhVzVqYkhWa1pYTW9KeW9uS1NCOGZDQmhiR3h2ZDJWa1gzSmxjMmxrWlc1amFXVnpMbWx1WTJ4MVpHVnpLR05zYVdWdWRDNXlaWE5wWkdWdVkyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdOdmJYQjFkR1ZrWEc0Z0lDQWdaMlYwSUc5dWNtRnRjRjl3YjNCMWNGOXRiMlJoYkY5MGFYUnNaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWMyaHZkV3hrWDNOb2IzZGZkMmxrWjJWMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYkc5allXeHBlbVVvSjFCaGVXMWxiblFnWTJoaGJtNWxiQ2NwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11YzJWc1pXTjBaV1JmY0hKdmRtbGtaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk5vYjNWc1pGOXphRzkzWDJScFlXeHZaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJzYjJOaGJHbDZaU2duVDNWeUlITmxjblpsY2lCallXNXViM1FnY21WMGNtbGxkbVVnWVc0Z1lXUmtjbVZ6Y3k0bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW5JQ2M3SUM4dklFVnRjSFI1SUhOMGNtbHVaeUIwYnlCeVpXNWtaWElnYUdWaFpHVnlJQ3NnWTJ4dmMyVWdhV052Ymk1Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCamIyMXdkWFJsWkZ4dUlDQWdJR2RsZENCemFHOTFiR1JmYzJodmQxOWthV0ZzYjJjb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1Gd2FWOWxjbkp2Y2p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYjI1TmIzVnVkRTl1Y21GdGNDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWthWE53YjNObFZHaHBjbVJRWVhKMGVVcHpVbVZoWTNScGIyNGdQU0J5WldGamRHbHZiaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhSb2FYTXVjMlZzWldOMFpXUmZjSEp2ZG1sa1pYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaGMzbHVZeUJ3Y205MmFXUmxjaUE5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z3Y205MmFXUmxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pHVndaVzVrWlc1amFXVnpJRDBnY0hKdmRtbGtaWEl1WjJWMFUyTnlhWEIwUkdWd1pXNWtaVzVqYVdWektDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSbGNHVnVaR1Z1WTJsbGN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIc2daR1ZtWVhWc2REb2diRzloWkdweklIMGdQU0JoZDJGcGRDQnBiWEJ2Y25Rb0x5b2dkMlZpY0dGamEwTm9kVzVyVG1GdFpUb2dYQ0pzYjJGa2FuTmNJaUFxTHlBbmJHOWhaR3B6SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzJOeWFYQjBYMjVoYldVZ1BTQmdKSHRuWlhSTFpXSmhZa05oYzJVb2NISnZkbWxrWlhJdWJtRnRaU2w5TFc5dWNtRnRjR0E3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV3h2WVdScWN5NXBjMFJsWm1sdVpXUW9jMk55YVhCMFgyNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2WVdScWN5aGtaWEJsYm1SbGJtTnBaWE1zSUhOamNtbHdkRjl1WVcxbExDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2pvZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTFqYjI1emIyeGxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtHQkVaWEJsYm1SbGJtTnBaWE1nWm05eUlHOXVjbUZ0Y0NCd2NtOTJhV1JsY2lBa2UzQnliM1pwWkdWeUxtNWhiV1Y5SUdOdmRXeGtJRzV2ZENCaVpTQnNiMkZrWldRdVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUWld4bFkzUmxaRkJ5YjNacFpHVnlLRzUxYkd3cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUZkb1pXNGdYQ0p6YUc5MWJHUmZjMmh2ZDE5M2FXUm5aWFJjSWl3Z1lYUjBaVzF3ZENCMGJ5Qm1aWFJqYUNCY0luTmxiR1ZqZEdWa1gzQnliM1pwWkdWeVhDSW5jeUJjSW5kcFpHZGxkRjlvZEcxc1hDSXVYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHbHpjRzl6WlVkbGRGZHBaR2RsZEVoMGJXeFNaV0ZqZEdsdmJpQTlJSEpsWVdOMGFXOXVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZEdocGN5NXphRzkxYkdSZmMyaHZkMTkzYVdSblpYUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemFHOTFiR1JmYzJodmQxOTNhV1JuWlhRZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemFHOTFiR1JmYzJodmQxOTNhV1JuWlhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YVhOZmNtVnhkV1Z6ZEdsdVoxOTNhV1JuWlhSZmFIUnRiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJKYzFKbGNYVmxjM1JwYm1kWGFXUm5aWFJJZEcxc0tIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJHVmpkR1ZrWDNCeWIzWnBaR1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1WjJWMFYybGtaMlYwU0hSdGJDZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVkR2hsYmloM2FXUm5aWFJmYUhSdGJDQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGRwWkdkbGRGOW9kRzFzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGSmxaM1ZzWVhJZ2NISnZkbWxrWlhKeklDaHBabkpoYldVdlNsTWdaVzFpWldRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVjJsa1oyVjBTSFJ0YkNoM2FXUm5aWFJmYUhSdGJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUVc0Z1pXMXdkSGtnY21WemIyeDJaU0FvZDJsa1oyVjBYMmgwYld3cElHbGtaVzUwYVdacFpYTWdZU0J5WldScGNtVmpkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUlRhRzkxYkdSVGFHOTNWMmxrWjJWMEtHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbU5oZEdOb0tHVnljbTl5SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRmRwWkdkbGRFVnljbTl5S0dWeWNtOXlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1Wm1sdVlXeHNlU2dvS1NBOVBpQjBhR2x6TG5ObGRFbHpVbVZ4ZFdWemRHbHVaMWRwWkdkbGRFaDBiV3dvWm1Gc2MyVXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJRzl1Vlc1dGIzVnVkRTl1Y21GdGNDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMGFHbHpMbVJwYzNCdmMyVlVhR2x5WkZCaGNuUjVTbk5TWldGamRHbHZiaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrYVhOd2IzTmxWR2hwY21SUVlYSjBlVXB6VW1WaFkzUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFJvYVhNdVpHbHpjRzl6WlVkbGRGZHBaR2RsZEVoMGJXeFNaV0ZqZEdsdmJpQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWthWE53YjNObFIyVjBWMmxrWjJWMFNIUnRiRkpsWVdOMGFXOXVLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYjI1RGJHbGphME52Y0hsRVpYQnZjMmwwUVdSa2NtVnpjeWdwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21GdVoyVWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVlNZVzVuWlNncE8xeHVJQ0FnSUNBZ0lDQnlZVzVuWlM1elpXeGxZM1JPYjJSbFEyOXVkR1Z1ZEhNb2RHaHBjeTVrWlhCdmMybDBYMkZrWkhKbGMzTmZjbVZtS1R0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpXeGxZM1JwYjI1eklEMGdkMmx1Wkc5M0xtZGxkRk5sYkdWamRHbHZiaWdwTzF4dUlDQWdJQ0FnSUNCelpXeGxZM1JwYjI1ekxuSmxiVzkyWlVGc2JGSmhibWRsY3lncE8xeHVJQ0FnSUNBZ0lDQnpaV3hsWTNScGIyNXpMbUZrWkZKaGJtZGxLSEpoYm1kbEtUdGNibHh1SUNBZ0lDQWdJQ0J1WVhacFoyRjBiM0l1WTJ4cGNHSnZZWEprTG5keWFYUmxWR1Y0ZENoMGFHbHpMbVJsY0c5emFYUmZZV1JrY21WemN5a3VkR2hsYmlnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHpSR1Z3YjNOcGRFRmtaSEpsYzNOUWIzQnZkbVZ5VDNCbGJpaDBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdkR2hwY3k1elpYUkpjMFJsY0c5emFYUkJaR1J5WlhOelVHOXdiM1psY2s5d1pXNG9abUZzYzJVcExDQTFNREFwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2IyNURiR2xqYTBScGMyTnNZV2x0WlhKRGIyNTBhVzUxWlNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUlRhRzkxYkdSVGFHOTNWMmxrWjJWMEtIUnlkV1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J2YmtOc2FXTnJSMjlVYjBSbGNHOXphWFJRWVdkbEtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnZiR3hCY0dsR2IzSkVaWEJ2YzJsMFFXUmtjbVZ6Y3lobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUhkcGJtUnZkeTV2Y0dWdUtIZGxZbk5wZEdWVmNtd29LU0FySUhKdmRYUmxjeTVqWVhOb2FXVnlYMlJsY0c5emFYUXVjM1ZpYzNSeWFXNW5LREVwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnY0c5c2JFRndhVVp2Y2tSbGNHOXphWFJCWkdSeVpYTnpLSE5vYjNWc1pGOWhiR3h2ZDE5bGJYQjBlVjloWkdSeVpYTnpLU0I3WEc0Z0lDQWdJQ0FnSUM4dklITm9iM1ZzWkY5aGJHeHZkMTlsYlhCMGVWOWhaR1J5WlhOek9pQkJVRWtnY21WMGRYSnVjeUJsYlhCMGVTQmtaWEJ2YzJsMElHRmtaSEpsYzNNZ1ptOXlJR3hsWjJGamVTQmhZMk52ZFc1MGMxeHVJQ0FnSUNBZ0lDQXZMeUIwYUdGMElHaGhkbVVnYm1WMlpYSWdaMlZ1WlhKaGRHVmtJR0VnWkdWd2IzTnBkQ0JoWkdSeVpYTnpMaUJUWlhSMGFXNW5JSFJvYVhNZ2RHOGdYQ0owY25WbFhDSWdkMmxzYkNCaGJHeHZkMXh1SUNBZ0lDQWdJQ0F2THlCMGFHVWdkWE5sY2lCMGJ5QmlaU0J5WldScGNtVmpkR1ZrSUhSdklIUm9aU0JFWlhCdmMybDBJSEJoWjJVZ0tIZG9aWEpsSUdGdUlHRmtaSEpsYzNNZ2QybHNiQ0JpWlNCblpXNWxjbUYwWldRcExseHVJQ0FnSUNBZ0lDQXZMeUJUWlhSMGFXNW5JSFJvYVhNZ2RHOGdYQ0ptWVd4elpWd2lJSGRwYkd3Z2MzUmhjblFnY0c5c2JHbHVaeUIwYUdVZ1FWQkpJR1p2Y2lCMGFHbHpJR1JsY0c5emFYUWdZV1JrY21WemN5NWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRWx6UkdWd2IzTnBkRUZrWkhKbGMzTk1iMkZrYVc1bktIUnlkV1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEVGd2FVVnljbTl5S0c1MWJHd3BPMXh1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1JsY0c5emFYUmZZV1JrY21WemMxOXBiblJsY25aaGJDQTlJSE5sZEVsdWRHVnlkbUZzS0NncElEMCtJR2RsZEVSbGNHOXphWFJCWkdSeVpYTnpSbkp2YlVGd2FTd2dNekF3TUNrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdkbGRFUmxjRzl6YVhSQlpHUnlaWE56Um5KdmJVRndhU0E5SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11VjFNdVlYVjBhRzl5YVhwbFpDNWpZWE5vYVdWeUtDZGtaWEJ2YzJsMEp5d2dleUJ3Y205MmFXUmxjam9nSjJOeWVYQjBieWNzSUhSNWNHVTZJQ2RoY0drbklIMHBMblJvWlc0b2NtVnpjRzl1YzJVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCemFHOTFiR1JmWTJ4bFlYSmZhVzUwWlhKMllXd2dQU0JtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTndiMjV6WlM1bGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFRndhVVZ5Y205eUtISmxjM0J2Ym5ObExtVnljbTl5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmh2ZFd4a1gyTnNaV0Z5WDJsdWRHVnlkbUZzSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0I3SUdGa1pISmxjM01nZlNBOUlISmxjM0J2Ym5ObExtTmhjMmhwWlhJdVpHVndiM05wZER0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lXUmtjbVZ6Y3lCOGZDQnphRzkxYkdSZllXeHNiM2RmWlcxd2RIbGZZV1JrY21WemN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkVaWEJ2YzJsMFFXUmtjbVZ6Y3loaFpHUnlaWE56S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOb2IzVnNaRjlqYkdWaGNsOXBiblJsY25aaGJDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMmh2ZFd4a1gyTnNaV0Z5WDJsdWRHVnlkbUZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVNXNTBaWEoyWVd3b1pHVndiM05wZEY5aFpHUnlaWE56WDJsdWRHVnlkbUZzS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkpjMFJsY0c5emFYUkJaR1J5WlhOelRHOWhaR2x1WnlobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdaMlYwUkdWd2IzTnBkRUZrWkhKbGMzTkdjbTl0UVhCcEtDazdYRzRnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpKYm5SbGNuWmhiQ2hrWlhCdmMybDBYMkZrWkhKbGMzTmZhVzUwWlhKMllXd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSSmMwUmxjRzl6YVhSQlpHUnlaWE56VEc5aFpHbHVaeWhtWVd4elpTazdYRzRnSUNBZ0lDQWdJSDBzSURNd01EQXdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdjbVZ6WlhSUWIzQjFjQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSQmNHbEZjbkp2Y2lodWRXeHNLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJFWlhCdmMybDBRV1JrY21WemN5aHVkV3hzS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSRVpYQnZjMmwwUVdSa2NtVnpjMUpsWmlodWRXeHNLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJKYzBSbGNHOXphWFJCWkdSeVpYTnpURzloWkdsdVp5aDBjblZsS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSVFpXeGxZM1JsWkZCeWIzWnBaR1Z5S0c1MWJHd3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRk5vYjNWc1pGTm9iM2RYYVdSblpYUW9abUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGZHBaR2RsZEVWeWNtOXlLRzUxYkd3cE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGZHBaR2RsZEVoMGJXd29iblZzYkNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhObGRFRndhVVZ5Y205eUtHRndhVjlsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRndhVjlsY25KdmNpQTlJR0Z3YVY5bGNuSnZjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdjMlYwUTI5d2VVbGpiMjVTWldZb2NtVm1LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl3ZVY5cFkyOXVYM0psWmlBOUlISmxaanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdjMlYwUkdWd2IzTnBkRUZrWkhKbGMzTW9aR1Z3YjNOcGRGOWhaR1J5WlhOektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHVndiM05wZEY5aFpHUnlaWE56SUQwZ1pHVndiM05wZEY5aFpHUnlaWE56TzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSRVpYQnZjMmwwUVdSa2NtVnpjMUpsWmloeVpXWXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtaWEJ2YzJsMFgyRmtaSEpsYzNOZmNtVm1JRDBnY21WbU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCelpYUkpjMFJsY0c5emFYUkJaR1J5WlhOelRHOWhaR2x1WnlocGMxOXNiMkZrYVc1bktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFYTmZaR1Z3YjNOcGRGOWhaR1J5WlhOelgyeHZZV1JwYm1jZ1BTQnBjMTlzYjJGa2FXNW5PMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJKYzBSbGNHOXphWFJCWkdSeVpYTnpVRzl3YjNabGNrOXdaVzRvYVhOZmIzQmxiaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx6WDJSbGNHOXphWFJmWVdSa2NtVnpjMTl3YjNCdmRtVnlYMjl3Wlc0Z1BTQnBjMTl2Y0dWdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCelpYUkpjMDl1VW1GdGNFMXZaR0ZzVDNCbGJpaHBjMTl2Y0dWdUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFYTmZiMjV5WVcxd1gyMXZaR0ZzWDI5d1pXNGdQU0JwYzE5dmNHVnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJKYzFKbGNYVmxjM1JwYm1kWGFXUm5aWFJJZEcxc0tHbHpYM0psY1hWbGMzUnBibWRmZDJsa1oyVjBYMmgwYld3cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGMxOXlaWEYxWlhOMGFXNW5YM2RwWkdkbGRGOW9kRzFzSUQwZ2FYTmZjbVZ4ZFdWemRHbHVaMTkzYVdSblpYUmZhSFJ0YkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYzJWMFUyVnNaV04wWldSUWNtOTJhV1JsY2lod2NtOTJhV1JsY2lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvY0hKdmRtbGtaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnNaV04wWldSZmNISnZkbWxrWlhJZ1BTQndjbTkyYVdSbGNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwU1hOUGJsSmhiWEJOYjJSaGJFOXdaVzRvZEhKMVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2Ykd4QmNHbEdiM0pFWlhCdmMybDBRV1JrY21WemN5aDBjblZsS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBTWE5QYmxKaGJYQk5iMlJoYkU5d1pXNG9abUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaV3hsWTNSbFpGOXdjbTkyYVdSbGNpQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyVjBVMmh2ZFd4a1UyaHZkMWRwWkdkbGRDaHphRzkxYkdSZmMyaHZkeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5vYjNWc1pGOXphRzkzWDNkcFpHZGxkQ0E5SUhOb2IzVnNaRjl6YUc5M08xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCelpYUlBibkpoYlhCUWNtOTJhV1JsY25Nb2IyNXlZVzF3WDNCeWIzWnBaR1Z5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG05dWNtRnRjRjl3Y205MmFXUmxjbk1nUFNCdmJuSmhiWEJmY0hKdmRtbGtaWEp6TG5Oc2FXTmxLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSE5sZEZkcFpHZGxkRVZ5Y205eUtIZHBaR2RsZEY5bGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbmRwWkdkbGRGOWxjbkp2Y2lBOUlIZHBaR2RsZEY5bGNuSnZjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdjMlYwVjJsa1oyVjBTSFJ0YkNoM2FXUm5aWFJmYUhSdGJDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZHBaR2RsZEY5b2RHMXNJRDBnZDJsa1oyVjBYMmgwYld3N1hHNGdJQ0FnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnWVdOMGFXOXVMQ0J2WW5ObGNuWmhZbXhsSUgwZ1puSnZiU0FuYlc5aWVDYzdYRzVwYlhCdmNuUWdRMjl1YzNSaGJuUnpJR1p5YjIwZ0owTnZibk4wWVc1MGN5OWpiMjV6ZEdGdWRITW5PMXh1YVcxd2IzSjBJRVZ5Y205eVUzUnZjbVVnWm5KdmJTQW5MaTlsY25KdmNpMXpkRzl5WlNjN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZabGNtbG1hV05oZEdsdmJsTjBiM0psSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loN0lGZFRMQ0J5YjI5MFgzTjBiM0psSUgwcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBYM04wYjNKbElEMGdjbTl2ZEY5emRHOXlaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVhVeUE5SUZkVE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCdlluTmxjblpoWW14bElHbHpYMkoxZEhSdmJsOWpiR2xqYTJWa0lEMGdabUZzYzJVN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2RHbHRaVzkxZEY5aWRYUjBiMjRnUFNBbkp6dGNiaUFnSUNCQWIySnpaWEoyWVdKc1pTQmxjbkp2Y2lBOUlHNWxkeUJGY25KdmNsTjBiM0psS0NrN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2FYTmZaVzFoYVd4ZmMyVnVkQ0E5SUdaaGJITmxPMXh1SUNBZ0lFQnZZbk5sY25aaFlteGxJR2x6WDNKbGMyVnVaRjlqYkdsamEyVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVWdjbVZ6Wlc1a1gzUnBiV1Z2ZFhRZ1BTQTJNRHRjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSSmMwSjFkSFJ2YmtOc2FXTnJaV1FvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBjMTlpZFhSMGIyNWZZMnhwWTJ0bFpDQTlJSFpoYkhWbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCelpYUlVhVzFsYjNWMFFuVjBkRzl1S0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkR2x0Wlc5MWRGOWlkWFIwYjI0Z1BTQjJZV3gxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYzJWMFNYTkZiV0ZwYkZObGJuUW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGMxOWxiV0ZwYkY5elpXNTBJRDBnZG1Gc2RXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRWx6VW1WelpXNWtRMnhwWTJ0bFpDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1selgzSmxjMlZ1WkY5amJHbGphMlZrSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSE5sZEZKbGMyVnVaRlJwYldWdmRYUW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTmxibVJmZEdsdFpXOTFkQ0E5SUhaaGJIVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnNaV0Z5VkdsdFpXOTFkRlpsY21sbWFXTmhkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkR2x0Wlc5MWRGOWlkWFIwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1pXRnlWR2x0Wlc5MWRDaDBhR2x6TG5ScGJXVnZkWFJmWW5WMGRHOXVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSVWFXMWxiM1YwVm1WeWFXWnBZMkYwYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnNaV0Z5VkdsdFpXOTFkRlpsY21sbWFXTmhkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGUnBiV1Z2ZFhSQ2RYUjBiMjRvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Oc1pXRnlWbVZ5YVdacFkyRjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBek5qQXdNREF3S1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCaGMzbHVZeUJ6Wlc1a1ZtVnlhV1pwWTJGMGFXOXVSVzFoYVd3b0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2dZMnhwWlc1MExDQnRiMlIxYkdWeklIMGdQU0IwYUdsekxuSnZiM1JmYzNSdmNtVTdYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2djbVZ6WlhSUVlYbHRaVzUwUVdkbGJuUWdmU0E5SUcxdlpIVnNaWE11WTJGemFHbGxjaTV3WVhsdFpXNTBYMkZuWlc1ME8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHRmpkR2wyWlY5amIyNTBZV2x1WlhJZ2ZTQTlJRzF2WkhWc1pYTXVZMkZ6YUdsbGNpNW5aVzVsY21Gc1gzTjBiM0psTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JqYjI1MFlXbHVaWElnUFNCRGIyNXpkR0Z1ZEhNdWJXRndYMkZqZEdsdmJsdGhZM1JwZG1WZlkyOXVkR0ZwYm1WeVhUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVwYzE5aWRYUjBiMjVmWTJ4cFkydGxaQ0I4ZkNBaFkyeHBaVzUwTG1WdFlXbHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5TG5ObGRFVnljbTl5VFdWemMyRm5aU2duSnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFNYTkNkWFIwYjI1RGJHbGphMlZrS0hSeWRXVXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjNhWFJvWkhKaGQyRnNYM1I1Y0dVZ1BTQmpiMjUwWVdsdVpYSWdQVDA5SUNkd1lYbHRaVzUwWDJGblpXNTBYM2RwZEdoa2NtRjNKeUEvSUNkd1lYbHRaVzUwWVdkbGJuUmZkMmwwYUdSeVlYY25JRG9nSjNCaGVXMWxiblJmZDJsMGFHUnlZWGNuTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J5WlhOd2IyNXpaVjkyWlhKcFpubGZaVzFoYVd3Z1BTQmhkMkZwZENCMGFHbHpMbGRUTG5abGNtbG1lVVZ0WVdsc0tHTnNhV1Z1ZEM1bGJXRnBiQ3dnZDJsMGFHUnlZWGRoYkY5MGVYQmxLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9jbVZ6Y0c5dWMyVmZkbVZ5YVdaNVgyVnRZV2xzTG1WeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Oc1pXRnlWbVZ5YVdacFkyRjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnpjRzl1YzJWZmRtVnlhV1o1WDJWdFlXbHNMbVZ5Y205eUxtTnZaR1VnUFQwOUlDZFFZWGx0Wlc1MFFXZGxiblJYYVhSb1pISmhkMFZ5Y205eUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0l1YzJWMFJYSnliM0pOWlhOellXZGxLSEpsYzNCdmJuTmxYM1psY21sbWVWOWxiV0ZwYkM1bGNuSnZjaXdnY21WelpYUlFZWGx0Wlc1MFFXZGxiblFzSUc1MWJHd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eUxuTmxkRVZ5Y205eVRXVnpjMkZuWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6Y0c5dWMyVmZkbVZ5YVdaNVgyVnRZV2xzTG1WeWNtOXlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5TG5ObGRFVnljbTl5VFdWemMyRm5aU2duSnl3Z2JuVnNiQ3dnYm5Wc2JDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzUxYkd4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkpjMFZ0WVdsc1UyVnVkQ2gwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVkdsdFpXOTFkRlpsY21sbWFXTmhkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lISmxjMlZ1WkZabGNtbG1hV05oZEdsdmJrVnRZV2xzS0NrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJrYjI0bmRDQmhiR3h2ZHlCamJHbGphMmx1WnlCM2FHbHNaU0J2Ym1kdmFXNW5JSFJwYldWdmRYUmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjbVZ6Wlc1a1gzUnBiV1Z2ZFhRZ1BDQTJNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBTWE5DZFhSMGIyNURiR2xqYTJWa0tHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSRGIzVnVkRVJ2ZDI1U1pYTmxibVJXWlhKcFptbGpZWFJwYjI0b0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpXNWtWbVZ5YVdacFkyRjBhVzl1UlcxaGFXd29LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpaWFJEYjNWdWRFUnZkMjVTWlhObGJtUldaWEpwWm1sallYUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFVtVnpaVzVrVkdsdFpXOTFkQ2gwYUdsekxuSmxjMlZ1WkY5MGFXMWxiM1YwSUMwZ01TazdYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxjMlZ1WkY5cGJuUmxjblpoYkNBOUlITmxkRWx1ZEdWeWRtRnNLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5KbGMyVnVaRjkwYVcxbGIzVjBJRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUlNaWE5sYm1SVWFXMWxiM1YwS0RZd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY2tsdWRHVnlkbUZzS0hKbGMyVnVaRjlwYm5SbGNuWmhiQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFVtVnpaVzVrVkdsdFpXOTFkQ2gwYUdsekxuSmxjMlZ1WkY5MGFXMWxiM1YwSUMwZ01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNJREV3TURBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOc1pXRnlWbVZ5YVdacFkyRjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHTnNhV1Z1ZEN3Z2JXOWtkV3hsY3lCOUlEMGdkR2hwY3k1eWIyOTBYM04wYjNKbE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHRmpkR2wyWlY5amIyNTBZV2x1WlhJZ2ZTQTlJRzF2WkhWc1pYTXVZMkZ6YUdsbGNpNW5aVzVsY21Gc1gzTjBiM0psTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JqYjI1MFlXbHVaWElnUFNCRGIyNXpkR0Z1ZEhNdWJXRndYMkZqZEdsdmJsdGhZM1JwZG1WZlkyOXVkR0ZwYm1WeVhUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtTnNaV0Z5VkdsdFpXOTFkRlpsY21sbWFXTmhkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHpRblYwZEc5dVEyeHBZMnRsWkNobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwU1hORmJXRnBiRk5sYm5Rb1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEVselVtVnpaVzVrUTJ4cFkydGxaQ2htWVd4elpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVbVZ6Wlc1a1ZHbHRaVzkxZENnMk1DazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0l1YzJWMFJYSnliM0pOWlhOellXZGxLQ2NuTENCdWRXeHNMQ0J1ZFd4c0tUdGNiaUFnSUNBZ0lDQWdZMnhwWlc1MExuTmxkRlpsY21sbWFXTmhkR2x2YmtOdlpHVW9KeWNzSUdOdmJuUmhhVzVsY2lrN1hHNGdJQ0FnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnWVdOMGFXOXVMQ0JqYjIxd2RYUmxaQ3dnYjJKelpYSjJZV0pzWlNCOUlHWnliMjBnSjIxdlluZ25PMXh1YVcxd2IzSjBJSHNnWm05eWJXRjBUVzl1Wlhrc0lISnZkWFJsY3lCOUlHWnliMjBnSjBCa1pYSnBkaTl6YUdGeVpXUW5PMXh1YVcxd2IzSjBJRU52Ym5OMFlXNTBjeUJtY205dElDZERiMjV6ZEdGdWRITXZZMjl1YzNSaGJuUnpKenRjYm1sdGNHOXlkQ0JGY25KdmNsTjBiM0psSUdaeWIyMGdKeTR2WlhKeWIzSXRjM1J2Y21Vbk8xeHVhVzF3YjNKMElGWmxjbWxtYVdOaGRHbHZibE4wYjNKbElHWnliMjBnSnk0dmRtVnlhV1pwWTJGMGFXOXVMWE4wYjNKbEp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1VHRjViV1Z1ZEVGblpXNTBVM1J2Y21VZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIc2dWMU1zSUhKdmIzUmZjM1J2Y21VZ2ZTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1JmYzNSdmNtVWdQU0J5YjI5MFgzTjBiM0psTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbGRUSUQwZ1YxTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVWdiR2x6ZENBOUlGdGRPMXh1SUNBZ0lFQnZZbk5sY25aaFlteGxJR0ZuWlc1MGN5QTlJRnRkTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdOdmJuUmhhVzVsY2lBOUlFTnZibk4wWVc1MGN5NWpiMjUwWVdsdVpYSnpMbkJoZVcxbGJuUmZZV2RsYm5RN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ1pYSnliM0lnUFNCdVpYY2dSWEp5YjNKVGRHOXlaU2dwTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdacGJIUmxjbVZrWDJ4cGMzUWdQU0JiWFR0Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCcGMxOXVZVzFsWDNObGJHVmpkR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0JwYzE5M2FYUm9aSEpoZHlBOUlHWmhiSE5sTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdselgzUnllVjkzYVhSb1pISmhkMTl6ZFdOalpYTnpablZzSUQwZ1ptRnNjMlU3WEc0Z0lDQWdRRzlpYzJWeWRtRmliR1VnYVhOZmQybDBhR1J5WVhkZmMzVmpZMlZ6YzJaMWJDQTlJR1poYkhObE8xeHVJQ0FnSUVCdlluTmxjblpoWW14bElHTnZibVpwY20wZ1BTQjdmVHRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0J5WldObGFYQjBJRDBnZTMwN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2MyVnNaV04wWldSZlltRnVheUE5SURBN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2MzVndjRzl5ZEdWa1gySmhibXR6SUQwZ1cxMDdYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVWdkbVZ5YVdacFkyRjBhVzl1SUQwZ2JtVjNJRlpsY21sbWFXTmhkR2x2YmxOMGIzSmxLSHNnY205dmRGOXpkRzl5WlRvZ2RHaHBjeTV5YjI5MFgzTjBiM0psTENCWFV6b2dkR2hwY3k1WFV5QjlLVHRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0JoWTNScGRtVmZkR0ZpWDJsdVpHVjRJRDBnTUR0Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCaGJHeGZjR0Y1YldWdWRGOWhaMlZ1ZEY5c2FYTjBJRDBnVzEwN1hHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyVjBRV04wYVhabFZHRmlTVzVrWlhnb2FXNWtaWGdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoWTNScGRtVmZkR0ZpWDJsdVpHVjRJRDBnYVc1a1pYZzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRUZqZEdsMlpWUmhZaWhwYm1SbGVDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRUZqZEdsMlpWUmhZa2x1WkdWNEtHbHVaR1Y0S1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYVc1a1pYZ2dQVDA5SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbVZ5YVdacFkyRjBhVzl1TG5ObGJtUldaWEpwWm1sallYUnBiMjVGYldGcGJDZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR052YlhCMWRHVmtYRzRnSUNBZ1oyVjBJR2x6WDNCaGVXMWxiblJmWVdkbGJuUmZkbWx6YVdKc1pTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ0VoS0hSb2FYTXVabWxzZEdWeVpXUmZiR2x6ZEM1c1pXNW5kR2dnZkh3Z2RHaHBjeTVoWjJWdWRITXViR1Z1WjNSb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ1lYTjVibU1nWjJWMFVHRjViV1Z1ZEVGblpXNTBUR2x6ZENncElIdGNiaUFnSUNBZ0lDQWdMeThnZDJGcGRDQm1iM0lnWjJWMFgzTmxkSFJwYm1keklITnZJSEpsYzJsa1pXNWpaU0JuWlhSeklIQnZjSFZzWVhSbFpDQnBiaUJqYkdsbGJuUXRjM1J2Y21WY2JpQWdJQ0FnSUNBZ0x5OGdWRTlFVHpvZ2MyVjBJSEpsYzJsa1pXNWpaU0JwYmlCamJHbGxiblF0YzNSdmNtVWdabkp2YlNCaGRYUm9iM0pwZW1VZ2MyOGdhWFFuY3lCbVlYTjBaWEpjYmlBZ0lDQWdJQ0FnWVhkaGFYUWdkR2hwY3k1WFV5NTNZV2wwS0NkblpYUmZjMlYwZEdsdVozTW5LVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJ5WlhOcFpHVnVZMlVzSUdOMWNuSmxibU41SUgwZ1BTQjBhR2x6TG5KdmIzUmZjM1J2Y21VdVkyeHBaVzUwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NVhVeTVoZFhSb2IzSnBlbVZrTG5CaGVXMWxiblJCWjJWdWRFeHBjM1FvY21WemFXUmxibU5sTENCamRYSnlaVzVqZVNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUdGemVXNWpJR2RsZEZCaGVXMWxiblJCWjJWdWRFUmxkR0ZwYkhNb0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2djR0Y1YldWdWRHRm5aVzUwWDJSbGRHRnBiSE1nZlNBOUlHRjNZV2wwSUhSb2FYTXVWMU11WVhWMGFHOXlhWHBsWkM1d1lYbHRaVzUwUVdkbGJuUkVaWFJoYVd4ektDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndZWGx0Wlc1MFlXZGxiblJmWkdWMFlXbHNjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdZV1JrVTNWd2NHOXlkR1ZrUW1GdWF5aGlZVzVyS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhOMWNIQnZjblJsWkY5aVlXNXJYMlY0YVhOMGN5QTlJSFJvYVhNdWMzVndjRzl5ZEdWa1gySmhibXR6TG1acGJtUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCemRYQndiM0owWldSZlltRnVheUE5UGlCemRYQndiM0owWldSZlltRnVheTUyWVd4MVpTQTlQVDBnWW1GdWF5NTBiMHh2ZDJWeVEyRnpaU2dwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doYzNWd2NHOXlkR1ZrWDJKaGJtdGZaWGhwYzNSektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4xY0hCdmNuUmxaRjlpWVc1cmN5NXdkWE5vS0hzZ2RHVjRkRG9nWW1GdWF5d2dkbUZzZFdVNklHSmhibXN1ZEc5TWIzZGxja05oYzJVb0tTQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0JqYkdWaGNsTjFjSEJsY25SbFpFSmhibXR6S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMWNIQnZjblJsWkY5aVlXNXJjeUE5SUZ0ZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCemIzSjBVM1Z3Y0c5eWRHVmtRbUZ1YTNNb0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUhOdmNuUWdjM1Z3Y0c5eWRHVmtJR0poYm10eklHRnNjR2hoWW1WMGFXTmhiR3g1SUdKNUlIWmhiSFZsTENCMGFHVWdiM0IwYVc5dUlDZEJiR3dnY0dGNWJXVnVkQ0JoWjJWdWRITW5JSGRwZEdnZ2RtRnNkV1VnTUNCemFHOTFiR1FnWW1VZ2IyNGdkRzl3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1Z3Y0c5eWRHVmtYMkpoYm10ekxuSmxjR3hoWTJVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTjFjSEJ2Y25SbFpGOWlZVzVyY3k1emJHbGpaU2dwTG5OdmNuUW9LR0VzSUdJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lTNTJZV3gxWlNBOElHSXVkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQzB4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZUzUyWVd4MVpTQStJR0l1ZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyVjBUR2x6ZENod1lWOXNhWE4wS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YkdsemRDNXdkWE5vS0hCaFgyeHBjM1FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0JqYkdWaGNreHBjM1FvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YkdsemRDQTlJRnRkTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0JoYzNsdVl5QnpaWFJRWVhsdFpXNTBRV2RsYm5STWFYTjBLSEJoWDJ4cGMzUXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjR0Y1YldWdWRGOWhaMlZ1ZEY5c2FYTjBJRDBnY0dGZmJHbHpkQ0I4ZkNBb1lYZGhhWFFnZEdocGN5NW5aWFJRWVhsdFpXNTBRV2RsYm5STWFYTjBLQ2twTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5zWldGeVRHbHpkQ2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5zWldGeVUzVndjR1Z5ZEdWa1FtRnVhM01vS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdWRTlFVHpvZ1QyNWpaU0IwWld4bGNHaHZibVVzSUhWeWJDQmhibVFnYzNWd2NHOXlkR1ZrWDJKaGJtdHpJSEpsYlc5MlpXUWdabkp2YlNCd1lYbHRaVzUwWVdkbGJuUmZiR2x6ZEM1c2FYTjBJSGRsSUdOaGJpQnlaVzF2ZG1VZ2RHaGxiU0JoYm1RZ2FuVnpkQ0IxYzJVZ2RHaGxJSEJzZFhKaGJDQnZibVZ6WEc0Z0lDQWdJQ0FnSUhCaGVXMWxiblJmWVdkbGJuUmZiR2x6ZEM1d1lYbHRaVzUwWVdkbGJuUmZiR2x6ZEM1c2FYTjBMbVp2Y2tWaFkyZ29jR0Y1YldWdWRGOWhaMlZ1ZENBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEV4cGMzUW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z0WVdsc09pQndZWGx0Wlc1MFgyRm5aVzUwTG1WdFlXbHNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJvYjI1bGN6b2djR0Y1YldWdWRGOWhaMlZ1ZEQ4dWNHaHZibVZmYm5WdFltVnljeUI4ZkNCd1lYbHRaVzUwWDJGblpXNTBQeTUwWld4bGNHaHZibVVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2djR0Y1YldWdWRGOWhaMlZ1ZEM1dVlXMWxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4xY0hCdmNuUmxaRjlpWVc1cmN6b2djR0Y1YldWdWRGOWhaMlZ1ZEQ4dWMzVndjRzl5ZEdWa1gzQmhlVzFsYm5SZmJXVjBhRzlrY3lCOGZDQndZWGx0Wlc1MFgyRm5aVzUwUHk1emRYQndiM0owWldSZlltRnVhM01zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhKc2N6b2djR0Y1YldWdWRGOWhaMlZ1ZEQ4dWRYSnNjeUI4ZkNCd1lYbHRaVzUwWDJGblpXNTBQeTUxY213c1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod1lYbHRaVzUwWDJGblpXNTBMbk4xY0hCdmNuUmxaRjlpWVc1cmN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElITjFjSEJ2Y25SbFpGOWlZVzVyYzE5aGNuSmhlU0E5SUhCaGVXMWxiblJmWVdkbGJuUS9Mbk4xY0hCdmNuUmxaRjl3WVhsdFpXNTBYMjFsZEdodlpITmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCd1lYbHRaVzUwWDJGblpXNTBMbk4xY0hCdmNuUmxaRjl3WVhsdFpXNTBYMjFsZEdodlpITXViV0Z3S0dKaGJtc2dQVDRnWW1GdWF5NXdZWGx0Wlc1MFgyMWxkR2h2WkNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJ3WVhsdFpXNTBYMkZuWlc1MExuTjFjSEJ2Y25SbFpGOWlZVzVyY3k1emNHeHBkQ2duTENjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjFjSEJ2Y25SbFpGOWlZVzVyYzE5aGNuSmhlUzVtYjNKRllXTm9LR0poYm1zZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZrWkZOMWNIQnZjblJsWkVKaGJtc29ZbUZ1YXlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMjl5ZEZOMWNIQnZjblJsWkVKaGJtdHpLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJR1pwYkhSbGNsQmhlVzFsYm5SQloyVnVkRXhwYzNRb1ltRnVheWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUdOdmJXMXZiaUI5SUQwZ2RHaHBjeTV5YjI5MFgzTjBiM0psTzF4dUlDQWdJQ0FnSUNCcFppQW9ZbUZ1YXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW1hV3gwWlhKbFpGOXNhWE4wSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbXhwYzNRdVptOXlSV0ZqYUNod1lYbHRaVzUwWDJGblpXNTBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGVXMWxiblJmWVdkbGJuUXVjM1Z3Y0c5eWRHVmtYMkpoYm10eklDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGVXMWxiblJmWVdkbGJuUXVjM1Z3Y0c5eWRHVmtYMkpoYm10ekxuUnZURzkzWlhKRFlYTmxLQ2t1YzNCc2FYUW9KeXduS1M1cGJtUmxlRTltS0dKaGJtc3BJQ0U5UFNBdE1WeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVpwYkhSbGNtVmtYMnhwYzNRdWNIVnphQ2h3WVhsdFpXNTBYMkZuWlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVabWxzZEdWeVpXUmZiR2x6ZENBOUlIUm9hWE11YkdsemREdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11YVhOZmNHRjViV1Z1ZEY5aFoyVnVkRjkyYVhOcFlteGxJQ1ltSUhkcGJtUnZkeTVzYjJOaGRHbHZiaTV3WVhSb2JtRnRaUzVsYm1SelYybDBhQ2h5YjNWMFpYTXVZMkZ6YUdsbGNsOXdZU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YlcxdmJpNXliM1YwWlZSdktISnZkWFJsY3k1allYTm9hV1Z5WDJSbGNHOXphWFFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUc5dVEyaGhibWRsVUdGNWJXVnVkRTFsZEdodlpDaDdJSFJoY21kbGRDQjlLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFpoYkhWbElEMGdkR0Z5WjJWMExuWmhiSFZsSUQwOVBTQW5NQ2NnUHlCd1lYSnpaVWx1ZENoMFlYSm5aWFF1ZG1Gc2RXVXBJRG9nZEdGeVoyVjBMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJHVmpkR1ZrWDJKaGJtc2dQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWFXeDBaWEpRWVhsdFpXNTBRV2RsYm5STWFYTjBLSFpoYkhWbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyVjBTWE5YYVhSb1pISmhkeWhwYzE5M2FYUm9aSEpoZHlBOUlDRjBhR2x6TG1selgzZHBkR2hrY21GM0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFYTmZkMmwwYUdSeVlYY2dQU0JwYzE5M2FYUm9aSEpoZHp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnYzJWMFNYTlVjbmxYYVhSb1pISmhkMU4xWTJObGMzTm1kV3dvYVhOZmRISjVYM2RwZEdoa2NtRjNYM04xWTJObGMzTm1kV3dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNpNXpaWFJGY25KdmNrMWxjM05oWjJVb0p5Y3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbHpYM1J5ZVY5M2FYUm9aSEpoZDE5emRXTmpaWE56Wm5Wc0lEMGdhWE5mZEhKNVgzZHBkR2hrY21GM1gzTjFZMk5sYzNObWRXdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRWx6VjJsMGFHUnlZWGRUZFdOalpYTnpablZzS0dselgzZHBkR2hrY21GM1gzTjFZMk5sYzNObWRXd3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBjMTkzYVhSb1pISmhkMTl6ZFdOalpYTnpablZzSUQwZ2FYTmZkMmwwYUdSeVlYZGZjM1ZqWTJWemMyWjFiRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdjMlYwUTI5dVptbHliV0YwYVc5dUtIc2dZVzF2ZFc1MExDQmpkWEp5Wlc1amVTd2diRzluYVc1cFpDd2djR0Y1YldWdWRGOWhaMlZ1ZEY5dVlXMWxJSDBwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1bWFYSnRJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZVzF2ZFc1MExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVZM2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNiMmRwYm1sa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGNWJXVnVkRjloWjJWdWRGOXVZVzFsTEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCelpYUlNaV05sYVhCMEtIdGNiaUFnSUNBZ0lDQWdZVzF2ZFc1MFgzUnlZVzV6Wm1WeWNtVmtMRnh1SUNBZ0lDQWdJQ0J3WVhsdFpXNTBYMkZuWlc1MFgyVnRZV2xzTEZ4dUlDQWdJQ0FnSUNCd1lYbHRaVzUwWDJGblpXNTBYMmxrTEZ4dUlDQWdJQ0FnSUNCd1lYbHRaVzUwWDJGblpXNTBYMjVoYldVc1hHNGdJQ0FnSUNBZ0lIQmhlVzFsYm5SZllXZGxiblJmY0dodmJtVXNYRzRnSUNBZ0lDQWdJSEJoZVcxbGJuUmZZV2RsYm5SZmRYSnNMRnh1SUNBZ0lIMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaV05sYVhCMElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXMXZkVzUwWDNSeVlXNXpabVZ5Y21Wa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGNWJXVnVkRjloWjJWdWRGOWxiV0ZwYkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoZVcxbGJuUmZZV2RsYm5SZmFXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYbHRaVzUwWDJGblpXNTBYMjVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3WVhsdFpXNTBYMkZuWlc1MFgzQm9iMjVsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Y1YldWdWRGOWhaMlZ1ZEY5MWNtd3NYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJR0ZrWkZCaGVXMWxiblJCWjJWdWRDaHdZWGx0Wlc1MFgyRm5aVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVdkbGJuUnpMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGREb2djR0Y1YldWdWRGOWhaMlZ1ZEM1dVlXMWxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUhCaGVXMWxiblJmWVdkbGJuUXVjR0Y1YldWdWRHRm5aVzUwWDJ4dloybHVhV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWGhmZDJsMGFHUnlZWGRoYkRvZ2NHRjViV1Z1ZEY5aFoyVnVkQzV0WVhoZmQybDBhR1J5WVhkaGJDeGNiaUFnSUNBZ0lDQWdJQ0FnSUcxcGJsOTNhWFJvWkhKaGQyRnNPaUJ3WVhsdFpXNTBYMkZuWlc1MExtMXBibDkzYVhSb1pISmhkMkZzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaVzFoYVd3NklIQmhlVzFsYm5SZllXZGxiblF1WlcxaGFXd3NYRzRnSUNBZ0lDQWdJQ0FnSUNCd2FHOXVaVG9nY0dGNWJXVnVkRjloWjJWdWRDNTBaV3hsY0dodmJtVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMWNtdzZJSEJoZVcxbGJuUmZZV2RsYm5RdWRYSnNMRnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnWVhONWJtTWdiMjVOYjNWdWRGQmhlVzFsYm5SQloyVnVkRmRwZEdoa2NtRjNLQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUdOdmJXMXZiaXdnYlc5a2RXeGxjeUI5SUQwZ2RHaHBjeTV5YjI5MFgzTjBiM0psTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUhObGRFeHZZV1JwYm1jc0lHOXVUVzkxYm5SRGIyMXRiMjRnZlNBOUlHMXZaSFZzWlhNdVkyRnphR2xsY2k1blpXNWxjbUZzWDNOMGIzSmxPMXh1WEc0Z0lDQWdJQ0FnSUhObGRFeHZZV1JwYm1jb2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVTWlcxdmRXNTBJRDBnZEdocGN5NXZiazF2ZFc1MFVHRjViV1Z1ZEVGblpXNTBWMmwwYUdSeVlYYzdYRzRnSUNBZ0lDQWdJRzl1VFc5MWJuUkRiMjF0YjI0b0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRWx6VjJsMGFHUnlZWGNvZEhKMVpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBTWE5YYVhSb1pISmhkMU4xWTJObGMzTm1kV3dvWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRkpsWTJWcGNIUW9lMzBwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWhaMlZ1ZEhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndZWGx0Wlc1MFgyRm5aVzUwWDJ4cGMzUWdQU0JoZDJGcGRDQjBhR2x6TG1kbGRGQmhlVzFsYm5SQloyVnVkRXhwYzNRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGVXMWxiblJmWVdkbGJuUmZiR2x6ZEM1d1lYbHRaVzUwWVdkbGJuUmZiR2x6ZEM1c2FYTjBMbVp2Y2tWaFkyZ29jR0Y1YldWdWRGOWhaMlZ1ZENBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFpHUlFZWGx0Wlc1MFFXZGxiblFvY0dGNWJXVnVkRjloWjJWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWhjR0Y1YldWdWRGOWhaMlZ1ZEY5c2FYTjBMbkJoZVcxbGJuUmhaMlZ1ZEY5c2FYTjBMbXhwYzNRdWJHVnVaM1JvSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG14dlkyRjBhVzl1TG5CaGRHaHVZVzFsTG1WdVpITlhhWFJvS0hKdmRYUmxjeTVqWVhOb2FXVnlYM0JoS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dGJXOXVMbkp2ZFhSbFZHOG9jbTkxZEdWekxtTmhjMmhwWlhKZlpHVndiM05wZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2MyVjBURzloWkdsdVp5aG1ZV3h6WlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUdGemVXNWpJSEpsY1hWbGMzUlVjbmxRWVhsdFpXNTBRV2RsYm5SWGFYUm9aSEpoZHloN0lHeHZaMmx1YVdRc0lHTjFjbkpsYm1ONUxDQmhiVzkxYm5Rc0lIWmxjbWxtYVdOaGRHbHZibDlqYjJSbElIMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y2k1elpYUkZjbkp2Y2sxbGMzTmhaMlVvSnljcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lYbHRaVzUwWDJGblpXNTBYM2RwZEdoa2NtRjNJRDBnWVhkaGFYUWdkR2hwY3k1WFV5NWhkWFJvYjNKcGVtVmtMbkJoZVcxbGJuUkJaMlZ1ZEZkcGRHaGtjbUYzS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WjJsdWFXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCamRYSnlaVzVqZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z0YjNWdWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhabGNtbG1hV05oZEdsdmJsOWpiMlJsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaSEo1WDNKMWJqb2dNU3hjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2dyY0dGNWJXVnVkRjloWjJWdWRGOTNhWFJvWkhKaGR5NXdZWGx0Wlc1MFlXZGxiblJmZDJsMGFHUnlZWGNnUFQwOUlESXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhObGJHVmpkR1ZrWDJGblpXNTBJRDBnZEdocGN5NWhaMlZ1ZEhNdVptbHVaQ2hoWjJWdWRDQTlQaUJoWjJWdWRDNTJZV3gxWlNBOVBUMGdiRzluYVc1cFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVOdmJtWnBjbTFoZEdsdmJpaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVzF2ZFc1MExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjFjbkpsYm1ONUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHZaMmx1YVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xpNHVLSE5sYkdWamRHVmtYMkZuWlc1MElDWW1JSHNnY0dGNWJXVnVkRjloWjJWdWRGOXVZVzFsT2lCelpXeGxZM1JsWkY5aFoyVnVkQzUwWlhoMElIMHBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVselZISjVWMmwwYUdSeVlYZFRkV05qWlhOelpuVnNLSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y2k1elpYUkZjbkp2Y2sxbGMzTmhaMlVvY0dGNWJXVnVkRjloWjJWdWRGOTNhWFJvWkhKaGR5NWxjbkp2Y2l3Z2RHaHBjeTV5WlhObGRGQmhlVzFsYm5SQloyVnVkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnY21WelpYUlFZWGx0Wlc1MFFXZGxiblFnUFNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNJdWMyVjBSWEp5YjNKTlpYTnpZV2RsS0NjbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUkpjMWRwZEdoa2NtRjNLR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MlpYSnBabWxqWVhScGIyNHVZMnhsWVhKV1pYSnBabWxqWVhScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJCWTNScGRtVlVZV0pKYm1SbGVDZ3dLVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJR0Z6ZVc1aklHOXVUVzkxYm5SUVlYbHRaVzUwUVdkbGJuUk1hWE4wS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lITmxkRXh2WVdScGJtY3NJRzl1VFc5MWJuUkRiMjF0YjI0Z2ZTQTlJSFJvYVhNdWNtOXZkRjl6ZEc5eVpTNXRiMlIxYkdWekxtTmhjMmhwWlhJdVoyVnVaWEpoYkY5emRHOXlaVHRjYmx4dUlDQWdJQ0FnSUNCelpYUk1iMkZrYVc1bktIUnlkV1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTl1VW1WdGIzVnVkQ0E5SUhSb2FYTXViMjVOYjNWdWRGQmhlVzFsYm5SQloyVnVkRXhwYzNRN1hHNGdJQ0FnSUNBZ0lHRjNZV2wwSUc5dVRXOTFiblJEYjIxdGIyNG9LVHRjYmlBZ0lDQWdJQ0FnWVhkaGFYUWdkR2hwY3k1blpYUlFZWGx0Wlc1MFFXZGxiblJNYVhOMEtDazdYRzVjYmlBZ0lDQWdJQ0FnYzJWMFRHOWhaR2x1WnlobVlXeHpaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZWE41Ym1NZ1oyVjBRV3hzVUdGNWJXVnVkRUZuWlc1MFRHbHpkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1lYZGhhWFFnZEdocGN5NVhVeTUzWVdsMEtDZG5aWFJmYzJWMGRHbHVaM01uS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVWMU11WVd4c1VHRjViV1Z1ZEVGblpXNTBUR2x6ZENoMGFHbHpMbkp2YjNSZmMzUnZjbVV1WTJ4cFpXNTBMbkpsYzJsa1pXNWpaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJSE5sZEVGc2JGQmhlVzFsYm5SQloyVnVkRXhwYzNRb2JHbHpkQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbUZzYkY5d1lYbHRaVzUwWDJGblpXNTBYMnhwYzNRZ1BTQnNhWE4wTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJqYjIxd2RYUmxaRnh1SUNBZ0lHZGxkQ0JwYzE5d1lYbHRaVzUwWDJGblpXNTBYM1pwYzJsaWJHVmZhVzVmYjI1aWIyRnlaR2x1WnlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRWhkR2hwY3k1aGJHeGZjR0Y1YldWdWRGOWhaMlZ1ZEY5c2FYTjBQeTV3WVhsdFpXNTBZV2RsYm5SZmJHbHpkRDh1YkdsemREOHViR1Z1WjNSb08xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCaGMzbHVZeUJ5WlhGMVpYTjBVR0Y1YldWdWRFRm5aVzUwVjJsMGFHUnlZWGNvZXlCc2IyZHBibWxrTENCamRYSnlaVzVqZVN3Z1lXMXZkVzUwTENCMlpYSnBabWxqWVhScGIyNWZZMjlrWlNCOUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0l1YzJWMFJYSnliM0pOWlhOellXZGxLQ2NuS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGNWJXVnVkRjloWjJWdWRGOTNhWFJvWkhKaGR5QTlJR0YzWVdsMElIUm9hWE11VjFNdVlYVjBhRzl5YVhwbFpDNXdZWGx0Wlc1MFFXZGxiblJYYVhSb1pISmhkeWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNiMmRwYm1sa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVZM2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhiVzkxYm5Rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWlhKcFptbGpZWFJwYjI1ZlkyOWtaU3hjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2dyY0dGNWJXVnVkRjloWjJWdWRGOTNhWFJvWkhKaGR5NXdZWGx0Wlc1MFlXZGxiblJmZDJsMGFHUnlZWGNnUFQwOUlERXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhObGJHVmpkR1ZrWDJGblpXNTBJRDBnZEdocGN5NWhaMlZ1ZEhNdVptbHVaQ2hoWjJWdWRDQTlQaUJoWjJWdWRDNTJZV3gxWlNBOVBUMGdiRzluYVc1cFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEZKbFkyVnBjSFFvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGdGIzVnVkRjkwY21GdWMyWmxjbkpsWkRvZ1ptOXliV0YwVFc5dVpYa29ZM1Z5Y21WdVkza3NJR0Z0YjNWdWRDd2dkSEoxWlNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xpNHVLSE5sYkdWamRHVmtYMkZuWlc1MElDWW1JSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjViV1Z1ZEY5aFoyVnVkRjlsYldGcGJEb2djMlZzWldOMFpXUmZZV2RsYm5RdVpXMWhhV3dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhlVzFsYm5SZllXZGxiblJmYVdRNklITmxiR1ZqZEdWa1gyRm5aVzUwTG5aaGJIVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYbHRaVzUwWDJGblpXNTBYMjVoYldVNklITmxiR1ZqZEdWa1gyRm5aVzUwTG5SbGVIUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGVXMWxiblJmWVdkbGJuUmZjR2h2Ym1VNklITmxiR1ZqZEdWa1gyRm5aVzUwTG5Cb2IyNWxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYbHRaVzUwWDJGblpXNTBYM1Z5YkRvZ2MyVnNaV04wWldSZllXZGxiblF1ZFhKc0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzR1TGlnaGMyVnNaV04wWldSZllXZGxiblFnSmlZZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhsdFpXNTBYMkZuWlc1MFgybGtPaUJzYjJkcGJtbGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHpWMmwwYUdSeVlYZFRkV05qWlhOelpuVnNLSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJKYzFSeWVWZHBkR2hrY21GM1UzVmpZMlZ6YzJaMWJDaG1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRU52Ym1acGNtMWhkR2x2YmloN2ZTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eUxuTmxkRVZ5Y205eVRXVnpjMkZuWlNod1lYbHRaVzUwWDJGblpXNTBYM2RwZEdoa2NtRjNMbVZ5Y205eUxDQjBhR2x6TG5KbGMyVjBVR0Y1YldWdWRFRm5aVzUwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0I3SUdGamRHbHZiaXdnWTI5dGNIVjBaV1FzSUc5aWMyVnlkbUZpYkdVZ2ZTQm1jbTl0SUNkdGIySjRKenRjYm1sdGNHOXlkQ0I3SUhKdmRYUmxjeUI5SUdaeWIyMGdKMEJrWlhKcGRpOXphR0Z5WldRbk8xeHVhVzF3YjNKMElFTnZibk4wWVc1MGN5Qm1jbTl0SUNkRGIyNXpkR0Z1ZEhNdlkyOXVjM1JoYm5Sekp6dGNibWx0Y0c5eWRDQkZjbkp2Y2xOMGIzSmxJR1p5YjIwZ0p5NHZaWEp5YjNJdGMzUnZjbVVuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJRWVhsdFpXNTBRV2RsYm5SVWNtRnVjMlpsY2xOMGIzSmxJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWg3SUZkVExDQnliMjkwWDNOMGIzSmxJSDBwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MFgzTjBiM0psSUQwZ2NtOXZkRjl6ZEc5eVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1WFV5QTlJRmRUTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdOdmJuUmhhVzVsY2lBOUlFTnZibk4wWVc1MGN5NWpiMjUwWVdsdVpYSnpMbkJoZVcxbGJuUmZZV2RsYm5SZmRISmhibk5tWlhJN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ1pYSnliM0lnUFNCdVpYY2dSWEp5YjNKVGRHOXlaU2dwTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdselgzQmhlVzFsYm5SZllXZGxiblFnUFNCbVlXeHpaVHRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0JwYzE5MGNubGZkSEpoYm5ObVpYSmZjM1ZqWTJWemMyWjFiQ0E5SUdaaGJITmxPMXh1SUNBZ0lFQnZZbk5sY25aaFlteGxJR2x6WDNSeVlXNXpabVZ5WDNOMVkyTmxjM05tZFd3Z1BTQm1ZV3h6WlR0Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCamIyNW1hWEp0SUQwZ2UzMDdYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVWdjbVZqWldsd2RDQTlJSHQ5TzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUhSeVlXNXpabVZ5WDJ4cGJXbDBJRDBnZTMwN1hHNWNiaUFnSUNCQVkyOXRjSFYwWldSY2JpQWdJQ0JuWlhRZ2FYTmZjR0Y1YldWdWRGOWhaMlZ1ZEY5MGNtRnVjMlpsY2w5MmFYTnBZbXhsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYzE5d1lYbHRaVzUwWDJGblpXNTBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHRnplVzVqSUdOb1pXTnJTWE5RWVhsdFpXNTBRV2RsYm5Rb0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHZGxkRjl6WlhSMGFXNW5jeUE5SUNoaGQyRnBkQ0IwYUdsekxsZFRMbUYxZEdodmNtbDZaV1F1YzNSdmNtRm5aUzVuWlhSVFpYUjBhVzVuY3lncEtTNW5aWFJmYzJWMGRHbHVaM003WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwU1hOUVlYbHRaVzUwUVdkbGJuUW9aMlYwWDNObGRIUnBibWR6UHk1cGMxOWhkWFJvWlc1MGFXTmhkR1ZrWDNCaGVXMWxiblJmWVdkbGJuUWdQejhnWm1Gc2MyVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJKYzFCaGVXMWxiblJCWjJWdWRDaHBjMTl3WVhsdFpXNTBYMkZuWlc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGFYTmZjR0Y1YldWdWRGOWhaMlZ1ZENBbUppQjNhVzVrYjNjdWJHOWpZWFJwYjI0dWNHRjBhRzVoYldVdVpXNWtjMWRwZEdnb2NtOTFkR1Z6TG1OaGMyaHBaWEpmY0dGZmRISmhibk5tWlhJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkp2YjNSZmMzUnZjbVV1WTI5dGJXOXVMbkp2ZFhSbFZHOG9jbTkxZEdWekxtTmhjMmhwWlhKZlpHVndiM05wZENrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1cGMxOXdZWGx0Wlc1MFgyRm5aVzUwSUQwZ0lTRnBjMTl3WVhsdFpXNTBYMkZuWlc1ME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCelpYUkpjMVJ5ZVZSeVlXNXpabVZ5VTNWalkyVnpjMloxYkNocGMxOTBjbmxmZEhKaGJuTm1aWEpmYzNWalkyVnpjMloxYkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlMbk5sZEVWeWNtOXlUV1Z6YzJGblpTZ25KeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE5mZEhKNVgzUnlZVzV6Wm1WeVgzTjFZMk5sYzNObWRXd2dQU0JwYzE5MGNubGZkSEpoYm5ObVpYSmZjM1ZqWTJWemMyWjFiRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdjMlYwU1hOVWNtRnVjMlpsY2xOMVkyTmxjM05tZFd3b2FYTmZkSEpoYm5ObVpYSmZjM1ZqWTJWemMyWjFiQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx6WDNSeVlXNXpabVZ5WDNOMVkyTmxjM05tZFd3Z1BTQnBjMTkwY21GdWMyWmxjbDl6ZFdOalpYTnpablZzTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSRGIyNW1hWEp0WVhScGIyNVFZWGx0Wlc1MFFXZGxiblJVY21GdWMyWmxjaWg3SUdGdGIzVnVkQ3dnWTJ4cFpXNTBYMmxrTENCamJHbGxiblJmYm1GdFpTd2daR1Z6WTNKcGNIUnBiMjRnZlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtWnBjbTBnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoYlc5MWJuUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHbGxiblJmYVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdsbGJuUmZibUZ0WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYzJOeWFYQjBhVzl1TEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCelpYUlNaV05sYVhCMFVHRjViV1Z1ZEVGblpXNTBWSEpoYm5ObVpYSW9leUJoYlc5MWJuUmZkSEpoYm5ObVpYSnlaV1FzSUdOc2FXVnVkRjlwWkN3Z1kyeHBaVzUwWDI1aGJXVWdmU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkpsWTJWcGNIUWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhiVzkxYm5SZmRISmhibk5tWlhKeVpXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHbGxiblJmYVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdsbGJuUmZibUZ0WlN4Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOVhHNWNiaUFnSUNCaGMzbHVZeUJuWlhSRGRYSnlaVzUwVUdGNWJXVnVkRUZuWlc1MEtISmxjM0J2Ym5ObFgzQmhlVzFsYm5SZllXZGxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCamJHbGxiblFzSUcxdlpIVnNaWE1nZlNBOUlIUm9hWE11Y205dmRGOXpkRzl5WlR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGNWJXVnVkRjloWjJWdWRGOXNhWE4wWldRZ1BTQnlaWE53YjI1elpWOXdZWGx0Wlc1MFgyRm5aVzUwTG5CaGVXMWxiblJoWjJWdWRGOXNhWE4wTG14cGMzUXVabWx1WkNoY2JpQWdJQ0FnSUNBZ0lDQWdJR0ZuWlc1MElEMCtJR0ZuWlc1MExuQmhlVzFsYm5SaFoyVnVkRjlzYjJkcGJtbGtJRDA5UFNCamJHbGxiblF1Ykc5bmFXNXBaRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JqZFhKeVpXNTBYM0JoZVcxbGJuUmZZV2RsYm5RZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGNWJXVnVkRjloWjJWdWRGOXNhWE4wWldRZ2ZId2dLR0YzWVdsMElHMXZaSFZzWlhNdVkyRnphR2xsY2k1d1lYbHRaVzUwWDJGblpXNTBMbWRsZEZCaGVXMWxiblJCWjJWdWRFUmxkR0ZwYkhNb0tTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpkWEp5Wlc1MFgzQmhlVzFsYm5SZllXZGxiblFnUHo4Z2UzMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRTFwYmsxaGVGQmhlVzFsYm5SQloyVnVkRlJ5WVc1elptVnlLSHNnYldsdVgzZHBkR2hrY21GM1lXd3NJRzFoZUY5M2FYUm9aSEpoZDJGc0lIMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBjbUZ1YzJabGNsOXNhVzFwZENBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxcGJqb2diV2x1WDNkcGRHaGtjbUYzWVd3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WVhnNklHMWhlRjkzYVhSb1pISmhkMkZzTEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCaGMzbHVZeUJ2YmsxdmRXNTBVR0Y1YldWdWRFRm5aVzUwVkhKaGJuTm1aWElvS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhzZ1oyVnVaWEpoYkY5emRHOXlaU3dnY0dGNWJXVnVkRjloWjJWdWRDQjlJRDBnZEdocGN5NXliMjkwWDNOMGIzSmxMbTF2WkhWc1pYTXVZMkZ6YUdsbGNqdGNibHh1SUNBZ0lDQWdJQ0JuWlc1bGNtRnNYM04wYjNKbExuTmxkRXh2WVdScGJtY29kSEoxWlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1U1pXMXZkVzUwSUQwZ2RHaHBjeTV2YmsxdmRXNTBVR0Y1YldWdWRFRm5aVzUwVkhKaGJuTm1aWEk3WEc0Z0lDQWdJQ0FnSUdGM1lXbDBJR2RsYm1WeVlXeGZjM1J2Y21VdWIyNU5iM1Z1ZEVOdmJXMXZiaWdwTzF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWRISmhibk5tWlhKZmJHbHRhWFF1YldsdVgzZHBkR2hrY21GM1lXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKbGMzQnZibk5sSUQwZ1lYZGhhWFFnY0dGNWJXVnVkRjloWjJWdWRDNW5aWFJRWVhsdFpXNTBRV2RsYm5STWFYTjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamRYSnlaVzUwWDNCaGVXMWxiblJmWVdkbGJuUWdQU0JoZDJGcGRDQjBhR2x6TG1kbGRFTjFjbkpsYm5SUVlYbHRaVzUwUVdkbGJuUW9jbVZ6Y0c5dWMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSTmFXNU5ZWGhRWVhsdFpXNTBRV2RsYm5SVWNtRnVjMlpsY2loamRYSnlaVzUwWDNCaGVXMWxiblJmWVdkbGJuUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdkbGJtVnlZV3hmYzNSdmNtVXVjMlYwVEc5aFpHbHVaeWhtWVd4elpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lISmxjWFZsYzNSVWNubFFZWGx0Wlc1MFFXZGxiblJVY21GdWMyWmxjaUE5SUdGemVXNWpJQ2g3SUdGdGIzVnVkQ3dnWTNWeWNtVnVZM2tzSUdSbGMyTnlhWEIwYVc5dUxDQjBjbUZ1YzJabGNsOTBieUI5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0l1YzJWMFJYSnliM0pOWlhOellXZGxLQ2NuS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGNWJXVnVkRjloWjJWdWRGOTBjbUZ1YzJabGNpQTlJR0YzWVdsMElIUm9hWE11VjFNdVlYVjBhRzl5YVhwbFpDNXdZWGx0Wlc1MFFXZGxiblJVY21GdWMyWmxjaWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhiVzkxYm5Rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNWplU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxjMk55YVhCMGFXOXVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5tWlhKZmRHOHNYRzRnSUNBZ0lDQWdJQ0FnSUNCa2NubGZjblZ1T2lBeExGeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDdHdZWGx0Wlc1MFgyRm5aVzUwWDNSeVlXNXpabVZ5TG5CaGVXMWxiblJoWjJWdWRGOTBjbUZ1YzJabGNpQTlQVDBnTWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyaHZkeUJqYjI1bWFYSnRZWFJwYjI0Z2MyTnlaV1Z1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFTnZibVpwY20xaGRHbHZibEJoZVcxbGJuUkJaMlZ1ZEZSeVlXNXpabVZ5S0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHbGxiblJmYVdRNklIUnlZVzV6Wm1WeVgzUnZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zYVdWdWRGOXVZVzFsT2lCd1lYbHRaVzUwWDJGblpXNTBYM1J5WVc1elptVnlMbU5zYVdWdWRGOTBiMTltZFd4c1gyNWhiV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVcxdmRXNTBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYzJOeWFYQjBhVzl1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHpWSEo1VkhKaGJuTm1aWEpUZFdOalpYTnpablZzS0hSeWRXVXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNpNXpaWFJGY25KdmNrMWxjM05oWjJVb2NHRjViV1Z1ZEY5aFoyVnVkRjkwY21GdWMyWmxjaTVsY25KdmNpd2dkR2hwY3k1eVpYTmxkRkJoZVcxbGJuUkJaMlZ1ZEZSeVlXNXpabVZ5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndZWGx0Wlc1MFgyRm5aVzUwWDNSeVlXNXpabVZ5TzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnY21WeGRXVnpkRkJoZVcxbGJuUkJaMlZ1ZEZSeVlXNXpabVZ5SUQwZ1lYTjVibU1nS0hzZ1lXMXZkVzUwTENCamRYSnlaVzVqZVN3Z1pHVnpZM0pwY0hScGIyNHNJSFJ5WVc1elptVnlYM1J2SUgwcElEMCtJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y2k1elpYUkZjbkp2Y2sxbGMzTmhaMlVvSnljcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lYbHRaVzUwWDJGblpXNTBYM1J5WVc1elptVnlJRDBnWVhkaGFYUWdkR2hwY3k1WFV5NWhkWFJvYjNKcGVtVmtMbkJoZVcxbGJuUkJaMlZ1ZEZSeVlXNXpabVZ5S0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z0YjNWdWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxibU41TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR1Z6WTNKcGNIUnBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJabGNsOTBieXhjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2dyY0dGNWJXVnVkRjloWjJWdWRGOTBjbUZ1YzJabGNpNXdZWGx0Wlc1MFlXZGxiblJmZEhKaGJuTm1aWElnUFQwOUlERXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFVtVmpaV2x3ZEZCaGVXMWxiblJCWjJWdWRGUnlZVzV6Wm1WeUtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhiVzkxYm5SZmRISmhibk5tWlhKeVpXUTZJR0Z0YjNWdWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR2xsYm5SZmFXUTZJSFJ5WVc1elptVnlYM1J2TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc2FXVnVkRjl1WVcxbE9pQndZWGx0Wlc1MFgyRm5aVzUwWDNSeVlXNXpabVZ5TG1Oc2FXVnVkRjkwYjE5bWRXeHNYMjVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBTWE5VY21GdWMyWmxjbE4xWTJObGMzTm1kV3dvZEhKMVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVselZISjVWSEpoYm5ObVpYSlRkV05qWlhOelpuVnNLR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwUTI5dVptbHliV0YwYVc5dVVHRjViV1Z1ZEVGblpXNTBWSEpoYm5ObVpYSW9lMzBwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjaTV6WlhSRmNuSnZjazFsYzNOaFoyVW9jR0Y1YldWdWRGOWhaMlZ1ZEY5MGNtRnVjMlpsY2k1bGNuSnZjaXdnZEdocGN5NXlaWE5sZEZCaGVXMWxiblJCWjJWdWRGUnlZVzV6Wm1WeUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ3WVhsdFpXNTBYMkZuWlc1MFgzUnlZVzV6Wm1WeU8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2NtVnpaWFJRWVhsdFpXNTBRV2RsYm5SVWNtRnVjMlpsY2lBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSSmMxUnlZVzV6Wm1WeVUzVmpZMlZ6YzJaMWJDaG1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSXVjMlYwUlhKeWIzSk5aWE56WVdkbEtDY25LVHRjYmlBZ0lDQjlPMXh1ZlZ4dUlpd2lhVzF3YjNKMElIc2dZV04wYVc5dUxDQnZZbk5sY25aaFlteGxJSDBnWm5KdmJTQW5iVzlpZUNjN1hHNXBiWEJ2Y25RZ2V5QnBjME55ZVhCMGIyTjFjbkpsYm1ONUlIMGdabkp2YlNBblFHUmxjbWwyTDNOb1lYSmxaQ2M3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRlJ5WVc1ellXTjBhVzl1U0dsemRHOXllVk4wYjNKbElIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDdJRmRUTENCeWIyOTBYM04wYjNKbElIMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwWDNOMGIzSmxJRDBnY205dmRGOXpkRzl5WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVYVXlBOUlGZFRPMXh1SUNBZ0lIMWNiaUFnSUNCQWIySnpaWEoyWVdKc1pTQmpjbmx3ZEc5ZmRISmhibk5oWTNScGIyNXpJRDBnVzEwN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2FYTmZZM0o1Y0hSdlgzUnlZVzV6WVdOMGFXOXVjMTlqWVc1alpXeGZiVzlrWVd4ZmRtbHphV0pzWlNBOUlHWmhiSE5sTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdselgyTnllWEIwYjE5MGNtRnVjMkZqZEdsdmJuTmZjM1JoZEhWelgyMXZaR0ZzWDNacGMybGliR1VnUFNCbVlXeHpaVHRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0JwYzE5amNubHdkRzlmZEhKaGJuTmhZM1JwYjI1elgzWnBjMmxpYkdVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JBYjJKelpYSjJZV0pzWlNCcGMxOXNiMkZrYVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2MyVnNaV04wWldSZlkzSjVjSFJ2WDNSeVlXNXpZV04wYVc5dVgybGtJRDBnSnljN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2MyVnNaV04wWldSZlkzSjVjSFJ2WDNOMFlYUjFjeUE5SUNjbk8xeHVJQ0FnSUVCdlluTmxjblpoWW14bElITmxiR1ZqZEdWa1gyTnllWEIwYjE5emRHRjBkWE5mWkdWelkzSnBjSFJwYjI0Z1BTQW5KenRjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0JoYzNsdVl5QnZiazF2ZFc1MEtDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJR04xY25KbGJtTjVMQ0J6ZDJsMFkyaGxaQ0I5SUQwZ2RHaHBjeTV5YjI5MFgzTjBiM0psTG1Oc2FXVnVkRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhWE5mWTNKNWNIUnZJRDBnSVNGamRYSnlaVzVqZVNBbUppQnBjME55ZVhCMGIyTjFjbkpsYm1ONUtHTjFjbkpsYm1ONUtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2FYTmZZM0o1Y0hSdklDWW1JQ0Z6ZDJsMFkyaGxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUk1iMkZrYVc1bktIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZWGRoYVhRZ2RHaHBjeTVuWlhSRGNubHdkRzlVY21GdWMyRmpkR2x2Ym5Nb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVEc5aFpHbHVaeWhtWVd4elpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdZWE41Ym1NZ1oyVjBRM0o1Y0hSdlZISmhibk5oWTNScGIyNXpLQ2tnZTF4dUlDQWdJQ0FnSUNCaGQyRnBkQ0IwYUdsekxsZFRMbk4xWW5OamNtbGlaVU5oYzJocFpYSlFZWGx0Wlc1MGN5aHlaWE53YjI1elpTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhKbGMzQnZibk5sTG1WeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdleUJqY25sd2RHOGdmU0E5SUhKbGMzQnZibk5sTG1OaGMyaHBaWEpmY0dGNWJXVnVkSE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWRGNubHdkRzlVY21GdWMyRmpkR2x2Ym5Nb1kzSjVjSFJ2S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhWd1pHRjBaVU55ZVhCMGIxUnlZVzV6WVdOMGFXOXVjeWgwY21GdWMyRmpkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdkSEpoYm5OaFkzUnBiMjV6TG1admNrVmhZMmdvZEhKaGJuTmhZM1JwYjI0Z1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYVc1a1pYZ2dQU0IwYUdsekxtTnllWEIwYjE5MGNtRnVjMkZqZEdsdmJuTXVabWx1WkVsdVpHVjRLR055ZVhCMGJ5QTlQaUJqY25sd2RHOHVhV1FnUFQwOUlIUnlZVzV6WVdOMGFXOXVMbWxrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGJtUmxlQ0E5UFQwZ0xURXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnllWEIwYjE5MGNtRnVjMkZqZEdsdmJuTXVjSFZ6YUNoMGNtRnVjMkZqZEdsdmJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU5aWFtVmpkQzVoYzNOcFoyNG9kR2hwY3k1amNubHdkRzlmZEhKaGJuTmhZM1JwYjI1elcybHVaR1Y0WFN3Z2RISmhibk5oWTNScGIyNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpiM0owUTNKNWNIUnZWSEpoYm5OaFkzUnBiMjV6S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhOdmNuUkRjbmx3ZEc5VWNtRnVjMkZqZEdsdmJuTW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM0o1Y0hSdlgzUnlZVzV6WVdOMGFXOXVjeUE5SUhSb2FYTXVZM0o1Y0hSdlgzUnlZVzV6WVdOMGFXOXVjeTV6YjNKMEtDaGhMQ0JpS1NBOVBpQmlMbk4xWW0xcGRGOWtZWFJsSUMwZ1lTNXpkV0p0YVhSZlpHRjBaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJR0Z6ZVc1aklHTmhibU5sYkVOeWVYQjBiMVJ5WVc1ellXTjBhVzl1S0hSeVlXNXpZV04wYVc5dVgybGtLU0I3WEc0Z0lDQWdJQ0FnSUdGM1lXbDBJSFJvYVhNdVYxTXVZMkZ1WTJWc1EzSjVjSFJ2VkhKaGJuTmhZM1JwYjI0b2RISmhibk5oWTNScGIyNWZhV1FwTG5Sb1pXNG9jbVZ6Y0c5dWMyVWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGeVpYTndiMjV6WlM1bGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVTJWc1pXTjBaV1JEY25sd2RHOVVjbUZ1YzJGamRHbHZia2xrS0NjbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHpRM0o1Y0hSdlZISmhibk5oWTNScGIyNXpRMkZ1WTJWc1RXOWtZV3hXYVhOcFlteGxLR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0hKbGMzQnZibk5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2h5WlhOd2IyNXpaUzVsY25KdmNpazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSVFpXeGxZM1JsWkVOeWVYQjBiMVJ5WVc1ellXTjBhVzl1U1dRb2FXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaV3hsWTNSbFpGOWpjbmx3ZEc5ZmRISmhibk5oWTNScGIyNWZhV1FnUFNCcFpEdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyVjBTWE5EY25sd2RHOVVjbUZ1YzJGamRHbHZibk5EWVc1alpXeE5iMlJoYkZacGMybGliR1VvYVhOZmRtbHphV0pzWlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1selgyTnllWEIwYjE5MGNtRnVjMkZqZEdsdmJuTmZZMkZ1WTJWc1gyMXZaR0ZzWDNacGMybGliR1VnUFNCcGMxOTJhWE5wWW14bE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCemFHOTNRM0o1Y0hSdlZISmhibk5oWTNScGIyNXpRMkZ1WTJWc1RXOWtZV3dvYVdRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUlRaV3hsWTNSbFpFTnllWEIwYjFSeVlXNXpZV04wYVc5dVNXUW9hV1FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEVselEzSjVjSFJ2VkhKaGJuTmhZM1JwYjI1elEyRnVZMlZzVFc5a1lXeFdhWE5wWW14bEtIUnlkV1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0JvYVdSbFEzSjVjSFJ2VkhKaGJuTmhZM1JwYjI1elEyRnVZMlZzVFc5a1lXd29LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVTJWc1pXTjBaV1JEY25sd2RHOVVjbUZ1YzJGamRHbHZia2xrS0NjbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUkpjME55ZVhCMGIxUnlZVzV6WVdOMGFXOXVjME5oYm1ObGJFMXZaR0ZzVm1semFXSnNaU2htWVd4elpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRk5sYkdWamRHVmtRM0o1Y0hSdlUzUmhkSFZ6S0hOMFlYUjFjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYkdWamRHVmtYMk55ZVhCMGIxOXpkR0YwZFhNZ1BTQnpkR0YwZFhNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhObGRGTmxiR1ZqZEdWa1EzSjVjSFJ2VTNSaGRIVnpSR1Z6WTNKcGNIUnBiMjRvWkdWelkzSnBjSFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpXeGxZM1JsWkY5amNubHdkRzlmYzNSaGRIVnpYMlJsYzJOeWFYQjBhVzl1SUQwZ1pHVnpZM0pwY0hScGIyNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkRWx6UTNKNWNIUnZWSEpoYm5OaFkzUnBiMjV6VTNSaGRIVnpUVzlrWVd4V2FYTnBZbXhsS0dselgzWnBjMmxpYkdVcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGMxOWpjbmx3ZEc5ZmRISmhibk5oWTNScGIyNXpYM04wWVhSMWMxOXRiMlJoYkY5MmFYTnBZbXhsSUQwZ2FYTmZkbWx6YVdKc1pUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVlXTjBhVzl1TG1KdmRXNWtYRzRnSUNBZ2MyaHZkME55ZVhCMGIxUnlZVzV6WVdOMGFXOXVjMU4wWVhSMWMwMXZaR0ZzS0dSbGMyTnlhWEIwYVc5dUxDQnVZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFUyVnNaV04wWldSRGNubHdkRzlUZEdGMGRYTkVaWE5qY21sd2RHbHZiaWhrWlhOamNtbHdkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFUyVnNaV04wWldSRGNubHdkRzlUZEdGMGRYTW9ibUZ0WlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFNYTkRjbmx3ZEc5VWNtRnVjMkZqZEdsdmJuTlRkR0YwZFhOTmIyUmhiRlpwYzJsaWJHVW9kSEoxWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUdocFpHVkRjbmx3ZEc5VWNtRnVjMkZqZEdsdmJuTlRkR0YwZFhOTmIyUmhiQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSSmMwTnllWEIwYjFSeVlXNXpZV04wYVc5dWMxTjBZWFIxYzAxdlpHRnNWbWx6YVdKc1pTaG1ZV3h6WlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhObGRFeHZZV1JwYm1jb2FYTmZiRzloWkdsdVp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbHpYMnh2WVdScGJtY2dQU0JwYzE5c2IyRmthVzVuTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J6WlhSSmMwTnllWEIwYjFSeVlXNXpZV04wYVc5dWMxWnBjMmxpYkdVb2FYTmZkbWx6YVdKc1pTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbHpYMk55ZVhCMGIxOTBjbUZ1YzJGamRHbHZibk5mZG1semFXSnNaU0E5SUdselgzWnBjMmxpYkdVN1hHNGdJQ0FnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0I3SUdGamRHbHZiaXdnWTI5dGNIVjBaV1FzSUc5aWMyVnlkbUZpYkdVZ2ZTQm1jbTl0SUNkdGIySjRKenRjYm1sdGNHOXlkQ0I3SUd4dlkyRnNhWHBsTENCTWIyTmhiR2w2WlNCOUlHWnliMjBnSjBCa1pYSnBkaTkwY21GdWMyeGhkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIc2daMlYwUkdWamFXMWhiRkJzWVdObGN5d2daMlYwVFdsdVYybDBhR1J5WVhkaGJDd2dkbUZzYVdST2RXMWlaWElnZlNCbWNtOXRJQ2RBWkdWeWFYWXZjMmhoY21Wa0p6dGNibWx0Y0c5eWRDQkRiMjV6ZEdGdWRITWdabkp2YlNBblEyOXVjM1JoYm5SekwyTnZibk4wWVc1MGN5YzdYRzVwYlhCdmNuUWdSWEp5YjNKVGRHOXlaU0JtY205dElDY3VMMlZ5Y205eUxYTjBiM0psSnp0Y2JtbHRjRzl5ZENCV1pYSnBabWxqWVhScGIyNVRkRzl5WlNCbWNtOXRJQ2N1TDNabGNtbG1hV05oZEdsdmJpMXpkRzl5WlNjN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZkcGRHaGtjbUYzVTNSdmNtVWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLSHNnVjFNc0lISnZiM1JmYzNSdmNtVWdmU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNSZmMzUnZjbVVnUFNCeWIyOTBYM04wYjNKbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxkVElEMGdWMU03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRRzlpYzJWeWRtRmliR1VnWW14dlkydGphR0ZwYmw5aFpHUnlaWE56SUQwZ0p5YzdYRzRnSUNBZ1FHOWljMlZ5ZG1GaWJHVWdZMjl1ZEdGcGJtVnlJRDBnUTI5dWMzUmhiblJ6TG1OdmJuUmhhVzVsY25NdWQybDBhR1J5WVhjN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ1pYSnliM0lnUFNCdVpYY2dSWEp5YjNKVGRHOXlaU2dwTzF4dUlDQWdJRUJ2WW5ObGNuWmhZbXhsSUdselh6RXdhMTkzYVhSb1pISmhkMkZzWDJ4cGJXbDBYM0psWVdOb1pXUWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdRRzlpYzJWeWRtRmliR1VnYVhOZmQybDBhR1J5WVhkZlkyOXVabWx5YldWa0lEMGdabUZzYzJVN1hHNGdJQ0FnUUc5aWMyVnlkbUZpYkdVZ2RtVnlhV1pwWTJGMGFXOXVJRDBnYm1WM0lGWmxjbWxtYVdOaGRHbHZibE4wYjNKbEtIc2djbTl2ZEY5emRHOXlaVG9nZEdocGN5NXliMjkwWDNOMGIzSmxMQ0JYVXpvZ2RHaHBjeTVYVXlCOUtUdGNiaUFnSUNCQWIySnpaWEoyWVdKc1pTQjNhWFJvWkhKaGQxOWhiVzkxYm5RZ1BTQW5KenRjYmlBZ0lDQkFiMkp6WlhKMllXSnNaU0J0WVhoZmQybDBhR1J5WVhkZllXMXZkVzUwSUQwZ01EdGNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJKYzFkcGRHaGtjbUYzUTI5dVptbHliV1ZrS0dselgzZHBkR2hrY21GM1gyTnZibVpwY20xbFpDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJR052Ym5abGNuUmxjbDltY205dFgyRnRiM1Z1ZENCOUlEMGdkR2hwY3k1eWIyOTBYM04wYjNKbExtMXZaSFZzWlhNdVkyRnphR2xsY2k1amNubHdkRzlmWm1saGRGOWpiMjUyWlhKMFpYSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFYTmZkMmwwYUdSeVlYZGZZMjl1Wm1seWJXVmtJRDBnYVhOZmQybDBhR1J5WVhkZlkyOXVabWx5YldWa08xeHVYRzRnSUNBZ0lDQWdJR2xtSUNocGMxOTNhWFJvWkhKaGQxOWpiMjVtYVhKdFpXUXBJSFJvYVhNdWMyVjBWMmwwYUdSeVlYZEJiVzkxYm5Rb1kyOXVkbVZ5ZEdWeVgyWnliMjFmWVcxdmRXNTBLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9JV2x6WDNkcGRHaGtjbUYzWDJOdmJtWnBjbTFsWkNBbUppQjBhR2x6TG5abGNtbG1hV05oZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyWlhKcFptbGpZWFJwYjI0dVkyeGxZWEpXWlhKcFptbGpZWFJwYjI0b0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJYYVhSb1pISmhkMEZ0YjNWdWRDaGhiVzkxYm5RcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M2FYUm9aSEpoZDE5aGJXOTFiblFnUFNCaGJXOTFiblE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR0ZqZEdsdmJpNWliM1Z1WkZ4dUlDQWdJR0Z6ZVc1aklISmxjWFZsYzNSWGFYUm9aSEpoZHloMlpYSnBabWxqWVhScGIyNWZZMjlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHTnNhV1Z1ZEN3Z2JXOWtkV3hsY3lCOUlEMGdkR2hwY3k1eWIyOTBYM04wYjNKbE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHTnllWEIwYjE5bWFXRjBYMk52Ym5abGNuUmxjaXdnWlhKeWIzSmZaR2xoYkc5bklIMGdQU0J0YjJSMWJHVnpMbU5oYzJocFpYSTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmpiR2xsYm5RdWFYTmZiRzluWjJWa1gybHVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lXTnllWEIwYjE5bWFXRjBYMk52Ym5abGNuUmxjaTVqYjI1MlpYSjBaWEpmWm5KdmJWOWhiVzkxYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOeWVYQjBiMTltYVdGMFgyTnZiblpsY25SbGNpNXpaWFJEYjI1MlpYSjBaWEpHY205dFJYSnliM0lvYkc5allXeHBlbVVvSjFSb2FYTWdabWxsYkdRZ2FYTWdjbVZ4ZFdseVpXUXVKeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWVhkaGFYUWdkR2hwY3k1WFV5NWpjbmx3ZEc5WGFYUm9aSEpoZHloN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoWkdSeVpYTnpPaUIwYUdsekxtSnNiMk5yWTJoaGFXNWZZV1JrY21WemN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdGdGIzVnVkRG9nSzJOeWVYQjBiMTltYVdGMFgyTnZiblpsY25SbGNpNWpiMjUyWlhKMFpYSmZabkp2YlY5aGJXOTFiblFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJaWEpwWm1sallYUnBiMjVmWTI5a1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSeWVWOXlkVzQ2SURFc1hHNGdJQ0FnSUNBZ0lIMHBMblJvWlc0b2NtVnpjRzl1YzJVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsYzNCdmJuTmxMbVZ5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNKZlpHbGhiRzluTG5ObGRFVnljbTl5VFdWemMyRm5aU2h5WlhOd2IyNXpaUzVsY25KdmNpNXRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpZWFpsVjJsMGFHUnlZWGNvZG1WeWFXWnBZMkYwYVc5dVgyTnZaR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnWVhONWJtTWdjMkYyWlZkcGRHaGtjbUYzS0habGNtbG1hV05oZEdsdmJsOWpiMlJsS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhzZ1kyOXVkbVZ5ZEdWeVgyWnliMjFmWVcxdmRXNTBJSDBnUFNCMGFHbHpMbkp2YjNSZmMzUnZjbVV1Ylc5a2RXeGxjeTVqWVhOb2FXVnlMbU55ZVhCMGIxOW1hV0YwWDJOdmJuWmxjblJsY2p0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlMbk5sZEVWeWNtOXlUV1Z6YzJGblpTZ25KeWs3WEc0Z0lDQWdJQ0FnSUdGM1lXbDBJSFJvYVhNdVYxTXVZM0o1Y0hSdlYybDBhR1J5WVhjb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdSa2NtVnpjem9nZEdocGN5NWliRzlqYTJOb1lXbHVYMkZrWkhKbGMzTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJXOTFiblE2SUN0amIyNTJaWEowWlhKZlpuSnZiVjloYlc5MWJuUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMlpYSnBabWxqWVhScGIyNWZZMjlrWlN4Y2JpQWdJQ0FnSUNBZ2ZTa3VkR2hsYmloeVpYTndiMjV6WlNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ6Y0c5dWMyVXVaWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlMbk5sZEVWeWNtOXlUV1Z6YzJGblpTaHlaWE53YjI1elpTNWxjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFpsY21sbWFXTmhkR2x2Ymw5amIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR05zWldGeUlIWmxjbWxtYVdOaGRHbHZiaUJqYjJSbElHOXVJR1Z5Y205eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtVnlhV1pwWTJGMGFXOXVMbU5zWldGeVZtVnlhV1pwWTJGMGFXOXVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ6WlhSWGFYUm9jbUYzUm05eWJTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVselYybDBhR1J5WVhkRGIyNW1hWEp0WldRb2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUJoWTNScGIyNHVZbTkxYm1SY2JpQWdJQ0J5WlhObGRGZHBkR2h5WVhkR2IzSnRLQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUhObGRFTnZiblpsY25SbGNrWnliMjFCYlc5MWJuUXNJSE5sZEVOdmJuWmxjblJsY2xSdlFXMXZkVzUwSUgwZ1BTQjBhR2x6TG5KdmIzUmZjM1J2Y21VdWJXOWtkV3hsY3k1allYTm9hV1Z5TG1OeWVYQjBiMTltYVdGMFgyTnZiblpsY25SbGNqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUkNiRzlqYTJOb1lXbHVRV1JrY21WemN5Z25KeWs3WEc0Z0lDQWdJQ0FnSUhObGRFTnZiblpsY25SbGNrWnliMjFCYlc5MWJuUW9KeWNwTzF4dUlDQWdJQ0FnSUNCelpYUkRiMjUyWlhKMFpYSlViMEZ0YjNWdWRDZ25KeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbVZ5YVdacFkyRjBhVzl1TG1Oc1pXRnlWbVZ5YVdacFkyRjBhVzl1S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUhObGRFSnNiMk5yWTJoaGFXNUJaR1J5WlhOektHRmtaSEpsYzNNcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aWJHOWphMk5vWVdsdVgyRmtaSEpsYzNNZ1BTQmhaR1J5WlhOek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCaFkzUnBiMjR1WW05MWJtUmNiaUFnSUNCM2FXeHNUVzkxYm5SWGFYUm9aSEpoZHloMlpYSnBabWxqWVhScGIyNWZZMjlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZG1WeWFXWnBZMkYwYVc5dVgyTnZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtVnlhV1pwWTJGMGFXOXVMbU5zWldGeVZtVnlhV1pwWTJGMGFXOXVLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWVdOMGFXOXVMbUp2ZFc1a1hHNGdJQ0FnWVhONWJtTWdiMjVOYjNWdWRGZHBkR2hrY21GM0tIWmxjbWxtYVdOaGRHbHZibDlqYjJSbEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2dZMnhwWlc1MExDQnRiMlIxYkdWeklIMGdQU0IwYUdsekxuSnZiM1JmYzNSdmNtVTdYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2dZV04wYVhabFgyTnZiblJoYVc1bGNpd2dhWE5mWTNKNWNIUnZMQ0J2YmsxdmRXNTBRMjl0Ylc5dUxDQnpaWFJNYjJGa2FXNW5MQ0J6WlhSUGJsSmxiVzkxYm5RZ2ZTQTlJRzF2WkhWc1pYTXVZMkZ6YUdsbGNpNW5aVzVsY21Gc1gzTjBiM0psTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR1ZqYTBsbWNtRnRaVXh2WVdSbFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1pXRnlWR2x0Wlc5MWRFTmhjMmhwWlhKVmNtd3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHVmhja2xtY21GdFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdselgzTmxjM05wYjI1ZmRHbHRaVzkxZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEVOdmJuUmhhVzVsY2tobGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkRWxtY21GdFpWVnliQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkRk5sYzNOcGIyNVVhVzFsYjNWMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFZHbHRaVzkxZEVOaGMyaHBaWEpWY213c1hHNGdJQ0FnSUNBZ0lIMGdQU0J0YjJSMWJHVnpMbU5oYzJocFpYSXVhV1p5WVcxbE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHbHpYM1pwY25SMVlXd2dmU0E5SUdOc2FXVnVkRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZM1Z5Y21WdWRGOWpiMjUwWVdsdVpYSWdQU0JoWTNScGRtVmZZMjl1ZEdGcGJtVnlPMXh1WEc0Z0lDQWdJQ0FnSUhObGRFOXVVbVZ0YjNWdWRDaDBhR2x6TG05dVRXOTFiblJYYVhSb1pISmhkeWs3WEc0Z0lDQWdJQ0FnSUdGM1lXbDBJRzl1VFc5MWJuUkRiMjF0YjI0b0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5TG5ObGRFVnljbTl5VFdWemMyRm5aU2duSnlrN1hHNGdJQ0FnSUNBZ0lITmxkRU52Ym5SaGFXNWxja2hsYVdkb2RDZ3dLVHRjYmlBZ0lDQWdJQ0FnWTJ4bFlYSkpabkpoYldVb0tUdGNiaUFnSUNBZ0lDQWdjMlYwVEc5aFpHbHVaeWgwY25WbEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lXbHpYM05sYzNOcGIyNWZkR2x0Wlc5MWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRKWm5KaGJXVk1iMkZrWldRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJR2xtSUhObGMzTnBiMjRnYUdGeklIUnBiV1ZrSUc5MWRDQnlaWE5sZENCbGRtVnllWFJvYVc1blhHNGdJQ0FnSUNBZ0lITmxkRWxtY21GdFpWVnliQ2duSnlrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZG1WeWFXWnBZMkYwYVc5dVgyTnZaR1VnZkh3Z2FYTmZkbWx5ZEhWaGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBURzloWkdsdVp5aG1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCcFppQjJhWEowZFdGc0xDQmpiR1ZoY2lCbGRtVnllWFJvYVc1bklHRnVaQ0JrYjI0bmRDQndjbTlqWldWa0lHWjFjblJvWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsbUlHNXZJSFpsY21sbWFXTmhkR2x2YmlCamIyUmxMQ0IzWlNCemFHOTFiR1FnY21WeGRXVnpkQ0JoWjJGcGJseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21WemNHOXVjMlZmWTJGemFHbGxjaUE5SUdGM1lXbDBJSFJvYVhNdVYxTXVZWFYwYUc5eWFYcGxaQzVqWVhOb2FXVnlLR0ZqZEdsMlpWOWpiMjUwWVdsdVpYSXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmxjbWxtYVdOaGRHbHZibDlqYjJSbExGeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnBaaUIwWVdJZ1kyaGhibWRsWkNCM2FHbHNaU0IzWVdsMGFXNW5JR1p2Y2lCeVpYTndiMjV6WlN3Z2FXZHViM0psSUdsMFhHNGdJQ0FnSUNBZ0lHbG1JQ2hqZFhKeVpXNTBYMk52Ym5SaGFXNWxjaUFoUFQwZ1lXTjBhWFpsWDJOdmJuUmhhVzVsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFRHOWhaR2x1WnlobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sWDJOaGMyaHBaWEl1WlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSXVhR0Z1Wkd4bFEyRnphR2xsY2tWeWNtOXlLSEpsYzNCdmJuTmxYMk5oYzJocFpYSXVaWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFRHOWhaR2x1WnlobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFJUWlhOemFXOXVWR2x0Wlc5MWRDaDBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZEVOaGMyaHBaWEpWY213b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJaWEpwWm1sallYUnBiMjVmWTI5a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOc1pXRnlJSFpsY21sbWFXTmhkR2x2YmlCamIyUmxJRzl1SUdWeWNtOXlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MlpYSnBabWxqWVhScGIyNHVZMnhsWVhKV1pYSnBabWxqWVhScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hwYzE5amNubHdkRzhwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEV4dllXUnBibWNvWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYZGhhWFFnWTJobFkydEpabkpoYldWTWIyRmtaV1FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEV4dllXUnBibWNvWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBTV1p5WVcxbFZYSnNLSEpsYzNCdmJuTmxYMk5oYzJocFpYSXVZMkZ6YUdsbGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYUlRaWE56YVc5dVZHbHRaVzkxZENobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFJVYVcxbGIzVjBRMkZ6YUdsbGNsVnliQ2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdGamRHbHZiaTVpYjNWdVpGeHVJQ0FnSUdGemVXNWpJRzl1VFc5MWJuUkRjbmx3ZEc5WGFYUm9aSEpoZHloMlpYSnBabWxqWVhScGIyNWZZMjlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHTnllWEIwYjE5bWFXRjBYMk52Ym5abGNuUmxjaXdnWjJWdVpYSmhiRjl6ZEc5eVpTd2dhV1p5WVcxbElIMGdQU0IwYUdsekxuSnZiM1JmYzNSdmNtVXViVzlrZFd4bGN5NWpZWE5vYVdWeU8xeHVYRzRnSUNBZ0lDQWdJR2RsYm1WeVlXeGZjM1J2Y21VdWMyVjBURzloWkdsdVp5aDBjblZsS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSeVgzSmxaMTlsZUhBZ1BTQXZYbHhjZDNzNExERXlPSDBrTHp0Y2JpQWdJQ0FnSUNBZ2JHVjBJSEpsYzNCdmJuTmxYMk5oYzJocFpYSTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tITjBjbDl5WldkZlpYaHdMblJsYzNRb2RtVnlhV1pwWTJGMGFXOXVYMk52WkdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTndiMjV6WlY5allYTm9hV1Z5SUQwZ1lYZGhhWFFnZEdocGN5NVhVeTVqY25sd2RHOVhhWFJvWkhKaGR5aDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrY21WemN6b2dkR2hwY3k1aWJHOWphMk5vWVdsdVgyRmtaSEpsYzNNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXMXZkVzUwT2lBclkzSjVjSFJ2WDJacFlYUmZZMjl1ZG1WeWRHVnlMbU52Ym5abGNuUmxjbDltY205dFgyRnRiM1Z1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMlpYSnBabWxqWVhScGIyNWZZMjlrWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2NubGZjblZ1T2lBeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOd2IyNXpaVjlqWVhOb2FXVnlJRDBnZXlCbGNuSnZjam9nZXlCamIyUmxPaUFuU1c1MllXeHBaRlJ2YTJWdUp5d2diV1Z6YzJGblpUb2dKMWx2ZFhJZ2RHOXJaVzRnYUdGeklHVjRjR2x5WldRZ2IzSWdhWE1nYVc1MllXeHBaQzRuSUgwZ2ZUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpWOWpZWE5vYVdWeUxtVnljbTl5TG1OdlpHVWdQVDA5SUNkSmJuWmhiR2xrVkc5clpXNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlMbWhoYm1Sc1pVTmhjMmhwWlhKRmNuSnZjaWh5WlhOd2IyNXpaVjlqWVhOb2FXVnlMbVZ5Y205eUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGJtVnlZV3hmYzNSdmNtVXVjMlYwVEc5aFpHbHVaeWhtWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpuSmhiV1V1YzJWMFUyVnpjMmx2YmxScGJXVnZkWFFvZEhKMVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpuSmhiV1V1WTJ4bFlYSlVhVzFsYjNWMFEyRnphR2xsY2xWeWJDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFpsY21sbWFXTmhkR2x2Ymw5amIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyeGxZWElnZG1WeWFXWnBZMkYwYVc5dUlHTnZaR1VnYjI0Z1pYSnliM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuWmxjbWxtYVdOaGRHbHZiaTVqYkdWaGNsWmxjbWxtYVdOaGRHbHZiaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVnVaWEpoYkY5emRHOXlaUzV6WlhSTWIyRmthVzVuS0daaGJITmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRUJqYjIxd2RYUmxaRnh1SUNBZ0lHZGxkQ0JwYzE5M2FYUm9aSEpoZDJGc1gyeHZZMnRsWkNncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QmpiR2xsYm5RZ2ZTQTlJSFJvYVhNdWNtOXZkRjl6ZEc5eVpUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QmhkWFJvWlc1MGFXTmhkR2x2YmlCOUlEMGdZMnhwWlc1MExtRmpZMjkxYm5SZmMzUmhkSFZ6TzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doWTJ4cFpXNTBMbUZqWTI5MWJuUmZjM1JoZEhWelB5NXpkR0YwZFhNcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibVZsWkY5d2Iya2dQU0JoZFhSb1pXNTBhV05oZEdsdmJpNXVaV1ZrYzE5MlpYSnBabWxqWVhScGIyNHVhVzVqYkhWa1pYTW9KMmxrWlc1MGFYUjVKeWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzVsWldSZllYVjBhR1Z1ZEdsallYUnBiMjRnUFNCMGFHbHpMbVZ5Y205eUxtbHpYMkZ6YTE5aGRYUm9aVzUwYVdOaGRHbHZiaUFtSmlCdVpXVmtYM0J2YVR0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeHBaVzUwTG1selgzZHBkR2hrY21GM1lXeGZiRzlqYXlCOGZDQnVaV1ZrWDJGMWRHaGxiblJwWTJGMGFXOXVJSHg4SUhSb2FYTXVaWEp5YjNJdWFYTmZZWE5yWDJacGJtRnVZMmxoYkY5eWFYTnJYMkZ3Y0hKdmRtRnNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJOWVhoWGFYUm9aSEpoZDBGdGIzVnVkQ2hoYlc5MWJuUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRZWGhmZDJsMGFHUnlZWGRmWVcxdmRXNTBJRDBnWVcxdmRXNTBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQmhjM2x1WXlCamFHVmphekV3YTB4cGJXbDBLQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUdOc2FXVnVkQ0I5SUQwZ2RHaHBjeTV5YjI5MFgzTjBiM0psTzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhKbGJXRnBibVJsY2lBOUlDaGhkMkZwZENCamJHbGxiblF1WjJWMFRHbHRhWFJ6S0NrcFB5NW5aWFJmYkdsdGFYUnpQeTV5WlcxaGFXNWtaWEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVFdGNFYybDBhR1J5WVhkQmJXOTFiblFvY21WdFlXbHVaR1Z5S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYldsdVgzZHBkR2hrY21GM1lXd2dQU0JuWlhSTmFXNVhhWFJvWkhKaGQyRnNLR05zYVdWdWRDNWpkWEp5Wlc1amVTazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHpYMnhwYldsMFgzSmxZV05vWldRZ1BTQWhJU2gwZVhCbGIyWWdjbVZ0WVdsdVpHVnlJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUFyY21WdFlXbHVaR1Z5SUR3Z2JXbHVYM2RwZEdoa2NtRjNZV3dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZERFd2EweHBiV2wwWVhScGIyNG9hWE5mYkdsdGFYUmZjbVZoWTJobFpDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHRmpkR2x2Ymk1aWIzVnVaRnh1SUNBZ0lITmxkREV3YTB4cGJXbDBZWFJwYjI0b2FYTmZiR2x0YVhSZmNtVmhZMmhsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1selh6RXdhMTkzYVhSb1pISmhkMkZzWDJ4cGJXbDBYM0psWVdOb1pXUWdQU0JwYzE5c2FXMXBkRjl5WldGamFHVmtPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQmhZM1JwYjI0dVltOTFibVJjYmlBZ0lDQnpaWFJYYVhSb1pISmhkMUJsY21ObGJuUmhaMlZUWld4bFkzUnZjbEpsYzNWc2RDaGhiVzkxYm5RcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QmpiR2xsYm5Rc0lHMXZaSFZzWlhNZ2ZTQTlJSFJvYVhNdWNtOXZkRjl6ZEc5eVpUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5Qmpjbmx3ZEc5ZlptbGhkRjlqYjI1MlpYSjBaWElzSUdkbGJtVnlZV3hmYzNSdmNtVWdmU0E5SUcxdlpIVnNaWE11WTJGemFHbGxjanRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJqZFhKeVpXNWplU3dnWTNWeWNtVnVkRjltYVdGMFgyTjFjbkpsYm1ONUlIMGdQU0JqYkdsbGJuUTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHRnRiM1Z1ZENBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnllWEIwYjE5bWFXRjBYMk52Ym5abGNuUmxjaTV6WlhSRGIyNTJaWEowWlhKR2NtOXRRVzF2ZFc1MEtHRnRiM1Z1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuWmhiR2xrWVhSbFYybDBhR1J5WVhkR2NtOXRRVzF2ZFc1MEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamNubHdkRzlmWm1saGRGOWpiMjUyWlhKMFpYSXViMjVEYUdGdVoyVkRiMjUyWlhKMFpYSkdjbTl0UVcxdmRXNTBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnZEdGeVoyVjBPaUI3SUhaaGJIVmxPaUJoYlc5MWJuUWdmU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxibU41TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJmWm1saGRGOWpkWEp5Wlc1amVTQjhmQ0FuVlZORUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR055ZVhCMGIxOW1hV0YwWDJOdmJuWmxjblJsY2k1eVpYTmxkRU52Ym5abGNuUmxjaWdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTnllWEIwYjE5bWFXRjBYMk52Ym5abGNuUmxjaTV6WlhSSmMxUnBiV1Z5Vm1semFXSnNaU2htWVd4elpTazdYRzRnSUNBZ0lDQWdJR2RsYm1WeVlXeGZjM1J2Y21VdWNHVnlZMlZ1ZEdGblpWTmxiR1ZqZEc5eVUyVnNaV04wYVc5dVUzUmhkSFZ6S0daaGJITmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdkbUZzYVdSaGRHVlhhWFJvWkhKaGQwWnliMjFCYlc5MWJuUW9LU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmxjbkp2Y2w5dFpYTnpZV2RsSUQwZ0p5YzdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJqYkdsbGJuUXNJRzF2WkhWc1pYTWdmU0E5SUhSb2FYTXVjbTl2ZEY5emRHOXlaVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJpWVd4aGJtTmxMQ0JqZFhKeVpXNWplU3dnZDJWaWMybDBaVjl6ZEdGMGRYTWdmU0E5SUdOc2FXVnVkRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJqYjI1MlpYSjBaWEpmWm5KdmJWOWhiVzkxYm5Rc0lITmxkRU52Ym5abGNuUmxja1p5YjIxRmNuSnZjaUI5SUQwZ2JXOWtkV3hsY3k1allYTm9hV1Z5TG1OeWVYQjBiMTltYVdGMFgyTnZiblpsY25SbGNqdGNibHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnRhVzVmZDJsMGFHUnlZWGRmWVcxdmRXNTBJRDBnZDJWaWMybDBaVjl6ZEdGMGRYTXVZM0o1Y0hSdlgyTnZibVpwWjF0amRYSnlaVzVqZVYwdWJXbHVhVzExYlY5M2FYUm9aSEpoZDJGc08xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdFlYaGZkMmwwYUdSeVlYZGZZVzF2ZFc1MElEMGdLM1JvYVhNdWJXRjRYM2RwZEdoa2NtRjNYMkZ0YjNWdWRDQStJQ3RpWVd4aGJtTmxJRDhnSzJKaGJHRnVZMlVnT2lBcmRHaHBjeTV0WVhoZmQybDBhR1J5WVhkZllXMXZkVzUwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjI1MlpYSjBaWEpmWm5KdmJWOWhiVzkxYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSHNnYVhOZmIyc3NJRzFsYzNOaFoyVWdmU0E5SUhaaGJHbGtUblZ0WW1WeUtHTnZiblpsY25SbGNsOW1jbTl0WDJGdGIzVnVkQ3dnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2RtYkc5aGRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZqYVcxaGJITTZJR2RsZEVSbFkybHRZV3hRYkdGalpYTW9ZM1Z5Y21WdVkza3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV2x6WDI5cktTQmxjbkp2Y2w5dFpYTnpZV2RsSUQwZ2JXVnpjMkZuWlR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDdGlZV3hoYm1ObElEd2dLMk52Ym5abGNuUmxjbDltY205dFgyRnRiM1Z1ZENrZ1pYSnliM0pmYldWemMyRm5aU0E5SUd4dlkyRnNhWHBsS0NkSmJuTjFabVpwWTJsbGJuUWdablZ1WkhNbktUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ3RqYjI1MlpYSjBaWEpmWm5KdmJWOWhiVzkxYm5RZ1BDQXJiV2x1WDNkcGRHaGtjbUYzWDJGdGIzVnVkQ0I4ZkNBclkyOXVkbVZ5ZEdWeVgyWnliMjFmWVcxdmRXNTBJRDRnSzIxaGVGOTNhWFJvWkhKaGQxOWhiVzkxYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2w5dFpYTnpZV2RsSUQwZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4VEc5allXeHBlbVZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2t4T0c1ZlpHVm1ZWFZzZEY5MFpYaDBQU2RVYUdVZ1lXeHNiM2RsWkNCM2FYUm9aSEpoZHlCaGJXOTFiblFnYVhNZ2UzdHRhVzVmZDJsMGFHUnlZWGRmWVcxdmRXNTBmWDBnZEc4Z2UzdHRZWGhmZDJsMGFHUnlZWGRmWVcxdmRXNTBmWDBnZTN0amRYSnlaVzVqZVgxOUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1Z6UFh0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x1WDNkcGRHaGtjbUYzWDJGdGIzVnVkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYaGZkMmwwYUdSeVlYZGZZVzF2ZFc1MExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJtTjVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSE5sZEVOdmJuWmxjblJsY2taeWIyMUZjbkp2Y2lobGNuSnZjbDl0WlhOellXZGxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZV04wYVc5dUxtSnZkVzVrWEc0Z0lDQWdkbUZzYVdSaGRHVlhhWFJvWkhKaGQxUnZRVzF2ZFc1MEtDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pYSnliM0pmYldWemMyRm5aU0E5SUNjbk8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHTnNhV1Z1ZEN3Z2JXOWtkV3hsY3lCOUlEMGdkR2hwY3k1eWIyOTBYM04wYjNKbE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHTjFjbkpsYm5SZlptbGhkRjlqZFhKeVpXNWplU0I5SUQwZ1kyeHBaVzUwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUdOdmJuWmxjblJsY2w5MGIxOWhiVzkxYm5Rc0lITmxkRU52Ym5abGNuUmxjbFJ2UlhKeWIzSWdmU0E5SUcxdlpIVnNaWE11WTJGemFHbGxjaTVqY25sd2RHOWZabWxoZEY5amIyNTJaWEowWlhJN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dOdmJuWmxjblJsY2w5MGIxOWhiVzkxYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSHNnYVhOZmIyc3NJRzFsYzNOaFoyVWdmU0E5SUhaaGJHbGtUblZ0WW1WeUtHTnZiblpsY25SbGNsOTBiMTloYlc5MWJuUXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5abXh2WVhRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxZMmx0WVd4ek9pQm5aWFJFWldOcGJXRnNVR3hoWTJWektHTjFjbkpsYm5SZlptbGhkRjlqZFhKeVpXNWplU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYVhOZmIyc3BJR1Z5Y205eVgyMWxjM05oWjJVZ1BTQnRaWE56WVdkbE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYzJWMFEyOXVkbVZ5ZEdWeVZHOUZjbkp2Y2lobGNuSnZjbDl0WlhOellXZGxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFZMjl0Y0hWMFpXUmNiaUFnSUNCblpYUWdZV05qYjNWdWRGOXdiR0YwWm05eWJWOXBZMjl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHRmpZMjkxYm5SZmJHbHpkQ3dnYkc5bmFXNXBaQ0I5SUQwZ2RHaHBjeTV5YjI5MFgzTjBiM0psTG1Oc2FXVnVkRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjR3hoZEdadmNtMWZhV052YmlBOUlHRmpZMjkxYm5SZmJHbHpkQzVtYVc1a0tHRmpZeUE5UGlCc2IyZHBibWxrSUQwOVBTQmhZMk11Ykc5bmFXNXBaQ2t1YVdOdmJqdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjR3hoZEdadmNtMWZhV052Ymp0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdRV05qYjNWdWRGQnliMjF3ZEVScFlXeHZaMU4wYjNKbElHWnliMjBnSnk0dllXTmpiM1Z1ZEMxd2NtOXRjSFF0WkdsaGJHOW5MWE4wYjNKbEp6dGNibWx0Y0c5eWRDQkJZMk52ZFc1MFZISmhibk5tWlhKVGRHOXlaU0JtY205dElDY3VMMkZqWTI5MWJuUXRkSEpoYm5ObVpYSXRjM1J2Y21Vbk8xeHVhVzF3YjNKMElFTnllWEIwYjBacFlYUkRiMjUyWlhKMFpYSlRkRzl5WlNCbWNtOXRJQ2N1TDJOeWVYQjBieTFtYVdGMExXTnZiblpsY25SbGNpMXpkRzl5WlNjN1hHNXBiWEJ2Y25RZ1JHVndiM05wZEZOMGIzSmxJR1p5YjIwZ0p5NHZaR1Z3YjNOcGRDMXpkRzl5WlNjN1hHNXBiWEJ2Y25RZ1JYSnliM0pFYVdGc2IyY2dabkp2YlNBbkxpOWxjbkp2Y2kxa2FXRnNiMmN0YzNSdmNtVW5PMXh1YVcxd2IzSjBJRVZ5Y205eVUzUnZjbVVnWm5KdmJTQW5MaTlsY25KdmNpMXpkRzl5WlNjN1hHNXBiWEJ2Y25RZ1IyVnVaWEpoYkZOMGIzSmxJR1p5YjIwZ0p5NHZaMlZ1WlhKaGJDMXpkRzl5WlNjN1hHNXBiWEJ2Y25RZ1NXWnlZVzFsVTNSdmNtVWdabkp2YlNBbkxpOXBabkpoYldVdGMzUnZjbVVuTzF4dWFXMXdiM0owSUU5dVVtRnRjRk4wYjNKbElHWnliMjBnSnk0dmIyNHRjbUZ0Y0MxemRHOXlaU2M3WEc1cGJYQnZjblFnVUdGNWJXVnVkRUZuWlc1MFUzUnZjbVVnWm5KdmJTQW5MaTl3WVhsdFpXNTBMV0ZuWlc1MExYTjBiM0psSnp0Y2JtbHRjRzl5ZENCUVlYbHRaVzUwUVdkbGJuUlVjbUZ1YzJabGNsTjBiM0psSUdaeWIyMGdKeTR2Y0dGNWJXVnVkQzFoWjJWdWRDMTBjbUZ1YzJabGNpMXpkRzl5WlNjN1hHNXBiWEJ2Y25RZ1ZISmhibk5oWTNScGIyNUlhWE4wYjNKNVUzUnZjbVVnWm5KdmJTQW5MaTkwY21GdWMyRmpkR2x2Ymkxb2FYTjBiM0o1TFhOMGIzSmxKenRjYm1sdGNHOXlkQ0JXWlhKcFptbGpZWFJwYjI1VGRHOXlaU0JtY205dElDY3VMM1psY21sbWFXTmhkR2x2YmkxemRHOXlaU2M3WEc1cGJYQnZjblFnVjJsMGFHUnlZWGRUZEc5eVpTQm1jbTl0SUNjdUwzZHBkR2hrY21GM0xYTjBiM0psSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUTJGemFHbGxjbE4wYjNKbElIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDdJSEp2YjNSZmMzUnZjbVVzSUZkVElIMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWhZMk52ZFc1MFgzQnliMjF3ZEY5a2FXRnNiMmNnUFNCdVpYY2dRV05qYjNWdWRGQnliMjF3ZEVScFlXeHZaMU4wYjNKbEtISnZiM1JmYzNSdmNtVXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRmpZMjkxYm5SZmRISmhibk5tWlhJZ1BTQnVaWGNnUVdOamIzVnVkRlJ5WVc1elptVnlVM1J2Y21Vb2V5QnliMjkwWDNOMGIzSmxMQ0JYVXlCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amNubHdkRzlmWm1saGRGOWpiMjUyWlhKMFpYSWdQU0J1WlhjZ1EzSjVjSFJ2Um1saGRFTnZiblpsY25SbGNsTjBiM0psS0hzZ2NtOXZkRjl6ZEc5eVpTd2dWMU1nZlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdWd2IzTnBkQ0E5SUc1bGR5QkVaWEJ2YzJsMFUzUnZjbVVvZXlCeWIyOTBYM04wYjNKbExDQlhVeUI5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNsOWthV0ZzYjJjZ1BTQnVaWGNnUlhKeWIzSkVhV0ZzYjJjb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjaUE5SUc1bGR5QkZjbkp2Y2xOMGIzSmxLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMlZ1WlhKaGJGOXpkRzl5WlNBOUlHNWxkeUJIWlc1bGNtRnNVM1J2Y21Vb2V5QnliMjkwWDNOMGIzSmxMQ0JYVXlCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cFpuSmhiV1VnUFNCdVpYY2dTV1p5WVcxbFUzUnZjbVVvZXlCeWIyOTBYM04wYjNKbExDQlhVeUI5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Ym5KaGJYQWdQU0J1WlhjZ1QyNVNZVzF3VTNSdmNtVW9leUJ5YjI5MFgzTjBiM0psTENCWFV5QjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWGx0Wlc1MFgyRm5aVzUwSUQwZ2JtVjNJRkJoZVcxbGJuUkJaMlZ1ZEZOMGIzSmxLSHNnY205dmRGOXpkRzl5WlN3Z1YxTWdmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0Y1YldWdWRGOWhaMlZ1ZEY5MGNtRnVjMlpsY2lBOUlHNWxkeUJRWVhsdFpXNTBRV2RsYm5SVWNtRnVjMlpsY2xOMGIzSmxLSHNnY205dmRGOXpkRzl5WlN3Z1YxTWdmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSEpoYm5OaFkzUnBiMjVmYUdsemRHOXllU0E5SUc1bGR5QlVjbUZ1YzJGamRHbHZia2hwYzNSdmNubFRkRzl5WlNoN0lISnZiM1JmYzNSdmNtVXNJRmRUSUgwcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5abGNtbG1hV05oZEdsdmJpQTlJRzVsZHlCV1pYSnBabWxqWVhScGIyNVRkRzl5WlNoN0lISnZiM1JmYzNSdmNtVXNJRmRUSUgwcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kcGRHaGtjbUYzSUQwZ2JtVjNJRmRwZEdoa2NtRjNVM1J2Y21Vb2V5QnliMjkwWDNOMGIzSmxMQ0JYVXlCOUtUdGNiaUFnSUNCOVhHNTlYRzRpWFN3aWJtRnRaWE1pT2xzaWIySnpaWEoyWVdKc1pTSXNJbUZqZEdsdmJpSXNJbWx6UTNKNWNIUnZZM1Z5Y21WdVkza2lMQ0pCWTJOdmRXNTBVSEp2YlhCMFJHbGhiRzluVTNSdmNtVWlMQ0ppYjNWdVpDSXNJbkp2YjNSZmMzUnZjbVVpTENKdVpYaDBYMnh2WTJGMGFXOXVJaXdpWTNWeWNtVnVkRjlzYjJOaGRHbHZiaUlzSW1selgyTnZibVpwY20xbFpDSXNJbXhoYzNSZmJHOWpZWFJwYjI0aUxDSnphRzkxYkdSZmMyaHZkeUlzSW1Oc2FXVnVkQ0lzSW0xdlpIVnNaWE1pTENKaFkyTnZkVzUwYzE5c2FYTjBJaXdpWTJGemFHbGxjaUlzSW1GalkyOTFiblJmZEhKaGJuTm1aWElpTENKb1lYTmZabWxoZEY5aFkyTnZkVzUwSWl3aWMyOXRaU0lzSW5naUxDSnBjMTlqY25sd2RHOGlMQ0pqZFhKeVpXNWplU0lzSW1SdlUzZHBkR05vSWl3aVoyVnVaWEpoYkY5emRHOXlaU0lzSW01dmJsOWpjbmx3ZEc5ZllXTmpiM1Z1ZEhNaUxDSm1hV3gwWlhJaUxDSnNiMmRwYm1sa0lpd2liV0Z3SWl3aWRtRnNkV1VpTENKemQybDBZMmhCWTJOdmRXNTBJaXdpYzJWMFNYTkVaWEJ2YzJsMElpd2lZMjl0Ylc5dUlpd2ljbTkxZEdWVWJ5SXNJbU52Ym5SaGFXNWxjbk1pTENKa1pYQnZjMmwwSWl3aWNHRjViV1Z1ZEY5aFoyVnVkQ0lzSW5CaGVXMWxiblJmWVdkbGJuUmZkSEpoYm5ObVpYSWlMQ0ozYVhSb1pISmhkeUlzSW0xaGNGOWhZM1JwYjI0aUxDSm5aWFJRY205d1pYSjBlVlpoYkhWbElpd2lSWEp5YjNKVGRHOXlaU0lzSW1WeWNtOXlJaXdpYjI1RGJHbGphMEoxZEhSdmJpSXNJbWx6WDNOb2IzZGZablZzYkY5d1lXZGxJaXdpWlhKeWIzSmZiMkpxWldOMElpd2lZMjlrWlNJc0ltMWxjM05oWjJVaUxDSjBaWE4wSWl3aVptbGxiR1J6SWl3aVpHVjBZV2xzY3lJc0ltbHpYMkZ6YTE5MWExOW1kVzVrYzE5d2NtOTBaV04wYVc5dUlpd2lhWE5mYzJWc1psOWxlR05zZFhOcGIyNWZiV0Y0WDNSMWNtNXZkbVZ5WDNObGRDSXNJbWx6WDJGemExOWhkWFJvWlc1MGFXTmhkR2x2YmlJc0ltbHpYMkZ6YTE5bWFXNWhibU5wWVd4ZmNtbHphMTloY0hCeWIzWmhiQ0lzSW5ObGRFVnljbTl5VFdWemMyRm5aU0lzSW5ObGRFbHpRWE5yVld0R2RXNWtjMUJ5YjNSbFkzUnBiMjRpTENKelpYUkpjMU5sYkdaRmVHTnNkWE5wYjI1TllYaFVkWEp1YjNabGNsTmxkQ0lzSW5ObGRFbHpRWE5yUVhWMGFHVnVkR2xqWVhScGIyNGlMQ0p6WlhSSmMwRnphMFpwYm1GdVkybGhiRkpwYzJ0QmNIQnliM1poYkNJc0lsSmxZV04wSWl3aVkyOXRjSFYwWldRaUxDSm1iM0p0WVhSTmIyNWxlU0lzSW1selJXMXdkSGxQWW1wbFkzUWlMQ0puWlhSRGRYSnlaVzVqYVdWeklpd2laMlYwUTNWeWNtVnVZM2xFYVhOd2JHRjVRMjlrWlNJc0ltZGxkRVJsWTJsdFlXeFFiR0ZqWlhNaUxDSm5aWFJEUmtSQlkyTnZkVzUwUkdsemNHeGhlU0lzSW1kbGRFTkdSRUZqWTI5MWJuUWlMQ0oyWVd4cFpFNTFiV0psY2lJc0lrTkdSRjlRVEVGVVJrOVNUVk1pTENKc2IyTmhiR2w2WlNJc0lreHZZMkZzYVhwbElpd2lRMjl1YzNSaGJuUnpJaXdpYUdGelZISmhibk5tWlhKT2IzUkJiR3h2ZDJWa1RHOW5hVzVwWkNJc0luTjBZWEowYzFkcGRHZ2lMQ0puWlhSVFpXeGxZM1JsWkVWeWNtOXlJaXdpYzJWc1pXTjBaV1JmZG1Gc2RXVWlMQ0pwYzE5bWNtOXRYMkZqWTI5MWJuUWlMQ0pCWTJOdmRXNTBWSEpoYm5ObVpYSlRkRzl5WlNJc0lsZFRJaXdpY21WeGRXVnpkRlJ5WVc1elptVnlRbVYwZDJWbGJrRmpZMjkxYm5Seklpd2lZVzF2ZFc1MElpd2ljMlYwVEc5aFpHbHVaeUlzSW1selgyeHZaMmRsWkY5cGJpSXNJbkpsYzNCdmJuTmxUWFExVEc5bmFXNU1hWE4wSWl3aWNtVnpjRzl1YzJWVWNtRmthVzVuVUd4aGRHWnZjbTFCWTJOdmRXNTBjMHhwYzNRaUxDSnpaWFJCWTJOdmRXNTBVM1JoZEhWeklpd2ljMlYwUW1Gc1lXNWpaVTkwYUdWeVFXTmpiM1Z1ZEhNaUxDSnBjMTl0ZEY5MGNtRnVjMlpsY2lJc0luTmxiR1ZqZEdWa1gyWnliMjBpTENKcGMxOXRkQ0lzSW5ObGJHVmpkR1ZrWDNSdklpd2ljMlYwU1hOTlZEVlVjbUZ1YzJabGNrbHVVSEp2WjNKbGMzTWlMQ0poZFhSb2IzSnBlbVZrSWl3aWRISmhibk5tWlhKQ1pYUjNaV1Z1UVdOamIzVnVkSE1pTENKMGNtRnVjMlpsY2w5aVpYUjNaV1Z1WDJGalkyOTFiblJ6SWl3aVoyVjBRV05qYjNWdWRGTjBZWFIxY3lJc0ltRmpZMjkxYm5SZmMzUmhkSFZ6WDNKbGMzQnZibk5sSWl3aVoyVjBYMkZqWTI5MWJuUmZjM1JoZEhWeklpd2ljMlYwVW1WalpXbHdkRlJ5WVc1elptVnlJaXdpWVdOamIzVnVkSE1pTENKbWIzSkZZV05vSWl3aVlXTmpiM1Z1ZENJc0luTmxkRUpoYkdGdVkyVkNlVXh2WjJsdVNXUWlMQ0ppWVd4aGJtTmxJaXdpYzJWMFFtRnNZVzVqWlZObGJHVmpkR1ZrUm5KdmJTSXNJbk5sZEVKaGJHRnVZMlZUWld4bFkzUmxaRlJ2SWl3aVlXTmpiM1Z1ZEY5MGVYQmxJaXdpVFZRMUlpd2lVSEp2YldselpTSXNJbUZzYkNJc0ltMTBOVXh2WjJsdVRHbHpkQ0lzSW1KaGJHRnVZMlZCYkd3aUxDSjBhR1Z1SWl3aWJYUTFYMnh2WjJsdVgyeHBjM1JmY21WemNHOXVjMlVpTENKaVlXeGhibU5sWDNKbGMzQnZibk5sSWl3aVJGaFVVa0ZFUlNJc0luUnlZV1JwYm1kUWJHRjBabTl5YlVGalkyOTFiblJ6VEdsemRDSXNJbVI0ZEhKaFpHVmZiRzluYVc1ZmJHbHpkRjl5WlhOd2IyNXpaU0lzSW5ObGRFRmpZMjkxYm5SVWNtRnVjMlpsY2tGdGIzVnVkQ0lzSW5ObGRFbHpWSEpoYm5ObVpYSkRiMjVtYVhKdElpd2lhR0Z6WDIxaGJIUmhhVzUyWlhOMFgyRmpZMjkxYm5RaUxDSnNZVzVrYVc1blgyTnZiWEJoYm5sZmMyaHZjblJqYjJSbElpd2ljbVZ6YVdSbGJtTmxJaXdpWm1sdVpDSXNJbUZqWXlJc0ltOXVUVzkxYm5SRGIyMXRiMjRpTENKaFkzUnBkbVZmWVdOamIzVnVkSE1pTENKdmJsSmxiVzkxYm5RaUxDSnZiazF2ZFc1MFFXTmpiM1Z1ZEZSeVlXNXpabVZ5SWl3aWQyRnBkQ0lzSW1oaGMxOTFjR1JoZEdWa1gyRmpZMjkxYm5SZlltRnNZVzVqWlNJc0ltaGhjMTl1YjE5aFkyTnZkVzUwYzE5aVlXeGhibU5sSWl3aVQySnFaV04wSWl3aWEyVjVjeUlzSW1selgzWnBjblIxWVd3aUxDSnpaWFJJWVhOT2IwRmpZMjkxYm5SelFtRnNZVzVqWlNJc0ltTmhia1J2UVdOamIzVnVkRlJ5WVc1elptVnlJaXdpYzI5eWRFRmpZMjkxYm5SelZISmhibk5tWlhJaUxDSnpaWFJVY21GdWMyWmxja1psWlNJc0luTmxkRTFwYm1sdGRXMUdaV1VpTENKelpYUlVjbUZ1YzJabGNreHBiV2wwSWl3aWJHVnVaM1JvSWl3aVkyWmtYM1J5WVc1elptVnlYM1J2WDJ4dloybHVYMmxrSWl3aWMyVnpjMmx2YmxOMGIzSmhaMlVpTENKblpYUkpkR1Z0SWl3aWNtVnRiM1psU1hSbGJTSXNJbTlpYWw5MllXeDFaWE1pTENKelpYUlRaV3hsWTNSbFpGUnZJaXdpWTJGdVgzUnlZVzV6Wm1WeUlpd2ljMlYwU0dGelRtOUJZMk52ZFc1MElpd2lhR0Z6WDI1dlgyRmpZMjkxYm5RaUxDSjBjbUZ1YzJabGNsOW1aV1VpTENKT2RXMWlaWElpTENKa1pXTnBiV0ZzY3lJc0ltMXBibWx0ZFcxZlptVmxJaXdpVFdGMGFDSXNJbkJ2ZHlJc0luUnZSbWw0WldRaUxDSnBjMTlrZUhSeVlXUmxYM1J5WVc1elptVnlJaXdpYVhOZlpIaDBjbUZrWlNJc0lteHBiV2wwYzE5clpYa2lMQ0owY21GdWMyWmxjbDlzYVcxcGRDSXNJbVJsWTJsdFlXeGZjR3hoWTJWeklpd2liV0Y0SWl3aWJXbHVJaXdpY21WemNHOXVjMlZmWVdOamIzVnVkSE1pTENKemRHOXlZV2RsSWl3aWJYUTFYMnh2WjJsdVgyeHBjM1FpTENKMGNtRmthVzVuWDNCc1lYUm1iM0p0WDJGalkyOTFiblJ6SWl3aVpIaDBjbUZrWlY5aFkyTnZkVzUwYzE5c2FYTjBJaXdpUVhKeVlYa2lMQ0pwYzBGeWNtRjVJaXdpWm05MWJtUmZZV05qYjNWdWRDSXNJbXh2WjJsdUlpd2lkVzVrWldacGJtVmtJaXdpWVdOamIzVnVkRjlwWkNJc0luTnZjblFpTENKaElpd2lZaUlzSW1GZmFYTmZiWFFpTENKaVgybHpYMjEwSWl3aVlWOXBjMTlqY25sd2RHOGlMQ0ppWDJselgyTnllWEIwYnlJc0ltRmZhWE5mWm1saGRDSXNJbUpmYVhOZlptbGhkQ0lzSW0xaGNtdGxkRjkwZVhCbElpd2ljM1ZpWDJGalkyOTFiblJmZEhsd1pTSXNJbUZ5Y2w5aFkyTnZkVzUwY3lJc0ltTm1aRjl3YkdGMFptOXliWE1pTENKdGREVWlMQ0p1WVcxbElpd2lhV052YmlJc0ltUjRkSEpoWkdVaUxDSnBjMTlqWm1RaUxDSnBibU5zZFdSbGN5SXNJbU5tWkY5MFpYaDBYMlJwYzNCc1lYa2lMQ0pqWm1SZmFXTnZibDlrYVhOd2JHRjVJaXdpY0d4aGRHWnZjbTBpTENKcGMxOWxkU0lzSW1GalkyOTFiblJmZEdWNGRGOWthWE53YkdGNUlpd2lkRzlWY0hCbGNrTmhjMlVpTENKMFpYaDBJaXdpY0d4aGRHWnZjbTFmYVdOdmJpSXNJbk5sZEZObGJHVmpkR1ZrUm5KdmJTSXNJbkIxYzJnaUxDSnpaWFJCWTJOdmRXNTBjeUlzSW1selgzUnlZVzV6Wm1WeVgyTnZibVpwY20waUxDSmhZMk52ZFc1MFgzUnlZVzV6Wm1WeVgyRnRiM1Z1ZENJc0ltbHpYM1J5WVc1elptVnlYM04xWTJObGMzTm1kV3dpTENKcGMxOXRkRFZmZEhKaGJuTm1aWEpmYVc1ZmNISnZaM0psYzNNaUxDSnlaV05sYVhCMElpd2lZVzF2ZFc1MFgzUnlZVzV6Wm1WeWNtVmtJaXdpZEdGeVoyVjBJaXdpYjI1RGFHRnVaMlZVY21GdWMyWmxjbFJ2SWl3aVptbHljM1JmYm05dVgyTm1aQ0lzSW1acGNuTjBYMlpwWVhRaUxDSmpjbmx3ZEc5ZlptbGhkRjlqYjI1MlpYSjBaWElpTENKelpXeGxZM1JsWkY5bWNtOXRYMk4xY25KbGJtTjVJaXdpYzJWc1pXTjBaV1JmZEc5ZlkzVnljbVZ1WTNraUxDSnpaWFJEYjI1MlpYSjBaWEpHY205dFFXMXZkVzUwSWl3aWRtRnNhV1JoZEdWVWNtRnVjMlpsY2taeWIyMUJiVzkxYm5RaUxDSnZia05vWVc1blpVTnZiblpsY25SbGNrWnliMjFCYlc5MWJuUWlMQ0p5WlhObGRFTnZiblpsY25SbGNpSXNJbk5sZEVselZHbHRaWEpXYVhOcFlteGxJaXdpY0dWeVkyVnVkR0ZuWlZObGJHVmpkRzl5VTJWc1pXTjBhVzl1VTNSaGRIVnpJaXdpWTI5dWRtVnlkR1Z5WDJaeWIyMWZZVzF2ZFc1MElpd2ljMlYwUTI5dWRtVnlkR1Z5Um5KdmJVVnljbTl5SWl3aWRIbHdaU0lzSW1selgyOXJJaXdpWTI5dWRtVnlkR1Z5WDNSdlgyRnRiM1Z1ZENJc0luTmxkRU52Ym5abGNuUmxjbFJ2UlhKeWIzSWlMQ0pEY25sd2RHOUdhV0YwUTI5dWRtVnlkR1Z5VTNSdmNtVWlMQ0pqYjI1MlpYSjBaWEpmWm5KdmJWOWxjbkp2Y2lJc0ltTnZiblpsY25SbGNsOTBiMTlsY25KdmNpSXNJbWx6WDNScGJXVnlYM1pwYzJsaWJHVWlMQ0ptY205dFgyTjFjbkpsYm1ONUlpd2lkRzlmWTNWeWNtVnVZM2tpTENKelpXNWtJaXdpWlhoamFHRnVaMlZmY21GMFpYTWlMQ0ppWVhObFgyTjFjbkpsYm1ONUlpd2ljbUYwWlhNaUxDSmhZM1JwZG1WZlkyOXVkR0ZwYm1WeUlpd2lZMjl1ZEdGcGJtVnlJaXdpZG1Gc2FXUmhkR1ZYYVhSb1pISmhkMFp5YjIxQmJXOTFiblFpTENKMllXeHBaR0YwWlZSeVlXNXpabVZ5Vkc5QmJXOTFiblFpTENKMllXeHBaR0YwWlZkcGRHaGtjbUYzVkc5QmJXOTFiblFpTENKeVpYTmxkRlJwYldWeUlpd2lkbUZzYVdSaGRHVkdjbTl0UVcxdmRXNTBJaXdpWTJGc1kzVnNZWFJsVUdWeVkyVnVkR0ZuWlNJc0luTmxkRU52Ym5abGNuUmxjbFJ2UVcxdmRXNTBJaXdpWjJWMFJYaGphR0Z1WjJWU1lYUmxJaXdpY21GMFpTSXNJblpoYkdsa1lYUmxWRzlCYlc5MWJuUWlMQ0pFWlhCdmMybDBVM1J2Y21VaUxDSnpaWFJQYmxKbGJXOTFiblFpTENKcFpuSmhiV1VpTENKamFHVmphMGxtY21GdFpVeHZZV1JsWkNJc0ltTnNaV0Z5VkdsdFpXOTFkRU5oYzJocFpYSlZjbXdpTENKcGMxOXpaWE56YVc5dVgzUnBiV1Z2ZFhRaUxDSnpaWFJEYjI1MFlXbHVaWEpJWldsbmFIUWlMQ0p6WlhSSlpuSmhiV1ZWY213aUxDSnpaWFJUWlhOemFXOXVWR2x0Wlc5MWRDSXNJbk5sZEZScGJXVnZkWFJEWVhOb2FXVnlWWEpzSWl3aVkzVnljbVZ1ZEY5amIyNTBZV2x1WlhJaUxDSnZiazF2ZFc1MFJHVndiM05wZENJc0luWmxjbWxtYVdOaGRHbHZibDlqYjJSbElpd2ljbVZ6Y0c5dWMyVmZZMkZ6YUdsbGNpSXNJbWhoYm1Sc1pVTmhjMmhwWlhKRmNuSnZjaUlzSW1selgyRjFkR2hsYm5ScFkyRjBhVzl1WDI1bFpXUmxaQ0lzSW1selgzUnVZMTl1WldWa1pXUWlMQ0pwYzE5bWFXNWhibU5wWVd4ZllXTmpiM1Z1ZENJc0ltbHpYMlpwYm1GdVkybGhiRjlwYm1admNtMWhkR2x2Ymw5cGJtTnZiWEJzWlhSbElpd2lhWE5mZEhKaFpHbHVaMTlsZUhCbGNtbGxibU5sWDJsdVkyOXRjR3hsZEdVaUxDSmhZMk52ZFc1MFgzTjBZWFIxY3lJc0ltbHpYMlJsY0c5emFYUmZiRzlqYXlJc0luTjBZWFIxY3lJc0ltNWxaV1JmWVhWMGFHVnVkR2xqWVhScGIyNGlMQ0p1WldWa1gyWnBibUZ1WTJsaGJGOWhjM05sYzNOdFpXNTBJaXdpYm1WbFpGOTBibU1pTENKcGRHVnRJaXdpZFd0blkxOW1kVzVrYzE5d2NtOTBaV04wYVc5dUlpd2lkRzVqWDJGd2NISnZkbUZzSWl3aWNtVnpjRzl1YzJVaUxDSnpaWFJOWlhOellXZGxJaXdpYkc5allYUnBiMjRpTENKeVpXeHZZV1FpTENKRmNuSnZja1JwWVd4dloxTjBiM0psSWl3aVpYSnliM0pmYldWemMyRm5aU0lzSW5ObGRGTm9iM1ZzWkZOb2IzY2lMQ0pRY205d1ZIbHdaWE1pTENKSlkyOXVJaXdpUTI5MWJuUmxjaUlzSWtOaGMyaHBaWEpPYjNScFptbGpZWFJwYjI1eklpd2ljREp3WDI1dmRHbG1hV05oZEdsdmJsOWpiM1Z1ZENJc0luQnliM0JVZVhCbGN5SXNJbTUxYldKbGNpSXNJblJsYlhCc1lYUmxJaXdpYzNSeWFXNW5JaXdpWTI5dWRHVnVkQ0lzSW5SdlgzSmxjR3hoWTJVaUxDSnlaWEJzWVdObElpd2ljeUlzSW1sdVpHVjRJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJblJoWjE5dVlXMWxJaXdpWVhSMGNtbGlkWFJsY3lJc0ltVnNJaXdpWkc5amRXMWxiblFpTENKaGRIUnlJaXdpZEdWNGRFTnZiblJsYm5RaUxDSm9kRzFzSWl3aWMyVjBRWFIwY21saWRYUmxJaXdpYzNSaGRHbGpYMmhoYzJnaUxDSm5aWFJUZEdGMGFXTklZWE5vSWl3aWNYVmxjbmxUWld4bFkzUnZjaUlzSW1kbGRFRjBkSEpwWW5WMFpTSXNJbk53YkdsMElpd2lVSEp2YldselpVTnNZWE56SWl3aWNISnZiV2x6WlNJc0luSmxjMjlzZG1VaUxDSnlaV3BsWTNRaUxDSmpiM0I1Vkc5RGJHbHdZbTloY21RaUxDSjBaWGgwUm1sbGJHUWlMQ0pwYm01bGNsUmxlSFFpTENKaWIyUjVJaXdpWVhCd1pXNWtRMmhwYkdRaUxDSnpaV3hsWTNRaUxDSmxlR1ZqUTI5dGJXRnVaQ0lzSW5KbGJXOTJaU0lzSW1WMVgyTnZkVzUwY21sbGN5SXNJbWx6UlhWRGIzVnVkSEo1SWl3aVkyOTFiblJ5ZVNJc0ltZGxkRUZqWTI5MWJuUlVaWGgwSWl3aVlXTmpiM1Z1ZEY5MFpYaDBJaXdpUlhKeWIzSnpJaXdpWlhKeWIzSnpJaXdpWVhSMGNtbGlkWFJsSWl3aWFHRnpJaXdpYVc1a1pYaFBaaUlzSW5CeWIzUnZkSGx3WlNJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aVkyRnNiQ0lzSW1kbGRGQnlaVUoxYVd4a1JGWlNjeUlzSWtWeWNtOXlJaXdpVm1Gc2FXUmhkRzl5SWl3aWFXNXdkWFFpTENKeWRXeGxjeUlzSW5OMGIzSmxJaXdpWlhKeWIzSmZZMjkxYm5RaUxDSnlkV3hsSWl3aWIzQjBhVzl1Y3lJc0ltNWhiV1V4SWl3aWJtRnRaVElpTENKaFpHUWlMQ0p5ZFd4bFQySnFaV04wSWl3aVoyVjBVblZzWlU5aWFtVmpkQ0lzSW5aaGJHbGtZWFJ2Y2lJc0ltTnZibVJwZEdsdmJpSXNJbWx6WDNaaGJHbGtJaXdpWVdSa1JtRnBiSFZ5WlNJc0ltTm9aV05ySWl3aWFYTmZjblZzWlY5emRISnBibWNpTENKeWRXeGxYMjlpYW1WamRDSXNJbVoxYm1NaUxDSmtaV1poZFd4MElpd2lhVzUwWlhKalpYQjBJaXdpY21WaFkzUnBiMjRpTENKMGIwcFRJaXdpZDJobGJpSXNJbWx6VUhKdlpIVmpkR2x2YmlJc0lrSmhjMlZUZEc5eVpTSXNJbkJ5WlZOM2FYUmphRUZqWTI5MWJuUkVhWE53YjNObGNpSXNJbkJ5WlY5emQybDBZMmhmWVdOamIzVnVkRjlzYVhOMFpXNWxjaUlzSW5OM2FYUmphRUZqWTI5MWJuUkVhWE53YjNObGNpSXNJbk4zYVhSamFGOWhZMk52ZFc1MFgyeHBjM1JsYm1WeUlpd2liRzluYjNWMFJHbHpjRzl6WlhJaUxDSnNiMmR2ZFhSZmJHbHpkR1Z1WlhJaUxDSmpiR2xsYm5SSmJtbDBSR2x6Y0c5elpYSWlMQ0pqYkdsbGJuUmZhVzVwZEY5c2FYTjBaVzVsY2lJc0ltNWxkSGR2Y210VGRHRjBkWE5EYUdGdVoyVkVhWE53YjNObGNpSXNJbTVsZEhkdmNtdGZjM1JoZEhWelgyTm9ZVzVuWlY5c2FYTjBaVzVsY2lJc0luUm9aVzFsUTJoaGJtZGxSR2x6Y0c5elpYSWlMQ0owYUdWdFpWOWphR0Z1WjJWZmJHbHpkR1Z1WlhJaUxDSnlaV0ZzUVdOamIzVnVkRk5wWjI1MWNFVnVaR1ZrUkdsemNHOXpaWElpTENKeVpXRnNYMkZqWTI5MWJuUmZjMmxuYm5Wd1gyVnVaR1ZrWDJ4cGMzUmxibVZ5SWl3aWJHOWpZV3hmYzNSdmNtRm5aVjl3Y205d1pYSjBhV1Z6SWl3aWMyVnpjMmx2Ymw5emRHOXlZV2RsWDNCeWIzQmxjblJwWlhNaUxDSjJZV3hwWkdGMGFXOXVYM0oxYkdWeklpd2ljM1J2Y21WZmJtRnRaU0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWlc1MWJXVnlZV0pzWlNJc0luZHlhWFJoWW14bElpd2lhR0Z6WDJ4dlkyRnNYMjl5WDNObGMzTnBiMjVmYzNSdmNtRm5aU0lzSW5ObGRGWmhiR2xrWVhScGIyNVNkV3hsY3lJc0luTmxkSFZ3VW1WaFkzUnBiMjVHYjNKTWIyTmhiRk4wYjNKaFoyVWlMQ0p6WlhSMWNGSmxZV04wYVc5dVJtOXlVMlZ6YzJsdmJsTjBiM0poWjJVaUxDSnlaWFJ5YVdWMlpVWnliMjFUZEc5eVlXZGxJaXdpY0hKdmNHVnlkR2xsY3lJc0luTnVZWEJ6YUc5MElpd2ljbVZrZFdObElpd2ljbVZ6ZFd4MElpd2ljQ0lzSW1GemMybG5iaUlzSW1raUxDSnpZWFpsVkc5VGRHOXlZV2RsSWl3aVUxUlBVa0ZIUlZNaUxDSk1UME5CVEY5VFZFOVNRVWRGSWl3aVUwVlRVMGxQVGw5VFZFOVNRVWRGSWl3aVNsTlBUaUlzSW5OMGNtbHVaMmxtZVNJc0ltZGxkRk51WVhCemFHOTBJaXdpYTJWNUlpd2liRzlqWVd4VGRHOXlZV2RsSWl3aWMyVjBTWFJsYlNJc0lteHZZMkZzWDNOMGIzSmhaMlZmYzI1aGNITm9iM1FpTENKd1lYSnpaU0lzSW5ObGMzTnBiMjVmYzNSdmNtRm5aVjl6Ym1Gd2MyaHZkQ0lzSW1zaUxDSndjbTl3WlhKMGVVNWhiV1VpTENKdFpYTnpZV2RsY3lJc0ltbHpYMlJwWm1abGNtVnVkQ0lzSW5aaGJHbGtZWFJwYjI1ZlpYSnliM0p6SWl3aVkyOXVZMkYwSWl3aVlXUmtVblZzWlNJc0luQnliM0JsY25SNUlpd2lZMmhoYm1kbElpd2lkbUZzYVdSaGRHVlFjbTl3WlhKMGVTSXNJbTVsZDFaaGJIVmxJaXdpZEhKcFoyZGxjaUlzSW1sdWNIVjBjeUlzSW1selVHRnpjMlZrSWl3aWMyVjBWbUZzYVdSaGRHbHZia1Z5Y205eVRXVnpjMkZuWlhNaUxDSm5aWFFpTENKc2FYTjBaVzVsY2lJc0luTjNhWFJqYUY5aWNtOWhaR05oYzNRaUxDSnpkMmwwWTJoRmJtUlRhV2R1WVd3aUxDSnZibE4zYVhSamFFRmpZMjkxYm5RaUxDSmpiMjV6YjJ4bElpd2ljSEpsWDNOM2FYUmphRjlpY205aFpHTmhjM1FpTENKelpYUlFjbVZUZDJsMFkyaEJZMk52ZFc1MElpd2liMjVRY21WVGQybDBZMmhCWTJOdmRXNTBJaXdpYUdGelgyeHZaMmRsWkY5dmRYUWlMQ0p6WlhSTWIyZHZkWFFpTENKdmJreHZaMjkxZENJc0ltbHVhWFJwWVd4cGVtVmtYMkp5YjJGa1kyRnpkQ0lzSW5ObGRFbHVhWFJwWVd4cGVtVmtJaXdpYjI1RGJHbGxiblJKYm1sMElpd2lhWE5mYm1WMGQyOXlhMTl2Ym14cGJtVWlMQ0pwYzE5dmJteHBibVVpTENKMWFTSXNJbWx6WDJSaGNtdGZiVzlrWlY5dmJpSXNJbWhoYzE5eVpXRnNYMkZqWTI5MWJuUmZjMmxuYm5Wd1gyVnVaR1ZrSWl3aWMyVjBVbVZoYkVGalkyOTFiblJUYVdkdWRYQkZibVFpTENKdmJsSmxZV3hCWTJOdmRXNTBVMmxuYm5Wd1JXNWtJaXdpWkdsemNHOXpaVkJ5WlZOM2FYUmphRUZqWTI5MWJuUWlMQ0prYVhOd2IzTmxVM2RwZEdOb1FXTmpiM1Z1ZENJc0ltUnBjM0J2YzJWTWIyZHZkWFFpTENKa2FYTndiM05sUTJ4cFpXNTBTVzVwZENJc0ltUnBjM0J2YzJWT1pYUjNiM0pyVTNSaGRIVnpRMmhoYm1kbElpd2laR2x6Y0c5elpWUm9aVzFsUTJoaGJtZGxJaXdpWkdsemNHOXpaVkpsWVd4QlkyTnZkVzUwVTJsbmJuVndSVzVrSWl3aWNtVmhZM1JwYjI1eklpd2lZV04wSWl3aWNHRnlkR2xoYkY5bVpYUmphRjkwYVcxbElpd2labkpsWlhwbElpd2lVM2x0WW05c0lpd2ljbTkxZEdWeklpd2lSMlZ1WlhKaGJGTjBiM0psSWl3aWFYTmZjRzl3ZFd4aGRHbHVaMTkyWVd4MVpYTWlMQ0p6WlhSSVlYTlRaWFJEZFhKeVpXNWplU0lzSW1GMGRHRmphRU5oYzJocFpYSlViMDFsYm5VaUxDSm9ZWE5mYzJWMFgyTjFjbkpsYm1ONUlpd2lZMmhoYm1kbFUyVjBRM1Z5Y21WdVkzbE5iMlJoYkZScGRHeGxJaXdpYzNkcGRHTm9aV1FpTENKcGJtbDBJaXdpYVhOZmNESndYM1pwYzJsaWJHVWlMQ0poWTJOdmRXNTBYMnhwYzNRaUxDSnBjMTl3TW5CZmNtVnpkSEpwWTNSbFpDSXNJbkF5Y0Y5aFpIWmxjblJwYzJWeVgyVnljbTl5SWl3aWFHRnpYM1Z6WkY5amRYSnlaVzVqZVNJc0luUnBkR3hsSWl3aWFHRnpYM1Z6WlhKZlptbGhkRjlqZFhKeVpXNWplU0lzSW5Ob2IzZGZjREp3WDJsdVgyTmhjMmhwWlhKZlpHVm1ZWFZzZENJc0ltMWxiblVpTENKaGRIUmhZMmdpTENKcFpDSXNJbXhwYm10ZmRHOGlMQ0p2YmtOc2FXTnJJaXdpZEc5bloyeGxVMlYwUTNWeWNtVnVZM2xOYjJSaGJDSXNJbXh2WjJsdVgyOXViSGtpTENKMWNHUmhkR1VpTENKb1lYTmZZV04wYVhabFgzSmxZV3hmWVdOamIzVnVkQ0lzSW5Ob2IzVnNaRjl6WlhSZlkzVnljbVZ1WTNsZmJXOWtZV3hmZEdsMGJHVmZZMmhoYm1kbElpd2lZV05qYjNWdWRGOXdjbTl0Y0hSZlpHbGhiRzluSWl3aWMyVjBTWE5EWVhOb2FXVnlSR1ZtWVhWc2RDSXNJbkpsYzJWMFNYTkRiMjVtYVhKdFpXUWlMQ0poYkd4ZmNHRjViV1Z1ZEY5aFoyVnVkRjlzYVhOMElpd2ljR0Y1YldWdWRHRm5aVzUwWDJ4cGMzUWlMQ0pzYVhOMElpd2laMlYwUVd4c1VHRjViV1Z1ZEVGblpXNTBUR2x6ZENJc0ltRm5aVzUwWDJ4cGMzUWlMQ0p6WlhSQmJHeFFZWGx0Wlc1MFFXZGxiblJNYVhOMElpd2ljR1Z5WTJWdWRHRm5aU0lzSW1selJtbHVhWFJsSWl3aWMyaHZkV3hrWDNCbGNtTmxiblJoWjJWZmNtVnpaWFFpTENKcGMxOWtaWEJ2YzJsMElpd2ljMmh2ZFd4a1gzTm9iM2RmWVd4c1gyRjJZV2xzWVdKc1pWOWpkWEp5Wlc1amFXVnpJaXdpYVhOZlkyRnphR2xsY2w5a1pXWmhkV3gwSWl3aVpHVndiM05wZEY5MFlYSm5aWFFpTENKaFkyTnZkVzUwVTNkcGRHTm9aWEpNYVhOMFpXNWxjaUlzSW1kbGRFRmtkbVZ5ZEdsNlpYSkZjbkp2Y2lJc0ltTm9aV05yVURKd1UzUmhkSFZ6SWl3aVkyaGxZMnN4TUd0TWFXMXBkQ0lzSW5KbGMyVjBUR0Z6ZEV4dlkyRjBhVzl1SWl3aWMyVjBTWE5YYVhSb1pISmhkME52Ym1acGNtMWxaQ0lzSW5BeWNFRmtkbVZ5ZEdselpYSkpibVp2SWl3aVlXUjJaWEowYVhObGNsOXBibVp2SWl3aWMyVjBVREp3UVdSMlpYSjBhWE5sY2tWeWNtOXlJaXdpWVdSMlpYSjBhWE5sY2w5bGNuSnZjaUlzSW5ObGRFbHpVREp3Vm1semFXSnNaU0lzSW5Ob2IzVnNaRjl5WlcxdmRXNTBJaXdpYjI1eVlXMXdJaXdpZEhKaGJuTmhZM1JwYjI1ZmFHbHpkRzl5ZVNJc0luTmxkRkJoZVcxbGJuUkJaMlZ1ZEV4cGMzUWlMQ0ptYVd4MFpYSlFZWGx0Wlc1MFFXZGxiblJNYVhOMElpd2lhWE5mY0dGNWJXVnVkRjloWjJWdWRDSXNJbU5vWldOclNYTlFZWGx0Wlc1MFFXZGxiblFpTENKcGMxOXZibkpoYlhCZmRHRmlYM1pwYzJsaWJHVWlMQ0ozYVc1a2IzY2lMQ0p3WVhSb2JtRnRaU0lzSW1WdVpITlhhWFJvSWl3aVkyRnphR2xsY2w5dmJuSmhiWEFpTENKallYTm9hV1Z5WDJSbGNHOXphWFFpTENKcGMxOWpjbmx3ZEc5ZmRISmhibk5oWTNScGIyNXpYM1pwYzJsaWJHVWlMQ0pqWVhOb2FXVnlYMk55ZVhCMGIxOTBjbUZ1YzJGamRHbHZibk1pTENKelpYUkpjME55ZVhCMGIxUnlZVzV6WVdOMGFXOXVjMVpwYzJsaWJHVWlMQ0p2YmsxdmRXNTBJaXdpWTJGemFHbGxjbDl5YjNWMFpWOTBZV0pmYVc1a1pYZ2lMQ0p1YjNScFptbGpZWFJwYjI1ZlkyOTFiblFpTENKallYTm9hV1Z5WDNBeWNDSXNJbk4wWVhSMWMxOXVZVzFsSWl3aVkyRnphR2xsY2w5MllXeHBaR0YwYVc5dUlpd2lkbUZzYVdSaGRHbHZiaUlzSW1selgyeHZZV1JwYm1jaUxDSjJaWEpwWm1sallYUnBiMjRpTENKamJHVmhjbFpsY21sbWFXTmhkR2x2YmlJc0ltTnNaV0Z5U1daeVlXMWxJaXdpU1daeVlXMWxVM1J2Y21VaUxDSnZia2xtY21GdFpVeHZZV1JsWkNJc0ltbHpYM05sYzNOcGIyNWZkR2x0WlY5dmRYUWlMQ0p5WlcxdmRtVlBia2xtY21GdFpVeHZZV1JsWkNJc0ltVWlMQ0p2Y21sbmFXNGlMQ0pwYzE5dGIySnBiR1VpTENKcGJtNWxja2hsYVdkb2RDSXNJbUpwYm1RaUxDSmhaR1JGZG1WdWRFeHBjM1JsYm1WeUlpd2ljbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaUlzSW5ScGJXVnZkWFJmYzJWemMybHZiaUlzSW1Oc1pXRnlWR2x0Wlc5MWRDSXNJbk5sZEZScGJXVnZkWFFpTENKMWNtd2lMQ0pwWm5KaGJXVmZkWEpzSWl3aWMyVjBWbVZ5YVdacFkyRjBhVzl1UTI5a1pTSXNJbWhsYVdkb2RDSXNJbWxtY21GdFpWOW9aV2xuYUhRaUxDSmpjbVZoZEdWQ1lXNTRZVkJ5YjNacFpHVnlJaXdpWkdGeWF5SXNJbXhwWjJoMElpd2laMlYwUkdWelkzSnBjSFJwYjI0aUxDSm5aWFJCYkd4dmQyVmtVbVZ6YVdSbGJtTnBaWE1pTENKblpYUlFZWGx0Wlc1MFNXTnZibk1pTENKblpYUlRZM0pwY0hSRVpYQmxibVJsYm1OcFpYTWlMQ0puWlhSRVpXWmhkV3gwUm5KdmJVTjFjbkpsYm1ONUlpd2laMlYwUm5KdmJVTjFjbkpsYm1OcFpYTWlMQ0puWlhSVWIwTjFjbkpsYm1OcFpYTWlMQ0puWlhSWGFXUm5aWFJJZEcxc0lpd2ljMlZ5ZG1salpWUnZhMlZ1SWl3aWMyVnlkbWxqWlY5MGIydGxiaUlzSW5ObGNuWnBZMlVpTENKeVpXWmxjbkpsY2lJc0ltaHlaV1lpTENKaVlXNTRZU0lzSW05d1pXNGlMQ0p2YmsxdmRXNTBWMmxrWjJWMFEyOXVkR0ZwYm1WeUlpd2ljMmh2ZFd4a1gzTm9iM2RmWkdWd2IzTnBkRjloWkdSeVpYTnpJaXdpWTNKbFlYUmxRMmhoYm1kbGJHeDVVSEp2ZG1sa1pYSWlMQ0pWVWt3aUxDSnpaV0Z5WTJoUVlYSmhiWE1pTENKaGNIQmxibVFpTENKMGIweHZkMlZ5UTJGelpTSXNJbU55WldGMFpWaGhibEJ2YjJ4UWNtOTJhV1JsY2lJc0ltUmxjRzl6YVhSZllXUmtjbVZ6Y3lJc0ltZGxkRXRsWW1GaVEyRnpaU0lzSW5kbFluTnBkR1ZWY213aUxDSlBibkpoYlhCUWNtOTJhV1JsY25NaUxDSlBibEpoYlhCVGRHOXlaU0lzSW5Ob1lXeHNiM2NpTENKeVpXWWlMQ0prWlhCdmMybDBYMkZrWkhKbGMzTmZjbVZtSWl3aWMyVjBUMjV5WVcxd1VISnZkbWxrWlhKeklpd2labWxzZEdWeVpXUmZiMjV5WVcxd1gzQnliM1pwWkdWeWN5SXNJbTl1Y21GdGNGOXdjbTkyYVdSbGNuTWlMQ0p3Y205MmFXUmxjaUlzSW5SdlgyTjFjbkpsYm1OcFpYTWlMQ0poYkd4dmQyVmtYM0psYzJsa1pXNWphV1Z6SWl3aWMyaHZkV3hrWDNOb2IzZGZkMmxrWjJWMElpd2ljMlZzWldOMFpXUmZjSEp2ZG1sa1pYSWlMQ0p6YUc5MWJHUmZjMmh2ZDE5a2FXRnNiMmNpTENKaGNHbGZaWEp5YjNJaUxDSmthWE53YjNObFZHaHBjbVJRWVhKMGVVcHpVbVZoWTNScGIyNGlMQ0prWlhCbGJtUmxibU5wWlhNaUxDSnNiMkZrYW5NaUxDSnpZM0pwY0hSZmJtRnRaU0lzSW1selJHVm1hVzVsWkNJc0luZGhjbTRpTENKelpYUlRaV3hsWTNSbFpGQnliM1pwWkdWeUlpd2laR2x6Y0c5elpVZGxkRmRwWkdkbGRFaDBiV3hTWldGamRHbHZiaUlzSW1selgzSmxjWFZsYzNScGJtZGZkMmxrWjJWMFgyaDBiV3dpTENKelpYUkpjMUpsY1hWbGMzUnBibWRYYVdSblpYUklkRzFzSWl3aWQybGtaMlYwWDJoMGJXd2lMQ0p6WlhSWGFXUm5aWFJJZEcxc0lpd2ljMlYwVTJodmRXeGtVMmh2ZDFkcFpHZGxkQ0lzSW5ObGRGZHBaR2RsZEVWeWNtOXlJaXdpY21GdVoyVWlMQ0pqY21WaGRHVlNZVzVuWlNJc0luTmxiR1ZqZEU1dlpHVkRiMjUwWlc1MGN5SXNJbk5sYkdWamRHbHZibk1pTENKblpYUlRaV3hsWTNScGIyNGlMQ0p5WlcxdmRtVkJiR3hTWVc1blpYTWlMQ0poWkdSU1lXNW5aU0lzSW01aGRtbG5ZWFJ2Y2lJc0ltTnNhWEJpYjJGeVpDSXNJbmR5YVhSbFZHVjRkQ0lzSW5ObGRFbHpSR1Z3YjNOcGRFRmtaSEpsYzNOUWIzQnZkbVZ5VDNCbGJpSXNJbkJ2Ykd4QmNHbEdiM0pFWlhCdmMybDBRV1JrY21WemN5SXNJbk4xWW5OMGNtbHVaeUlzSW5Ob2IzVnNaRjloYkd4dmQxOWxiWEIwZVY5aFpHUnlaWE56SWl3aWMyVjBTWE5FWlhCdmMybDBRV1JrY21WemMweHZZV1JwYm1jaUxDSnpaWFJCY0dsRmNuSnZjaUlzSW1SbGNHOXphWFJmWVdSa2NtVnpjMTlwYm5SbGNuWmhiQ0lzSW5ObGRFbHVkR1Z5ZG1Gc0lpd2laMlYwUkdWd2IzTnBkRUZrWkhKbGMzTkdjbTl0UVhCcElpd2ljMmh2ZFd4a1gyTnNaV0Z5WDJsdWRHVnlkbUZzSWl3aVlXUmtjbVZ6Y3lJc0luTmxkRVJsY0c5emFYUkJaR1J5WlhOeklpd2lZMnhsWVhKSmJuUmxjblpoYkNJc0luTmxkRVJsY0c5emFYUkJaR1J5WlhOelVtVm1JaXdpWTI5d2VWOXBZMjl1WDNKbFppSXNJbWx6WDJSbGNHOXphWFJmWVdSa2NtVnpjMTlzYjJGa2FXNW5JaXdpYVhOZmIzQmxiaUlzSW1selgyUmxjRzl6YVhSZllXUmtjbVZ6YzE5d2IzQnZkbVZ5WDI5d1pXNGlMQ0pwYzE5dmJuSmhiWEJmYlc5a1lXeGZiM0JsYmlJc0luTmxkRWx6VDI1U1lXMXdUVzlrWVd4UGNHVnVJaXdpYzJ4cFkyVWlMQ0ozYVdSblpYUmZaWEp5YjNJaUxDSldaWEpwWm1sallYUnBiMjVUZEc5eVpTSXNJbWx6WDJKMWRIUnZibDlqYkdsamEyVmtJaXdpZEdsdFpXOTFkRjlpZFhSMGIyNGlMQ0pwYzE5bGJXRnBiRjl6Wlc1MElpd2lhWE5mY21WelpXNWtYMk5zYVdOclpXUWlMQ0p5WlhObGJtUmZkR2x0Wlc5MWRDSXNJbU5zWldGeVZHbHRaVzkxZEZabGNtbG1hV05oZEdsdmJpSXNJbk5sZEZScGJXVnZkWFJDZFhSMGIyNGlMQ0p5WlhObGRGQmhlVzFsYm5SQloyVnVkQ0lzSW1WdFlXbHNJaXdpYzJWMFNYTkNkWFIwYjI1RGJHbGphMlZrSWl3aWQybDBhR1J5WVhkaGJGOTBlWEJsSWl3aWRtVnlhV1o1UlcxaGFXd2lMQ0p5WlhOd2IyNXpaVjkyWlhKcFpubGZaVzFoYVd3aUxDSnpaWFJKYzBWdFlXbHNVMlZ1ZENJc0luTmxkRlJwYldWdmRYUldaWEpwWm1sallYUnBiMjRpTENKelpYUkRiM1Z1ZEVSdmQyNVNaWE5sYm1SV1pYSnBabWxqWVhScGIyNGlMQ0p6Wlc1a1ZtVnlhV1pwWTJGMGFXOXVSVzFoYVd3aUxDSnpaWFJTWlhObGJtUlVhVzFsYjNWMElpd2ljbVZ6Wlc1a1gybHVkR1Z5ZG1Gc0lpd2ljMlYwU1hOU1pYTmxibVJEYkdsamEyVmtJaXdpVUdGNWJXVnVkRUZuWlc1MFUzUnZjbVVpTENKaFkzUnBkbVZmZEdGaVgybHVaR1Y0SWl3aWMyVjBRV04wYVhabFZHRmlTVzVrWlhnaUxDSm1hV3gwWlhKbFpGOXNhWE4wSWl3aVlXZGxiblJ6SWl3aWNHRjViV1Z1ZEVGblpXNTBUR2x6ZENJc0luQmhlVzFsYm5SQloyVnVkRVJsZEdGcGJITWlMQ0p3WVhsdFpXNTBZV2RsYm5SZlpHVjBZV2xzY3lJc0ltSmhibXNpTENKemRYQndiM0owWldSZlltRnVhMTlsZUdsemRITWlMQ0p6ZFhCd2IzSjBaV1JmWW1GdWEzTWlMQ0p6ZFhCd2IzSjBaV1JmWW1GdWF5SXNJbkJoWDJ4cGMzUWlMQ0puWlhSUVlYbHRaVzUwUVdkbGJuUk1hWE4wSWl3aWNHRjViV1Z1ZEY5aFoyVnVkRjlzYVhOMElpd2lZMnhsWVhKTWFYTjBJaXdpWTJ4bFlYSlRkWEJ3WlhKMFpXUkNZVzVyY3lJc0luTmxkRXhwYzNRaUxDSndhRzl1WlhNaUxDSndhRzl1WlY5dWRXMWlaWEp6SWl3aWRHVnNaWEJvYjI1bElpd2ljM1Z3Y0c5eWRHVmtYM0JoZVcxbGJuUmZiV1YwYUc5a2N5SXNJblZ5YkhNaUxDSnpkWEJ3YjNKMFpXUmZZbUZ1YTNOZllYSnlZWGtpTENKd1lYbHRaVzUwWDIxbGRHaHZaQ0lzSW1Ga1pGTjFjSEJ2Y25SbFpFSmhibXNpTENKemIzSjBVM1Z3Y0c5eWRHVmtRbUZ1YTNNaUxDSnBjMTl3WVhsdFpXNTBYMkZuWlc1MFgzWnBjMmxpYkdVaUxDSmpZWE5vYVdWeVgzQmhJaXdpY0dGeWMyVkpiblFpTENKelpXeGxZM1JsWkY5aVlXNXJJaXdpYVhOZmQybDBhR1J5WVhjaUxDSnBjMTkwY25sZmQybDBhR1J5WVhkZmMzVmpZMlZ6YzJaMWJDSXNJbWx6WDNkcGRHaGtjbUYzWDNOMVkyTmxjM05tZFd3aUxDSndZWGx0Wlc1MFgyRm5aVzUwWDI1aGJXVWlMQ0pqYjI1bWFYSnRJaXdpY0dGNWJXVnVkRjloWjJWdWRGOWxiV0ZwYkNJc0luQmhlVzFsYm5SZllXZGxiblJmYVdRaUxDSndZWGx0Wlc1MFgyRm5aVzUwWDNCb2IyNWxJaXdpY0dGNWJXVnVkRjloWjJWdWRGOTFjbXdpTENKd1lYbHRaVzUwWVdkbGJuUmZiRzluYVc1cFpDSXNJbTFoZUY5M2FYUm9aSEpoZDJGc0lpd2liV2x1WDNkcGRHaGtjbUYzWVd3aUxDSndhRzl1WlNJc0ltOXVUVzkxYm5SUVlYbHRaVzUwUVdkbGJuUlhhWFJvWkhKaGR5SXNJbk5sZEVselYybDBhR1J5WVhjaUxDSnpaWFJKYzFkcGRHaGtjbUYzVTNWalkyVnpjMloxYkNJc0luTmxkRkpsWTJWcGNIUWlMQ0poWkdSUVlYbHRaVzUwUVdkbGJuUWlMQ0p3WVhsdFpXNTBRV2RsYm5SWGFYUm9aSEpoZHlJc0ltUnllVjl5ZFc0aUxDSndZWGx0Wlc1MFgyRm5aVzUwWDNkcGRHaGtjbUYzSWl3aWNHRjViV1Z1ZEdGblpXNTBYM2RwZEdoa2NtRjNJaXdpYzJWc1pXTjBaV1JmWVdkbGJuUWlMQ0poWjJWdWRDSXNJbk5sZEVOdmJtWnBjbTFoZEdsdmJpSXNJbk5sZEVselZISjVWMmwwYUdSeVlYZFRkV05qWlhOelpuVnNJaXdpYjI1TmIzVnVkRkJoZVcxbGJuUkJaMlZ1ZEV4cGMzUWlMQ0poYkd4UVlYbHRaVzUwUVdkbGJuUk1hWE4wSWl3aVVHRjViV1Z1ZEVGblpXNTBWSEpoYm5ObVpYSlRkRzl5WlNJc0ltZGxkRk5sZEhScGJtZHpJaXdpWjJWMFgzTmxkSFJwYm1keklpd2ljMlYwU1hOUVlYbHRaVzUwUVdkbGJuUWlMQ0pwYzE5aGRYUm9aVzUwYVdOaGRHVmtYM0JoZVcxbGJuUmZZV2RsYm5RaUxDSmpZWE5vYVdWeVgzQmhYM1J5WVc1elptVnlJaXdpYVhOZmRISjVYM1J5WVc1elptVnlYM04xWTJObGMzTm1kV3dpTENKamJHbGxiblJmYVdRaUxDSmpiR2xsYm5SZmJtRnRaU0lzSW1SbGMyTnlhWEIwYVc5dUlpd2ljbVZ6Y0c5dWMyVmZjR0Y1YldWdWRGOWhaMlZ1ZENJc0luQmhlVzFsYm5SZllXZGxiblJmYkdsemRHVmtJaXdpWjJWMFVHRjViV1Z1ZEVGblpXNTBSR1YwWVdsc2N5SXNJbU4xY25KbGJuUmZjR0Y1YldWdWRGOWhaMlZ1ZENJc0ltOXVUVzkxYm5SUVlYbHRaVzUwUVdkbGJuUlVjbUZ1YzJabGNpSXNJbWRsZEVOMWNuSmxiblJRWVhsdFpXNTBRV2RsYm5RaUxDSnpaWFJOYVc1TllYaFFZWGx0Wlc1MFFXZGxiblJVY21GdWMyWmxjaUlzSW5SeVlXNXpabVZ5WDNSdklpd2ljR0Y1YldWdWRFRm5aVzUwVkhKaGJuTm1aWElpTENKd1lYbHRaVzUwWVdkbGJuUmZkSEpoYm5ObVpYSWlMQ0p6WlhSRGIyNW1hWEp0WVhScGIyNVFZWGx0Wlc1MFFXZGxiblJVY21GdWMyWmxjaUlzSW1Oc2FXVnVkRjkwYjE5bWRXeHNYMjVoYldVaUxDSnpaWFJKYzFSeWVWUnlZVzV6Wm1WeVUzVmpZMlZ6YzJaMWJDSXNJbkpsYzJWMFVHRjViV1Z1ZEVGblpXNTBWSEpoYm5ObVpYSWlMQ0p6WlhSU1pXTmxhWEIwVUdGNWJXVnVkRUZuWlc1MFZISmhibk5tWlhJaUxDSnpaWFJKYzFSeVlXNXpabVZ5VTNWalkyVnpjMloxYkNJc0lsUnlZVzV6WVdOMGFXOXVTR2x6ZEc5eWVWTjBiM0psSWl3aVoyVjBRM0o1Y0hSdlZISmhibk5oWTNScGIyNXpJaXdpYzNWaWMyTnlhV0psUTJGemFHbGxjbEJoZVcxbGJuUnpJaXdpWTNKNWNIUnZJaXdpWTJGemFHbGxjbDl3WVhsdFpXNTBjeUlzSW5Wd1pHRjBaVU55ZVhCMGIxUnlZVzV6WVdOMGFXOXVjeUlzSW5SeVlXNXpZV04wYVc5dWN5SXNJblJ5WVc1ellXTjBhVzl1SWl3aVkzSjVjSFJ2WDNSeVlXNXpZV04wYVc5dWN5SXNJbVpwYm1SSmJtUmxlQ0lzSW5OdmNuUkRjbmx3ZEc5VWNtRnVjMkZqZEdsdmJuTWlMQ0p6ZFdKdGFYUmZaR0YwWlNJc0luUnlZVzV6WVdOMGFXOXVYMmxrSWl3aVkyRnVZMlZzUTNKNWNIUnZWSEpoYm5OaFkzUnBiMjRpTENKelpYUlRaV3hsWTNSbFpFTnllWEIwYjFSeVlXNXpZV04wYVc5dVNXUWlMQ0p6WlhSSmMwTnllWEIwYjFSeVlXNXpZV04wYVc5dWMwTmhibU5sYkUxdlpHRnNWbWx6YVdKc1pTSXNJbk5sYkdWamRHVmtYMk55ZVhCMGIxOTBjbUZ1YzJGamRHbHZibDlwWkNJc0ltbHpYM1pwYzJsaWJHVWlMQ0pwYzE5amNubHdkRzlmZEhKaGJuTmhZM1JwYjI1elgyTmhibU5sYkY5dGIyUmhiRjkyYVhOcFlteGxJaXdpYzJWc1pXTjBaV1JmWTNKNWNIUnZYM04wWVhSMWN5SXNJbk5sYkdWamRHVmtYMk55ZVhCMGIxOXpkR0YwZFhOZlpHVnpZM0pwY0hScGIyNGlMQ0pwYzE5amNubHdkRzlmZEhKaGJuTmhZM1JwYjI1elgzTjBZWFIxYzE5dGIyUmhiRjkyYVhOcFlteGxJaXdpYzJWMFUyVnNaV04wWldSRGNubHdkRzlUZEdGMGRYTkVaWE5qY21sd2RHbHZiaUlzSW5ObGRGTmxiR1ZqZEdWa1EzSjVjSFJ2VTNSaGRIVnpJaXdpYzJWMFNYTkRjbmx3ZEc5VWNtRnVjMkZqZEdsdmJuTlRkR0YwZFhOTmIyUmhiRlpwYzJsaWJHVWlMQ0puWlhSTmFXNVhhWFJvWkhKaGQyRnNJaXdpVjJsMGFHUnlZWGRUZEc5eVpTSXNJbWx6WDNkcGRHaGtjbUYzWDJOdmJtWnBjbTFsWkNJc0luTmxkRmRwZEdoa2NtRjNRVzF2ZFc1MElpd2lkMmwwYUdSeVlYZGZZVzF2ZFc1MElpd2laWEp5YjNKZlpHbGhiRzluSWl3aVkzSjVjSFJ2VjJsMGFHUnlZWGNpTENKaWJHOWphMk5vWVdsdVgyRmtaSEpsYzNNaUxDSnpZWFpsVjJsMGFHUnlZWGNpTENKeVpYTmxkRmRwZEdoeVlYZEdiM0p0SWl3aWMyVjBRbXh2WTJ0amFHRnBia0ZrWkhKbGMzTWlMQ0p2YmsxdmRXNTBWMmwwYUdSeVlYY2lMQ0p6ZEhKZmNtVm5YMlY0Y0NJc0ltRjFkR2hsYm5ScFkyRjBhVzl1SWl3aWJtVmxaRjl3YjJraUxDSnVaV1ZrYzE5MlpYSnBabWxqWVhScGIyNGlMQ0pwYzE5M2FYUm9aSEpoZDJGc1gyeHZZMnNpTENKdFlYaGZkMmwwYUdSeVlYZGZZVzF2ZFc1MElpd2laMlYwVEdsdGFYUnpJaXdpWjJWMFgyeHBiV2wwY3lJc0luSmxiV0ZwYm1SbGNpSXNJbk5sZEUxaGVGZHBkR2hrY21GM1FXMXZkVzUwSWl3aWFYTmZiR2x0YVhSZmNtVmhZMmhsWkNJc0luTmxkREV3YTB4cGJXbDBZWFJwYjI0aUxDSnBjMTh4TUd0ZmQybDBhR1J5WVhkaGJGOXNhVzFwZEY5eVpXRmphR1ZrSWl3aVkzVnljbVZ1ZEY5bWFXRjBYMk4xY25KbGJtTjVJaXdpZDJWaWMybDBaVjl6ZEdGMGRYTWlMQ0p0YVc1ZmQybDBhR1J5WVhkZllXMXZkVzUwSWl3aVkzSjVjSFJ2WDJOdmJtWnBaeUlzSW0xcGJtbHRkVzFmZDJsMGFHUnlZWGRoYkNJc0lrVnljbTl5UkdsaGJHOW5JaXdpUTJGemFHbGxjbE4wYjNKbElsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9TdG9yZXMvY2FzaGllci1zdG9yZS5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzXCI6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuZXZhbChcIi8qKlxcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxcbiAqXFxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXFxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxcbiAqL1xcblxcblxcblxcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IF9fd2VicGFja19yZXF1aXJlX18oXFxcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qc1xcXCIpO1xcblxcbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxcbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxcbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xcblxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XFxuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XFxuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxcbiAgICAgIHJldHVybjtcXG4gICAgfVxcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXFxuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXFxuICAgICk7XFxuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xcbiAgICB0aHJvdyBlcnI7XFxuICB9O1xcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcXG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XFxuICAgIHJldHVybiBzaGltO1xcbiAgfTtcXG4gIC8vIEltcG9ydGFudCFcXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxcbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xcbiAgICBhcnJheTogc2hpbSxcXG4gICAgYm9vbDogc2hpbSxcXG4gICAgZnVuYzogc2hpbSxcXG4gICAgbnVtYmVyOiBzaGltLFxcbiAgICBvYmplY3Q6IHNoaW0sXFxuICAgIHN0cmluZzogc2hpbSxcXG4gICAgc3ltYm9sOiBzaGltLFxcblxcbiAgICBhbnk6IHNoaW0sXFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXFxuICAgIGVsZW1lbnQ6IHNoaW0sXFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxcbiAgICBub2RlOiBzaGltLFxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcXG4gICAgb25lT2Y6IGdldFNoaW0sXFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcXG4gICAgc2hhcGU6IGdldFNoaW0sXFxuICAgIGV4YWN0OiBnZXRTaGltLFxcblxcbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cXG4gIH07XFxuXFxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcXG5cXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcXG59O1xcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMM0J5YjNBdGRIbHdaWE12Wm1GamRHOXllVmRwZEdoVWFISnZkMmx1WjFOb2FXMXpMbXB6TG1weklpd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2UUdSbGNtbDJMMk5oYzJocFpYSXZMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDNCeWIzQXRkSGx3WlhNdlptRmpkRzl5ZVZkcGRHaFVhSEp2ZDJsdVoxTm9hVzF6TG1welAyUmpNRGNpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRNdGNISmxjMlZ1ZEN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCTlNWUWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNWNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJTWldGamRGQnliM0JVZVhCbGMxTmxZM0psZENBOUlISmxjWFZwY21Vb0p5NHZiR2xpTDFKbFlXTjBVSEp2Y0ZSNWNHVnpVMlZqY21WMEp5azdYRzVjYm1aMWJtTjBhVzl1SUdWdGNIUjVSblZ1WTNScGIyNG9LU0I3ZlZ4dVpuVnVZM1JwYjI0Z1pXMXdkSGxHZFc1amRHbHZibGRwZEdoU1pYTmxkQ2dwSUh0OVhHNWxiWEIwZVVaMWJtTjBhVzl1VjJsMGFGSmxjMlYwTG5KbGMyVjBWMkZ5Ym1sdVowTmhZMmhsSUQwZ1pXMXdkSGxHZFc1amRHbHZianRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnWm5WdVkzUnBiMjRnYzJocGJTaHdjbTl3Y3l3Z2NISnZjRTVoYldVc0lHTnZiWEJ2Ym1WdWRFNWhiV1VzSUd4dlkyRjBhVzl1TENCd2NtOXdSblZzYkU1aGJXVXNJSE5sWTNKbGRDa2dlMXh1SUNBZ0lHbG1JQ2h6WldOeVpYUWdQVDA5SUZKbFlXTjBVSEp2Y0ZSNWNHVnpVMlZqY21WMEtTQjdYRzRnSUNBZ0lDQXZMeUJKZENCcGN5QnpkR2xzYkNCellXWmxJSGRvWlc0Z1kyRnNiR1ZrSUdaeWIyMGdVbVZoWTNRdVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJsY25JZ1BTQnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQW5RMkZzYkdsdVp5QlFjbTl3Vkhsd1pYTWdkbUZzYVdSaGRHOXljeUJrYVhKbFkzUnNlU0JwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtJR0o1SUhSb1pTQmdjSEp2Y0MxMGVYQmxjMkFnY0dGamEyRm5aUzRnSnlBclhHNGdJQ0FnSUNBblZYTmxJRkJ5YjNCVWVYQmxjeTVqYUdWamExQnliM0JVZVhCbGN5Z3BJSFJ2SUdOaGJHd2dkR2hsYlM0Z0p5QXJYRzRnSUNBZ0lDQW5VbVZoWkNCdGIzSmxJR0YwSUdoMGRIQTZMeTltWWk1dFpTOTFjMlV0WTJobFkyc3RjSEp2Y0MxMGVYQmxjeWRjYmlBZ0lDQXBPMXh1SUNBZ0lHVnljaTV1WVcxbElEMGdKMGx1ZG1GeWFXRnVkQ0JXYVc5c1lYUnBiMjRuTzF4dUlDQWdJSFJvY205M0lHVnljanRjYmlBZ2ZUdGNiaUFnYzJocGJTNXBjMUpsY1hWcGNtVmtJRDBnYzJocGJUdGNiaUFnWm5WdVkzUnBiMjRnWjJWMFUyaHBiU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjMmhwYlR0Y2JpQWdmVHRjYmlBZ0x5OGdTVzF3YjNKMFlXNTBJVnh1SUNBdkx5QkxaV1Z3SUhSb2FYTWdiR2x6ZENCcGJpQnplVzVqSUhkcGRHZ2djSEp2WkhWamRHbHZiaUIyWlhKemFXOXVJR2x1SUdBdUwyWmhZM1J2Y25sWGFYUm9WSGx3WlVOb1pXTnJaWEp6TG1wellDNWNiaUFnZG1GeUlGSmxZV04wVUhKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUdGeWNtRjVPaUJ6YUdsdExGeHVJQ0FnSUdKdmIydzZJSE5vYVcwc1hHNGdJQ0FnWm5WdVl6b2djMmhwYlN4Y2JpQWdJQ0J1ZFcxaVpYSTZJSE5vYVcwc1hHNGdJQ0FnYjJKcVpXTjBPaUJ6YUdsdExGeHVJQ0FnSUhOMGNtbHVaem9nYzJocGJTeGNiaUFnSUNCemVXMWliMnc2SUhOb2FXMHNYRzVjYmlBZ0lDQmhibms2SUhOb2FXMHNYRzRnSUNBZ1lYSnlZWGxQWmpvZ1oyVjBVMmhwYlN4Y2JpQWdJQ0JsYkdWdFpXNTBPaUJ6YUdsdExGeHVJQ0FnSUdWc1pXMWxiblJVZVhCbE9pQnphR2x0TEZ4dUlDQWdJR2x1YzNSaGJtTmxUMlk2SUdkbGRGTm9hVzBzWEc0Z0lDQWdibTlrWlRvZ2MyaHBiU3hjYmlBZ0lDQnZZbXBsWTNSUFpqb2daMlYwVTJocGJTeGNiaUFnSUNCdmJtVlBaam9nWjJWMFUyaHBiU3hjYmlBZ0lDQnZibVZQWmxSNWNHVTZJR2RsZEZOb2FXMHNYRzRnSUNBZ2MyaGhjR1U2SUdkbGRGTm9hVzBzWEc0Z0lDQWdaWGhoWTNRNklHZGxkRk5vYVcwc1hHNWNiaUFnSUNCamFHVmphMUJ5YjNCVWVYQmxjem9nWlcxd2RIbEdkVzVqZEdsdmJsZHBkR2hTWlhObGRDeGNiaUFnSUNCeVpYTmxkRmRoY201cGJtZERZV05vWlRvZ1pXMXdkSGxHZFc1amRHbHZibHh1SUNCOU8xeHVYRzRnSUZKbFlXTjBVSEp2Y0ZSNWNHVnpMbEJ5YjNCVWVYQmxjeUE5SUZKbFlXTjBVSEp2Y0ZSNWNHVnpPMXh1WEc0Z0lISmxkSFZ5YmlCU1pXRmpkRkJ5YjNCVWVYQmxjenRjYm4wN1hHNGlYU3dpYm1GdFpYTWlPbHRkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIjpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuZXZhbChcIi8qKlxcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxcbiAqXFxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXFxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxcbiAqL1xcblxcbmlmIChmYWxzZSkgeyB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcywgUmVhY3RJczsgfSBlbHNlIHtcXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXFxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXFxuICBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXFxcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qc1xcXCIpKCk7XFxufVxcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMM0J5YjNBdGRIbHdaWE12YVc1a1pYZ3Vhbk11YW5NaUxDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFWRkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2UUdSbGNtbDJMMk5oYzJocFpYSXZMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDNCeWIzQXRkSGx3WlhNdmFXNWtaWGd1YW5NL056QmtOQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TXkxd2NtVnpaVzUwTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNwY2JpQXFJRlJvYVhNZ2MyOTFjbU5sSUdOdlpHVWdhWE1nYkdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExseHVJQ292WEc1Y2JtbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJSFpoY2lCU1pXRmpkRWx6SUQwZ2NtVnhkV2x5WlNnbmNtVmhZM1F0YVhNbktUdGNibHh1SUNBdkx5QkNlU0JsZUhCc2FXTnBkR3g1SUhWemFXNW5JR0J3Y205d0xYUjVjR1Z6WUNCNWIzVWdZWEpsSUc5d2RHbHVaeUJwYm5SdklHNWxkeUJrWlhabGJHOXdiV1Z1ZENCaVpXaGhkbWx2Y2k1Y2JpQWdMeThnYUhSMGNEb3ZMMlppTG0xbEwzQnliM0F0ZEhsd1pYTXRhVzR0Y0hKdlpGeHVJQ0IyWVhJZ2RHaHliM2RQYmtScGNtVmpkRUZqWTJWemN5QTlJSFJ5ZFdVN1hHNGdJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTltWVdOMGIzSjVWMmwwYUZSNWNHVkRhR1ZqYTJWeWN5Y3BLRkpsWVdOMFNYTXVhWE5GYkdWdFpXNTBMQ0IwYUhKdmQwOXVSR2x5WldOMFFXTmpaWE56S1R0Y2JuMGdaV3h6WlNCN1hHNGdJQzh2SUVKNUlHVjRjR3hwWTJsMGJIa2dkWE5wYm1jZ1lIQnliM0F0ZEhsd1pYTmdJSGx2ZFNCaGNtVWdiM0IwYVc1bklHbHVkRzhnYm1WM0lIQnliMlIxWTNScGIyNGdZbVZvWVhacGIzSXVYRzRnSUM4dklHaDBkSEE2THk5bVlpNXRaUzl3Y205d0xYUjVjR1Z6TFdsdUxYQnliMlJjYmlBZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUwyWmhZM1J2Y25sWGFYUm9WR2h5YjNkcGJtZFRhR2x0Y3ljcEtDazdYRzU5WEc0aVhTd2libUZ0WlhNaU9sdGRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcXG5cIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qc1wiOlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiLyoqXFxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXFxuICpcXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXFxuICovXFxuXFxuXFxuXFxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMM0J5YjNBdGRIbHdaWE12YkdsaUwxSmxZV04wVUhKdmNGUjVjR1Z6VTJWamNtVjBMbXB6TG1weklpd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBCa1pYSnBkaTlqWVhOb2FXVnlMeTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5d2NtOXdMWFI1Y0dWekwyeHBZaTlTWldGamRGQnliM0JVZVhCbGMxTmxZM0psZEM1cWN6OWhaRGd6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElDaGpLU0F5TURFekxYQnlaWE5sYm5Rc0lFWmhZMlZpYjI5ckxDQkpibU11WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1RVbFVJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVYRzRnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnVW1WaFkzUlFjbTl3Vkhsd1pYTlRaV055WlhRZ1BTQW5VMFZEVWtWVVgwUlBYMDVQVkY5UVFWTlRYMVJJU1ZOZlQxSmZXVTlWWDFkSlRFeGZRa1ZmUmtsU1JVUW5PMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKbFlXTjBVSEp2Y0ZSNWNHVnpVMlZqY21WME8xeHVJbDBzSW01aGJXVnpJanBiWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiQGRlcml2L2NvbXBvbmVudHNcIjpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX19kZXJpdl9jb21wb25lbnRzX187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIkBkZXJpdi9zaGFyZWRcIjpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX19kZXJpdl9zaGFyZWRfXztcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiQGRlcml2L3RyYW5zbGF0aW9uc1wiOlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X3RyYW5zbGF0aW9uc19fO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJtb2J4XCI6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9tb2J4X187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcInJlYWN0XCI6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9fO1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcbi8qKioqKiovIFx0XHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcbi8qKioqKiovIFx0XHRcdFx0KCkgPT4gKG1vZHVsZSk7XG4vKioqKioqLyBcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcbi8qKioqKiovIFx0XHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0dmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbi8qKioqKiovIFx0XHR2YXIgbGVhZlByb3RvdHlwZXM7XG4vKioqKioqLyBcdFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vKioqKioqLyBcdFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vKioqKioqLyBcdFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vKioqKioqLyBcdFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vKioqKioqLyBcdFx0Ly8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLyoqKioqKi8gXHRcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuLyoqKioqKi8gXHRcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG4vKioqKioqLyBcdFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdFx0aWYodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSkge1xuLyoqKioqKi8gXHRcdFx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHRcdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vKioqKioqLyBcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuLyoqKioqKi8gXHRcdFx0dmFyIGRlZiA9IHt9O1xuLyoqKioqKi8gXHRcdFx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaCgoa2V5KSA9PiAoZGVmW2tleV0gPSAoKSA9PiAodmFsdWVba2V5XSkpKTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcbi8qKioqKiovIFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcbi8qKioqKiovIFx0XHRcdHJldHVybiBucztcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLyoqKioqKi8gXHRcdC8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8qKioqKiovIFx0XHQvLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG4vKioqKioqLyBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcbi8qKioqKiovIFx0XHRcdFx0cmV0dXJuIHByb21pc2VzO1xuLyoqKioqKi8gXHRcdFx0fSwgW10pKTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0Ly8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcbi8qKioqKiovIFx0XHRcdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIFwiY2FzaGllci9qcy9jYXNoaWVyLlwiICsgY2h1bmtJZCArIFwiLlwiICsgXCJhMDA3YTc5ZGQ3MzQ1YTg5MGExM1wiICsgXCIuanNcIjtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2dldCBtaW5pLWNzcyBjaHVuayBmaWxlbmFtZSAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdC8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gKGNodW5rSWQpID0+IHtcbi8qKioqKiovIFx0XHRcdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSlcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdHZhciBpblByb2dyZXNzID0ge307XG4vKioqKioqLyBcdFx0dmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJAZGVyaXYvY2FzaGllcjpcIjtcbi8qKioqKiovIFx0XHQvLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcbi8qKioqKiovIFx0XHRcdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG4vKioqKioqLyBcdFx0XHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuLyoqKioqKi8gXHRcdFx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcbi8qKioqKiovIFx0XHRcdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcbi8qKioqKiovIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG4vKioqKioqLyBcdFx0XHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdGlmKCFzY3JpcHQpIHtcbi8qKioqKiovIFx0XHRcdFx0bmVlZEF0dGFjaCA9IHRydWU7XG4vKioqKioqLyBcdFx0XHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdFx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG4vKioqKioqLyBcdFx0XHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuLyoqKioqKi8gXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuLyoqKioqKi8gXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcbi8qKioqKiovIFx0XHRcdFx0c2NyaXB0LnNyYyA9IHVybDtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcbi8qKioqKiovIFx0XHRcdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG4vKioqKioqLyBcdFx0XHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cbi8qKioqKiovIFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcbi8qKioqKiovIFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcbi8qKioqKiovIFx0XHRcdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcbi8qKioqKiovIFx0XHRcdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbi8qKioqKiovIFx0XHRcdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG4vKioqKioqLyBcdFx0XHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdDtcbi8qKioqKiovIFx0XHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG4vKioqKioqLyBcdFx0XHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG4vKioqKioqLyBcdFx0XHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuLyoqKioqKi8gXHRcdFx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcbi8qKioqKiovIFx0XHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdC8vIG5vIGJhc2VVUklcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLyoqKioqKi8gXHRcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLyoqKioqKi8gXHRcdC8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuLyoqKioqKi8gXHRcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4vKioqKioqLyBcdFx0XHRcImNhc2hpZXItc3RvcmVcIjogMFxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mLmogPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcbi8qKioqKiovIFx0XHRcdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuLyoqKioqKi8gXHRcdFx0XHR2YXIgaW5zdGFsbGVkQ2h1bmtEYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgPyBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gOiB1bmRlZmluZWQ7XG4vKioqKioqLyBcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHRcdFx0XHQvLyBhIFByb21pc2UgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuLyoqKioqKi8gXHRcdFx0XHRcdH0gZWxzZSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gKGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdKSk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YVsxXShlcnJvcik7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHR9O1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQsIFwiY2h1bmstXCIgKyBjaHVua0lkLCBjaHVua0lkKTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdH0gZWxzZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0Ly8gbm8gcHJlZmV0Y2hpbmdcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHQvLyBubyBwcmVsb2FkZWRcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHQvLyBubyBITVJcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHQvLyBubyBITVIgbWFuaWZlc3Rcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHQvLyBubyBvbiBjaHVua3MgbG9hZGVkXG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4vKioqKioqLyBcdFx0dmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG4vKioqKioqLyBcdFx0XHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuLyoqKioqKi8gXHRcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4vKioqKioqLyBcdFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbi8qKioqKiovIFx0XHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG4vKioqKioqLyBcdFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbi8qKioqKiovIFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XHRcdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcbi8qKioqKiovIFx0XHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4vKioqKioqLyBcdFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbi8qKioqKiovIFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzW2ldXSA9IDA7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdHZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rX2Rlcml2X2Nhc2hpZXJcIl0gPSBzZWxmW1wid2VicGFja0NodW5rX2Rlcml2X2Nhc2hpZXJcIl0gfHwgW107XG4vKioqKioqLyBcdFx0Y2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG4vKioqKioqLyBcdFx0Y2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIHN0YXJ0dXBcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdC8vIFRoaXMgZW50cnkgbW9kdWxlIGNhbid0IGJlIGlubGluZWQgYmVjYXVzZSB0aGUgZXZhbC1zb3VyY2UtbWFwIGRldnRvb2wgaXMgdXNlZC5cbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9TdG9yZXMvY2FzaGllci1zdG9yZS5qc1wiKTtcbi8qKioqKiovIFx0X193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19leHBvcnRzX18uZGVmYXVsdDtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfZXhwb3J0c19fO1xuLyoqKioqKi8gfSkoKVxuO1xufSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../cashier/dist/cashier/js/cashier-store.js\n");

/***/ })

}]);