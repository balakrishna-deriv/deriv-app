/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_deriv_deriv-api_dist_DerivAPIBasic_js"],{

/***/ "../../../node_modules/@deriv/deriv-api/dist/DerivAPIBasic.js":
/*!********************************************************************!*\
  !*** ../../../node_modules/@deriv/deriv-api/dist/DerivAPIBasic.js ***!
  \********************************************************************/
/***/ (function(module) {

eval("/*\n * ATTENTION: The \"eval\" devtool has been used (maybe by default in mode: \"development\").\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./node_modules/@babel/runtime/regenerator/index.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!\n  \\**********************************************************/\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\neval(\"module.exports = __webpack_require__(/*! regenerator-runtime */ \\\"./node_modules/regenerator-runtime/runtime.js\\\");\\n\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/regenerator/index.js?\");\n\n/***/ }),\n\n/***/ \"./src/deriv_api/Cache.js\":\n/*!********************************!*\\\n  !*** ./src/deriv_api/Cache.js ***!\n  \\********************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ Cache)\\n/* harmony export */ });\\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \\\"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \\\"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \\\"./node_modules/@babel/runtime/helpers/esm/createClass.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \\\"./node_modules/@babel/runtime/helpers/esm/inherits.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \\\"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \\\"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\\\");\\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/regenerator */ \\\"./node_modules/@babel/runtime/regenerator/index.js\\\");\\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6__);\\n/* harmony import */ var _DerivAPICalls__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./DerivAPICalls */ \\\"./src/deriv_api/DerivAPICalls.js\\\");\\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./errors */ \\\"./src/deriv_api/errors.js\\\");\\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils */ \\\"./src/deriv_api/utils.js\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__.default)(this, result); }; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\n\\n\\n\\n/**\\n * Cache - A class for implementing in-memory and persistent cache\\n *\\n * The real implementation of the underlying cache is delegated to the storage\\n * object (See the params).\\n *\\n * The storage object needs to implement the API.\\n *\\n * @example\\n * // Read the latest active symbols\\n * const symbols = await api.activeSymbols();\\n *\\n * // Read the data from cache if available\\n * const cached_symbols = await api.cache.activeSymbols();\\n *\\n * @param {DerivAPIBasic} api API instance to get data that is not cached\\n * @param {Object} storage A storage instance to use for caching\\n */\\n\\nvar Cache = /*#__PURE__*/function (_DerivAPICalls) {\\n  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(Cache, _DerivAPICalls);\\n\\n  var _super = _createSuper(Cache);\\n\\n  function Cache(api, storage) {\\n    var _this;\\n\\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, Cache);\\n\\n    if (!api) {\\n      throw new _errors__WEBPACK_IMPORTED_MODULE_8__.ConstructionError('Cache object needs an API to work');\\n    }\\n\\n    _this = _super.call(this);\\n    _this.api = api;\\n    _this.storage = storage;\\n    return _this;\\n  }\\n\\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(Cache, [{\\n    key: \\\"send\\\",\\n    value: function () {\\n      var _send = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().mark(function _callee(request) {\\n        var response;\\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.next = 2;\\n                return this.has(request);\\n\\n              case 2:\\n                if (!_context.sent) {\\n                  _context.next = 4;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\", this.get(request));\\n\\n              case 4:\\n                _context.next = 6;\\n                return this.api.send(request);\\n\\n              case 6:\\n                response = _context.sent;\\n                _context.next = 9;\\n                return this.set(request, response);\\n\\n              case 9:\\n                return _context.abrupt(\\\"return\\\", response);\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function send(_x) {\\n        return _send.apply(this, arguments);\\n      }\\n\\n      return send;\\n    }()\\n  }, {\\n    key: \\\"has\\\",\\n    value: function () {\\n      var _has = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().mark(function _callee2(request) {\\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                return _context2.abrupt(\\\"return\\\", this.storage.has((0,_utils__WEBPACK_IMPORTED_MODULE_9__.objectToCacheKey)(request)));\\n\\n              case 1:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function has(_x2) {\\n        return _has.apply(this, arguments);\\n      }\\n\\n      return has;\\n    }()\\n    /* Redirected to the method defined by the storage */\\n\\n  }, {\\n    key: \\\"get\\\",\\n    value: function () {\\n      var _get = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().mark(function _callee3(request) {\\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                return _context3.abrupt(\\\"return\\\", this.storage.get((0,_utils__WEBPACK_IMPORTED_MODULE_9__.objectToCacheKey)(request)));\\n\\n              case 1:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function get(_x3) {\\n        return _get.apply(this, arguments);\\n      }\\n\\n      return get;\\n    }()\\n    /* Redirected to the method defined by the storage */\\n\\n  }, {\\n    key: \\\"getByMsgType\\\",\\n    value: function () {\\n      var _getByMsgType = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().mark(function _callee4(type) {\\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                return _context4.abrupt(\\\"return\\\", this.storage.getByMsgType(type));\\n\\n              case 1:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function getByMsgType(_x4) {\\n        return _getByMsgType.apply(this, arguments);\\n      }\\n\\n      return getByMsgType;\\n    }()\\n    /* Redirected to the method defined by the storage */\\n\\n  }, {\\n    key: \\\"set\\\",\\n    value: function () {\\n      var _set = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().mark(function _callee5(request, response) {\\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().wrap(function _callee5$(_context5) {\\n          while (1) {\\n            switch (_context5.prev = _context5.next) {\\n              case 0:\\n                return _context5.abrupt(\\\"return\\\", this.storage.set((0,_utils__WEBPACK_IMPORTED_MODULE_9__.objectToCacheKey)(request), response));\\n\\n              case 1:\\n              case \\\"end\\\":\\n                return _context5.stop();\\n            }\\n          }\\n        }, _callee5, this);\\n      }));\\n\\n      function set(_x5, _x6) {\\n        return _set.apply(this, arguments);\\n      }\\n\\n      return set;\\n    }()\\n  }]);\\n\\n  return Cache;\\n}(_DerivAPICalls__WEBPACK_IMPORTED_MODULE_7__.default);\\n\\n\\n\\n//# sourceURL=webpack://DerivAPIBasic/./src/deriv_api/Cache.js?\");\n\n/***/ }),\n\n/***/ \"./src/deriv_api/CustomPromise.js\":\n/*!****************************************!*\\\n  !*** ./src/deriv_api/CustomPromise.js ***!\n  \\****************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ CustomPromise)\\n/* harmony export */ });\\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \\\"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \\\"./node_modules/@babel/runtime/helpers/esm/createClass.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \\\"./node_modules/@babel/runtime/helpers/esm/inherits.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \\\"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \\\"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ \\\"./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\\\");\\n\\n\\n\\n\\n\\n\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__.default)(this, result); }; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nvar CustomPromise = /*#__PURE__*/function (_Promise) {\\n  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(CustomPromise, _Promise);\\n\\n  var _super = _createSuper(CustomPromise);\\n\\n  function CustomPromise() {\\n    var _this;\\n\\n    var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\\n\\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, CustomPromise);\\n\\n    var resolve;\\n    var reject;\\n    _this = _super.call(this, function (parentResolve, parentReject) {\\n      resolve = parentResolve;\\n      reject = parentReject;\\n    });\\n    cb(resolve, reject);\\n    _this.resolveCallback = resolve;\\n    _this.rejectCallback = reject;\\n    _this.state = 'pending';\\n    return _this;\\n  }\\n\\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(CustomPromise, [{\\n    key: \\\"resolve\\\",\\n    value: function resolve(data) {\\n      this.resolveCallback(data);\\n      this.state = 'resolved';\\n      return this;\\n    }\\n  }, {\\n    key: \\\"reject\\\",\\n    value: function reject(error) {\\n      this.rejectCallback(error);\\n      this.state = 'rejected';\\n      return this;\\n    }\\n  }, {\\n    key: \\\"isPending\\\",\\n    value: function isPending() {\\n      return this.state === 'pending';\\n    }\\n  }, {\\n    key: \\\"isRejected\\\",\\n    value: function isRejected() {\\n      return this.state === 'rejected';\\n    }\\n  }, {\\n    key: \\\"isResolved\\\",\\n    value: function isResolved() {\\n      return this.state === 'resolved';\\n    }\\n  }], [{\\n    key: \\\"wrap\\\",\\n    value: function wrap(promise) {\\n      if (promise instanceof this) return promise;\\n      var custom_promise = new this();\\n      promise.then(custom_promise.resolve.bind(custom_promise), custom_promise.reject.bind(custom_promise));\\n      return custom_promise;\\n    }\\n  }]);\\n\\n  return CustomPromise;\\n}( /*#__PURE__*/(0,_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_5__.default)(Promise));\\n\\n\\n\\n//# sourceURL=webpack://DerivAPIBasic/./src/deriv_api/CustomPromise.js?\");\n\n/***/ }),\n\n/***/ \"./src/deriv_api/DerivAPIBasic.js\":\n/*!****************************************!*\\\n  !*** ./src/deriv_api/DerivAPIBasic.js ***!\n  \\****************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ DerivAPIBasic)\\n/* harmony export */ });\\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \\\"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \\\"./node_modules/@babel/runtime/helpers/esm/typeof.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \\\"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \\\"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \\\"./node_modules/@babel/runtime/helpers/esm/createClass.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \\\"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \\\"./node_modules/@babel/runtime/helpers/esm/inherits.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \\\"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \\\"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\\\");\\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @babel/runtime/regenerator */ \\\"./node_modules/@babel/runtime/regenerator/index.js\\\");\\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9__);\\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs/operators */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/first.js\\\");\\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs/operators */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/filter.js\\\");\\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs/operators */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/share.js\\\");\\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ \\\"./node_modules/rxjs/dist/esm5/internal/Subject.js\\\");\\n/* harmony import */ var _Cache__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Cache */ \\\"./src/deriv_api/Cache.js\\\");\\n/* harmony import */ var _CustomPromise__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./CustomPromise */ \\\"./src/deriv_api/CustomPromise.js\\\");\\n/* harmony import */ var _DerivAPICalls__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./DerivAPICalls */ \\\"./src/deriv_api/DerivAPICalls.js\\\");\\n/* harmony import */ var _InMemory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./InMemory */ \\\"./src/deriv_api/InMemory.js\\\");\\n/* harmony import */ var _SubscriptionManager__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./SubscriptionManager */ \\\"./src/deriv_api/SubscriptionManager.js\\\");\\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./errors */ \\\"./src/deriv_api/errors.js\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__.default)(this, result); }; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * The minimum functionality provided by DerivAPI, provides direct calls to the\\n * API.\\n * `api.cache` is available if you want to use the cached data (see {@link Cache})\\n *\\n * @example\\n * const apiFromOpenConnection = new DerivAPI({ connection });\\n * const apiFromEndpoint = new DerivAPI({ endpoint: 'ws.binaryws.com', app_id: 1234 });\\n *\\n * @param {Object}     options\\n * @param {WebSocket=} options.connection - A ready to use connection\\n * @param {String}     options.endpoint   - API server to connect to\\n * @param {Number}     options.app_id     - Application ID of the API user\\n * @param {String}     options.lang       - Language of the API communication\\n * @param {String}     options.brand      - Brand name\\n * @param {Object}     options.middleware - A middleware to call on certain API actions\\n *\\n * @property {Observable} events\\n * @property {Cache} cache - Temporary cache default to @link{InMemory}\\n * @property {Cache} storage - If specified, uses a more presistent cache (local storage, etc.)\\n */\\n\\nvar DerivAPIBasic = /*#__PURE__*/function (_DerivAPICalls) {\\n  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__.default)(DerivAPIBasic, _DerivAPICalls);\\n\\n  var _super = _createSuper(DerivAPIBasic);\\n\\n  function DerivAPIBasic() {\\n    var _this;\\n\\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\\n        storage = _ref.storage,\\n        app_id = _ref.app_id,\\n        connection = _ref.connection,\\n        _ref$cache = _ref.cache,\\n        cache = _ref$cache === void 0 ? new _InMemory__WEBPACK_IMPORTED_MODULE_13__.default() : _ref$cache,\\n        _ref$endpoint = _ref.endpoint,\\n        endpoint = _ref$endpoint === void 0 ? 'frontend.binaryws.com' : _ref$endpoint,\\n        _ref$lang = _ref.lang,\\n        lang = _ref$lang === void 0 ? 'EN' : _ref$lang,\\n        _ref$brand = _ref.brand,\\n        brand = _ref$brand === void 0 ? '' : _ref$brand,\\n        _ref$middleware = _ref.middleware,\\n        middleware = _ref$middleware === void 0 ? {} : _ref$middleware;\\n\\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, DerivAPIBasic);\\n\\n    _this = _super.call(this);\\n    _this.events = new rxjs__WEBPACK_IMPORTED_MODULE_16__.Subject();\\n\\n    if (connection) {\\n      _this.connection = connection;\\n    } else {\\n      if (!app_id) throw Error('An app_id is required to connect to the API');\\n      _this.shouldReconnect = true;\\n      _this.connectionArgs = {\\n        app_id: app_id,\\n        endpointUrl: getUrl(endpoint),\\n        lang: lang.toUpperCase(),\\n        brand: brand.toLowerCase()\\n      };\\n\\n      _this.connect();\\n    }\\n\\n    _this.lang = lang;\\n    _this.reqId = 0;\\n    _this.connected = new _CustomPromise__WEBPACK_IMPORTED_MODULE_11__.default();\\n    _this.sanityErrors = new rxjs__WEBPACK_IMPORTED_MODULE_16__.Subject();\\n    _this.middleware = middleware;\\n    _this.pendingRequests = {};\\n    _this.expect_response_types = {};\\n    _this.subscription_manager = new _SubscriptionManager__WEBPACK_IMPORTED_MODULE_14__.default((0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__.default)(_this));\\n    _this.reconnect_timeout = false;\\n    _this.keep_alive_interval = false;\\n\\n    if (storage) {\\n      _this.storage = new _Cache__WEBPACK_IMPORTED_MODULE_10__.default((0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__.default)(_this), storage);\\n    } // If we have the storage look that one up\\n\\n\\n    _this.cache = new _Cache__WEBPACK_IMPORTED_MODULE_10__.default(_this.storage ? _this.storage : (0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__.default)(_this), cache);\\n\\n    _this.connectionHandlers();\\n\\n    return _this;\\n  }\\n\\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(DerivAPIBasic, [{\\n    key: \\\"connectionHandlers\\\",\\n    value: function connectionHandlers() {\\n      this.connection.onopen = this.openHandler.bind(this);\\n      this.connection.onclose = this.closeHandler.bind(this);\\n      this.connection.onmessage = this.messageHandler.bind(this);\\n      this.connection.onerror = this.errorHandler.bind(this);\\n    }\\n  }, {\\n    key: \\\"connect\\\",\\n    value: function connect() {\\n      if (!this.connectionArgs) {\\n        throw new _errors__WEBPACK_IMPORTED_MODULE_15__.ConstructionError('Connection arguments are required to create a connection.');\\n      }\\n\\n      this.events.next({\\n        name: 'connect'\\n      });\\n      var _this$connectionArgs = this.connectionArgs,\\n          endpointUrl = _this$connectionArgs.endpointUrl,\\n          lang = _this$connectionArgs.lang,\\n          app_id = _this$connectionArgs.app_id,\\n          brand = _this$connectionArgs.brand;\\n      this.connection = new WebSocket(\\\"\\\".concat(endpointUrl.toString(), \\\"websockets/v3?app_id=\\\").concat(app_id, \\\"&l=\\\").concat(lang, \\\"&brand=\\\").concat(brand));\\n    }\\n  }, {\\n    key: \\\"disconnect\\\",\\n    value: function disconnect() {\\n      this.shouldReconnect = false; // prevents re-connecting automatically\\n\\n      this.connection.close();\\n    }\\n  }, {\\n    key: \\\"isConnectionClosed\\\",\\n    value: function isConnectionClosed() {\\n      return this.connection.readyState === 2 || this.connection.readyState === 3;\\n    }\\n  }, {\\n    key: \\\"sendAndGetSource\\\",\\n    value: function sendAndGetSource(request) {\\n      var _this2 = this;\\n\\n      var pending = new rxjs__WEBPACK_IMPORTED_MODULE_16__.Subject();\\n      request.req_id = request.req_id || ++this.reqId;\\n      this.pendingRequests[request.req_id] = pending;\\n      this.connected.then(function () {\\n        if (_this2.isConnectionClosed()) return;\\n\\n        _this2.connection.send(JSON.stringify(request));\\n      })[\\\"catch\\\"](function (e) {\\n        return pending.error(e);\\n      });\\n      return pending;\\n    }\\n  }, {\\n    key: \\\"send\\\",\\n    value: function () {\\n      var _send = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee() {\\n        var _this3 = this;\\n\\n        var _len,\\n            args,\\n            _key,\\n            send_will_be_called,\\n            request,\\n            response_promise,\\n            send_is_called,\\n            _args = arguments;\\n\\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n                  args[_key] = _args[_key];\\n                }\\n\\n                send_will_be_called = this.callMiddleware('sendWillBeCalled', {\\n                  args: args\\n                });\\n\\n                if (!send_will_be_called) {\\n                  _context.next = 4;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\", send_will_be_called);\\n\\n              case 4:\\n                request = args[0];\\n                this.events.next({\\n                  name: 'send',\\n                  data: request\\n                });\\n                this.deleteFromExpectResponse(request);\\n                response_promise = this.sendAndGetSource(request).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.first)()).toPromise();\\n                response_promise.then(function (response) {\\n                  _this3.cache.set(request, response);\\n\\n                  if (_this3.storage) {\\n                    _this3.storage.set(request, response);\\n                  }\\n                }, function () {}); // Ignore errors here\\n\\n                send_is_called = this.callMiddleware('sendIsCalled', {\\n                  response_promise: response_promise,\\n                  args: args\\n                });\\n\\n                if (!send_is_called) {\\n                  _context.next = 12;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\", send_is_called);\\n\\n              case 12:\\n                return _context.abrupt(\\\"return\\\", response_promise);\\n\\n              case 13:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function send() {\\n        return _send.apply(this, arguments);\\n      }\\n\\n      return send;\\n    }()\\n  }, {\\n    key: \\\"callMiddleware\\\",\\n    value: function callMiddleware(name, args) {\\n      if (!(name in this.middleware)) return undefined;\\n      return this.middleware[name](args);\\n    }\\n  }, {\\n    key: \\\"subscribe\\\",\\n    value: function subscribe(request) {\\n      return this.subscription_manager.subscribe(request);\\n    }\\n  }, {\\n    key: \\\"forget\\\",\\n    value: function () {\\n      var _forget = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2(id) {\\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                return _context2.abrupt(\\\"return\\\", this.subscription_manager.forget(id));\\n\\n              case 1:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function forget(_x) {\\n        return _forget.apply(this, arguments);\\n      }\\n\\n      return forget;\\n    }()\\n  }, {\\n    key: \\\"forgetAll\\\",\\n    value: function () {\\n      var _forgetAll = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3() {\\n        var _this$subscription_ma;\\n\\n        var _args3 = arguments;\\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                return _context3.abrupt(\\\"return\\\", (_this$subscription_ma = this.subscription_manager).forgetAll.apply(_this$subscription_ma, _args3));\\n\\n              case 1:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function forgetAll() {\\n        return _forgetAll.apply(this, arguments);\\n      }\\n\\n      return forgetAll;\\n    }()\\n  }, {\\n    key: \\\"keepAlivePing\\\",\\n    value: function keepAlivePing() {\\n      this.ping({\\n        ping: 1\\n      });\\n      this.reconnect_timeout = setTimeout(this.reconnect.bind(this), 5000);\\n    }\\n  }, {\\n    key: \\\"pong\\\",\\n    value: function pong() {\\n      if (this.reconnect_timeout) {\\n        clearTimeout(this.reconnect_timeout);\\n        this.reconnect_timeout = false;\\n      }\\n    }\\n  }, {\\n    key: \\\"openHandler\\\",\\n    value: function openHandler() {\\n      this.events.next({\\n        name: 'open'\\n      });\\n\\n      if (this.shouldReconnect) {\\n        this.keep_alive_interval = setInterval(this.keepAlivePing.bind(this), 30000);\\n      }\\n\\n      if (this.connection.readyState === 1) {\\n        this.connected.resolve();\\n      } else {\\n        setTimeout(this.openHandler.bind(this), 50);\\n      }\\n    }\\n  }, {\\n    key: \\\"messageHandler\\\",\\n    value: function messageHandler(msg) {\\n      if (!msg.data) {\\n        this.sanityErrors.next(new _errors__WEBPACK_IMPORTED_MODULE_15__.APIError('Something went wrong while receiving the response from API.'));\\n        return;\\n      }\\n\\n      var response = JSON.parse(msg.data);\\n\\n      if (this.reconnect_timeout && response.ping === 'pong') {\\n        this.pong();\\n      }\\n\\n      this.events.next({\\n        name: 'message',\\n        data: response\\n      });\\n      var reqId = response.req_id;\\n\\n      if (reqId in this.pendingRequests) {\\n        var expect_response = this.expect_response_types[response.msg_type];\\n\\n        if (expect_response && expect_response.isPending()) {\\n          expect_response.resolve(response);\\n        }\\n\\n        var request = response.echo_req; // When one of the child subscriptions of `proposal_open_contract` has an error in the response,\\n        // it should be handled in the callback of consumer instead. Calling `error()` with parent subscription\\n        // will mark the parent subscription as complete and all child subscriptions will be forgotten.\\n\\n        var is_parent_subscription = request && request.proposal_open_contract && !request.contract_id;\\n\\n        if (response.error && !is_parent_subscription) {\\n          this.pendingRequests[reqId].error(response);\\n        } else if (this.pendingRequests[reqId].isStopped && response.subscription) {\\n          // Source is already marked as completed. In this case we should\\n          // send a forget request with the subscription id and ignore the response received.\\n          var id = response.subscription.id;\\n          this.forget(id);\\n        } else {\\n          this.pendingRequests[reqId].next(response);\\n        }\\n      } else {\\n        this.sanityErrors.next(new _errors__WEBPACK_IMPORTED_MODULE_15__.APIError('Extra response'));\\n      }\\n    }\\n    /**\\n     * Reconnects to the API in case of connection error, unless connection is\\n     * passed as an argument, in that case reconnecting should be handled in the\\n     * API user side.\\n     * */\\n\\n  }, {\\n    key: \\\"closeHandler\\\",\\n    value: function closeHandler() {\\n      this.events.next({\\n        name: 'close'\\n      });\\n\\n      if (this.shouldReconnect) {\\n        this.events.next({\\n          name: 'reconnecting'\\n        });\\n        this.reconnect();\\n      }\\n    }\\n    /**\\n     * Clears previous connection keeplive ping timeout and connect & assign the handles\\n     */\\n\\n  }, {\\n    key: \\\"reconnect\\\",\\n    value: function reconnect() {\\n      if (this.shouldReconnect) {\\n        if (this.keep_alive_interval) {\\n          clearInterval(this.keep_alive_interval);\\n          this.keep_alive_interval = false;\\n        }\\n\\n        this.pong(); // clear all previous timeout\\n\\n        this.connect();\\n        this.connectionHandlers();\\n      }\\n    }\\n  }, {\\n    key: \\\"errorHandler\\\",\\n    value: function errorHandler() {\\n      this.sanityErrors.next(new _errors__WEBPACK_IMPORTED_MODULE_15__.APIError('Something went wrong while receiving the response from API.'));\\n    }\\n    /**\\n     * @returns {Observable} for close events\\n     */\\n\\n  }, {\\n    key: \\\"onClose\\\",\\n    value: function onClose() {\\n      return this.events.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.filter)(function (e) {\\n        return e.name === 'close';\\n      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.share)());\\n    }\\n    /**\\n     * @returns {Observable} for open events\\n     */\\n\\n  }, {\\n    key: \\\"onOpen\\\",\\n    value: function onOpen() {\\n      return this.events.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.filter)(function (e) {\\n        return e.name === 'open';\\n      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.share)());\\n    }\\n    /**\\n     * @returns {Observable} for new messages\\n     */\\n\\n  }, {\\n    key: \\\"onMessage\\\",\\n    value: function onMessage() {\\n      return this.events.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.filter)(function (e) {\\n        return e.name === 'message';\\n      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.share)());\\n    }\\n    /**\\n     * @param {String} types Expect these types to be received by the API\\n     *\\n     * @returns {Promise<Object>|Promise<Array>} Resolves to a single response or an array\\n     */\\n\\n  }, {\\n    key: \\\"expectResponse\\\",\\n    value: function () {\\n      var _expectResponse = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4() {\\n        var _this4 = this;\\n\\n        var _len2,\\n            types,\\n            _key2,\\n            _args4 = arguments;\\n\\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                for (_len2 = _args4.length, types = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\\n                  types[_key2] = _args4[_key2];\\n                }\\n\\n                types.forEach(function (type) {\\n                  if (!(type in _this4.expect_response_types)) {\\n                    _this4.expect_response_types[type] = transformUndefinedToPromise(_this4.cache.getByMsgType(type).then(function (value) {\\n                      if (!value && _this4.storage) return _this4.storage.getByMsgType(type);\\n                      return value;\\n                    }));\\n                  }\\n                }); // expect on a single response returns a single response, not a list\\n\\n                if (!(types.length === 1)) {\\n                  _context4.next = 4;\\n                  break;\\n                }\\n\\n                return _context4.abrupt(\\\"return\\\", this.expect_response_types[types[0]]);\\n\\n              case 4:\\n                return _context4.abrupt(\\\"return\\\", Promise.all(types.map(function (type) {\\n                  return _this4.expect_response_types[type];\\n                })));\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function expectResponse() {\\n        return _expectResponse.apply(this, arguments);\\n      }\\n\\n      return expectResponse;\\n    }()\\n  }, {\\n    key: \\\"deleteFromExpectResponse\\\",\\n    value: function deleteFromExpectResponse(request) {\\n      var response_type = Object.keys(this.expect_response_types).find(function (type) {\\n        return type in request;\\n      });\\n\\n      if (this.expect_response_types[response_type] && !this.expect_response_types[response_type].isPending()) {\\n        delete this.expect_response_types[response_type];\\n      }\\n    }\\n  }]);\\n\\n  return DerivAPIBasic;\\n}(_DerivAPICalls__WEBPACK_IMPORTED_MODULE_12__.default);\\n\\n\\n\\nfunction getUrl(originalEndpoint) {\\n  if (typeof originalEndpoint !== 'string') {\\n    throw new _errors__WEBPACK_IMPORTED_MODULE_15__.ConstructionError(\\\"Endpoint must be a string, passed: \\\".concat((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__.default)(originalEndpoint)));\\n  }\\n\\n  var url;\\n\\n  try {\\n    // eslint-disable-next-line no-unused-vars\\n    var _originalEndpoint$mat = originalEndpoint.match(/((?:\\\\w*:\\\\/\\\\/)*)(.*)/),\\n        _originalEndpoint$mat2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__.default)(_originalEndpoint$mat, 3),\\n        _ = _originalEndpoint$mat2[0],\\n        protocol = _originalEndpoint$mat2[1],\\n        endpoint = _originalEndpoint$mat2[2];\\n\\n    url = new URL(\\\"\\\".concat(protocol === 'ws://' ? protocol : 'wss://').concat(endpoint));\\n  } catch (e) {\\n    throw new _errors__WEBPACK_IMPORTED_MODULE_15__.ConstructionError(\\\"Invalid URL: \\\".concat(originalEndpoint));\\n  }\\n\\n  return url;\\n}\\n\\nfunction transformUndefinedToPromise(promise) {\\n  return _CustomPromise__WEBPACK_IMPORTED_MODULE_11__.default.wrap(promise.then(function (value) {\\n    if (!value) return new _CustomPromise__WEBPACK_IMPORTED_MODULE_11__.default();\\n    return value;\\n  }));\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./src/deriv_api/DerivAPIBasic.js?\");\n\n/***/ }),\n\n/***/ \"./src/deriv_api/DerivAPICalls.js\":\n/*!****************************************!*\\\n  !*** ./src/deriv_api/DerivAPICalls.js ***!\n  \\****************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ DerivAPICalls)\\n/* harmony export */ });\\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \\\"./node_modules/@babel/runtime/helpers/esm/typeof.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \\\"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \\\"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \\\"./node_modules/@babel/runtime/helpers/esm/createClass.js\\\");\\n\\n\\n\\n\\n\\n// This file was automatically generated by regen-js.pl at 20210913-235246\\n// applies JSON schema to generate Deriv API\\n\\n/* eslint-disable max-len */\\n// =======================\\n// ----- API Methods -----\\n// =======================\\nvar DerivAPICalls = /*#__PURE__*/function () {\\n  function DerivAPICalls() {\\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DerivAPICalls);\\n  }\\n\\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DerivAPICalls, [{\\n    key: \\\"accountClosure\\\",\\n    value: // To be implemented by the sub-class\\n    // constructor() { }\\n\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.account_closure - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.reason - Reason for closing off accounts.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n    function accountClosure() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_closure: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        reason: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'account_closure',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.account_security - Must be `1`\\n     * @param {String} args.otp - [Optional] OTP (one-time passcode) generated by a 2FA application like Authy, Google Authenticator or Yubikey.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.totp_action - [Optional] Action to be taken for managing TOTP (time-based one-time password, RFC6238). Generate will create a secret key which is then returned in the secret_key response field, you can then enable by using that code in a 2FA application.\\n     */\\n\\n  }, {\\n    key: \\\"accountSecurity\\\",\\n    value: function accountSecurity() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_security: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        otp: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        totp_action: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'account_security',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.account_statistics - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"accountStatistics\\\",\\n    value: function accountStatistics() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_statistics: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'account_statistics',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.active_symbols - If you use `brief`, only a subset of fields will be returned.\\n     * @param {String} args.landing_company - [Optional] If you specify this field, only symbols available for trading by that landing company will be returned. If you are logged in, only symbols available for trading by your landing company will be returned regardless of what you specify in this field.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.product_type - [Optional] If you specify this field, only symbols that can be traded through that product type will be returned.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"activeSymbols\\\",\\n    value: function activeSymbols() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        active_symbols: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        landing_company: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        product_type: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'active_symbols',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.account_opening_reason - [Optional] Purpose and reason for requesting the account opening.\\n     * @param {String} args.account_turnover - [Optional] The anticipated account turnover.\\n     * @param {String} args.address_city - [Optional] Within 100 characters.\\n     * @param {String} args.address_line_1 - Within 70 characters, with no leading whitespaces and may contain letters/numbers and/or any of following characters '.,:;()@#/-\\n     * @param {String} args.address_line_2 - [Optional] Within 70 characters.\\n     * @param {String} args.address_postcode - [Optional] Within 20 characters and may not contain '+'.\\n     * @param {String} args.address_state - [Optional] Possible value receive from `states_list` call.\\n     * @param {Number} args.affiliate_account_add - Must be `1`\\n     * @param {String} args.affiliate_plan - The affiliate plan the account will subscribe to\\n     * @param {String} args.affiliate_token - [Optional] Affiliate token, within 32 characters.\\n     * @param {Any} args.citizen - [Optional] Country of legal citizenship, 2-letter country code.\\n     * @param {String} args.client_type - [Optional] Indicates whether this is for a client requesting an account with professional status.\\n     * @param {String} args.currency - [Optional] To set currency of the account. List of supported currencies can be acquired with `payout_currencies` call.\\n     * @param {String} args.date_of_birth - Date of birth format: `yyyy-mm-dd`.\\n     * @param {String} args.first_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.\\n     * @param {String} args.last_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.\\n     * @param {Number} args.non_pep_declaration - [Optional] Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Any} args.phone - [Optional] Starting with `+` followed by 9-35 digits, hyphens or space.\\n     * @param {String} args.place_of_birth - [Optional] Place of birth, 2-letter country code.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.residence - 2-letter country code, possible value receive from `residence_list` call.\\n     * @param {String} args.salutation - [Optional] Accept any value in enum list.\\n     * @param {String} args.secret_answer - [Optional] Answer to secret question, within 4-50 characters. Required for new account and existing client details will be used if client open another account.\\n     * @param {String} args.secret_question - [Optional] Accept any value in enum list. Required for new account and existing client details will be used if client open another account.\\n     * @param {String} args.tax_identification_number - [Optional] Tax identification number. Only applicable for real money account. Required for `maltainvest` landing company.\\n     * @param {String} args.tax_residence - [Optional] Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for `maltainvest` landing company.\\n     */\\n\\n  }, {\\n    key: \\\"affiliateAccountAdd\\\",\\n    value: function affiliateAccountAdd() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_opening_reason: {\\n          type: 'string'\\n        },\\n        account_turnover: {\\n          type: 'string'\\n        },\\n        address_city: {\\n          type: 'string'\\n        },\\n        address_line_1: {\\n          type: 'string'\\n        },\\n        address_line_2: {\\n          type: 'string'\\n        },\\n        address_postcode: {\\n          type: 'string'\\n        },\\n        address_state: {\\n          type: 'string'\\n        },\\n        affiliate_account_add: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        affiliate_plan: {\\n          type: 'string'\\n        },\\n        affiliate_token: {\\n          type: 'string'\\n        },\\n        citizen: {},\\n        client_type: {\\n          type: 'string'\\n        },\\n        currency: {\\n          type: 'string'\\n        },\\n        date_of_birth: {\\n          type: 'string'\\n        },\\n        first_name: {\\n          type: 'string'\\n        },\\n        last_name: {\\n          type: 'string'\\n        },\\n        non_pep_declaration: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        phone: {},\\n        place_of_birth: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        residence: {\\n          type: 'string'\\n        },\\n        salutation: {\\n          type: 'string'\\n        },\\n        secret_answer: {\\n          type: 'string'\\n        },\\n        secret_question: {\\n          type: 'string'\\n        },\\n        tax_identification_number: {\\n          type: 'string'\\n        },\\n        tax_residence: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'affiliate_account_add',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.api_token - Must be `1`\\n     * @param {String} args.delete_token - [Optional] The token to remove.\\n     * @param {String} args.new_token - [Optional] The name of the created token.\\n     * @param {Any} args.new_token_scopes - [Optional] List of permission scopes to provide with the token.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.valid_for_current_ip_only - [Optional] If you set this parameter during token creation, then the token created will only work for the IP address that was used to create the token\\n     */\\n\\n  }, {\\n    key: \\\"apiToken\\\",\\n    value: function apiToken() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        api_token: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        delete_token: {\\n          type: 'string'\\n        },\\n        new_token: {\\n          type: 'string'\\n        },\\n        new_token_scopes: {},\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        valid_for_current_ip_only: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'api_token',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.app_delete - Application app_id\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"appDelete\\\",\\n    value: function appDelete() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        app_delete: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'app_delete',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.app_get - Application app_id\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"appGet\\\",\\n    value: function appGet() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        app_get: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'app_get',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.app_list - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"appList\\\",\\n    value: function appList() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        app_list: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'app_list',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.app_id - [Optional] Specific application `app_id` to report on.\\n     * @param {Number} args.app_markup_details - Must be `1`\\n     * @param {String} args.client_loginid - [Optional] Specific client loginid to report on, like CR12345\\n     * @param {String} args.date_from - Start date (epoch or YYYY-MM-DD HH:MM:SS). Results are inclusive of this time.\\n     * @param {String} args.date_to - End date (epoch or YYYY-MM-DD HH::MM::SS). Results are inclusive of this time.\\n     * @param {Number} args.description - [Optional] If set to 1, will return `app_markup` transaction details.\\n     * @param {Number} args.limit - [Optional] Apply upper limit to count of transactions received.\\n     * @param {Number} args.offset - [Optional] Number of transactions to skip.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.sort - [Optional] Sort direction on `transaction_time`. Other fields sort order is ASC.\\n     * @param {Any} args.sort_fields - [Optional] One or more of the specified fields to sort on. Default sort field is by `transaction_time`.\\n     */\\n\\n  }, {\\n    key: \\\"appMarkupDetails\\\",\\n    value: function appMarkupDetails() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        app_id: {\\n          type: 'numeric'\\n        },\\n        app_markup_details: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        client_loginid: {\\n          type: 'string'\\n        },\\n        date_from: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        date_to: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        description: {\\n          type: 'numeric'\\n        },\\n        limit: {\\n          type: 'numeric'\\n        },\\n        offset: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        sort: {\\n          type: 'string'\\n        },\\n        sort_fields: {}\\n      };\\n      var allArgs = {\\n        method: 'app_markup_details',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.app_markup_percentage - [Optional] Markup to be added to contract prices (as a percentage of contract payout).\\n     * @param {Number} args.app_register - Must be `1`\\n     * @param {String} args.appstore - [Optional] Application's App Store URL (if applicable).\\n     * @param {String} args.github - [Optional] Application's GitHub page (for open-source projects).\\n     * @param {String} args.googleplay - [Optional] Application's Google Play URL (if applicable).\\n     * @param {String} args.homepage - [Optional] Application's homepage URL.\\n     * @param {String} args.name - Application name.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.redirect_uri - [Optional] The URL to redirect to after a successful login. Required if charging markup percentage\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Any} args.scopes - List of permission scopes to grant the application.\\n     * @param {String} args.verification_uri - [Optional] Used when `verify_email` called. If available, a URL containing the verification token will be sent to the client's email, otherwise only the token will be sent.\\n     */\\n\\n  }, {\\n    key: \\\"appRegister\\\",\\n    value: function appRegister() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        app_markup_percentage: {\\n          type: 'numeric'\\n        },\\n        app_register: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        appstore: {\\n          type: 'string'\\n        },\\n        github: {\\n          type: 'string'\\n        },\\n        googleplay: {\\n          type: 'string'\\n        },\\n        homepage: {\\n          type: 'string'\\n        },\\n        name: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        redirect_uri: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        scopes: {\\n          required: 1\\n        },\\n        verification_uri: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'app_register',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.app_markup_percentage - [Optional] Markup to be added to contract prices (as a percentage of contract payout).\\n     * @param {Number} args.app_update - Application app_id.\\n     * @param {String} args.appstore - [Optional] Application's App Store URL (if applicable).\\n     * @param {String} args.github - [Optional] Application's GitHub page (for open-source projects).\\n     * @param {String} args.googleplay - [Optional] Application's Google Play URL (if applicable).\\n     * @param {String} args.homepage - [Optional] Application's homepage URL.\\n     * @param {String} args.name - Application name.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.redirect_uri - [Optional] The URL to redirect to after a successful login. Required if charging markup percentage.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Any} args.scopes - Change scopes will revoke all user's grants and log them out.\\n     * @param {String} args.verification_uri - [Optional] Used when `verify_email` called. If available, a URL containing the verification token will send to the client's email, otherwise only the token will be sent.\\n     */\\n\\n  }, {\\n    key: \\\"appUpdate\\\",\\n    value: function appUpdate() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        app_markup_percentage: {\\n          type: 'numeric'\\n        },\\n        app_update: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        appstore: {\\n          type: 'string'\\n        },\\n        github: {\\n          type: 'string'\\n        },\\n        googleplay: {\\n          type: 'string'\\n        },\\n        homepage: {\\n          type: 'string'\\n        },\\n        name: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        redirect_uri: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        scopes: {\\n          required: 1\\n        },\\n        verification_uri: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'app_update',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.asset_index - Must be `1`\\n     * @param {String} args.landing_company - [Optional] If specified, will return only the underlyings for the specified landing company.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"assetIndex\\\",\\n    value: function assetIndex() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        asset_index: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        landing_company: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'asset_index',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.add_to_login_history - [Optional] Send this when you use api tokens for authorization and want to track activity using `login_history` call.\\n     * @param {String} args.authorize - Authentication token. May be retrieved from https://www.binary.com/en/user/security/api_tokenws.html\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"authorize\\\",\\n    value: function authorize() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        add_to_login_history: {\\n          type: 'numeric'\\n        },\\n        authorize: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'authorize',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.account - [Optional] If set to `all`, return the balances of all accounts one by one; if set to `current`, return the balance of current account; if set as an account id, return the balance of that account.\\n     * @param {Number} args.balance - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] If set to 1, will send updates whenever the balance changes.\\n     */\\n\\n  }, {\\n    key: \\\"balance\\\",\\n    value: function balance() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account: {\\n          type: 'string'\\n        },\\n        balance: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'balance',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.buy - Either the ID received from a Price Proposal (`proposal` call), or `1` if contract buy parameters are passed in the `parameters` field.\\n     * @param {Any} args.parameters -\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.price - Maximum price at which to purchase the contract.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] `1` to stream.\\n     */\\n\\n  }, {\\n    key: \\\"buy\\\",\\n    value: function buy() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        buy: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        parameters: {\\n          amount: {\\n            type: 'numeric'\\n          },\\n          app_markup_percentage: {\\n            type: 'numeric'\\n          },\\n          barrier: {\\n            type: 'string'\\n          },\\n          barrier2: {\\n            type: 'string'\\n          },\\n          basis: {\\n            type: 'string'\\n          },\\n          cancellation: {\\n            type: 'string'\\n          },\\n          contract_type: {\\n            required: 1,\\n            type: 'string'\\n          },\\n          currency: {\\n            required: 1,\\n            type: 'string'\\n          },\\n          date_expiry: {\\n            type: 'numeric'\\n          },\\n          date_start: {\\n            type: 'numeric'\\n          },\\n          duration: {\\n            type: 'numeric'\\n          },\\n          duration_unit: {\\n            type: 'string'\\n          },\\n          limit_order: {\\n            stop_loss: {\\n              type: 'numeric'\\n            },\\n            take_profit: {\\n              type: 'numeric'\\n            }\\n          },\\n          multiplier: {\\n            type: 'numeric'\\n          },\\n          product_type: {\\n            type: 'string'\\n          },\\n          selected_tick: {\\n            type: 'numeric'\\n          },\\n          symbol: {\\n            required: 1,\\n            type: 'string'\\n          },\\n          trading_period_start: {\\n            type: 'numeric'\\n          }\\n        },\\n        passthrough: {},\\n        price: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'buy',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.buy_contract_for_multiple_accounts - Either the ID received from a Price Proposal (`proposal` call), or `1` if contract buy parameters are passed in the `parameters` field.\\n     * @param {Any} args.parameters -\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.price - Maximum price at which to purchase the contract.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Any} args.tokens - List of API tokens identifying the accounts for which the contract is bought. Note: If the same token appears multiple times or if multiple tokens designate the same account, the contract is bought multiple times for this account.\\n     */\\n\\n  }, {\\n    key: \\\"buyContractForMultipleAccounts\\\",\\n    value: function buyContractForMultipleAccounts() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        buy_contract_for_multiple_accounts: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        parameters: {\\n          amount: {\\n            type: 'numeric'\\n          },\\n          app_markup_percentage: {\\n            type: 'numeric'\\n          },\\n          barrier: {\\n            type: 'string'\\n          },\\n          barrier2: {\\n            type: 'string'\\n          },\\n          basis: {\\n            type: 'string'\\n          },\\n          contract_type: {\\n            required: 1,\\n            type: 'string'\\n          },\\n          currency: {\\n            required: 1,\\n            type: 'string'\\n          },\\n          date_expiry: {\\n            type: 'numeric'\\n          },\\n          date_start: {\\n            type: 'numeric'\\n          },\\n          duration: {\\n            type: 'numeric'\\n          },\\n          duration_unit: {\\n            type: 'string'\\n          },\\n          multiplier: {\\n            type: 'numeric'\\n          },\\n          selected_tick: {\\n            type: 'numeric'\\n          },\\n          symbol: {\\n            required: 1,\\n            type: 'string'\\n          }\\n        },\\n        passthrough: {},\\n        price: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        tokens: {\\n          required: 1\\n        }\\n      };\\n      var allArgs = {\\n        method: 'buy_contract_for_multiple_accounts',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.cancel - Value should be the `contract_id` which received from the `portfolio` call.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"cancel\\\",\\n    value: function cancel() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        cancel: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'cancel',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.address - [Optional] Address for crypto withdrawal. Only applicable for `api` type.\\n     * @param {Number} args.amount - [Optional] Amount for crypto withdrawal. Only applicable for `api` type.\\n     * @param {String} args.cashier - Operation which needs to be requested from cashier\\n     * @param {Number} args.dry_run - [Optional] If set to `1`, only validation is performed. Only applicable for `withdraw` using `crypto` provider and `api` type.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.provider - [Optional] Cashier provider. `crypto` will be default option for crypto currency accounts.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.type - [Optional] Data need to be returned from cashier. `api` is supported only for `crypto` provider.\\n     * @param {String} args.verification_code - [Optional] Email verification code (received from a `verify_email` call, which must be done first)\\n     */\\n\\n  }, {\\n    key: \\\"cashier\\\",\\n    value: function cashier() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        address: {\\n          type: 'string'\\n        },\\n        amount: {\\n          type: 'numeric'\\n        },\\n        cashier: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        dry_run: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        provider: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        type: {\\n          type: 'string'\\n        },\\n        verification_code: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'cashier',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.cashier_payments - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.provider - [Optional] Cashier provider. `crypto` will be default option for crypto currency accounts.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] If set to 1, will send updates whenever there is update to crypto payments.\\n     * @param {String} args.transaction_type - [Optional] Type of transactions to receive.\\n     */\\n\\n  }, {\\n    key: \\\"cashierPayments\\\",\\n    value: function cashierPayments() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        cashier_payments: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        provider: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        },\\n        transaction_type: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'cashier_payments',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.cashier_withdrawal_cancel - Must be `1`\\n     * @param {String} args.id - The unique identifier for the transaction.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"cashierWithdrawalCancel\\\",\\n    value: function cashierWithdrawalCancel() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        cashier_withdrawal_cancel: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        id: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'cashier_withdrawal_cancel',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.change_password - Must be `1`\\n     * @param {String} args.new_password - New password (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address)\\n     * @param {String} args.old_password - Old password for validation (non-empty string, accepts any printable ASCII character)\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"changePassword\\\",\\n    value: function changePassword() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        change_password: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        new_password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        old_password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'change_password',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.contract_id - Internal unique contract identifier.\\n     * @param {Number} args.contract_update - Must be `1`\\n     * @param {Any} args.limit_order -\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"contractUpdate\\\",\\n    value: function contractUpdate() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        contract_id: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        contract_update: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        limit_order: {\\n          stop_loss: {},\\n          take_profit: {}\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'contract_update',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.contract_id - Internal unique contract identifier.\\n     * @param {Number} args.contract_update_history - Must be `1`\\n     * @param {Number} args.limit - [Optional] Maximum number of historical updates to receive.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"contractUpdateHistory\\\",\\n    value: function contractUpdateHistory() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        contract_id: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        contract_update_history: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        limit: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'contract_update_history',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.contracts_for - The short symbol name (obtained from `active_symbols` call).\\n     * @param {String} args.currency - [Optional] Currency of the contract's stake and payout (obtained from `payout_currencies` call).\\n     * @param {String} args.landing_company - [Optional] Indicates which landing company to get a list of contracts for. If you are logged in, your account's landing company will override this field.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.product_type - [Optional] If you specify this field, only contracts tradable through that contract type will be returned.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"contractsFor\\\",\\n    value: function contractsFor() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        contracts_for: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        currency: {\\n          type: 'string'\\n        },\\n        landing_company: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        product_type: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'contracts_for',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.assets - [Optional] Used to set assets to be copied. E.x [\\\"frxUSDJPY\\\", \\\"R_50\\\"]\\n     * @param {String} args.copy_start - API tokens identifying the accounts of trader which will be used to copy trades\\n     * @param {Number} args.max_trade_stake - [Optional] Used to set maximum trade stake to be copied.\\n     * @param {Number} args.min_trade_stake - [Optional] Used to set minimal trade stake to be copied.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Any} args.trade_types - [Optional] Used to set trade types to be copied. E.x [\\\"CALL\\\", \\\"PUT\\\"]\\n     */\\n\\n  }, {\\n    key: \\\"copyStart\\\",\\n    value: function copyStart() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        assets: {},\\n        copy_start: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        max_trade_stake: {\\n          type: 'numeric'\\n        },\\n        min_trade_stake: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        trade_types: {}\\n      };\\n      var allArgs = {\\n        method: 'copy_start',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.copy_stop - API tokens identifying the accounts which needs not to be copied\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"copyStop\\\",\\n    value: function copyStop() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        copy_stop: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'copy_stop',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.copytrading_list - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"copytradingList\\\",\\n    value: function copytradingList() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        copytrading_list: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'copytrading_list',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.copytrading_statistics - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.trader_id - The ID of the target trader.\\n     */\\n\\n  }, {\\n    key: \\\"copytradingStatistics\\\",\\n    value: function copytradingStatistics() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        copytrading_statistics: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        trader_id: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'copytrading_statistics',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.document_format - Document file format\\n     * @param {String} args.document_id - [Optional] Document ID (required for Passport, Proof of ID and Driver's License)\\n     * @param {String} args.document_issuing_country - [Optional] 2-letter country code\\n     * @param {String} args.document_type - Document type\\n     * @param {Number} args.document_upload - Must be `1`\\n     * @param {String} args.expected_checksum - The checksum of the file to be uploaded\\n     * @param {String} args.expiration_date - [Optional] Document expiration date (required for Passport, Proof of ID and Driver's License)\\n     * @param {Number} args.file_size - Document size (should be less than 10MB)\\n     * @param {Number} args.lifetime_valid - [Optional] Boolean value that indicates whether this document is lifetime valid (only applies to POI document types, cancels out the expiration_date given if any)\\n     * @param {String} args.page_type - [Optional] To determine document side\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"documentUpload\\\",\\n    value: function documentUpload() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        document_format: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        document_id: {\\n          type: 'string'\\n        },\\n        document_issuing_country: {\\n          type: 'string'\\n        },\\n        document_type: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        document_upload: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        expected_checksum: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        expiration_date: {\\n          type: 'string'\\n        },\\n        file_size: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        lifetime_valid: {\\n          type: 'numeric'\\n        },\\n        page_type: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'document_upload',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.currency - [Optional] Currency symbol.\\n     * @param {Number} args.economic_calendar - Must be `1`\\n     * @param {Number} args.end_date - [Optional] End date.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.start_date - [Optional] Start date.\\n     */\\n\\n  }, {\\n    key: \\\"economicCalendar\\\",\\n    value: function economicCalendar() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        currency: {\\n          type: 'string'\\n        },\\n        economic_calendar: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        end_date: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        start_date: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'economic_calendar',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.base_currency - Base currency (can be obtained from `payout_currencies` call)\\n     * @param {Number} args.exchange_rates - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"exchangeRates\\\",\\n    value: function exchangeRates() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        base_currency: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        exchange_rates: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'exchange_rates',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.forget - ID of the real-time stream of messages to cancel.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"forget\\\",\\n    value: function forget() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        forget: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'forget',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.forget_all - Cancel all streams by type. The value can be either a single type e.g. `\\\"ticks\\\"`, or an array of multiple types e.g. `[\\\"candles\\\", \\\"ticks\\\"]`.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"forgetAll\\\",\\n    value: function forgetAll() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        forget_all: {\\n          required: 1\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'forget_all',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.get_account_status - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"getAccountStatus\\\",\\n    value: function getAccountStatus() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        get_account_status: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'get_account_status',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.get_financial_assessment - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"getFinancialAssessment\\\",\\n    value: function getFinancialAssessment() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        get_financial_assessment: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'get_financial_assessment',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.get_limits - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"getLimits\\\",\\n    value: function getLimits() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        get_limits: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'get_limits',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.get_self_exclusion - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"getSelfExclusion\\\",\\n    value: function getSelfExclusion() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        get_self_exclusion: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'get_self_exclusion',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.get_settings - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"getSettings\\\",\\n    value: function getSettings() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        get_settings: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'get_settings',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.document_number - The identification number of the document.\\n     * @param {String} args.document_type - The type of the document based on provided `issuing_country` (can obtained from `residence_list` call).\\n     * @param {Number} args.identity_verification_document_add - Must be `1`\\n     * @param {String} args.issuing_country - 2-letter country code (can obtained from `residence_list` call).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"identityVerificationDocumentAdd\\\",\\n    value: function identityVerificationDocumentAdd() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        document_number: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        document_type: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        identity_verification_document_add: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        issuing_country: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'identity_verification_document_add',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.landing_company - Client's 2-letter country code (obtained from `residence_list` call).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"landingCompany\\\",\\n    value: function landingCompany() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        landing_company: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'landing_company',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.landing_company_details - Landing company shortcode.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"landingCompanyDetails\\\",\\n    value: function landingCompanyDetails() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        landing_company_details: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'landing_company_details',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.client_id - The unique identifier for this trading account.\\n     * @param {Number} args.link_wallet - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.wallet_id - The unique identifier for this wallet.\\n     */\\n\\n  }, {\\n    key: \\\"linkWallet\\\",\\n    value: function linkWallet() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        client_id: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        link_wallet: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        wallet_id: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'link_wallet',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.limit - [Optional] Apply limit to count of login history records.\\n     * @param {Number} args.login_history - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"loginHistory\\\",\\n    value: function loginHistory() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        limit: {\\n          type: 'numeric'\\n        },\\n        login_history: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'login_history',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.logout - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"logout\\\",\\n    value: function logout() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        logout: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'logout',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.amount - Amount to deposit (in the currency of from_binary); min = $1 or an equivalent amount, max = $20000 or an equivalent amount\\n     * @param {String} args.from_binary - Binary account loginid to transfer money from\\n     * @param {Number} args.mt5_deposit - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.to_mt5 - MT5 account login to deposit money to\\n     */\\n\\n  }, {\\n    key: \\\"mt5Deposit\\\",\\n    value: function mt5Deposit() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        amount: {\\n          type: 'numeric'\\n        },\\n        from_binary: {\\n          type: 'string'\\n        },\\n        mt5_deposit: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        to_mt5: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'mt5_deposit',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.login - MT5 user login\\n     * @param {Number} args.mt5_get_settings - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"mt5GetSettings\\\",\\n    value: function mt5GetSettings() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        login: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        mt5_get_settings: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'mt5_get_settings',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.mt5_login_list - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"mt5LoginList\\\",\\n    value: function mt5LoginList() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        mt5_login_list: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'mt5_login_list',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.account_type - Account type. If set to 'financial', setting 'mt5_account_type' is also required.\\n     * @param {String} args.address - [Optional] The address of the user. The maximum length of this address field is 128 characters.\\n     * @param {String} args.city - [Optional] User's city of residence.\\n     * @param {String} args.company - [Optional] Name of the client's company. The maximum length of the company name is 64 characters.\\n     * @param {String} args.country - [Optional] 2-letter country code (value received from `residence_list` call).\\n     * @param {String} args.currency - [Optional] MT5 account currency, the default value will be the qualified account currency.\\n     * @param {Number} args.dry_run - [Optional] If set to 1, only validation is performed.\\n     * @param {String} args.email - Email address\\n     * @param {String} args.investPassword - [Optional] The investor password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).\\n     * @param {Number} args.leverage - Client leverage (from 1 to 1000).\\n     * @param {String} args.mainPassword - The master password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address). This field is required.\\n     * @param {String} args.mt5_account_category - [Optional] To choose whether account is conventional or swap_free. Unavailable for financial_stp MT5_account_type\\n     * @param {String} args.mt5_account_type - [Optional] Financial: Variable spreads, High leverage. Financial STP: Variable spreads, Medium Leverage, more products. If 'account_type' set to 'financial', setting 'mt5_account_type' is also required.\\n     * @param {Number} args.mt5_new_account - Must be `1`\\n     * @param {String} args.name - Client's name. The maximum length here is 101 characters.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.phone - [Optional] User's phone number.\\n     * @param {String} args.phonePassword - [Optional] The user's phone password.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Any} args.server - [Optional] Trade server.\\n     * @param {String} args.state - [Optional] User's state (region) of residence.\\n     * @param {String} args.zipCode - [Optional] User's zip code.\\n     */\\n\\n  }, {\\n    key: \\\"mt5NewAccount\\\",\\n    value: function mt5NewAccount() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_type: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        address: {\\n          type: 'string'\\n        },\\n        city: {\\n          type: 'string'\\n        },\\n        company: {\\n          type: 'string'\\n        },\\n        country: {\\n          type: 'string'\\n        },\\n        currency: {\\n          type: 'string'\\n        },\\n        dry_run: {\\n          type: 'numeric'\\n        },\\n        email: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        investPassword: {\\n          type: 'string'\\n        },\\n        leverage: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        mainPassword: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        mt5_account_category: {\\n          type: 'string'\\n        },\\n        mt5_account_type: {\\n          type: 'string'\\n        },\\n        mt5_new_account: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        name: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        phone: {\\n          type: 'string'\\n        },\\n        phonePassword: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        server: {},\\n        state: {\\n          type: 'string'\\n        },\\n        zipCode: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'mt5_new_account',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.login - MT5 user login\\n     * @param {Number} args.mt5_password_change - Must be `1`\\n     * @param {String} args.new_password - New password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).\\n     * @param {String} args.old_password - Old password for validation (non-empty string, accepts any printable ASCII character)\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.password_type - [Optional] Type of the password to change.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"mt5PasswordChange\\\",\\n    value: function mt5PasswordChange() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        login: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        mt5_password_change: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        new_password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        old_password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        password_type: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'mt5_password_change',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.login - MT5 user login\\n     * @param {Number} args.mt5_password_check - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.password - The password of the account.\\n     * @param {String} args.password_type - [Optional] Type of the password to check.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"mt5PasswordCheck\\\",\\n    value: function mt5PasswordCheck() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        login: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        mt5_password_check: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        password_type: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'mt5_password_check',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.login - MT5 user login\\n     * @param {Number} args.mt5_password_reset - Must be `1`\\n     * @param {String} args.new_password - New password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.password_type - [Optional] Type of the password to reset.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.verification_code - Email verification code (received from a `verify_email` call, which must be done first)\\n     */\\n\\n  }, {\\n    key: \\\"mt5PasswordReset\\\",\\n    value: function mt5PasswordReset() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        login: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        mt5_password_reset: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        new_password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        password_type: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        verification_code: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'mt5_password_reset',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.amount - Amount to withdraw (in the currency of the MT5 account); min = $1 or an equivalent amount, max = $20000 or an equivalent amount.\\n     * @param {String} args.from_mt5 - MT5 account login to withdraw money from\\n     * @param {Number} args.mt5_withdrawal - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.to_binary - Binary account loginid to transfer money to\\n     */\\n\\n  }, {\\n    key: \\\"mt5Withdrawal\\\",\\n    value: function mt5Withdrawal() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        amount: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        from_mt5: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        mt5_withdrawal: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        to_binary: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'mt5_withdrawal',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.accept_risk - Show whether client has accepted risk disclaimer.\\n     * @param {String} args.account_opening_reason - [Optional] Purpose and reason for requesting the account opening.\\n     * @param {String} args.account_turnover - [Optional] The anticipated account turnover.\\n     * @param {String} args.address_city - Within 100 characters\\n     * @param {String} args.address_line_1 - Within 70 characters, with no leading whitespaces and may contain letters/numbers and/or any of following characters '.,:;()@#/-\\n     * @param {String} args.address_line_2 - [Optional] Within 70 characters.\\n     * @param {String} args.address_postcode - [Optional] Within 20 characters and may not contain '+'.\\n     * @param {String} args.address_state - [Optional] Possible value receive from `states_list` call.\\n     * @param {String} args.affiliate_token - [Optional] Affiliate token, within 32 characters.\\n     * @param {String} args.binary_options_trading_experience - [Optional] Binary options trading experience.\\n     * @param {String} args.binary_options_trading_frequency - [Optional] Binary options trading frequency.\\n     * @param {String} args.cfd_trading_experience - [Optional] CFDs trading experience.\\n     * @param {String} args.cfd_trading_frequency - [Optional] CFDs trading frequency.\\n     * @param {String} args.citizen - [Optional] Country of legal citizenship, 2-letter country code. Possible value receive from `residence_list` call.\\n     * @param {String} args.client_type - [Optional] Indicates whether this is for a client requesting an account with professional status.\\n     * @param {String} args.date_of_birth - Date of birth format: yyyy-mm-dd.\\n     * @param {String} args.education_level - Level of Education\\n     * @param {String} args.employment_industry - Industry of Employment.\\n     * @param {String} args.employment_status - [Optional] Employment Status.\\n     * @param {String} args.estimated_worth - Estimated Net Worth.\\n     * @param {String} args.first_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.\\n     * @param {String} args.forex_trading_experience - [Optional] Forex trading experience.\\n     * @param {String} args.forex_trading_frequency - [Optional] Forex trading frequency.\\n     * @param {String} args.income_source - Income Source.\\n     * @param {String} args.last_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.\\n     * @param {String} args.net_income - Net Annual Income.\\n     * @param {Number} args.new_account_maltainvest - Must be `1`\\n     * @param {Number} args.non_pep_declaration - [Optional] Indicates client's self-declaration of not being a PEP/RCA.\\n     * @param {String} args.occupation - Occupation.\\n     * @param {String} args.other_instruments_trading_experience - [Optional] Trading experience in other financial instruments.\\n     * @param {String} args.other_instruments_trading_frequency - [Optional] Trading frequency in other financial instruments.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Any} args.phone - [Optional] Starting with `+` followed by 9-35 digits, hyphens or space.\\n     * @param {String} args.place_of_birth - [Optional] Place of birth, 2-letter country code.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.residence - 2-letter country code, possible value receive from `residence_list` call.\\n     * @param {String} args.salutation - Accept any value in enum list.\\n     * @param {String} args.secret_answer - [Optional] Answer to secret question, within 4-50 characters.\\n     * @param {String} args.secret_question - [Optional] Accept any value in enum list.\\n     * @param {String} args.source_of_wealth - [Optional] Source of wealth.\\n     * @param {String} args.tax_identification_number - Tax identification number. Only applicable for real money account. Required for `maltainvest` landing company.\\n     * @param {String} args.tax_residence - Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for `maltainvest` landing company.\\n     */\\n\\n  }, {\\n    key: \\\"newAccountMaltainvest\\\",\\n    value: function newAccountMaltainvest() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        accept_risk: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        account_opening_reason: {\\n          type: 'string'\\n        },\\n        account_turnover: {\\n          type: 'string'\\n        },\\n        address_city: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        address_line_1: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        address_line_2: {\\n          type: 'string'\\n        },\\n        address_postcode: {\\n          type: 'string'\\n        },\\n        address_state: {\\n          type: 'string'\\n        },\\n        affiliate_token: {\\n          type: 'string'\\n        },\\n        binary_options_trading_experience: {\\n          type: 'string'\\n        },\\n        binary_options_trading_frequency: {\\n          type: 'string'\\n        },\\n        cfd_trading_experience: {\\n          type: 'string'\\n        },\\n        cfd_trading_frequency: {\\n          type: 'string'\\n        },\\n        citizen: {\\n          type: 'string'\\n        },\\n        client_type: {\\n          type: 'string'\\n        },\\n        date_of_birth: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        education_level: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        employment_industry: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        employment_status: {\\n          type: 'string'\\n        },\\n        estimated_worth: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        first_name: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        forex_trading_experience: {\\n          type: 'string'\\n        },\\n        forex_trading_frequency: {\\n          type: 'string'\\n        },\\n        income_source: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        last_name: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        net_income: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        new_account_maltainvest: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        non_pep_declaration: {\\n          type: 'numeric'\\n        },\\n        occupation: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        other_instruments_trading_experience: {\\n          type: 'string'\\n        },\\n        other_instruments_trading_frequency: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        phone: {},\\n        place_of_birth: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        residence: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        salutation: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        secret_answer: {\\n          type: 'string'\\n        },\\n        secret_question: {\\n          type: 'string'\\n        },\\n        source_of_wealth: {\\n          type: 'string'\\n        },\\n        tax_identification_number: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        tax_residence: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'new_account_maltainvest',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.account_opening_reason - [Optional] Purpose and reason for requesting the account opening.\\n     * @param {String} args.account_turnover - [Optional] The anticipated account turnover.\\n     * @param {String} args.address_city - [Optional] Within 100 characters.\\n     * @param {String} args.address_line_1 - Within 70 characters, with no leading whitespaces and may contain letters/numbers and/or any of following characters '.,:;()@#/-\\n     * @param {String} args.address_line_2 - [Optional] Within 70 characters.\\n     * @param {String} args.address_postcode - [Optional] Within 20 characters and may not contain '+'.\\n     * @param {String} args.address_state - [Optional] Possible value receive from `states_list` call.\\n     * @param {String} args.affiliate_token - [Optional] Affiliate token, within 32 characters.\\n     * @param {Any} args.citizen - [Optional] Country of legal citizenship, 2-letter country code.\\n     * @param {String} args.client_type - [Optional] Indicates whether this is for a client requesting an account with professional status.\\n     * @param {String} args.currency - [Optional] To set currency of the account. List of supported currencies can be acquired with `payout_currencies` call.\\n     * @param {String} args.date_of_birth - Date of birth format: `yyyy-mm-dd`.\\n     * @param {String} args.first_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.\\n     * @param {String} args.last_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.\\n     * @param {Number} args.new_account_real - Must be `1`\\n     * @param {Number} args.non_pep_declaration - [Optional] Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Any} args.phone - [Optional] Starting with `+` followed by 9-35 digits, hyphens or space.\\n     * @param {String} args.place_of_birth - [Optional] Place of birth, 2-letter country code.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.residence - 2-letter country code, possible value receive from `residence_list` call.\\n     * @param {String} args.salutation - [Optional] Accept any value in enum list.\\n     * @param {String} args.secret_answer - [Optional] Answer to secret question, within 4-50 characters. Required for new account and existing client details will be used if client open another account.\\n     * @param {String} args.secret_question - [Optional] Accept any value in enum list. Required for new account and existing client details will be used if client open another account.\\n     * @param {String} args.tax_identification_number - [Optional] Tax identification number. Only applicable for real money account. Required for `maltainvest` landing company.\\n     * @param {String} args.tax_residence - [Optional] Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for `maltainvest` landing company.\\n     */\\n\\n  }, {\\n    key: \\\"newAccountReal\\\",\\n    value: function newAccountReal() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_opening_reason: {\\n          type: 'string'\\n        },\\n        account_turnover: {\\n          type: 'string'\\n        },\\n        address_city: {\\n          type: 'string'\\n        },\\n        address_line_1: {\\n          type: 'string'\\n        },\\n        address_line_2: {\\n          type: 'string'\\n        },\\n        address_postcode: {\\n          type: 'string'\\n        },\\n        address_state: {\\n          type: 'string'\\n        },\\n        affiliate_token: {\\n          type: 'string'\\n        },\\n        citizen: {},\\n        client_type: {\\n          type: 'string'\\n        },\\n        currency: {\\n          type: 'string'\\n        },\\n        date_of_birth: {\\n          type: 'string'\\n        },\\n        first_name: {\\n          type: 'string'\\n        },\\n        last_name: {\\n          type: 'string'\\n        },\\n        new_account_real: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        non_pep_declaration: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        phone: {},\\n        place_of_birth: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        residence: {\\n          type: 'string'\\n        },\\n        salutation: {\\n          type: 'string'\\n        },\\n        secret_answer: {\\n          type: 'string'\\n        },\\n        secret_question: {\\n          type: 'string'\\n        },\\n        tax_identification_number: {\\n          type: 'string'\\n        },\\n        tax_residence: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'new_account_real',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.affiliate_token - [Optional] Affiliate token, within 32 characters.\\n     * @param {String} args.client_password - Password (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).\\n     * @param {String} args.date_first_contact - [Optional] Date of first contact, format: `yyyy-mm-dd` in GMT timezone.\\n     * @param {Number} args.email_consent - [Optional] Boolean value: 1 or 0, indicating whether the client has given consent for marketing emails.\\n     * @param {String} args.gclid_url - [Optional] Google Click Identifier to track source.\\n     * @param {Number} args.new_account_virtual - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.residence - 2-letter country code (obtained from `residence_list` call).\\n     * @param {String} args.signup_device - [Optional] Show whether user has used mobile or desktop.\\n     * @param {String} args.type - Account type\\n     * @param {Any} args.utm_ad_id - [Optional] Identifier of particular ad. Value must match Regex pattern to be recorded\\n     * @param {Any} args.utm_adgroup_id - [Optional] Identifier of ad group in the campaign. Value must match Regex pattern to be recorded\\n     * @param {Any} args.utm_adrollclk_id - [Optional] Unique identifier of click on AdRoll ads platform. Value must match Regex pattern to be recorded\\n     * @param {Any} args.utm_campaign - [Optional] Identifies a specific product promotion or strategic campaign such as a spring sale or other promotions. Value must match Regex pattern to be recorded\\n     * @param {Any} args.utm_campaign_id - [Optional] Identifier of paid ad campaign. Value must match Regex pattern to be recorded\\n     * @param {Any} args.utm_content - [Optional] Used to differentiate similar content, or links within the same ad. Value must match Regex pattern to be recorded\\n     * @param {Any} args.utm_fbcl_id - [Optional] Unique identifier of click on Facebook ads platform. Value must match Regex pattern to be recorded\\n     * @param {Any} args.utm_gl_client_id - [Optional] Unique visitor identifier on Google Ads platform. Value must match Regex pattern to be recorded\\n     * @param {Any} args.utm_medium - [Optional] Identifies the medium the link was used upon such as: email, CPC, or other methods of sharing. Value must match Regex pattern to be recorded\\n     * @param {Any} args.utm_msclk_id - [Optional] Unique click identifier on Microsoft Bing ads platform. Value must match Regex pattern to be recorded\\n     * @param {Any} args.utm_source - [Optional] Identifies the source of traffic such as: search engine, newsletter, or other referral. Value must match Regex pattern to be recorded\\n     * @param {Any} args.utm_term - [Optional] Used to send information related to the campaign term like paid search keywords. Value must match Regex pattern to be recorded\\n     * @param {String} args.verification_code - Email verification code (received from a `verify_email` call, which must be done first).\\n     */\\n\\n  }, {\\n    key: \\\"newAccountVirtual\\\",\\n    value: function newAccountVirtual() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        affiliate_token: {\\n          type: 'string'\\n        },\\n        client_password: {\\n          type: 'string'\\n        },\\n        date_first_contact: {\\n          type: 'string'\\n        },\\n        email_consent: {\\n          type: 'numeric'\\n        },\\n        gclid_url: {\\n          type: 'string'\\n        },\\n        new_account_virtual: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        residence: {\\n          type: 'string'\\n        },\\n        signup_device: {\\n          type: 'string'\\n        },\\n        type: {\\n          type: 'string'\\n        },\\n        utm_ad_id: {},\\n        utm_adgroup_id: {},\\n        utm_adrollclk_id: {},\\n        utm_campaign: {},\\n        utm_campaign_id: {},\\n        utm_content: {},\\n        utm_fbcl_id: {},\\n        utm_gl_client_id: {},\\n        utm_medium: {},\\n        utm_msclk_id: {},\\n        utm_source: {},\\n        utm_term: {},\\n        verification_code: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'new_account_virtual',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.address_city - [Optional] Within 35 characters.\\n     * @param {String} args.address_line_1 - [Optional] Mailing address.\\n     * @param {String} args.address_line_2 - [Optional] Within 70 characters.\\n     * @param {String} args.address_postcode - [Optional] Within 20 characters and may not contain '+'.\\n     * @param {String} args.address_state - [Optional] Possible value receive from `states_list` call.\\n     * @param {String} args.currency - [Optional] To set currency of the account. List of supported currencies can be acquired with `payout_currencies` call.\\n     * @param {String} args.date_of_birth - [Optional] Date of birth format: `yyyy-mm-dd`.\\n     * @param {String} args.first_name - [Optional] Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.\\n     * @param {String} args.last_name - [Optional] Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.\\n     * @param {Number} args.new_account_wallet - Must be `1`\\n     * @param {Number} args.non_pep_declaration - [Optional] Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.payment_method - To set method which is used to transfer to/from wallet.\\n     * @param {String} args.phone - [Optional] Starting with `+` followed by 8-35 digits, allowing hyphens or space.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"newAccountWallet\\\",\\n    value: function newAccountWallet() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        address_city: {\\n          type: 'string'\\n        },\\n        address_line_1: {\\n          type: 'string'\\n        },\\n        address_line_2: {\\n          type: 'string'\\n        },\\n        address_postcode: {\\n          type: 'string'\\n        },\\n        address_state: {\\n          type: 'string'\\n        },\\n        currency: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        date_of_birth: {\\n          type: 'string'\\n        },\\n        first_name: {\\n          type: 'string'\\n        },\\n        last_name: {\\n          type: 'string'\\n        },\\n        new_account_wallet: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        non_pep_declaration: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        payment_method: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        phone: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'new_account_wallet',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.args -\\n     * @param {String} args.category - The category or nature of the event.\\n     * @param {String} args.event - The name of the event.\\n     * @param {Number} args.notification_event - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"notificationEvent\\\",\\n    value: function notificationEvent() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        args: {\\n          documents: {}\\n        },\\n        category: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        event: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        notification_event: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'notification_event',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.oauth_apps - Must be `1`\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"oauthApps\\\",\\n    value: function oauthApps() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        oauth_apps: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'oauth_apps',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.amount - The total amount of the advert, in advertiser's account currency.\\n     * @param {String} args.contact_info - [Optional] Advertiser contact information. Only applicable for 'sell adverts'.\\n     * @param {String} args.description - [Optional] General information about the advert.\\n     * @param {String} args.local_currency - [Optional] Local currency for this advert. If not provided, will use the currency of client's residence by default.\\n     * @param {Number} args.max_order_amount - Maximum allowed amount for the orders of this advert, in advertiser's `account_currency`. Should be less than or equal to total `amount` of the advert.\\n     * @param {Number} args.min_order_amount - Minimum allowed amount for the orders of this advert, in advertiser's `account_currency`. Should be less than `max_order_amount`.\\n     * @param {Number} args.p2p_advert_create - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.payment_info - [Optional] Payment instructions. Only applicable for 'sell adverts'.\\n     * @param {String} args.payment_method - Supported payment methods. Separate multiple values with a comma, maximum 3.\\n     * @param {Any} args.payment_method_ids - IDs of payment methods, only applicable for sell ads.\\n     * @param {Number} args.rate - Conversion rate from advertiser's account currency to `local_currency`.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.type - Whether this is a buy or a sell.\\n     */\\n\\n  }, {\\n    key: \\\"p2pAdvertCreate\\\",\\n    value: function p2pAdvertCreate() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        amount: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        contact_info: {\\n          type: 'string'\\n        },\\n        description: {\\n          type: 'string'\\n        },\\n        local_currency: {\\n          type: 'string'\\n        },\\n        max_order_amount: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        min_order_amount: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        p2p_advert_create: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        payment_info: {\\n          type: 'string'\\n        },\\n        payment_method: {\\n          type: 'string'\\n        },\\n        payment_method_ids: {},\\n        rate: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        type: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_advert_create',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.id - [Optional] The unique identifier for this advert. Optional when subscribe is 1. If not provided, all advertiser adverts will be subscribed.\\n     * @param {Number} args.p2p_advert_info - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] If set to 1, will send updates when changes occur. Optional when id is provided.\\n     * @param {Number} args.use_client_limits - [Optional] If set to 1, the maximum order amount will be adjusted to the current balance and turnover limits of the account.\\n     */\\n\\n  }, {\\n    key: \\\"p2pAdvertInfo\\\",\\n    value: function p2pAdvertInfo() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        id: {\\n          type: 'string'\\n        },\\n        p2p_advert_info: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        },\\n        use_client_limits: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_advert_info',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.advertiser_id - [Optional] ID of the advertiser to list adverts for.\\n     * @param {String} args.advertiser_name - [Optional] Search for advertiser by name. Partial matches will be returned.\\n     * @param {Number} args.amount - [Optional] How much to buy or sell, used to calculate prices.\\n     * @param {String} args.counterparty_type - [Optional] Filter the adverts by `counterparty_type`.\\n     * @param {Number} args.favourites_only - [Optional] Only show adverts from favourite advertisers. Default is 0.\\n     * @param {Number} args.limit - [Optional] Used for paging.\\n     * @param {String} args.local_currency - [Optional] Currency to conduct payment transaction in, defaults to the main currency for the client's country.\\n     * @param {Number} args.offset - [Optional] Used for paging.\\n     * @param {Number} args.p2p_advert_list - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Any} args.payment_method - [Optional] Search by supported payment methods.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.sort_by - [Optional] How the results are sorted: best rate, or advertiser completion rate.\\n     * @param {Number} args.use_client_limits - [Optional] If set to 1, ads that exceed this account's balance or turnover limits will not be shown.\\n     */\\n\\n  }, {\\n    key: \\\"p2pAdvertList\\\",\\n    value: function p2pAdvertList() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        advertiser_id: {\\n          type: 'string'\\n        },\\n        advertiser_name: {\\n          type: 'string'\\n        },\\n        amount: {\\n          type: 'numeric'\\n        },\\n        counterparty_type: {\\n          type: 'string'\\n        },\\n        favourites_only: {\\n          type: 'numeric'\\n        },\\n        limit: {\\n          type: 'numeric'\\n        },\\n        local_currency: {\\n          type: 'string'\\n        },\\n        offset: {\\n          type: 'numeric'\\n        },\\n        p2p_advert_list: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        payment_method: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        sort_by: {\\n          type: 'string'\\n        },\\n        use_client_limits: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_advert_list',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.delete - [Optional] If set to 1, permanently deletes the advert.\\n     * @param {String} args.id - The unique identifier for this advert.\\n     * @param {Number} args.is_active - [Optional] Activate or deactivate the advert.\\n     * @param {Number} args.p2p_advert_update - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.payment_method - [Optional] Supported payment methods. Separate multiple values with a comma, maximum 3.\\n     * @param {Any} args.payment_method_ids - [Optional] IDs of payment methods, only applicable for sell ads. Will replace exisiting methods.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"p2pAdvertUpdate\\\",\\n    value: function p2pAdvertUpdate() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        \\\"delete\\\": {\\n          type: 'numeric'\\n        },\\n        id: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        is_active: {\\n          type: 'numeric'\\n        },\\n        p2p_advert_update: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        payment_method: {\\n          type: 'string'\\n        },\\n        payment_method_ids: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_advert_update',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.limit - [Optional] Used for paging. This value will also apply to subsription responses.\\n     * @param {Number} args.offset - [Optional] Used for paging. This value will also apply to subsription responses.\\n     * @param {Number} args.p2p_advertiser_adverts - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"p2pAdvertiserAdverts\\\",\\n    value: function p2pAdvertiserAdverts() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        limit: {\\n          type: 'numeric'\\n        },\\n        offset: {\\n          type: 'numeric'\\n        },\\n        p2p_advertiser_adverts: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_advertiser_adverts',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.contact_info - [Optional] Advertiser's contact information, to be used as a default for new sell adverts.\\n     * @param {String} args.default_advert_description - [Optional] Default description that can be used every time an advert is created.\\n     * @param {String} args.name - The advertiser's displayed name.\\n     * @param {Number} args.p2p_advertiser_create - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.payment_info - [Optional] Advertiser's payment information, to be used as a default for new sell adverts.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] If set to 1, will send updates whenever there is an update to advertiser\\n     */\\n\\n  }, {\\n    key: \\\"p2pAdvertiserCreate\\\",\\n    value: function p2pAdvertiserCreate() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        contact_info: {\\n          type: 'string'\\n        },\\n        default_advert_description: {\\n          type: 'string'\\n        },\\n        name: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        p2p_advertiser_create: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        payment_info: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_advertiser_create',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.id - [Optional] The unique identifier for this advertiser. If not provided, returns advertiser information about the current account.\\n     * @param {Number} args.p2p_advertiser_info - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] If set to 1, will send updates whenever there is an update to advertiser\\n     */\\n\\n  }, {\\n    key: \\\"p2pAdvertiserInfo\\\",\\n    value: function p2pAdvertiserInfo() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        id: {\\n          type: 'string'\\n        },\\n        p2p_advertiser_info: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_advertiser_info',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.create - Contains new payment method entries.\\n     * @param {Any} args.delete - Contains payment methods to delete.\\n     * @param {Number} args.p2p_advertiser_payment_methods - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Any} args.update - Contains payment methods to update.\\n     */\\n\\n  }, {\\n    key: \\\"p2pAdvertiserPaymentMethods\\\",\\n    value: function p2pAdvertiserPaymentMethods() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        create: {},\\n        \\\"delete\\\": {},\\n        p2p_advertiser_payment_methods: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        update: {}\\n      };\\n      var allArgs = {\\n        method: 'p2p_advertiser_payment_methods',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.add_blocked - IDs of advertisers to block.\\n     * @param {Any} args.add_favourites - IDs of advertisers to add as favourites.\\n     * @param {Number} args.p2p_advertiser_relations - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Any} args.remove_blocked - IDs of advertisers to remove from blocked.\\n     * @param {Any} args.remove_favourites - IDs of advertisers to remove from favourites.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"p2pAdvertiserRelations\\\",\\n    value: function p2pAdvertiserRelations() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        add_blocked: {},\\n        add_favourites: {},\\n        p2p_advertiser_relations: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        remove_blocked: {},\\n        remove_favourites: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_advertiser_relations',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.contact_info - [Optional] Advertiser's contact information, to be used as a default for new sell adverts.\\n     * @param {String} args.default_advert_description - [Optional] Default description that can be used every time an advert is created.\\n     * @param {Number} args.is_listed - [Optional] Used to set if the advertiser's adverts could be listed. When `0`, adverts won't be listed regardless of they are active or not. This doesn't change the `is_active` of each individual advert.\\n     * @param {Number} args.p2p_advertiser_update - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.payment_info - [Optional] Advertiser's payment information, to be used as a default for new sell adverts.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.show_name - [Optional] When `1`, the advertiser's real name will be displayed on to other users on adverts and orders.\\n     */\\n\\n  }, {\\n    key: \\\"p2pAdvertiserUpdate\\\",\\n    value: function p2pAdvertiserUpdate() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        contact_info: {\\n          type: 'string'\\n        },\\n        default_advert_description: {\\n          type: 'string'\\n        },\\n        is_listed: {\\n          type: 'numeric'\\n        },\\n        p2p_advertiser_update: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        payment_info: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        show_name: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_advertiser_update',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.order_id - The unique identifier for the order to create the chat for.\\n     * @param {Number} args.p2p_chat_create - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"p2pChatCreate\\\",\\n    value: function p2pChatCreate() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        order_id: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        p2p_chat_create: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_chat_create',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.id - The unique identifier for this order.\\n     * @param {Number} args.p2p_order_cancel - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"p2pOrderCancel\\\",\\n    value: function p2pOrderCancel() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        id: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        p2p_order_cancel: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_order_cancel',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.id - The unique identifier for this order.\\n     * @param {Number} args.p2p_order_confirm - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"p2pOrderConfirm\\\",\\n    value: function p2pOrderConfirm() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        id: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        p2p_order_confirm: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_order_confirm',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.advert_id - The unique identifier for the advert to create an order against.\\n     * @param {Number} args.amount - The amount of currency to be bought or sold.\\n     * @param {String} args.contact_info - [Optional] Seller contact information. Only applicable for 'sell orders'.\\n     * @param {Number} args.p2p_order_create - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.payment_info - [Optional] Payment instructions, only applicable for sell orders.\\n     * @param {Any} args.payment_method_ids - IDs of payment methods, only applicable for sell orders.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] If set to 1, will send updates whenever there is an update to the order.\\n     */\\n\\n  }, {\\n    key: \\\"p2pOrderCreate\\\",\\n    value: function p2pOrderCreate() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        advert_id: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        amount: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        contact_info: {\\n          type: 'string'\\n        },\\n        p2p_order_create: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        payment_info: {\\n          type: 'string'\\n        },\\n        payment_method_ids: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_order_create',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.dispute_reason - The predefined dispute reason\\n     * @param {String} args.id - The unique identifier for this order.\\n     * @param {Number} args.p2p_order_dispute - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"p2pOrderDispute\\\",\\n    value: function p2pOrderDispute() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        dispute_reason: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        id: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        p2p_order_dispute: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_order_dispute',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.id - The unique identifier for the order.\\n     * @param {Number} args.p2p_order_info - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] If set to 1, will send updates whenever there is an update to order\\n     */\\n\\n  }, {\\n    key: \\\"p2pOrderInfo\\\",\\n    value: function p2pOrderInfo() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        id: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        p2p_order_info: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_order_info',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.active - [Optional] Should be 1 to list active, 0 to list inactive (historical).\\n     * @param {String} args.advert_id - [Optional] If present, lists orders applying to a specific advert.\\n     * @param {Number} args.limit - [Optional] Used for paging.\\n     * @param {Number} args.offset - [Optional] Used for paging.\\n     * @param {Number} args.p2p_order_list - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] If set to 1, will send updates whenever there is a change to any order belonging to you.\\n     */\\n\\n  }, {\\n    key: \\\"p2pOrderList\\\",\\n    value: function p2pOrderList() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        active: {\\n          type: 'numeric'\\n        },\\n        advert_id: {\\n          type: 'string'\\n        },\\n        limit: {\\n          type: 'numeric'\\n        },\\n        offset: {\\n          type: 'numeric'\\n        },\\n        p2p_order_list: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_order_list',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.p2p_payment_methods - Must be 1\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"p2pPaymentMethods\\\",\\n    value: function p2pPaymentMethods() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        p2p_payment_methods: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'p2p_payment_methods',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.country - [Optional] 2-letter country code (ISO standard).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.payment_methods - Must be `1`\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"paymentMethods\\\",\\n    value: function paymentMethods() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        country: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        payment_methods: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'payment_methods',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.affiliate_id - [Optional] Client's My Affiliate id, if exists.\\n     * @param {Number} args.code_of_conduct_approval - Indicates client's agreement with the Code of Conduct.\\n     * @param {Number} args.commission_deposit - Commission  (%) the agent wants to take on deposits\\n     * @param {Number} args.commission_withdrawal - Commission  (%) the agent wants to take on withdrawals\\n     * @param {String} args.email - Payment agent's email address.\\n     * @param {String} args.information - [Optional] Information about payment agent and their proposed service.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.payment_agent_name - The name with which the payment agent is going to be identified.\\n     * @param {Number} args.paymentagent_create - Must be 1\\n     * @param {String} args.phone - Payment agent's phone number with coutry code.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Any} args.supported_payment_methods - A list of supported payment methods.\\n     * @param {String} args.url - The URL of payment agent's website.\\n     */\\n\\n  }, {\\n    key: \\\"paymentagentCreate\\\",\\n    value: function paymentagentCreate() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        affiliate_id: {\\n          type: 'string'\\n        },\\n        code_of_conduct_approval: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        commission_deposit: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        commission_withdrawal: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        email: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        information: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        payment_agent_name: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        paymentagent_create: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        phone: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        supported_payment_methods: {\\n          required: 1\\n        },\\n        url: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'paymentagent_create',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.paymentagent_details - Must be 1\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"paymentagentDetails\\\",\\n    value: function paymentagentDetails() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        paymentagent_details: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'paymentagent_details',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.currency - [Optional] If specified, only payment agents that supports that currency will be returned (obtained from `payout_currencies` call).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.paymentagent_list - Client's 2-letter country code (obtained from `residence_list` call).\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"paymentagentList\\\",\\n    value: function paymentagentList() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        currency: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        paymentagent_list: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'paymentagent_list',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.amount - The amount to transfer.\\n     * @param {String} args.currency - Currency code.\\n     * @param {String} args.description - [Optional] Remarks about the transfer.\\n     * @param {Number} args.dry_run - [Optional] If set to `1`, just do validation.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.paymentagent_transfer - Must be `1`\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.transfer_to - The loginid of the recipient account.\\n     */\\n\\n  }, {\\n    key: \\\"paymentagentTransfer\\\",\\n    value: function paymentagentTransfer() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        amount: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        currency: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        description: {\\n          type: 'string'\\n        },\\n        dry_run: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        paymentagent_transfer: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        transfer_to: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'paymentagent_transfer',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.amount - The amount to withdraw to the payment agent.\\n     * @param {String} args.currency - The currency code.\\n     * @param {String} args.description - [Optional] Remarks about the withdraw. Only letters, numbers, space, period, comma, - ' are allowed.\\n     * @param {Number} args.dry_run - [Optional] If set to 1, just do validation.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.paymentagent_loginid - The payment agent loginid received from the `paymentagent_list` call.\\n     * @param {Number} args.paymentagent_withdraw - Must be `1`\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.verification_code - Email verification code (received from a `verify_email` call, which must be done first)\\n     */\\n\\n  }, {\\n    key: \\\"paymentagentWithdraw\\\",\\n    value: function paymentagentWithdraw() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        amount: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        currency: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        description: {\\n          type: 'string'\\n        },\\n        dry_run: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        paymentagent_loginid: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        paymentagent_withdraw: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        verification_code: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'paymentagent_withdraw',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.payout_currencies - Must be `1`\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"payoutCurrencies\\\",\\n    value: function payoutCurrencies() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        payout_currencies: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'payout_currencies',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.ping - Must be `1`\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"ping\\\",\\n    value: function ping() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        ping: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'ping',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.contract_type - Return only contracts of the specified types\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.portfolio - Must be `1`\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"portfolio\\\",\\n    value: function portfolio() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        contract_type: {},\\n        passthrough: {},\\n        portfolio: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'portfolio',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.contract_type - Return only contracts of the specified types\\n     * @param {String} args.date_from - [Optional] Start date (epoch or YYYY-MM-DD)\\n     * @param {String} args.date_to - [Optional] End date (epoch or YYYY-MM-DD)\\n     * @param {Number} args.description - [Optional] If set to 1, will return full contracts description.\\n     * @param {Number} args.limit - [Optional] Apply upper limit to count of transactions received.\\n     * @param {Number} args.offset - [Optional] Number of transactions to skip.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.profit_table - Must be `1`\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.sort - [Optional] Sort direction.\\n     */\\n\\n  }, {\\n    key: \\\"profitTable\\\",\\n    value: function profitTable() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        contract_type: {},\\n        date_from: {\\n          type: 'string'\\n        },\\n        date_to: {\\n          type: 'string'\\n        },\\n        description: {\\n          type: 'numeric'\\n        },\\n        limit: {\\n          type: 'numeric'\\n        },\\n        offset: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        profit_table: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        sort: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'profit_table',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.amount - [Optional] Proposed contract payout or stake, or multiplier (for lookbacks).\\n     * @param {String} args.barrier - [Optional] Barrier for the contract (or last digit prediction for digit contracts). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers. Not needed for lookbacks.\\n     * @param {String} args.barrier2 - [Optional] Low barrier for the contract (for contracts with two barriers). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers. Not needed for lookbacks.\\n     * @param {String} args.basis - [Optional] Indicates type of the `amount`.\\n     * @param {String} args.cancellation - Cancellation duration option (only for `MULTUP` and `MULTDOWN` contracts).\\n     * @param {String} args.contract_type - The proposed contract type\\n     * @param {String} args.currency - This can only be the account-holder's currency (obtained from `payout_currencies` call).\\n     * @param {Number} args.date_expiry - [Optional] Epoch value of the expiry time of the contract. Either date_expiry or duration is required.\\n     * @param {Number} args.date_start - [Optional] Indicates epoch value of the starting time of the contract. If left empty, the start time of the contract is now.\\n     * @param {Number} args.duration - [Optional] Duration quantity. Either date_expiry or duration is required.\\n     * @param {String} args.duration_unit - [Optional] Duration unit - `s`: seconds, `m`: minutes, `h`: hours, `d`: days, `t`: ticks.\\n     * @param {Any} args.limit_order -\\n     * @param {Number} args.multiplier - [Optional] The multiplier for non-binary options. E.g. lookbacks.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.product_type - [Optional] The product type.\\n     * @param {Number} args.proposal - Must be `1`\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.selected_tick - [Optional] The tick that is predicted to have the highest/lowest value - for `TICKHIGH` and `TICKLOW` contracts.\\n     * @param {Number} args.subscribe - [Optional] 1 - to initiate a realtime stream of prices. Note that tick trades (without a user-defined barrier), digit trades and less than 24 hours at-the-money contracts for the following underlying symbols are not streamed: `R_10`, `R_25`, `R_50`, `R_75`, `R_100`, `RDBULL`, `RDBEAR` (this is because their price is constant).\\n     * @param {String} args.symbol - The short symbol name (obtained from `active_symbols` call).\\n     * @param {Number} args.trading_period_start - [Optional] Required only for multi-barrier trading. Defines the epoch value of the trading period start time.\\n     */\\n\\n  }, {\\n    key: \\\"proposal\\\",\\n    value: function proposal() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        amount: {\\n          type: 'numeric'\\n        },\\n        barrier: {\\n          type: 'string'\\n        },\\n        barrier2: {\\n          type: 'string'\\n        },\\n        basis: {\\n          type: 'string'\\n        },\\n        cancellation: {\\n          type: 'string'\\n        },\\n        contract_type: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        currency: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        date_expiry: {\\n          type: 'numeric'\\n        },\\n        date_start: {\\n          type: 'numeric'\\n        },\\n        duration: {\\n          type: 'numeric'\\n        },\\n        duration_unit: {\\n          type: 'string'\\n        },\\n        limit_order: {\\n          stop_loss: {\\n            type: 'numeric'\\n          },\\n          take_profit: {\\n            type: 'numeric'\\n          }\\n        },\\n        multiplier: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        product_type: {\\n          type: 'string'\\n        },\\n        proposal: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        selected_tick: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        },\\n        symbol: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        trading_period_start: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'proposal',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.contract_id - [Optional] Contract ID received from a `portfolio` request. If not set, you will receive stream of all open contracts.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.proposal_open_contract - Must be `1`\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] `1` to stream.\\n     */\\n\\n  }, {\\n    key: \\\"proposalOpenContract\\\",\\n    value: function proposalOpenContract() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        contract_id: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        proposal_open_contract: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'proposal_open_contract',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.reality_check - Must be `1`\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     */\\n\\n  }, {\\n    key: \\\"realityCheck\\\",\\n    value: function realityCheck() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        reality_check: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'reality_check',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.date_from - Start date of the report\\n     * @param {Number} args.date_to - End date of the report\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.report_type - Type of report to be sent to client's registered e-mail address\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.request_report - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"requestReport\\\",\\n    value: function requestReport() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        date_from: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        date_to: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        report_type: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        request_report: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'request_report',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.date_of_birth - [Optional] Date of birth format: `yyyy-mm-dd`. Only required for clients with real-money accounts.\\n     * @param {String} args.new_password - New password. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.reset_password - Must be `1`\\n     * @param {String} args.verification_code - Email verification code (received from a `verify_email` call, which must be done first)\\n     */\\n\\n  }, {\\n    key: \\\"resetPassword\\\",\\n    value: function resetPassword() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        date_of_birth: {\\n          type: 'string'\\n        },\\n        new_password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        reset_password: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        verification_code: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'reset_password',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.residence_list - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"residenceList\\\",\\n    value: function residenceList() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        residence_list: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'residence_list',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.revoke_oauth_app - The application ID to revoke.\\n     */\\n\\n  }, {\\n    key: \\\"revokeOauthApp\\\",\\n    value: function revokeOauthApp() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        revoke_oauth_app: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'revoke_oauth_app',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.price - Minimum price at which to sell the contract, or `0` for 'sell at market'.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.sell - Pass contract_id received from the `portfolio` call.\\n     */\\n\\n  }, {\\n    key: \\\"sell\\\",\\n    value: function sell() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        price: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        sell: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'sell',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.price - Minimum price at which to sell the contract, or `0` for 'sell at market'.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.sell_contract_for_multiple_accounts - Must be `1`\\n     * @param {String} args.shortcode - An internal ID used to identify the contract which was originally bought. This is returned from the `buy` and `buy_contract_for_multiple_accounts` calls.\\n     * @param {Any} args.tokens - Authorisation tokens which select the accounts to sell use for the affected accounts.\\n     */\\n\\n  }, {\\n    key: \\\"sellContractForMultipleAccounts\\\",\\n    value: function sellContractForMultipleAccounts() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        price: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        sell_contract_for_multiple_accounts: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        shortcode: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        tokens: {\\n          required: 1\\n        }\\n      };\\n      var allArgs = {\\n        method: 'sell_contract_for_multiple_accounts',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.sell_expired - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"sellExpired\\\",\\n    value: function sellExpired() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        sell_expired: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'sell_expired',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.country - [Optional] The 2-letter country code.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.referrer - [Optional] The URL of the web page where the Web SDK will be used.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.server - Server (dxtrade only).\\n     * @param {Any} args.service - The service(s) to retrieve token(s) for.\\n     * @param {Number} args.service_token - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"serviceToken\\\",\\n    value: function serviceToken() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        country: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        referrer: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        server: {\\n          type: 'string'\\n        },\\n        service: {\\n          required: 1\\n        },\\n        service_token: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'service_token',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.set_account_currency - Currency of the account. List of supported currencies can be acquired with `payout_currencies` call.\\n     */\\n\\n  }, {\\n    key: \\\"setAccountCurrency\\\",\\n    value: function setAccountCurrency() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        set_account_currency: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'set_account_currency',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.account_turnover - [Optional] The anticipated account turnover.\\n     * @param {String} args.binary_options_trading_experience - [Optional] Binary options trading experience.\\n     * @param {String} args.binary_options_trading_frequency - [Optional] Binary options trading frequency.\\n     * @param {String} args.cfd_trading_experience - [Optional] CFDs trading experience.\\n     * @param {String} args.cfd_trading_frequency - [Optional] CFDs trading frequency.\\n     * @param {String} args.education_level - Level of Education.\\n     * @param {String} args.employment_industry - Industry of Employment.\\n     * @param {String} args.employment_status - [Optional] Employment Status.\\n     * @param {String} args.estimated_worth - Estimated Net Worth.\\n     * @param {String} args.forex_trading_experience - [Optional] Forex trading experience.\\n     * @param {String} args.forex_trading_frequency - [Optional] Forex trading frequency.\\n     * @param {String} args.income_source - Income Source.\\n     * @param {String} args.net_income - Net Annual Income.\\n     * @param {String} args.occupation - Occupation.\\n     * @param {String} args.other_instruments_trading_experience - [Optional] Trading experience in other financial instruments.\\n     * @param {String} args.other_instruments_trading_frequency - [Optional] Trading frequency in other financial instruments.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.set_financial_assessment - Must be `1`\\n     * @param {String} args.source_of_wealth - [Optional] Source of wealth.\\n     */\\n\\n  }, {\\n    key: \\\"setFinancialAssessment\\\",\\n    value: function setFinancialAssessment() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_turnover: {\\n          type: 'string'\\n        },\\n        binary_options_trading_experience: {\\n          type: 'string'\\n        },\\n        binary_options_trading_frequency: {\\n          type: 'string'\\n        },\\n        cfd_trading_experience: {\\n          type: 'string'\\n        },\\n        cfd_trading_frequency: {\\n          type: 'string'\\n        },\\n        education_level: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        employment_industry: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        employment_status: {\\n          type: 'string'\\n        },\\n        estimated_worth: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        forex_trading_experience: {\\n          type: 'string'\\n        },\\n        forex_trading_frequency: {\\n          type: 'string'\\n        },\\n        income_source: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        net_income: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        occupation: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        other_instruments_trading_experience: {\\n          type: 'string'\\n        },\\n        other_instruments_trading_frequency: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        set_financial_assessment: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        source_of_wealth: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'set_financial_assessment',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.exclude_until - [Optional] Exclude me from the website (for a minimum of 6 months, up to a maximum of 5 years). Note: uplifting this self-exclusion may require contacting the company.\\n     * @param {Any} args.max_30day_deposit - [Optional] 7-day limit on deposits.\\n     * @param {Any} args.max_30day_losses - [Optional] 30-day limit on losses.\\n     * @param {Any} args.max_30day_turnover - [Optional] 30-day turnover limit.\\n     * @param {Any} args.max_7day_deposit - [Optional] 7-day limit on deposits.\\n     * @param {Any} args.max_7day_losses - [Optional] 7-day limit on losses.\\n     * @param {Any} args.max_7day_turnover - [Optional] 7-day turnover limit.\\n     * @param {Any} args.max_balance - [Optional] Maximum account cash balance.\\n     * @param {Any} args.max_deposit - [Optional] Daily deposit limit.\\n     * @param {Any} args.max_losses - [Optional] Daily limit on losses.\\n     * @param {Any} args.max_open_bets - [Optional] Maximum number of open positions.\\n     * @param {Any} args.max_turnover - [Optional] Daily turnover limit.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Any} args.session_duration_limit - [Optional] Session duration limit, in minutes.\\n     * @param {Number} args.set_self_exclusion - Must be `1`\\n     * @param {Any} args.timeout_until - [Optional] Exclude me from the website (for up to 6 weeks). Requires time in epoch format. Note: unlike `exclude_until`, this self-exclusion will be lifted automatically at the expiry of the timeout period.\\n     */\\n\\n  }, {\\n    key: \\\"setSelfExclusion\\\",\\n    value: function setSelfExclusion() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        exclude_until: {},\\n        max_30day_deposit: {},\\n        max_30day_losses: {},\\n        max_30day_turnover: {},\\n        max_7day_deposit: {},\\n        max_7day_losses: {},\\n        max_7day_turnover: {},\\n        max_balance: {},\\n        max_deposit: {},\\n        max_losses: {},\\n        max_open_bets: {},\\n        max_turnover: {},\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        session_duration_limit: {},\\n        set_self_exclusion: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        timeout_until: {}\\n      };\\n      var allArgs = {\\n        method: 'set_self_exclusion',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.account_opening_reason - [Optional] Purpose and reason for requesting the account opening. Only applicable for real money account. Required for clients that have not set it yet. Can only be set once.\\n     * @param {String} args.address_city - [Optional] Note: not applicable for virtual account. Required field for real money account.\\n     * @param {String} args.address_line_1 - [Optional] Note: not applicable for virtual account. Required field for real money account.\\n     * @param {Any} args.address_line_2 - [Optional] Note: not applicable for virtual account. Optional field for real money account.\\n     * @param {String} args.address_postcode - [Optional] Note: not applicable for virtual account. Optional field for real money account.\\n     * @param {String} args.address_state - [Optional] Note: not applicable for virtual account. Optional field for real money account.\\n     * @param {Number} args.allow_copiers - [Optional] Boolean value 1 or 0, indicating permission to allow others to follow your trades. Note: not applicable for Virtual account. Only allow for real money account.\\n     * @param {Any} args.citizen - [Optional] Country of legal citizenship, 2-letter country code.\\n     * @param {String} args.date_of_birth - [Optional] Date of birth format: yyyy-mm-dd (can only be changed on unauthenticated svg accounts).\\n     * @param {Number} args.email_consent - [Optional] Boolean value 1 or 0, indicating permission to use email address for any contact which may include marketing\\n     * @param {Any} args.feature_flag -\\n     * @param {String} args.first_name - [Optional] Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes (can only be changed on unauthenticated svg accounts).\\n     * @param {String} args.last_name - [Optional] Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes (can only be changed on unauthenticated svg accounts).\\n     * @param {Number} args.non_pep_declaration - [Optional] Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates). Effective for real accounts only.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Any} args.phone - [Optional] Note: not applicable for virtual account. Starting with `+` followed by 9-35 digits, hyphens or space.\\n     * @param {String} args.place_of_birth - [Optional] Place of birth, 2-letter country code.\\n     * @param {Any} args.preferred_language - [Optional] User's preferred language, ISO standard language code\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.request_professional_status - [Optional] Required when client wants to be treated as professional. Applicable for financial accounts only.\\n     * @param {Any} args.residence - [Optional] 2-letter country code. Note: not applicable for real money account. Only allow for Virtual account without residence set.\\n     * @param {String} args.salutation - [Optional] Accept any value in enum list (can only be changed on unauthenticated svg accounts).\\n     * @param {String} args.secret_answer - [Optional] Answer to secret question, within 4-50 characters. Required for new account and existing client details will be used if client opens another account.\\n     * @param {String} args.secret_question - [Optional] Accept any value in enum list. Required for new account and existing client details will be used if client opens another account.\\n     * @param {Number} args.set_settings - Must be `1`\\n     * @param {String} args.tax_identification_number - [Optional] Tax identification number. Only applicable for real money account. Required for maltainvest landing company.\\n     * @param {String} args.tax_residence - [Optional] Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for maltainvest landing company.\\n     */\\n\\n  }, {\\n    key: \\\"setSettings\\\",\\n    value: function setSettings() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_opening_reason: {\\n          type: 'string'\\n        },\\n        address_city: {\\n          type: 'string'\\n        },\\n        address_line_1: {\\n          type: 'string'\\n        },\\n        address_line_2: {},\\n        address_postcode: {\\n          type: 'string'\\n        },\\n        address_state: {\\n          type: 'string'\\n        },\\n        allow_copiers: {\\n          type: 'numeric'\\n        },\\n        citizen: {},\\n        date_of_birth: {\\n          type: 'string'\\n        },\\n        email_consent: {\\n          type: 'numeric'\\n        },\\n        feature_flag: {\\n          wallet: {\\n            type: 'numeric'\\n          }\\n        },\\n        first_name: {\\n          type: 'string'\\n        },\\n        last_name: {\\n          type: 'string'\\n        },\\n        non_pep_declaration: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        phone: {},\\n        place_of_birth: {\\n          type: 'string'\\n        },\\n        preferred_language: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        request_professional_status: {\\n          type: 'numeric'\\n        },\\n        residence: {},\\n        salutation: {\\n          type: 'string'\\n        },\\n        secret_answer: {\\n          type: 'string'\\n        },\\n        secret_question: {\\n          type: 'string'\\n        },\\n        set_settings: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        tax_identification_number: {\\n          type: 'string'\\n        },\\n        tax_residence: {\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'set_settings',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.action_type - [Optional] To filter the statement according to the type of transaction.\\n     * @param {Number} args.date_from - [Optional] Start date (epoch)\\n     * @param {Number} args.date_to - [Optional] End date (epoch)\\n     * @param {Number} args.description - [Optional] If set to 1, will return full contracts description.\\n     * @param {Number} args.limit - [Optional] Maximum number of transactions to receive.\\n     * @param {Number} args.offset - [Optional] Number of transactions to skip.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.statement - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"statement\\\",\\n    value: function statement() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        action_type: {\\n          type: 'string'\\n        },\\n        date_from: {\\n          type: 'numeric'\\n        },\\n        date_to: {\\n          type: 'numeric'\\n        },\\n        description: {\\n          type: 'numeric'\\n        },\\n        limit: {\\n          type: 'numeric'\\n        },\\n        offset: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        statement: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'statement',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.states_list - Client's 2-letter country code (obtained from `residence_list` call)\\n     */\\n\\n  }, {\\n    key: \\\"statesList\\\",\\n    value: function statesList() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        states_list: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'states_list',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] If set to 1, will send updates whenever a new tick is received.\\n     * @param {Any} args.ticks - The short symbol name or array of symbols (obtained from `active_symbols` call).\\n     */\\n\\n  }, {\\n    key: \\\"ticks\\\",\\n    value: function ticks() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        },\\n        ticks: {\\n          required: 1\\n        }\\n      };\\n      var allArgs = {\\n        method: 'ticks',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.adjust_start_time - [Optional] 1 - if the market is closed at the end time, or license limit is before end time, adjust interval backwards to compensate.\\n     * @param {Number} args.count - [Optional] An upper limit on ticks to receive.\\n     * @param {String} args.end - Epoch value representing the latest boundary of the returned ticks. If `latest` is specified, this will be the latest available timestamp.\\n     * @param {Number} args.granularity - [Optional] Only applicable for style: `candles`. Candle time-dimension width setting. (default: `60`).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.start - [Optional] Epoch value representing the earliest boundary of the returned ticks.\\n    - For `\\\"style\\\": \\\"ticks\\\"`: this will default to 1 day ago.\\n    - For `\\\"style\\\": \\\"candles\\\"`: it will default to 1 day ago if count or granularity is undefined.\\n     * @param {String} args.style - [Optional] The tick-output style.\\n     * @param {Number} args.subscribe - [Optional] 1 - to send updates whenever a new tick is received.\\n     * @param {String} args.ticks_history - Short symbol name (obtained from the `active_symbols` call).\\n     */\\n\\n  }, {\\n    key: \\\"ticksHistory\\\",\\n    value: function ticksHistory() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        adjust_start_time: {\\n          type: 'numeric'\\n        },\\n        count: {\\n          type: 'numeric'\\n        },\\n        end: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        granularity: {\\n          type: 'numeric'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        start: {\\n          type: 'numeric'\\n        },\\n        style: {\\n          type: 'string'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        },\\n        ticks_history: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'ticks_history',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.time - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"time\\\",\\n    value: function time() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        time: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'time',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.tnc_approval - Must be `1`\\n     * @param {Number} args.ukgc_funds_protection - [Optional] For `ASK_UK_FUNDS_PROTECTION` in `cashier`.\\n     */\\n\\n  }, {\\n    key: \\\"tncApproval\\\",\\n    value: function tncApproval() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        tnc_approval: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        ukgc_funds_protection: {\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'tnc_approval',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.topup_virtual - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"topupVirtual\\\",\\n    value: function topupVirtual() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        topup_virtual: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'topup_virtual',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.landing_company - [Optional] If specified, will return only the underlyings for the specified landing company.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.trading_durations - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"tradingDurations\\\",\\n    value: function tradingDurations() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        landing_company: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        trading_durations: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'trading_durations',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.platform - Trading platform name\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.trading_platform_accounts - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"tradingPlatformAccounts\\\",\\n    value: function tradingPlatformAccounts() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        platform: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        trading_platform_accounts: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'trading_platform_accounts',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.amount - Amount to deposit (in the currency of from_wallet).\\n     * @param {String} args.from_account - Wallet account to transfer money from.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.platform - Name of trading platform.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.to_account - Trading account login to deposit money to.\\n     * @param {Number} args.trading_platform_deposit - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"tradingPlatformDeposit\\\",\\n    value: function tradingPlatformDeposit() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        amount: {\\n          type: 'numeric'\\n        },\\n        from_account: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        platform: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        to_account: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        trading_platform_deposit: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'trading_platform_deposit',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.account_id - Trading account ID.\\n     * @param {String} args.new_password - New investor password. Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address.\\n     * @param {String} args.old_password - Old investor password for validation (non-empty string, accepts any printable ASCII character)\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.platform - Name of trading platform.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.trading_platform_investor_password_change - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"tradingPlatformInvestorPasswordChange\\\",\\n    value: function tradingPlatformInvestorPasswordChange() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_id: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        new_password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        old_password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        platform: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        trading_platform_investor_password_change: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'trading_platform_investor_password_change',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.account_id - Trading account ID.\\n     * @param {String} args.new_password - New password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.platform - Name of trading platform.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.trading_platform_investor_password_reset - Must be `1`\\n     * @param {String} args.verification_code - Email verification code (received from a `verify_email` call, which must be done first)\\n     */\\n\\n  }, {\\n    key: \\\"tradingPlatformInvestorPasswordReset\\\",\\n    value: function tradingPlatformInvestorPasswordReset() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_id: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        new_password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        platform: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        trading_platform_investor_password_reset: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        verification_code: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'trading_platform_investor_password_reset',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.account_type - Account type.\\n     * @param {String} args.currency - [Optional] Trading account currency, the default value will be the qualified account currency.\\n     * @param {Number} args.dry_run - [Optional] If set to 1, only validation is performed.\\n     * @param {String} args.market_type - Market type\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.password - The master password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address). This field is required.\\n     * @param {String} args.platform - Name of trading platform.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.sub_account_type - [Optional] Sub account type.\\n     * @param {Number} args.trading_platform_new_account - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"tradingPlatformNewAccount\\\",\\n    value: function tradingPlatformNewAccount() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_type: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        currency: {\\n          type: 'string'\\n        },\\n        dry_run: {\\n          type: 'numeric'\\n        },\\n        market_type: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        platform: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        sub_account_type: {\\n          type: 'string'\\n        },\\n        trading_platform_new_account: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'trading_platform_new_account',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.new_password - New trading password. Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address.\\n     * @param {String} args.old_password - Old password for validation. Must be empty if a password has not been set yet.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.platform - Name of trading platform.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.trading_platform_password_change - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"tradingPlatformPasswordChange\\\",\\n    value: function tradingPlatformPasswordChange() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        new_password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        old_password: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        platform: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        trading_platform_password_change: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'trading_platform_password_change',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.new_password - New password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.platform - Name of trading platform.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.trading_platform_password_reset - Must be `1`\\n     * @param {String} args.verification_code - Email verification code (received from a `verify_email` call, which must be done first)\\n     */\\n\\n  }, {\\n    key: \\\"tradingPlatformPasswordReset\\\",\\n    value: function tradingPlatformPasswordReset() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        new_password: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        platform: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        trading_platform_password_reset: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        verification_code: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'trading_platform_password_reset',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Number} args.amount - Amount to withdraw (in the currency of the Trading account).\\n     * @param {String} args.from_account - Trading account login to withdraw money from.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.platform - Name of trading platform.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.to_account - Wallet account loginid to transfer money to.\\n     * @param {Number} args.trading_platform_withdrawal - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"tradingPlatformWithdrawal\\\",\\n    value: function tradingPlatformWithdrawal() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        amount: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        from_account: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        platform: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        to_account: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        trading_platform_withdrawal: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'trading_platform_withdrawal',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.account_type - [Optional] Trading account type.\\n     * @param {String} args.environment - [Optional] Pass the environment (installation) instance. Currently, there are one demo and two real environments. Defaults to 'all'.\\n     * @param {String} args.market_type - [Optional] Market type.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {String} args.platform - [Optional] Pass the trading platform name, default to mt5\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.trading_servers - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"tradingServers\\\",\\n    value: function tradingServers() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_type: {\\n          type: 'string'\\n        },\\n        environment: {\\n          type: 'string'\\n        },\\n        market_type: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        platform: {\\n          type: 'string'\\n        },\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        trading_servers: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'trading_servers',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.trading_times - Date to receive market opening times for. (`yyyy-mm-dd` format. `today` can also be specified).\\n     */\\n\\n  }, {\\n    key: \\\"tradingTimes\\\",\\n    value: function tradingTimes() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        trading_times: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'trading_times',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - If set to 1, will send updates whenever there is an update to transactions. If not to 1 then it will not return any records.\\n     * @param {Number} args.transaction - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"transaction\\\",\\n    value: function transaction() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          required: 1,\\n          type: 'numeric'\\n        },\\n        transaction: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'transaction',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {String} args.account_from - [Optional] The loginid of the account to transfer funds from.\\n     * @param {String} args.account_to - [Optional] The loginid of the account to transfer funds to.\\n     * @param {String} args.accounts - [Optional] To control the list of accounts returned when `account_from` or `account_to` is not provided. `brief` (default value) means that accounts with `mt5` account_type will be excluded; it will run faster. `all` means that all accounts with any account_type (including `mt5`) will be returned.\\n     * @param {Number} args.amount - [Optional] The amount to transfer.\\n     * @param {String} args.currency - [Optional] Currency code.\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.transfer_between_accounts - If `account_from` or `account_to` is not provided, it just returns the available accounts.\\n     */\\n\\n  }, {\\n    key: \\\"transferBetweenAccounts\\\",\\n    value: function transferBetweenAccounts() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        account_from: {\\n          type: 'string'\\n        },\\n        account_to: {\\n          type: 'string'\\n        },\\n        accounts: {\\n          type: 'string'\\n        },\\n        amount: {\\n          type: 'numeric'\\n        },\\n        currency: {\\n          type: 'string'\\n        },\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        transfer_between_accounts: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'transfer_between_accounts',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {String} args.type - Purpose of the email verification call.\\n     * @param {Any} args.url_parameters -\\n     * @param {String} args.verify_email - Email address to be verified.\\n     */\\n\\n  }, {\\n    key: \\\"verifyEmail\\\",\\n    value: function verifyEmail() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        type: {\\n          required: 1,\\n          type: 'string'\\n        },\\n        url_parameters: {\\n          affiliate_token: {\\n            type: 'string'\\n          },\\n          date_first_contact: {\\n            type: 'string'\\n          },\\n          gclid_url: {\\n            type: 'string'\\n          },\\n          pa_amount: {\\n            type: 'numeric'\\n          },\\n          pa_currency: {\\n            type: 'string'\\n          },\\n          pa_loginid: {\\n            type: 'string'\\n          },\\n          pa_remarks: {\\n            type: 'string'\\n          },\\n          redirect_to: {\\n            type: 'numeric'\\n          },\\n          signup_device: {\\n            type: 'string'\\n          },\\n          utm_ad_id: {},\\n          utm_adgroup_id: {},\\n          utm_adrollclk_id: {},\\n          utm_campaign: {},\\n          utm_campaign_id: {},\\n          utm_content: {},\\n          utm_fbcl_id: {},\\n          utm_gl_client_id: {},\\n          utm_medium: {},\\n          utm_msclk_id: {},\\n          utm_source: {},\\n          utm_term: {}\\n        },\\n        verify_email: {\\n          required: 1,\\n          type: 'string'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'verify_email',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n    /**\\n     * @param {Object} args\\n     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.\\n     * @param {Number} args.req_id - [Optional] Used to map request to response.\\n     * @param {Number} args.subscribe - [Optional] `1` to stream the server/website status updates.\\n     * @param {Number} args.website_status - Must be `1`\\n     */\\n\\n  }, {\\n    key: \\\"websiteStatus\\\",\\n    value: function websiteStatus() {\\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      var config = {\\n        passthrough: {},\\n        req_id: {\\n          type: 'numeric'\\n        },\\n        subscribe: {\\n          type: 'numeric'\\n        },\\n        website_status: {\\n          required: 1,\\n          type: 'numeric'\\n        }\\n      };\\n      var allArgs = {\\n        method: 'website_status',\\n        needsMethodArg: '1',\\n        args: args,\\n        config: config\\n      };\\n      return this.processRequest(allArgs);\\n    }\\n  }, {\\n    key: \\\"processRequest\\\",\\n    value: function processRequest(allArgs) {\\n      var config = allArgs.config;\\n      var parsedArgs = parseArgs(allArgs);\\n      var error = validateArgs({\\n        config: config,\\n        args: parsedArgs\\n      });\\n\\n      if (error) {\\n        return Promise.reject(error);\\n      }\\n\\n      return this.send(parsedArgs);\\n    }\\n  }]);\\n\\n  return DerivAPICalls;\\n}(); // ==========================\\n// ----- Helper Methods -----\\n// ==========================\\n\\n\\n\\n\\nvar isObject = function isObject(value) {\\n  return value instanceof Object;\\n};\\n\\nvar typeCheckers = {\\n  object: isObject,\\n  numeric: function numeric(value) {\\n    return !Number.isNaN(value * 1);\\n  },\\n  string: function string(value) {\\n    return typeof value === 'string';\\n  },\\n  \\\"boolean\\\": function boolean(value) {\\n    return [true, false, 0, 1].includes(value);\\n  }\\n};\\n\\nfunction parseArgs(_ref) {\\n  var config = _ref.config,\\n      args = _ref.args,\\n      method = _ref.method,\\n      needsMethodArg = _ref.needsMethodArg;\\n  var parsedArgs = args;\\n\\n  if (needsMethodArg && !isObject(parsedArgs)) {\\n    parsedArgs = (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__.default)({}, method, parsedArgs);\\n  }\\n\\n  parsedArgs[method] = parsedArgs[method] || 1;\\n  Object.keys(parsedArgs).forEach(function (param) {\\n    var value = parsedArgs[param];\\n    if (!(param in config)) return;\\n\\n    if (config[param].type === 'string') {\\n      parsedArgs[param] = \\\"\\\".concat(value);\\n    } else if (config[param].type === 'numeric') {\\n      parsedArgs[param] = parseInt(value, 10);\\n    } else if (config[param].type === 'boolean') {\\n      parsedArgs[param] = +value;\\n    }\\n  });\\n  return parsedArgs;\\n}\\n\\nfunction validateArgs(_ref2) {\\n  var config = _ref2.config,\\n      args = _ref2.args;\\n\\n  if (!isObject(args)) {\\n    return \\\"Requires an object but a \\\".concat((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(args), \\\" is passed.\\\");\\n  }\\n\\n  var errorMessages = [];\\n  var missing = Object.keys(config).filter(function (key) {\\n    return (config[key] || {}).required && !(key in args);\\n  });\\n\\n  if (missing.length) {\\n    errorMessages.push(\\\"Required parameters missing: \\\".concat(missing.join(', ')));\\n  }\\n\\n  Object.keys(args).forEach(function (param) {\\n    var value = args[param];\\n    if (!(param in config)) return;\\n    var expectedType = config[param].type;\\n    if (!expectedType) return;\\n\\n    if (!typeCheckers[expectedType](value)) {\\n      errorMessages.push(\\\"\\\".concat(expectedType, \\\" value expected but found \\\").concat((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(value), \\\": \\\").concat(param));\\n    }\\n  });\\n  return errorMessages.length ? errorMessages.join(' - ') : '';\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./src/deriv_api/DerivAPICalls.js?\");\n\n/***/ }),\n\n/***/ \"./src/deriv_api/InMemory.js\":\n/*!***********************************!*\\\n  !*** ./src/deriv_api/InMemory.js ***!\n  \\***********************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ InMemory)\\n/* harmony export */ });\\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \\\"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \\\"./node_modules/@babel/runtime/helpers/esm/createClass.js\\\");\\n\\n\\n\\n/**\\n * An in memory storage which can be used for caching\\n */\\nvar InMemory = /*#__PURE__*/function () {\\n  function InMemory() {\\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, InMemory);\\n\\n    this.store = {\\n      by_msg_type: {}\\n    };\\n  }\\n\\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(InMemory, [{\\n    key: \\\"has\\\",\\n    value: function has(key) {\\n      return key in this.store;\\n    }\\n  }, {\\n    key: \\\"get\\\",\\n    value: function get(key) {\\n      return this.store[key];\\n    }\\n  }, {\\n    key: \\\"getByMsgType\\\",\\n    value: function getByMsgType(type) {\\n      return this.store.by_msg_type[type];\\n    }\\n  }, {\\n    key: \\\"set\\\",\\n    value: function set(key, value) {\\n      this.store.by_msg_type[value.msg_type] = value;\\n      this.store[key] = value;\\n    }\\n  }]);\\n\\n  return InMemory;\\n}();\\n\\n\\n\\n//# sourceURL=webpack://DerivAPIBasic/./src/deriv_api/InMemory.js?\");\n\n/***/ }),\n\n/***/ \"./src/deriv_api/SubscriptionManager.js\":\n/*!**********************************************!*\\\n  !*** ./src/deriv_api/SubscriptionManager.js ***!\n  \\**********************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ SubscriptionManager)\\n/* harmony export */ });\\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \\\"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \\\"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \\\"./node_modules/@babel/runtime/helpers/esm/createClass.js\\\");\\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/finalize.js\\\");\\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/share.js\\\");\\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/first.js\\\");\\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ \\\"./src/deriv_api/errors.js\\\");\\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \\\"./src/deriv_api/utils.js\\\");\\n\\n\\n\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\n\\n\\n\\n/**\\n * Subscription Manager - manage subscription channels\\n *\\n * Makes sure there is always only one subscription channel for all requests of\\n * subscriptions, keeps a history of received values for the subscription of ticks\\n * and forgets channels that do not have subscribers. It also ensures that\\n * subscriptions are revived after connection drop/account changed.\\n *\\n *\\n * @example\\n * // This one creates a new subscription assuming it is the first one for R_100\\n * const subscriber1 = api.subscribe({ ticks: 'R_100' }, console.log);\\n *\\n * // This one uses the existing subscription to R_100\\n * const subscriber2 = api.subscribe({ ticks: 'R_100' }, console.log);\\n *\\n * subscriber1.unsubscribe(); // no API forget yet\\n * subscriber2.unsubscribe(); // Issues API forget\\n *\\n */\\n\\nvar SubscriptionManager = /*#__PURE__*/function () {\\n  function SubscriptionManager(api) {\\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, SubscriptionManager);\\n\\n    this.api = api;\\n    this.sources = {};\\n    this.subs_id_to_key = {};\\n    this.key_to_subs_id = {};\\n    this.buy_key_to_contract_id = {};\\n    this.subs_per_msg_type = []; // streams_list is the list of subscriptions msg_types available.\\n    // Please add/remove based on current available streams in api.\\n    // Refer https://developers.binary.com/\\n\\n    this.streams_list = ['balance', 'candles', 'p2p_advertiser', 'p2p_order', 'proposal', 'proposal_array', 'proposal_open_contract', 'ticks', 'ticks_history', 'transaction', 'website_status'];\\n  }\\n  /**\\n   * Subscribe to a given request, returns a stream of new responses,\\n   * Errors should be handled by the user of the stream\\n   *\\n   * @example\\n   * const ticks = api.subscribe({ ticks: 'R_100' });\\n   * ticks.subscribe(console.log) // Print every new tick\\n   *\\n   * @param {Object} request - A request object acceptable by the API\\n   *\\n   * @returns {Observable} - An RxJS Observable\\n   */\\n\\n\\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(SubscriptionManager, [{\\n    key: \\\"subscribe\\\",\\n    value: function subscribe(request) {\\n      if (this.sourceExists(request)) {\\n        return this.getSource(request);\\n      }\\n\\n      return this.createNewSource(_objectSpread(_objectSpread({}, request), {}, {\\n        subscribe: 1\\n      }));\\n    }\\n  }, {\\n    key: \\\"getSource\\\",\\n    value: function getSource(request) {\\n      var key = toKey(request);\\n      if (key in this.sources) return this.sources[key]; // If we have a buy subscription reuse that for poc\\n\\n      if (request.proposal_open_contract && request.contract_id) {\\n        var poc_source = Object.values(this.buy_key_to_contract_id).find(function (c) {\\n          return c.contract_id === request.contract_id;\\n        });\\n\\n        if (poc_source) {\\n          return this.sources[poc_source.buy_key];\\n        }\\n      }\\n\\n      return undefined;\\n    } // Just an alias to getSource\\n\\n  }, {\\n    key: \\\"sourceExists\\\",\\n    value: function sourceExists(request) {\\n      return this.getSource(request);\\n    }\\n  }, {\\n    key: \\\"createNewSource\\\",\\n    value: function createNewSource(request) {\\n      var _this = this;\\n\\n      var key = toKey(request);\\n      var source = this.api.sendAndGetSource(request).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.finalize)(function () {\\n        if (!(key in _this.key_to_subs_id)) return; // Forget subscriptions, but don't complain if failed\\n\\n        _this.forget(_this.key_to_subs_id[key]).then(function () {}, function () {});\\n      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.share)());\\n      this.sources[key] = source;\\n      this.saveSubsPerMsgType(request, key);\\n      source.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.first)()).toPromise().then(function (response) {\\n        if (request.buy) {\\n          _this.buy_key_to_contract_id[key] = {\\n            contract_id: response.buy.contract_id,\\n            buy_key: key\\n          };\\n        }\\n\\n        _this.saveSubsId(key, response);\\n      }, this.removeKeyOnError(key));\\n      return source;\\n    }\\n  }, {\\n    key: \\\"forget\\\",\\n    value: function forget(id) {\\n      this.completeSubsByIds(id);\\n      return this.api.send({\\n        forget: id\\n      });\\n    }\\n  }, {\\n    key: \\\"forgetAll\\\",\\n    value: function forgetAll() {\\n      var _this2 = this;\\n\\n      for (var _len = arguments.length, types = new Array(_len), _key = 0; _key < _len; _key++) {\\n        types[_key] = arguments[_key];\\n      }\\n\\n      // To include subscriptions that were automatically unsubscribed\\n      // for example a proposal subscription is auto-unsubscribed after buy\\n      types.forEach(function (type) {\\n        (_this2.subs_per_msg_type[type] || []).forEach(function (key) {\\n          return _this2.completeSubsByKey(key);\\n        });\\n        _this2.subs_per_msg_type[type] = [];\\n      });\\n      return this.api.send({\\n        forget_all: types\\n      });\\n    }\\n  }, {\\n    key: \\\"completeSubsByIds\\\",\\n    value: function completeSubsByIds() {\\n      var _this3 = this;\\n\\n      for (var _len2 = arguments.length, subs_ids = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\\n        subs_ids[_key2] = arguments[_key2];\\n      }\\n\\n      subs_ids.forEach(function (id) {\\n        var key = _this3.subs_id_to_key[id];\\n        delete _this3.subs_id_to_key[id];\\n\\n        _this3.completeSubsByKey(key);\\n      });\\n    }\\n  }, {\\n    key: \\\"saveSubsId\\\",\\n    value: function saveSubsId(key, _ref) {\\n      var subscription = _ref.subscription;\\n      // If the response doesn't have a subs id, it's not a subscription, so complete source\\n      // Useful for poc for sold contract which never returns subscription\\n      if (!subscription) return this.completeSubsByKey(key);\\n      var id = subscription.id;\\n\\n      if (!(id in this.subs_id_to_key)) {\\n        this.subs_id_to_key[id] = key;\\n        this.key_to_subs_id[key] = id;\\n      }\\n\\n      return undefined;\\n    }\\n  }, {\\n    key: \\\"saveSubsPerMsgType\\\",\\n    value: function saveSubsPerMsgType(request, key) {\\n      var msg_type = this.getMsgType(request);\\n\\n      if (msg_type) {\\n        this.subs_per_msg_type[msg_type] = this.subs_per_msg_type[msg_type] || [];\\n        this.subs_per_msg_type[msg_type].push(key);\\n      } else {\\n        this.api.sanityErrors.next(new _errors__WEBPACK_IMPORTED_MODULE_3__.APIError('Subscription type is not found in deriv-api'));\\n      }\\n    }\\n  }, {\\n    key: \\\"removeKeyOnError\\\",\\n    value: function removeKeyOnError(key) {\\n      var _this4 = this;\\n\\n      return function () {\\n        return _this4.completeSubsByKey(key);\\n      };\\n    }\\n  }, {\\n    key: \\\"completeSubsByKey\\\",\\n    value: function completeSubsByKey(key) {\\n      if (!key || !this.sources[key]) return; // Delete the source\\n\\n      var source = this.sources[key];\\n      delete this.sources[key]; // Delete the subs id if exists\\n\\n      var subs_id = this.key_to_subs_id[key];\\n      delete this.subs_id_to_key[subs_id]; // Delete the key\\n\\n      delete this.key_to_subs_id[key]; // Delete the buy key to contract_id mapping\\n\\n      delete this.buy_key_to_contract_id[key]; // Mark the source completed\\n\\n      source.complete();\\n    }\\n  }, {\\n    key: \\\"getMsgType\\\",\\n    value: function getMsgType(request) {\\n      return this.streams_list.find(function (stream_key) {\\n        return stream_key in request;\\n      });\\n    }\\n  }]);\\n\\n  return SubscriptionManager;\\n}();\\n\\n\\n\\nfunction toKey(request) {\\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_4__.objectToCacheKey)(request);\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./src/deriv_api/SubscriptionManager.js?\");\n\n/***/ }),\n\n/***/ \"./src/deriv_api/errors.js\":\n/*!*********************************!*\\\n  !*** ./src/deriv_api/errors.js ***!\n  \\*********************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"errorFactory\\\": () => (/* binding */ errorFactory),\\n/* harmony export */   \\\"APIError\\\": () => (/* binding */ APIError),\\n/* harmony export */   \\\"ConstructionError\\\": () => (/* binding */ ConstructionError)\\n/* harmony export */ });\\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \\\"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \\\"./node_modules/@babel/runtime/helpers/esm/createClass.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \\\"./node_modules/@babel/runtime/helpers/esm/inherits.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \\\"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \\\"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\\\");\\n/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ \\\"./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\\\");\\n\\n\\n\\n\\n\\n\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__.default)(this, result); }; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction errorFactory(type) {\\n  return /*#__PURE__*/function (_Error) {\\n    (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(GenericError, _Error);\\n\\n    var _super = _createSuper(GenericError);\\n\\n    function GenericError(message) {\\n      var _this;\\n\\n      (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, GenericError);\\n\\n      _this = _super.call(this);\\n      _this.type = type;\\n      _this.message = message;\\n      return _this;\\n    }\\n\\n    (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(GenericError, [{\\n      key: \\\"toString\\\",\\n      value: function toString() {\\n        return \\\"\\\".concat(this.type, \\\": \\\").concat(this.message);\\n      }\\n    }]);\\n\\n    return GenericError;\\n  }( /*#__PURE__*/(0,_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_5__.default)(Error));\\n}\\nvar APIError = /*#__PURE__*/function (_errorFactory) {\\n  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(APIError, _errorFactory);\\n\\n  var _super2 = _createSuper(APIError);\\n\\n  function APIError() {\\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, APIError);\\n\\n    return _super2.apply(this, arguments);\\n  }\\n\\n  return APIError;\\n}(errorFactory('APIError'));\\nvar ConstructionError = /*#__PURE__*/function (_errorFactory2) {\\n  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(ConstructionError, _errorFactory2);\\n\\n  var _super3 = _createSuper(ConstructionError);\\n\\n  function ConstructionError() {\\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, ConstructionError);\\n\\n    return _super3.apply(this, arguments);\\n  }\\n\\n  return ConstructionError;\\n}(errorFactory('ConstructionError'));\\n\\n//# sourceURL=webpack://DerivAPIBasic/./src/deriv_api/errors.js?\");\n\n/***/ }),\n\n/***/ \"./src/deriv_api/utils.js\":\n/*!********************************!*\\\n  !*** ./src/deriv_api/utils.js ***!\n  \\********************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"objectToCacheKey\\\": () => (/* binding */ objectToCacheKey)\\n/* harmony export */ });\\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \\\"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\\\");\\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! json-stable-stringify */ \\\"./node_modules/json-stable-stringify/index.js\\\");\\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(json_stable_stringify__WEBPACK_IMPORTED_MODULE_1__);\\n\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\n // eslint-disable-next-line import/prefer-default-export\\n\\nfunction objectToCacheKey(obj) {\\n  var cloned_object = _objectSpread({}, obj);\\n\\n  delete cloned_object.req_id;\\n  delete cloned_object.passthrough;\\n  delete cloned_object.subscribe;\\n  return json_stable_stringify__WEBPACK_IMPORTED_MODULE_1___default()(cloned_object);\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./src/deriv_api/utils.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/json-stable-stringify/index.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/json-stable-stringify/index.js ***!\n  \\*****************************************************/\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\neval(\"var json = typeof JSON !== 'undefined' ? JSON : __webpack_require__(/*! jsonify */ \\\"./node_modules/jsonify/index.js\\\");\\n\\nmodule.exports = function (obj, opts) {\\n    if (!opts) opts = {};\\n    if (typeof opts === 'function') opts = { cmp: opts };\\n    var space = opts.space || '';\\n    if (typeof space === 'number') space = Array(space+1).join(' ');\\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\\n    var replacer = opts.replacer || function(key, value) { return value; };\\n\\n    var cmp = opts.cmp && (function (f) {\\n        return function (node) {\\n            return function (a, b) {\\n                var aobj = { key: a, value: node[a] };\\n                var bobj = { key: b, value: node[b] };\\n                return f(aobj, bobj);\\n            };\\n        };\\n    })(opts.cmp);\\n\\n    var seen = [];\\n    return (function stringify (parent, key, node, level) {\\n        var indent = space ? ('\\\\n' + new Array(level + 1).join(space)) : '';\\n        var colonSeparator = space ? ': ' : ':';\\n\\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\\n            node = node.toJSON();\\n        }\\n\\n        node = replacer.call(parent, key, node);\\n\\n        if (node === undefined) {\\n            return;\\n        }\\n        if (typeof node !== 'object' || node === null) {\\n            return json.stringify(node);\\n        }\\n        if (isArray(node)) {\\n            var out = [];\\n            for (var i = 0; i < node.length; i++) {\\n                var item = stringify(node, i, node[i], level+1) || json.stringify(null);\\n                out.push(indent + space + item);\\n            }\\n            return '[' + out.join(',') + indent + ']';\\n        }\\n        else {\\n            if (seen.indexOf(node) !== -1) {\\n                if (cycles) return json.stringify('__cycle__');\\n                throw new TypeError('Converting circular structure to JSON');\\n            }\\n            else seen.push(node);\\n\\n            var keys = objectKeys(node).sort(cmp && cmp(node));\\n            var out = [];\\n            for (var i = 0; i < keys.length; i++) {\\n                var key = keys[i];\\n                var value = stringify(node, key, node[key], level+1);\\n\\n                if(!value) continue;\\n\\n                var keyValue = json.stringify(key)\\n                    + colonSeparator\\n                    + value;\\n                ;\\n                out.push(indent + space + keyValue);\\n            }\\n            seen.splice(seen.indexOf(node), 1);\\n            return '{' + out.join(',') + indent + '}';\\n        }\\n    })({ '': obj }, '', obj, 0);\\n};\\n\\nvar isArray = Array.isArray || function (x) {\\n    return {}.toString.call(x) === '[object Array]';\\n};\\n\\nvar objectKeys = Object.keys || function (obj) {\\n    var has = Object.prototype.hasOwnProperty || function () { return true };\\n    var keys = [];\\n    for (var key in obj) {\\n        if (has.call(obj, key)) keys.push(key);\\n    }\\n    return keys;\\n};\\n\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/json-stable-stringify/index.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/jsonify/index.js\":\n/*!***************************************!*\\\n  !*** ./node_modules/jsonify/index.js ***!\n  \\***************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\neval(\"exports.parse = __webpack_require__(/*! ./lib/parse */ \\\"./node_modules/jsonify/lib/parse.js\\\");\\nexports.stringify = __webpack_require__(/*! ./lib/stringify */ \\\"./node_modules/jsonify/lib/stringify.js\\\");\\n\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/jsonify/index.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/jsonify/lib/parse.js\":\n/*!*******************************************!*\\\n  !*** ./node_modules/jsonify/lib/parse.js ***!\n  \\*******************************************/\n/***/ ((module) => {\n\neval(\"var at, // The index of the current character\\n    ch, // The current character\\n    escapee = {\\n        '\\\"':  '\\\"',\\n        '\\\\\\\\': '\\\\\\\\',\\n        '/':  '/',\\n        b:    '\\\\b',\\n        f:    '\\\\f',\\n        n:    '\\\\n',\\n        r:    '\\\\r',\\n        t:    '\\\\t'\\n    },\\n    text,\\n\\n    error = function (m) {\\n        // Call error when something is wrong.\\n        throw {\\n            name:    'SyntaxError',\\n            message: m,\\n            at:      at,\\n            text:    text\\n        };\\n    },\\n    \\n    next = function (c) {\\n        // If a c parameter is provided, verify that it matches the current character.\\n        if (c && c !== ch) {\\n            error(\\\"Expected '\\\" + c + \\\"' instead of '\\\" + ch + \\\"'\\\");\\n        }\\n        \\n        // Get the next character. When there are no more characters,\\n        // return the empty string.\\n        \\n        ch = text.charAt(at);\\n        at += 1;\\n        return ch;\\n    },\\n    \\n    number = function () {\\n        // Parse a number value.\\n        var number,\\n            string = '';\\n        \\n        if (ch === '-') {\\n            string = '-';\\n            next('-');\\n        }\\n        while (ch >= '0' && ch <= '9') {\\n            string += ch;\\n            next();\\n        }\\n        if (ch === '.') {\\n            string += '.';\\n            while (next() && ch >= '0' && ch <= '9') {\\n                string += ch;\\n            }\\n        }\\n        if (ch === 'e' || ch === 'E') {\\n            string += ch;\\n            next();\\n            if (ch === '-' || ch === '+') {\\n                string += ch;\\n                next();\\n            }\\n            while (ch >= '0' && ch <= '9') {\\n                string += ch;\\n                next();\\n            }\\n        }\\n        number = +string;\\n        if (!isFinite(number)) {\\n            error(\\\"Bad number\\\");\\n        } else {\\n            return number;\\n        }\\n    },\\n    \\n    string = function () {\\n        // Parse a string value.\\n        var hex,\\n            i,\\n            string = '',\\n            uffff;\\n        \\n        // When parsing for string values, we must look for \\\" and \\\\ characters.\\n        if (ch === '\\\"') {\\n            while (next()) {\\n                if (ch === '\\\"') {\\n                    next();\\n                    return string;\\n                } else if (ch === '\\\\\\\\') {\\n                    next();\\n                    if (ch === 'u') {\\n                        uffff = 0;\\n                        for (i = 0; i < 4; i += 1) {\\n                            hex = parseInt(next(), 16);\\n                            if (!isFinite(hex)) {\\n                                break;\\n                            }\\n                            uffff = uffff * 16 + hex;\\n                        }\\n                        string += String.fromCharCode(uffff);\\n                    } else if (typeof escapee[ch] === 'string') {\\n                        string += escapee[ch];\\n                    } else {\\n                        break;\\n                    }\\n                } else {\\n                    string += ch;\\n                }\\n            }\\n        }\\n        error(\\\"Bad string\\\");\\n    },\\n\\n    white = function () {\\n\\n// Skip whitespace.\\n\\n        while (ch && ch <= ' ') {\\n            next();\\n        }\\n    },\\n\\n    word = function () {\\n\\n// true, false, or null.\\n\\n        switch (ch) {\\n        case 't':\\n            next('t');\\n            next('r');\\n            next('u');\\n            next('e');\\n            return true;\\n        case 'f':\\n            next('f');\\n            next('a');\\n            next('l');\\n            next('s');\\n            next('e');\\n            return false;\\n        case 'n':\\n            next('n');\\n            next('u');\\n            next('l');\\n            next('l');\\n            return null;\\n        }\\n        error(\\\"Unexpected '\\\" + ch + \\\"'\\\");\\n    },\\n\\n    value,  // Place holder for the value function.\\n\\n    array = function () {\\n\\n// Parse an array value.\\n\\n        var array = [];\\n\\n        if (ch === '[') {\\n            next('[');\\n            white();\\n            if (ch === ']') {\\n                next(']');\\n                return array;   // empty array\\n            }\\n            while (ch) {\\n                array.push(value());\\n                white();\\n                if (ch === ']') {\\n                    next(']');\\n                    return array;\\n                }\\n                next(',');\\n                white();\\n            }\\n        }\\n        error(\\\"Bad array\\\");\\n    },\\n\\n    object = function () {\\n\\n// Parse an object value.\\n\\n        var key,\\n            object = {};\\n\\n        if (ch === '{') {\\n            next('{');\\n            white();\\n            if (ch === '}') {\\n                next('}');\\n                return object;   // empty object\\n            }\\n            while (ch) {\\n                key = string();\\n                white();\\n                next(':');\\n                if (Object.hasOwnProperty.call(object, key)) {\\n                    error('Duplicate key \\\"' + key + '\\\"');\\n                }\\n                object[key] = value();\\n                white();\\n                if (ch === '}') {\\n                    next('}');\\n                    return object;\\n                }\\n                next(',');\\n                white();\\n            }\\n        }\\n        error(\\\"Bad object\\\");\\n    };\\n\\nvalue = function () {\\n\\n// Parse a JSON value. It could be an object, an array, a string, a number,\\n// or a word.\\n\\n    white();\\n    switch (ch) {\\n    case '{':\\n        return object();\\n    case '[':\\n        return array();\\n    case '\\\"':\\n        return string();\\n    case '-':\\n        return number();\\n    default:\\n        return ch >= '0' && ch <= '9' ? number() : word();\\n    }\\n};\\n\\n// Return the json_parse function. It will have access to all of the above\\n// functions and variables.\\n\\nmodule.exports = function (source, reviver) {\\n    var result;\\n    \\n    text = source;\\n    at = 0;\\n    ch = ' ';\\n    result = value();\\n    white();\\n    if (ch) {\\n        error(\\\"Syntax error\\\");\\n    }\\n\\n    // If there is a reviver function, we recursively walk the new structure,\\n    // passing each name/value pair to the reviver function for possible\\n    // transformation, starting with a temporary root object that holds the result\\n    // in an empty key. If there is not a reviver function, we simply return the\\n    // result.\\n\\n    return typeof reviver === 'function' ? (function walk(holder, key) {\\n        var k, v, value = holder[key];\\n        if (value && typeof value === 'object') {\\n            for (k in value) {\\n                if (Object.prototype.hasOwnProperty.call(value, k)) {\\n                    v = walk(value, k);\\n                    if (v !== undefined) {\\n                        value[k] = v;\\n                    } else {\\n                        delete value[k];\\n                    }\\n                }\\n            }\\n        }\\n        return reviver.call(holder, key, value);\\n    }({'': result}, '')) : result;\\n};\\n\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/jsonify/lib/parse.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/jsonify/lib/stringify.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/jsonify/lib/stringify.js ***!\n  \\***********************************************/\n/***/ ((module) => {\n\neval(\"var cx = /[\\\\u0000\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g,\\n    escapable = /[\\\\\\\\\\\\\\\"\\\\x00-\\\\x1f\\\\x7f-\\\\x9f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g,\\n    gap,\\n    indent,\\n    meta = {    // table of character substitutions\\n        '\\\\b': '\\\\\\\\b',\\n        '\\\\t': '\\\\\\\\t',\\n        '\\\\n': '\\\\\\\\n',\\n        '\\\\f': '\\\\\\\\f',\\n        '\\\\r': '\\\\\\\\r',\\n        '\\\"' : '\\\\\\\\\\\"',\\n        '\\\\\\\\': '\\\\\\\\\\\\\\\\'\\n    },\\n    rep;\\n\\nfunction quote(string) {\\n    // If the string contains no control characters, no quote characters, and no\\n    // backslash characters, then we can safely slap some quotes around it.\\n    // Otherwise we must also replace the offending characters with safe escape\\n    // sequences.\\n    \\n    escapable.lastIndex = 0;\\n    return escapable.test(string) ? '\\\"' + string.replace(escapable, function (a) {\\n        var c = meta[a];\\n        return typeof c === 'string' ? c :\\n            '\\\\\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\\n    }) + '\\\"' : '\\\"' + string + '\\\"';\\n}\\n\\nfunction str(key, holder) {\\n    // Produce a string from holder[key].\\n    var i,          // The loop counter.\\n        k,          // The member key.\\n        v,          // The member value.\\n        length,\\n        mind = gap,\\n        partial,\\n        value = holder[key];\\n    \\n    // If the value has a toJSON method, call it to obtain a replacement value.\\n    if (value && typeof value === 'object' &&\\n            typeof value.toJSON === 'function') {\\n        value = value.toJSON(key);\\n    }\\n    \\n    // If we were called with a replacer function, then call the replacer to\\n    // obtain a replacement value.\\n    if (typeof rep === 'function') {\\n        value = rep.call(holder, key, value);\\n    }\\n    \\n    // What happens next depends on the value's type.\\n    switch (typeof value) {\\n        case 'string':\\n            return quote(value);\\n        \\n        case 'number':\\n            // JSON numbers must be finite. Encode non-finite numbers as null.\\n            return isFinite(value) ? String(value) : 'null';\\n        \\n        case 'boolean':\\n        case 'null':\\n            // If the value is a boolean or null, convert it to a string. Note:\\n            // typeof null does not produce 'null'. The case is included here in\\n            // the remote chance that this gets fixed someday.\\n            return String(value);\\n            \\n        case 'object':\\n            if (!value) return 'null';\\n            gap += indent;\\n            partial = [];\\n            \\n            // Array.isArray\\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\\n                length = value.length;\\n                for (i = 0; i < length; i += 1) {\\n                    partial[i] = str(i, value) || 'null';\\n                }\\n                \\n                // Join all of the elements together, separated with commas, and\\n                // wrap them in brackets.\\n                v = partial.length === 0 ? '[]' : gap ?\\n                    '[\\\\n' + gap + partial.join(',\\\\n' + gap) + '\\\\n' + mind + ']' :\\n                    '[' + partial.join(',') + ']';\\n                gap = mind;\\n                return v;\\n            }\\n            \\n            // If the replacer is an array, use it to select the members to be\\n            // stringified.\\n            if (rep && typeof rep === 'object') {\\n                length = rep.length;\\n                for (i = 0; i < length; i += 1) {\\n                    k = rep[i];\\n                    if (typeof k === 'string') {\\n                        v = str(k, value);\\n                        if (v) {\\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\\n                        }\\n                    }\\n                }\\n            }\\n            else {\\n                // Otherwise, iterate through all of the keys in the object.\\n                for (k in value) {\\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\\n                        v = str(k, value);\\n                        if (v) {\\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\\n                        }\\n                    }\\n                }\\n            }\\n            \\n        // Join all of the member texts together, separated with commas,\\n        // and wrap them in braces.\\n\\n        v = partial.length === 0 ? '{}' : gap ?\\n            '{\\\\n' + gap + partial.join(',\\\\n' + gap) + '\\\\n' + mind + '}' :\\n            '{' + partial.join(',') + '}';\\n        gap = mind;\\n        return v;\\n    }\\n}\\n\\nmodule.exports = function (value, replacer, space) {\\n    var i;\\n    gap = '';\\n    indent = '';\\n    \\n    // If the space parameter is a number, make an indent string containing that\\n    // many spaces.\\n    if (typeof space === 'number') {\\n        for (i = 0; i < space; i += 1) {\\n            indent += ' ';\\n        }\\n    }\\n    // If the space parameter is a string, it will be used as the indent string.\\n    else if (typeof space === 'string') {\\n        indent = space;\\n    }\\n\\n    // If there is a replacer, it must be a function or an array.\\n    // Otherwise, throw an error.\\n    rep = replacer;\\n    if (replacer && typeof replacer !== 'function'\\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\\n        throw new Error('JSON.stringify');\\n    }\\n    \\n    // Make a fake root object containing our value under the key of ''.\\n    // Return the result of stringifying the value.\\n    return str('', {'': value});\\n};\\n\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/jsonify/lib/stringify.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/regenerator-runtime/runtime.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/regenerator-runtime/runtime.js ***!\n  \\*****************************************************/\n/***/ ((module) => {\n\neval(\"/**\\n * Copyright (c) 2014-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nvar runtime = (function (exports) {\\n  \\\"use strict\\\";\\n\\n  var Op = Object.prototype;\\n  var hasOwn = Op.hasOwnProperty;\\n  var undefined; // More compressible than void 0.\\n  var $Symbol = typeof Symbol === \\\"function\\\" ? Symbol : {};\\n  var iteratorSymbol = $Symbol.iterator || \\\"@@iterator\\\";\\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \\\"@@asyncIterator\\\";\\n  var toStringTagSymbol = $Symbol.toStringTag || \\\"@@toStringTag\\\";\\n\\n  function define(obj, key, value) {\\n    Object.defineProperty(obj, key, {\\n      value: value,\\n      enumerable: true,\\n      configurable: true,\\n      writable: true\\n    });\\n    return obj[key];\\n  }\\n  try {\\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\\n    define({}, \\\"\\\");\\n  } catch (err) {\\n    define = function(obj, key, value) {\\n      return obj[key] = value;\\n    };\\n  }\\n\\n  function wrap(innerFn, outerFn, self, tryLocsList) {\\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\\n    var generator = Object.create(protoGenerator.prototype);\\n    var context = new Context(tryLocsList || []);\\n\\n    // The ._invoke method unifies the implementations of the .next,\\n    // .throw, and .return methods.\\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\\n\\n    return generator;\\n  }\\n  exports.wrap = wrap;\\n\\n  // Try/catch helper to minimize deoptimizations. Returns a completion\\n  // record like context.tryEntries[i].completion. This interface could\\n  // have been (and was previously) designed to take a closure to be\\n  // invoked without arguments, but in all the cases we care about we\\n  // already have an existing method we want to call, so there's no need\\n  // to create a new function object. We can even get away with assuming\\n  // the method takes exactly one argument, since that happens to be true\\n  // in every case, so we don't have to touch the arguments object. The\\n  // only additional allocation required is the completion record, which\\n  // has a stable shape and so hopefully should be cheap to allocate.\\n  function tryCatch(fn, obj, arg) {\\n    try {\\n      return { type: \\\"normal\\\", arg: fn.call(obj, arg) };\\n    } catch (err) {\\n      return { type: \\\"throw\\\", arg: err };\\n    }\\n  }\\n\\n  var GenStateSuspendedStart = \\\"suspendedStart\\\";\\n  var GenStateSuspendedYield = \\\"suspendedYield\\\";\\n  var GenStateExecuting = \\\"executing\\\";\\n  var GenStateCompleted = \\\"completed\\\";\\n\\n  // Returning this object from the innerFn has the same effect as\\n  // breaking out of the dispatch switch statement.\\n  var ContinueSentinel = {};\\n\\n  // Dummy constructor functions that we use as the .constructor and\\n  // .constructor.prototype properties for functions that return Generator\\n  // objects. For full spec compliance, you may wish to configure your\\n  // minifier not to mangle the names of these two functions.\\n  function Generator() {}\\n  function GeneratorFunction() {}\\n  function GeneratorFunctionPrototype() {}\\n\\n  // This is a polyfill for %IteratorPrototype% for environments that\\n  // don't natively support it.\\n  var IteratorPrototype = {};\\n  define(IteratorPrototype, iteratorSymbol, function () {\\n    return this;\\n  });\\n\\n  var getProto = Object.getPrototypeOf;\\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\\n  if (NativeIteratorPrototype &&\\n      NativeIteratorPrototype !== Op &&\\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\\n    // This environment has a native %IteratorPrototype%; use it instead\\n    // of the polyfill.\\n    IteratorPrototype = NativeIteratorPrototype;\\n  }\\n\\n  var Gp = GeneratorFunctionPrototype.prototype =\\n    Generator.prototype = Object.create(IteratorPrototype);\\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\\n  define(Gp, \\\"constructor\\\", GeneratorFunctionPrototype);\\n  define(GeneratorFunctionPrototype, \\\"constructor\\\", GeneratorFunction);\\n  GeneratorFunction.displayName = define(\\n    GeneratorFunctionPrototype,\\n    toStringTagSymbol,\\n    \\\"GeneratorFunction\\\"\\n  );\\n\\n  // Helper for defining the .next, .throw, and .return methods of the\\n  // Iterator interface in terms of a single ._invoke method.\\n  function defineIteratorMethods(prototype) {\\n    [\\\"next\\\", \\\"throw\\\", \\\"return\\\"].forEach(function(method) {\\n      define(prototype, method, function(arg) {\\n        return this._invoke(method, arg);\\n      });\\n    });\\n  }\\n\\n  exports.isGeneratorFunction = function(genFun) {\\n    var ctor = typeof genFun === \\\"function\\\" && genFun.constructor;\\n    return ctor\\n      ? ctor === GeneratorFunction ||\\n        // For the native GeneratorFunction constructor, the best we can\\n        // do is to check its .name property.\\n        (ctor.displayName || ctor.name) === \\\"GeneratorFunction\\\"\\n      : false;\\n  };\\n\\n  exports.mark = function(genFun) {\\n    if (Object.setPrototypeOf) {\\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\\n    } else {\\n      genFun.__proto__ = GeneratorFunctionPrototype;\\n      define(genFun, toStringTagSymbol, \\\"GeneratorFunction\\\");\\n    }\\n    genFun.prototype = Object.create(Gp);\\n    return genFun;\\n  };\\n\\n  // Within the body of any async function, `await x` is transformed to\\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\\n  // `hasOwn.call(value, \\\"__await\\\")` to determine if the yielded value is\\n  // meant to be awaited.\\n  exports.awrap = function(arg) {\\n    return { __await: arg };\\n  };\\n\\n  function AsyncIterator(generator, PromiseImpl) {\\n    function invoke(method, arg, resolve, reject) {\\n      var record = tryCatch(generator[method], generator, arg);\\n      if (record.type === \\\"throw\\\") {\\n        reject(record.arg);\\n      } else {\\n        var result = record.arg;\\n        var value = result.value;\\n        if (value &&\\n            typeof value === \\\"object\\\" &&\\n            hasOwn.call(value, \\\"__await\\\")) {\\n          return PromiseImpl.resolve(value.__await).then(function(value) {\\n            invoke(\\\"next\\\", value, resolve, reject);\\n          }, function(err) {\\n            invoke(\\\"throw\\\", err, resolve, reject);\\n          });\\n        }\\n\\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\\n          // When a yielded Promise is resolved, its final value becomes\\n          // the .value of the Promise<{value,done}> result for the\\n          // current iteration.\\n          result.value = unwrapped;\\n          resolve(result);\\n        }, function(error) {\\n          // If a rejected Promise was yielded, throw the rejection back\\n          // into the async generator function so it can be handled there.\\n          return invoke(\\\"throw\\\", error, resolve, reject);\\n        });\\n      }\\n    }\\n\\n    var previousPromise;\\n\\n    function enqueue(method, arg) {\\n      function callInvokeWithMethodAndArg() {\\n        return new PromiseImpl(function(resolve, reject) {\\n          invoke(method, arg, resolve, reject);\\n        });\\n      }\\n\\n      return previousPromise =\\n        // If enqueue has been called before, then we want to wait until\\n        // all previous Promises have been resolved before calling invoke,\\n        // so that results are always delivered in the correct order. If\\n        // enqueue has not been called before, then it is important to\\n        // call invoke immediately, without waiting on a callback to fire,\\n        // so that the async generator function has the opportunity to do\\n        // any necessary setup in a predictable way. This predictability\\n        // is why the Promise constructor synchronously invokes its\\n        // executor callback, and why async functions synchronously\\n        // execute code before the first await. Since we implement simple\\n        // async functions in terms of async generators, it is especially\\n        // important to get this right, even though it requires care.\\n        previousPromise ? previousPromise.then(\\n          callInvokeWithMethodAndArg,\\n          // Avoid propagating failures to Promises returned by later\\n          // invocations of the iterator.\\n          callInvokeWithMethodAndArg\\n        ) : callInvokeWithMethodAndArg();\\n    }\\n\\n    // Define the unified helper method that is used to implement .next,\\n    // .throw, and .return (see defineIteratorMethods).\\n    this._invoke = enqueue;\\n  }\\n\\n  defineIteratorMethods(AsyncIterator.prototype);\\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\\n    return this;\\n  });\\n  exports.AsyncIterator = AsyncIterator;\\n\\n  // Note that simple async functions are implemented on top of\\n  // AsyncIterator objects; they just return a Promise for the value of\\n  // the final result produced by the iterator.\\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\\n\\n    var iter = new AsyncIterator(\\n      wrap(innerFn, outerFn, self, tryLocsList),\\n      PromiseImpl\\n    );\\n\\n    return exports.isGeneratorFunction(outerFn)\\n      ? iter // If outerFn is a generator, return the full iterator.\\n      : iter.next().then(function(result) {\\n          return result.done ? result.value : iter.next();\\n        });\\n  };\\n\\n  function makeInvokeMethod(innerFn, self, context) {\\n    var state = GenStateSuspendedStart;\\n\\n    return function invoke(method, arg) {\\n      if (state === GenStateExecuting) {\\n        throw new Error(\\\"Generator is already running\\\");\\n      }\\n\\n      if (state === GenStateCompleted) {\\n        if (method === \\\"throw\\\") {\\n          throw arg;\\n        }\\n\\n        // Be forgiving, per 25.3.3.3.3 of the spec:\\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\\n        return doneResult();\\n      }\\n\\n      context.method = method;\\n      context.arg = arg;\\n\\n      while (true) {\\n        var delegate = context.delegate;\\n        if (delegate) {\\n          var delegateResult = maybeInvokeDelegate(delegate, context);\\n          if (delegateResult) {\\n            if (delegateResult === ContinueSentinel) continue;\\n            return delegateResult;\\n          }\\n        }\\n\\n        if (context.method === \\\"next\\\") {\\n          // Setting context._sent for legacy support of Babel's\\n          // function.sent implementation.\\n          context.sent = context._sent = context.arg;\\n\\n        } else if (context.method === \\\"throw\\\") {\\n          if (state === GenStateSuspendedStart) {\\n            state = GenStateCompleted;\\n            throw context.arg;\\n          }\\n\\n          context.dispatchException(context.arg);\\n\\n        } else if (context.method === \\\"return\\\") {\\n          context.abrupt(\\\"return\\\", context.arg);\\n        }\\n\\n        state = GenStateExecuting;\\n\\n        var record = tryCatch(innerFn, self, context);\\n        if (record.type === \\\"normal\\\") {\\n          // If an exception is thrown from innerFn, we leave state ===\\n          // GenStateExecuting and loop back for another invocation.\\n          state = context.done\\n            ? GenStateCompleted\\n            : GenStateSuspendedYield;\\n\\n          if (record.arg === ContinueSentinel) {\\n            continue;\\n          }\\n\\n          return {\\n            value: record.arg,\\n            done: context.done\\n          };\\n\\n        } else if (record.type === \\\"throw\\\") {\\n          state = GenStateCompleted;\\n          // Dispatch the exception by looping back around to the\\n          // context.dispatchException(context.arg) call above.\\n          context.method = \\\"throw\\\";\\n          context.arg = record.arg;\\n        }\\n      }\\n    };\\n  }\\n\\n  // Call delegate.iterator[context.method](context.arg) and handle the\\n  // result, either by returning a { value, done } result from the\\n  // delegate iterator, or by modifying context.method and context.arg,\\n  // setting context.delegate to null, and returning the ContinueSentinel.\\n  function maybeInvokeDelegate(delegate, context) {\\n    var method = delegate.iterator[context.method];\\n    if (method === undefined) {\\n      // A .throw or .return when the delegate iterator has no .throw\\n      // method always terminates the yield* loop.\\n      context.delegate = null;\\n\\n      if (context.method === \\\"throw\\\") {\\n        // Note: [\\\"return\\\"] must be used for ES3 parsing compatibility.\\n        if (delegate.iterator[\\\"return\\\"]) {\\n          // If the delegate iterator has a return method, give it a\\n          // chance to clean up.\\n          context.method = \\\"return\\\";\\n          context.arg = undefined;\\n          maybeInvokeDelegate(delegate, context);\\n\\n          if (context.method === \\\"throw\\\") {\\n            // If maybeInvokeDelegate(context) changed context.method from\\n            // \\\"return\\\" to \\\"throw\\\", let that override the TypeError below.\\n            return ContinueSentinel;\\n          }\\n        }\\n\\n        context.method = \\\"throw\\\";\\n        context.arg = new TypeError(\\n          \\\"The iterator does not provide a 'throw' method\\\");\\n      }\\n\\n      return ContinueSentinel;\\n    }\\n\\n    var record = tryCatch(method, delegate.iterator, context.arg);\\n\\n    if (record.type === \\\"throw\\\") {\\n      context.method = \\\"throw\\\";\\n      context.arg = record.arg;\\n      context.delegate = null;\\n      return ContinueSentinel;\\n    }\\n\\n    var info = record.arg;\\n\\n    if (! info) {\\n      context.method = \\\"throw\\\";\\n      context.arg = new TypeError(\\\"iterator result is not an object\\\");\\n      context.delegate = null;\\n      return ContinueSentinel;\\n    }\\n\\n    if (info.done) {\\n      // Assign the result of the finished delegate to the temporary\\n      // variable specified by delegate.resultName (see delegateYield).\\n      context[delegate.resultName] = info.value;\\n\\n      // Resume execution at the desired location (see delegateYield).\\n      context.next = delegate.nextLoc;\\n\\n      // If context.method was \\\"throw\\\" but the delegate handled the\\n      // exception, let the outer generator proceed normally. If\\n      // context.method was \\\"next\\\", forget context.arg since it has been\\n      // \\\"consumed\\\" by the delegate iterator. If context.method was\\n      // \\\"return\\\", allow the original .return call to continue in the\\n      // outer generator.\\n      if (context.method !== \\\"return\\\") {\\n        context.method = \\\"next\\\";\\n        context.arg = undefined;\\n      }\\n\\n    } else {\\n      // Re-yield the result returned by the delegate method.\\n      return info;\\n    }\\n\\n    // The delegate iterator is finished, so forget it and continue with\\n    // the outer generator.\\n    context.delegate = null;\\n    return ContinueSentinel;\\n  }\\n\\n  // Define Generator.prototype.{next,throw,return} in terms of the\\n  // unified ._invoke helper method.\\n  defineIteratorMethods(Gp);\\n\\n  define(Gp, toStringTagSymbol, \\\"Generator\\\");\\n\\n  // A Generator should always return itself as the iterator object when the\\n  // @@iterator function is called on it. Some browsers' implementations of the\\n  // iterator prototype chain incorrectly implement this, causing the Generator\\n  // object to not be returned from this call. This ensures that doesn't happen.\\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\\n  define(Gp, iteratorSymbol, function() {\\n    return this;\\n  });\\n\\n  define(Gp, \\\"toString\\\", function() {\\n    return \\\"[object Generator]\\\";\\n  });\\n\\n  function pushTryEntry(locs) {\\n    var entry = { tryLoc: locs[0] };\\n\\n    if (1 in locs) {\\n      entry.catchLoc = locs[1];\\n    }\\n\\n    if (2 in locs) {\\n      entry.finallyLoc = locs[2];\\n      entry.afterLoc = locs[3];\\n    }\\n\\n    this.tryEntries.push(entry);\\n  }\\n\\n  function resetTryEntry(entry) {\\n    var record = entry.completion || {};\\n    record.type = \\\"normal\\\";\\n    delete record.arg;\\n    entry.completion = record;\\n  }\\n\\n  function Context(tryLocsList) {\\n    // The root entry object (effectively a try statement without a catch\\n    // or a finally block) gives us a place to store values thrown from\\n    // locations where there is no enclosing try statement.\\n    this.tryEntries = [{ tryLoc: \\\"root\\\" }];\\n    tryLocsList.forEach(pushTryEntry, this);\\n    this.reset(true);\\n  }\\n\\n  exports.keys = function(object) {\\n    var keys = [];\\n    for (var key in object) {\\n      keys.push(key);\\n    }\\n    keys.reverse();\\n\\n    // Rather than returning an object with a next method, we keep\\n    // things simple and return the next function itself.\\n    return function next() {\\n      while (keys.length) {\\n        var key = keys.pop();\\n        if (key in object) {\\n          next.value = key;\\n          next.done = false;\\n          return next;\\n        }\\n      }\\n\\n      // To avoid creating an additional object, we just hang the .value\\n      // and .done properties off the next function object itself. This\\n      // also ensures that the minifier will not anonymize the function.\\n      next.done = true;\\n      return next;\\n    };\\n  };\\n\\n  function values(iterable) {\\n    if (iterable) {\\n      var iteratorMethod = iterable[iteratorSymbol];\\n      if (iteratorMethod) {\\n        return iteratorMethod.call(iterable);\\n      }\\n\\n      if (typeof iterable.next === \\\"function\\\") {\\n        return iterable;\\n      }\\n\\n      if (!isNaN(iterable.length)) {\\n        var i = -1, next = function next() {\\n          while (++i < iterable.length) {\\n            if (hasOwn.call(iterable, i)) {\\n              next.value = iterable[i];\\n              next.done = false;\\n              return next;\\n            }\\n          }\\n\\n          next.value = undefined;\\n          next.done = true;\\n\\n          return next;\\n        };\\n\\n        return next.next = next;\\n      }\\n    }\\n\\n    // Return an iterator with no values.\\n    return { next: doneResult };\\n  }\\n  exports.values = values;\\n\\n  function doneResult() {\\n    return { value: undefined, done: true };\\n  }\\n\\n  Context.prototype = {\\n    constructor: Context,\\n\\n    reset: function(skipTempReset) {\\n      this.prev = 0;\\n      this.next = 0;\\n      // Resetting context._sent for legacy support of Babel's\\n      // function.sent implementation.\\n      this.sent = this._sent = undefined;\\n      this.done = false;\\n      this.delegate = null;\\n\\n      this.method = \\\"next\\\";\\n      this.arg = undefined;\\n\\n      this.tryEntries.forEach(resetTryEntry);\\n\\n      if (!skipTempReset) {\\n        for (var name in this) {\\n          // Not sure about the optimal order of these conditions:\\n          if (name.charAt(0) === \\\"t\\\" &&\\n              hasOwn.call(this, name) &&\\n              !isNaN(+name.slice(1))) {\\n            this[name] = undefined;\\n          }\\n        }\\n      }\\n    },\\n\\n    stop: function() {\\n      this.done = true;\\n\\n      var rootEntry = this.tryEntries[0];\\n      var rootRecord = rootEntry.completion;\\n      if (rootRecord.type === \\\"throw\\\") {\\n        throw rootRecord.arg;\\n      }\\n\\n      return this.rval;\\n    },\\n\\n    dispatchException: function(exception) {\\n      if (this.done) {\\n        throw exception;\\n      }\\n\\n      var context = this;\\n      function handle(loc, caught) {\\n        record.type = \\\"throw\\\";\\n        record.arg = exception;\\n        context.next = loc;\\n\\n        if (caught) {\\n          // If the dispatched exception was caught by a catch block,\\n          // then let that catch block handle the exception normally.\\n          context.method = \\\"next\\\";\\n          context.arg = undefined;\\n        }\\n\\n        return !! caught;\\n      }\\n\\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\\n        var entry = this.tryEntries[i];\\n        var record = entry.completion;\\n\\n        if (entry.tryLoc === \\\"root\\\") {\\n          // Exception thrown outside of any try block that could handle\\n          // it, so set the completion value of the entire function to\\n          // throw the exception.\\n          return handle(\\\"end\\\");\\n        }\\n\\n        if (entry.tryLoc <= this.prev) {\\n          var hasCatch = hasOwn.call(entry, \\\"catchLoc\\\");\\n          var hasFinally = hasOwn.call(entry, \\\"finallyLoc\\\");\\n\\n          if (hasCatch && hasFinally) {\\n            if (this.prev < entry.catchLoc) {\\n              return handle(entry.catchLoc, true);\\n            } else if (this.prev < entry.finallyLoc) {\\n              return handle(entry.finallyLoc);\\n            }\\n\\n          } else if (hasCatch) {\\n            if (this.prev < entry.catchLoc) {\\n              return handle(entry.catchLoc, true);\\n            }\\n\\n          } else if (hasFinally) {\\n            if (this.prev < entry.finallyLoc) {\\n              return handle(entry.finallyLoc);\\n            }\\n\\n          } else {\\n            throw new Error(\\\"try statement without catch or finally\\\");\\n          }\\n        }\\n      }\\n    },\\n\\n    abrupt: function(type, arg) {\\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\\n        var entry = this.tryEntries[i];\\n        if (entry.tryLoc <= this.prev &&\\n            hasOwn.call(entry, \\\"finallyLoc\\\") &&\\n            this.prev < entry.finallyLoc) {\\n          var finallyEntry = entry;\\n          break;\\n        }\\n      }\\n\\n      if (finallyEntry &&\\n          (type === \\\"break\\\" ||\\n           type === \\\"continue\\\") &&\\n          finallyEntry.tryLoc <= arg &&\\n          arg <= finallyEntry.finallyLoc) {\\n        // Ignore the finally entry if control is not jumping to a\\n        // location outside the try/catch block.\\n        finallyEntry = null;\\n      }\\n\\n      var record = finallyEntry ? finallyEntry.completion : {};\\n      record.type = type;\\n      record.arg = arg;\\n\\n      if (finallyEntry) {\\n        this.method = \\\"next\\\";\\n        this.next = finallyEntry.finallyLoc;\\n        return ContinueSentinel;\\n      }\\n\\n      return this.complete(record);\\n    },\\n\\n    complete: function(record, afterLoc) {\\n      if (record.type === \\\"throw\\\") {\\n        throw record.arg;\\n      }\\n\\n      if (record.type === \\\"break\\\" ||\\n          record.type === \\\"continue\\\") {\\n        this.next = record.arg;\\n      } else if (record.type === \\\"return\\\") {\\n        this.rval = this.arg = record.arg;\\n        this.method = \\\"return\\\";\\n        this.next = \\\"end\\\";\\n      } else if (record.type === \\\"normal\\\" && afterLoc) {\\n        this.next = afterLoc;\\n      }\\n\\n      return ContinueSentinel;\\n    },\\n\\n    finish: function(finallyLoc) {\\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\\n        var entry = this.tryEntries[i];\\n        if (entry.finallyLoc === finallyLoc) {\\n          this.complete(entry.completion, entry.afterLoc);\\n          resetTryEntry(entry);\\n          return ContinueSentinel;\\n        }\\n      }\\n    },\\n\\n    \\\"catch\\\": function(tryLoc) {\\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\\n        var entry = this.tryEntries[i];\\n        if (entry.tryLoc === tryLoc) {\\n          var record = entry.completion;\\n          if (record.type === \\\"throw\\\") {\\n            var thrown = record.arg;\\n            resetTryEntry(entry);\\n          }\\n          return thrown;\\n        }\\n      }\\n\\n      // The context.catch method must only be called with a location\\n      // argument that corresponds to a known catch block.\\n      throw new Error(\\\"illegal catch attempt\\\");\\n    },\\n\\n    delegateYield: function(iterable, resultName, nextLoc) {\\n      this.delegate = {\\n        iterator: values(iterable),\\n        resultName: resultName,\\n        nextLoc: nextLoc\\n      };\\n\\n      if (this.method === \\\"next\\\") {\\n        // Deliberately forget the last sent value so that we don't\\n        // accidentally pass it on to the delegate.\\n        this.arg = undefined;\\n      }\\n\\n      return ContinueSentinel;\\n    }\\n  };\\n\\n  // Regardless of whether this script is executing as a CommonJS module\\n  // or not, return the runtime object so that we can declare the variable\\n  // regeneratorRuntime in the outer scope, which allows this module to be\\n  // injected easily by `bin/regenerator --include-runtime script.js`.\\n  return exports;\\n\\n}(\\n  // If this script is executing as a CommonJS module, use module.exports\\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\\n  // object. Either way, the resulting object will be used to initialize\\n  // the regeneratorRuntime variable at the top of this file.\\n   true ? module.exports : 0\\n));\\n\\ntry {\\n  regeneratorRuntime = runtime;\\n} catch (accidentalStrictMode) {\\n  // This module should not be running in strict mode, so the above\\n  // assignment should always work unless something is misconfigured. Just\\n  // in case runtime.js accidentally runs in strict mode, in modern engines\\n  // we can explicitly access globalThis. In older engines we can escape\\n  // strict mode using a global Function call. This could conceivably fail\\n  // if a Content Security Policy forbids using Function, but in that case\\n  // the proper solution is to fix the accidental strict mode problem. If\\n  // you've misconfigured your bundler to force strict mode and applied a\\n  // CSP to forbid Function, and you're not willing to fix either of those\\n  // problems, please detail your unique predicament in a GitHub issue.\\n  if (typeof globalThis === \\\"object\\\") {\\n    globalThis.regeneratorRuntime = runtime;\\n  } else {\\n    Function(\\\"r\\\", \\\"regeneratorRuntime = r\\\")(runtime);\\n  }\\n}\\n\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/regenerator-runtime/runtime.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/NotificationFactories.js\":\n/*!***********************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/NotificationFactories.js ***!\n  \\***********************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"COMPLETE_NOTIFICATION\\\": () => (/* binding */ COMPLETE_NOTIFICATION),\\n/* harmony export */   \\\"errorNotification\\\": () => (/* binding */ errorNotification),\\n/* harmony export */   \\\"nextNotification\\\": () => (/* binding */ nextNotification),\\n/* harmony export */   \\\"createNotification\\\": () => (/* binding */ createNotification)\\n/* harmony export */ });\\nvar COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();\\nfunction errorNotification(error) {\\n    return createNotification('E', undefined, error);\\n}\\nfunction nextNotification(value) {\\n    return createNotification('N', value, undefined);\\n}\\nfunction createNotification(kind, value, error) {\\n    return {\\n        kind: kind,\\n        value: value,\\n        error: error,\\n    };\\n}\\n//# sourceMappingURL=NotificationFactories.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/NotificationFactories.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/Observable.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/Observable.js ***!\n  \\************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"Observable\\\": () => (/* binding */ Observable)\\n/* harmony export */ });\\n/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subscriber */ \\\"./node_modules/rxjs/dist/esm5/internal/Subscriber.js\\\");\\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Subscription */ \\\"./node_modules/rxjs/dist/esm5/internal/Subscription.js\\\");\\n/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbol/observable */ \\\"./node_modules/rxjs/dist/esm5/internal/symbol/observable.js\\\");\\n/* harmony import */ var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/pipe */ \\\"./node_modules/rxjs/dist/esm5/internal/util/pipe.js\\\");\\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */ \\\"./node_modules/rxjs/dist/esm5/internal/config.js\\\");\\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/isFunction */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\\\");\\n/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/errorContext */ \\\"./node_modules/rxjs/dist/esm5/internal/util/errorContext.js\\\");\\n\\n\\n\\n\\n\\n\\n\\nvar Observable = (function () {\\n    function Observable(subscribe) {\\n        if (subscribe) {\\n            this._subscribe = subscribe;\\n        }\\n    }\\n    Observable.prototype.lift = function (operator) {\\n        var observable = new Observable();\\n        observable.source = this;\\n        observable.operator = operator;\\n        return observable;\\n    };\\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\\n        var _this = this;\\n        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.SafeSubscriber(observerOrNext, error, complete);\\n        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_1__.errorContext)(function () {\\n            var _a = _this, operator = _a.operator, source = _a.source;\\n            subscriber.add(operator\\n                ?\\n                    operator.call(subscriber, source)\\n                : source\\n                    ?\\n                        _this._subscribe(subscriber)\\n                    :\\n                        _this._trySubscribe(subscriber));\\n        });\\n        return subscriber;\\n    };\\n    Observable.prototype._trySubscribe = function (sink) {\\n        try {\\n            return this._subscribe(sink);\\n        }\\n        catch (err) {\\n            sink.error(err);\\n        }\\n    };\\n    Observable.prototype.forEach = function (next, promiseCtor) {\\n        var _this = this;\\n        promiseCtor = getPromiseCtor(promiseCtor);\\n        return new promiseCtor(function (resolve, reject) {\\n            var subscription;\\n            subscription = _this.subscribe(function (value) {\\n                try {\\n                    next(value);\\n                }\\n                catch (err) {\\n                    reject(err);\\n                    subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\\n                }\\n            }, reject, resolve);\\n        });\\n    };\\n    Observable.prototype._subscribe = function (subscriber) {\\n        var _a;\\n        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\\n    };\\n    Observable.prototype[_symbol_observable__WEBPACK_IMPORTED_MODULE_2__.observable] = function () {\\n        return this;\\n    };\\n    Observable.prototype.pipe = function () {\\n        var operations = [];\\n        for (var _i = 0; _i < arguments.length; _i++) {\\n            operations[_i] = arguments[_i];\\n        }\\n        return (0,_util_pipe__WEBPACK_IMPORTED_MODULE_3__.pipeFromArray)(operations)(this);\\n    };\\n    Observable.prototype.toPromise = function (promiseCtor) {\\n        var _this = this;\\n        promiseCtor = getPromiseCtor(promiseCtor);\\n        return new promiseCtor(function (resolve, reject) {\\n            var value;\\n            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });\\n        });\\n    };\\n    Observable.create = function (subscribe) {\\n        return new Observable(subscribe);\\n    };\\n    return Observable;\\n}());\\n\\nfunction getPromiseCtor(promiseCtor) {\\n    var _a;\\n    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : _config__WEBPACK_IMPORTED_MODULE_4__.config.Promise) !== null && _a !== void 0 ? _a : Promise;\\n}\\nfunction isObserver(value) {\\n    return value && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(value.next) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(value.error) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(value.complete);\\n}\\nfunction isSubscriber(value) {\\n    return (value && value instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber) || (isObserver(value) && (0,_Subscription__WEBPACK_IMPORTED_MODULE_6__.isSubscription)(value));\\n}\\n//# sourceMappingURL=Observable.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/Observable.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/Subject.js\":\n/*!*********************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/Subject.js ***!\n  \\*********************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"Subject\\\": () => (/* binding */ Subject),\\n/* harmony export */   \\\"AnonymousSubject\\\": () => (/* binding */ AnonymousSubject)\\n/* harmony export */ });\\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \\\"./node_modules/rxjs/node_modules/tslib/tslib.es6.js\\\");\\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Observable */ \\\"./node_modules/rxjs/dist/esm5/internal/Observable.js\\\");\\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Subscription */ \\\"./node_modules/rxjs/dist/esm5/internal/Subscription.js\\\");\\n/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ \\\"./node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js\\\");\\n/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/arrRemove */ \\\"./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js\\\");\\n/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/errorContext */ \\\"./node_modules/rxjs/dist/esm5/internal/util/errorContext.js\\\");\\n\\n\\n\\n\\n\\n\\nvar Subject = (function (_super) {\\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Subject, _super);\\n    function Subject() {\\n        var _this = _super.call(this) || this;\\n        _this.closed = false;\\n        _this.observers = [];\\n        _this.isStopped = false;\\n        _this.hasError = false;\\n        _this.thrownError = null;\\n        return _this;\\n    }\\n    Subject.prototype.lift = function (operator) {\\n        var subject = new AnonymousSubject(this, this);\\n        subject.operator = operator;\\n        return subject;\\n    };\\n    Subject.prototype._throwIfClosed = function () {\\n        if (this.closed) {\\n            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__.ObjectUnsubscribedError();\\n        }\\n    };\\n    Subject.prototype.next = function (value) {\\n        var _this = this;\\n        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(function () {\\n            var e_1, _a;\\n            _this._throwIfClosed();\\n            if (!_this.isStopped) {\\n                var copy = _this.observers.slice();\\n                try {\\n                    for (var copy_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(copy), copy_1_1 = copy_1.next(); !copy_1_1.done; copy_1_1 = copy_1.next()) {\\n                        var observer = copy_1_1.value;\\n                        observer.next(value);\\n                    }\\n                }\\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\\n                finally {\\n                    try {\\n                        if (copy_1_1 && !copy_1_1.done && (_a = copy_1.return)) _a.call(copy_1);\\n                    }\\n                    finally { if (e_1) throw e_1.error; }\\n                }\\n            }\\n        });\\n    };\\n    Subject.prototype.error = function (err) {\\n        var _this = this;\\n        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(function () {\\n            _this._throwIfClosed();\\n            if (!_this.isStopped) {\\n                _this.hasError = _this.isStopped = true;\\n                _this.thrownError = err;\\n                var observers = _this.observers;\\n                while (observers.length) {\\n                    observers.shift().error(err);\\n                }\\n            }\\n        });\\n    };\\n    Subject.prototype.complete = function () {\\n        var _this = this;\\n        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(function () {\\n            _this._throwIfClosed();\\n            if (!_this.isStopped) {\\n                _this.isStopped = true;\\n                var observers = _this.observers;\\n                while (observers.length) {\\n                    observers.shift().complete();\\n                }\\n            }\\n        });\\n    };\\n    Subject.prototype.unsubscribe = function () {\\n        this.isStopped = this.closed = true;\\n        this.observers = null;\\n    };\\n    Object.defineProperty(Subject.prototype, \\\"observed\\\", {\\n        get: function () {\\n            var _a;\\n            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\\n        },\\n        enumerable: false,\\n        configurable: true\\n    });\\n    Subject.prototype._trySubscribe = function (subscriber) {\\n        this._throwIfClosed();\\n        return _super.prototype._trySubscribe.call(this, subscriber);\\n    };\\n    Subject.prototype._subscribe = function (subscriber) {\\n        this._throwIfClosed();\\n        this._checkFinalizedStatuses(subscriber);\\n        return this._innerSubscribe(subscriber);\\n    };\\n    Subject.prototype._innerSubscribe = function (subscriber) {\\n        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;\\n        return hasError || isStopped\\n            ? _Subscription__WEBPACK_IMPORTED_MODULE_3__.EMPTY_SUBSCRIPTION\\n            : (observers.push(subscriber), new _Subscription__WEBPACK_IMPORTED_MODULE_3__.Subscription(function () { return (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_4__.arrRemove)(observers, subscriber); }));\\n    };\\n    Subject.prototype._checkFinalizedStatuses = function (subscriber) {\\n        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;\\n        if (hasError) {\\n            subscriber.error(thrownError);\\n        }\\n        else if (isStopped) {\\n            subscriber.complete();\\n        }\\n    };\\n    Subject.prototype.asObservable = function () {\\n        var observable = new _Observable__WEBPACK_IMPORTED_MODULE_5__.Observable();\\n        observable.source = this;\\n        return observable;\\n    };\\n    Subject.create = function (destination, source) {\\n        return new AnonymousSubject(destination, source);\\n    };\\n    return Subject;\\n}(_Observable__WEBPACK_IMPORTED_MODULE_5__.Observable));\\n\\nvar AnonymousSubject = (function (_super) {\\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AnonymousSubject, _super);\\n    function AnonymousSubject(destination, source) {\\n        var _this = _super.call(this) || this;\\n        _this.destination = destination;\\n        _this.source = source;\\n        return _this;\\n    }\\n    AnonymousSubject.prototype.next = function (value) {\\n        var _a, _b;\\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\\n    };\\n    AnonymousSubject.prototype.error = function (err) {\\n        var _a, _b;\\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\\n    };\\n    AnonymousSubject.prototype.complete = function () {\\n        var _a, _b;\\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\\n    };\\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\\n        var _a, _b;\\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : _Subscription__WEBPACK_IMPORTED_MODULE_3__.EMPTY_SUBSCRIPTION;\\n    };\\n    return AnonymousSubject;\\n}(Subject));\\n\\n//# sourceMappingURL=Subject.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/Subject.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/Subscriber.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/Subscriber.js ***!\n  \\************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"Subscriber\\\": () => (/* binding */ Subscriber),\\n/* harmony export */   \\\"SafeSubscriber\\\": () => (/* binding */ SafeSubscriber),\\n/* harmony export */   \\\"EMPTY_OBSERVER\\\": () => (/* binding */ EMPTY_OBSERVER)\\n/* harmony export */ });\\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \\\"./node_modules/rxjs/node_modules/tslib/tslib.es6.js\\\");\\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/isFunction */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\\\");\\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subscription */ \\\"./node_modules/rxjs/dist/esm5/internal/Subscription.js\\\");\\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */ \\\"./node_modules/rxjs/dist/esm5/internal/config.js\\\");\\n/* harmony import */ var _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/reportUnhandledError */ \\\"./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js\\\");\\n/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/noop */ \\\"./node_modules/rxjs/dist/esm5/internal/util/noop.js\\\");\\n/* harmony import */ var _NotificationFactories__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NotificationFactories */ \\\"./node_modules/rxjs/dist/esm5/internal/NotificationFactories.js\\\");\\n/* harmony import */ var _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./scheduler/timeoutProvider */ \\\"./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js\\\");\\n/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/errorContext */ \\\"./node_modules/rxjs/dist/esm5/internal/util/errorContext.js\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar Subscriber = (function (_super) {\\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Subscriber, _super);\\n    function Subscriber(destination) {\\n        var _this = _super.call(this) || this;\\n        _this.isStopped = false;\\n        if (destination) {\\n            _this.destination = destination;\\n            if ((0,_Subscription__WEBPACK_IMPORTED_MODULE_1__.isSubscription)(destination)) {\\n                destination.add(_this);\\n            }\\n        }\\n        else {\\n            _this.destination = EMPTY_OBSERVER;\\n        }\\n        return _this;\\n    }\\n    Subscriber.create = function (next, error, complete) {\\n        return new SafeSubscriber(next, error, complete);\\n    };\\n    Subscriber.prototype.next = function (value) {\\n        if (this.isStopped) {\\n            handleStoppedNotification((0,_NotificationFactories__WEBPACK_IMPORTED_MODULE_2__.nextNotification)(value), this);\\n        }\\n        else {\\n            this._next(value);\\n        }\\n    };\\n    Subscriber.prototype.error = function (err) {\\n        if (this.isStopped) {\\n            handleStoppedNotification((0,_NotificationFactories__WEBPACK_IMPORTED_MODULE_2__.errorNotification)(err), this);\\n        }\\n        else {\\n            this.isStopped = true;\\n            this._error(err);\\n        }\\n    };\\n    Subscriber.prototype.complete = function () {\\n        if (this.isStopped) {\\n            handleStoppedNotification(_NotificationFactories__WEBPACK_IMPORTED_MODULE_2__.COMPLETE_NOTIFICATION, this);\\n        }\\n        else {\\n            this.isStopped = true;\\n            this._complete();\\n        }\\n    };\\n    Subscriber.prototype.unsubscribe = function () {\\n        if (!this.closed) {\\n            this.isStopped = true;\\n            _super.prototype.unsubscribe.call(this);\\n            this.destination = null;\\n        }\\n    };\\n    Subscriber.prototype._next = function (value) {\\n        this.destination.next(value);\\n    };\\n    Subscriber.prototype._error = function (err) {\\n        try {\\n            this.destination.error(err);\\n        }\\n        finally {\\n            this.unsubscribe();\\n        }\\n    };\\n    Subscriber.prototype._complete = function () {\\n        try {\\n            this.destination.complete();\\n        }\\n        finally {\\n            this.unsubscribe();\\n        }\\n    };\\n    return Subscriber;\\n}(_Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription));\\n\\nvar SafeSubscriber = (function (_super) {\\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SafeSubscriber, _super);\\n    function SafeSubscriber(observerOrNext, error, complete) {\\n        var _this = _super.call(this) || this;\\n        var next;\\n        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_3__.isFunction)(observerOrNext)) {\\n            next = observerOrNext;\\n        }\\n        else if (observerOrNext) {\\n            (next = observerOrNext.next, error = observerOrNext.error, complete = observerOrNext.complete);\\n            var context_1;\\n            if (_this && _config__WEBPACK_IMPORTED_MODULE_4__.config.useDeprecatedNextContext) {\\n                context_1 = Object.create(observerOrNext);\\n                context_1.unsubscribe = function () { return _this.unsubscribe(); };\\n            }\\n            else {\\n                context_1 = observerOrNext;\\n            }\\n            next = next === null || next === void 0 ? void 0 : next.bind(context_1);\\n            error = error === null || error === void 0 ? void 0 : error.bind(context_1);\\n            complete = complete === null || complete === void 0 ? void 0 : complete.bind(context_1);\\n        }\\n        _this.destination = {\\n            next: next ? wrapForErrorHandling(next, _this) : _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop,\\n            error: wrapForErrorHandling(error !== null && error !== void 0 ? error : defaultErrorHandler, _this),\\n            complete: complete ? wrapForErrorHandling(complete, _this) : _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop,\\n        };\\n        return _this;\\n    }\\n    return SafeSubscriber;\\n}(Subscriber));\\n\\nfunction wrapForErrorHandling(handler, instance) {\\n    return function () {\\n        var args = [];\\n        for (var _i = 0; _i < arguments.length; _i++) {\\n            args[_i] = arguments[_i];\\n        }\\n        try {\\n            handler.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(args)));\\n        }\\n        catch (err) {\\n            if (_config__WEBPACK_IMPORTED_MODULE_4__.config.useDeprecatedSynchronousErrorHandling) {\\n                (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_6__.captureError)(err);\\n            }\\n            else {\\n                (0,_util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_7__.reportUnhandledError)(err);\\n            }\\n        }\\n    };\\n}\\nfunction defaultErrorHandler(err) {\\n    throw err;\\n}\\nfunction handleStoppedNotification(notification, subscriber) {\\n    var onStoppedNotification = _config__WEBPACK_IMPORTED_MODULE_4__.config.onStoppedNotification;\\n    onStoppedNotification && _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_8__.timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });\\n}\\nvar EMPTY_OBSERVER = {\\n    closed: true,\\n    next: _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop,\\n    error: defaultErrorHandler,\\n    complete: _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop,\\n};\\n//# sourceMappingURL=Subscriber.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/Subscriber.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/Subscription.js\":\n/*!**************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/Subscription.js ***!\n  \\**************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"Subscription\\\": () => (/* binding */ Subscription),\\n/* harmony export */   \\\"EMPTY_SUBSCRIPTION\\\": () => (/* binding */ EMPTY_SUBSCRIPTION),\\n/* harmony export */   \\\"isSubscription\\\": () => (/* binding */ isSubscription)\\n/* harmony export */ });\\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \\\"./node_modules/rxjs/node_modules/tslib/tslib.es6.js\\\");\\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/isFunction */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\\\");\\n/* harmony import */ var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/UnsubscriptionError */ \\\"./node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js\\\");\\n/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/arrRemove */ \\\"./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js\\\");\\n\\n\\n\\n\\nvar Subscription = (function () {\\n    function Subscription(initialTeardown) {\\n        this.initialTeardown = initialTeardown;\\n        this.closed = false;\\n        this._parentage = null;\\n        this._teardowns = null;\\n    }\\n    Subscription.prototype.unsubscribe = function () {\\n        var e_1, _a, e_2, _b;\\n        var errors;\\n        if (!this.closed) {\\n            this.closed = true;\\n            var _parentage = this._parentage;\\n            if (_parentage) {\\n                this._parentage = null;\\n                if (Array.isArray(_parentage)) {\\n                    try {\\n                        for (var _parentage_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\\n                            var parent_1 = _parentage_1_1.value;\\n                            parent_1.remove(this);\\n                        }\\n                    }\\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\\n                    finally {\\n                        try {\\n                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\\n                        }\\n                        finally { if (e_1) throw e_1.error; }\\n                    }\\n                }\\n                else {\\n                    _parentage.remove(this);\\n                }\\n            }\\n            var initialTeardown = this.initialTeardown;\\n            if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(initialTeardown)) {\\n                try {\\n                    initialTeardown();\\n                }\\n                catch (e) {\\n                    errors = e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__.UnsubscriptionError ? e.errors : [e];\\n                }\\n            }\\n            var _teardowns = this._teardowns;\\n            if (_teardowns) {\\n                this._teardowns = null;\\n                try {\\n                    for (var _teardowns_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {\\n                        var teardown_1 = _teardowns_1_1.value;\\n                        try {\\n                            execTeardown(teardown_1);\\n                        }\\n                        catch (err) {\\n                            errors = errors !== null && errors !== void 0 ? errors : [];\\n                            if (err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__.UnsubscriptionError) {\\n                                errors = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(errors)), (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(err.errors));\\n                            }\\n                            else {\\n                                errors.push(err);\\n                            }\\n                        }\\n                    }\\n                }\\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\\n                finally {\\n                    try {\\n                        if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);\\n                    }\\n                    finally { if (e_2) throw e_2.error; }\\n                }\\n            }\\n            if (errors) {\\n                throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__.UnsubscriptionError(errors);\\n            }\\n        }\\n    };\\n    Subscription.prototype.add = function (teardown) {\\n        var _a;\\n        if (teardown && teardown !== this) {\\n            if (this.closed) {\\n                execTeardown(teardown);\\n            }\\n            else {\\n                if (teardown instanceof Subscription) {\\n                    if (teardown.closed || teardown._hasParent(this)) {\\n                        return;\\n                    }\\n                    teardown._addParent(this);\\n                }\\n                (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);\\n            }\\n        }\\n    };\\n    Subscription.prototype._hasParent = function (parent) {\\n        var _parentage = this._parentage;\\n        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\\n    };\\n    Subscription.prototype._addParent = function (parent) {\\n        var _parentage = this._parentage;\\n        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\\n    };\\n    Subscription.prototype._removeParent = function (parent) {\\n        var _parentage = this._parentage;\\n        if (_parentage === parent) {\\n            this._parentage = null;\\n        }\\n        else if (Array.isArray(_parentage)) {\\n            (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_3__.arrRemove)(_parentage, parent);\\n        }\\n    };\\n    Subscription.prototype.remove = function (teardown) {\\n        var _teardowns = this._teardowns;\\n        _teardowns && (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_3__.arrRemove)(_teardowns, teardown);\\n        if (teardown instanceof Subscription) {\\n            teardown._removeParent(this);\\n        }\\n    };\\n    Subscription.EMPTY = (function () {\\n        var empty = new Subscription();\\n        empty.closed = true;\\n        return empty;\\n    })();\\n    return Subscription;\\n}());\\n\\nvar EMPTY_SUBSCRIPTION = Subscription.EMPTY;\\nfunction isSubscription(value) {\\n    return (value instanceof Subscription ||\\n        (value && 'closed' in value && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value.remove) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value.add) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value.unsubscribe)));\\n}\\nfunction execTeardown(teardown) {\\n    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(teardown)) {\\n        teardown();\\n    }\\n    else {\\n        teardown.unsubscribe();\\n    }\\n}\\n//# sourceMappingURL=Subscription.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/Subscription.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/config.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/config.js ***!\n  \\********************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"config\\\": () => (/* binding */ config)\\n/* harmony export */ });\\nvar config = {\\n    onUnhandledError: null,\\n    onStoppedNotification: null,\\n    Promise: undefined,\\n    useDeprecatedSynchronousErrorHandling: false,\\n    useDeprecatedNextContext: false,\\n};\\n//# sourceMappingURL=config.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/config.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/observable/empty.js\":\n/*!******************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/observable/empty.js ***!\n  \\******************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"EMPTY\\\": () => (/* binding */ EMPTY),\\n/* harmony export */   \\\"empty\\\": () => (/* binding */ empty)\\n/* harmony export */ });\\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ \\\"./node_modules/rxjs/dist/esm5/internal/Observable.js\\\");\\n\\nvar EMPTY = new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) { return subscriber.complete(); });\\nfunction empty(scheduler) {\\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\\n}\\nfunction emptyScheduled(scheduler) {\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });\\n}\\n//# sourceMappingURL=empty.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/observable/empty.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/observable/from.js\":\n/*!*****************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/observable/from.js ***!\n  \\*****************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"from\\\": () => (/* binding */ from),\\n/* harmony export */   \\\"innerFrom\\\": () => (/* binding */ innerFrom),\\n/* harmony export */   \\\"fromArrayLike\\\": () => (/* binding */ fromArrayLike)\\n/* harmony export */ });\\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! tslib */ \\\"./node_modules/rxjs/node_modules/tslib/tslib.es6.js\\\");\\n/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isArrayLike */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js\\\");\\n/* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isPromise */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isPromise.js\\\");\\n/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../symbol/observable */ \\\"./node_modules/rxjs/dist/esm5/internal/symbol/observable.js\\\");\\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Observable */ \\\"./node_modules/rxjs/dist/esm5/internal/Observable.js\\\");\\n/* harmony import */ var _scheduled_scheduled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduled/scheduled */ \\\"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js\\\");\\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/isFunction */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\\\");\\n/* harmony import */ var _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../util/reportUnhandledError */ \\\"./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js\\\");\\n/* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isInteropObservable */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js\\\");\\n/* harmony import */ var _util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/isAsyncIterable */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js\\\");\\n/* harmony import */ var _util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/throwUnobservableError */ \\\"./node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js\\\");\\n/* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/isIterable */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isIterable.js\\\");\\n/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/isReadableStreamLike */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction from(input, scheduler) {\\n    return scheduler ? (0,_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_0__.scheduled)(input, scheduler) : innerFrom(input);\\n}\\nfunction innerFrom(input) {\\n    if (input instanceof _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable) {\\n        return input;\\n    }\\n    if (input != null) {\\n        if ((0,_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_2__.isInteropObservable)(input)) {\\n            return fromInteropObservable(input);\\n        }\\n        if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_3__.isArrayLike)(input)) {\\n            return fromArrayLike(input);\\n        }\\n        if ((0,_util_isPromise__WEBPACK_IMPORTED_MODULE_4__.isPromise)(input)) {\\n            return fromPromise(input);\\n        }\\n        if ((0,_util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_5__.isAsyncIterable)(input)) {\\n            return fromAsyncIterable(input);\\n        }\\n        if ((0,_util_isIterable__WEBPACK_IMPORTED_MODULE_6__.isIterable)(input)) {\\n            return fromIterable(input);\\n        }\\n        if ((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_7__.isReadableStreamLike)(input)) {\\n            return fromReadableStreamLike(input);\\n        }\\n    }\\n    throw (0,_util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_8__.createInvalidObservableTypeError)(input);\\n}\\nfunction fromInteropObservable(obj) {\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable(function (subscriber) {\\n        var obs = obj[_symbol_observable__WEBPACK_IMPORTED_MODULE_9__.observable]();\\n        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_10__.isFunction)(obs.subscribe)) {\\n            return obs.subscribe(subscriber);\\n        }\\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\\n    });\\n}\\nfunction fromArrayLike(array) {\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable(function (subscriber) {\\n        for (var i = 0; i < array.length && !subscriber.closed; i++) {\\n            subscriber.next(array[i]);\\n        }\\n        subscriber.complete();\\n    });\\n}\\nfunction fromPromise(promise) {\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable(function (subscriber) {\\n        promise\\n            .then(function (value) {\\n            if (!subscriber.closed) {\\n                subscriber.next(value);\\n                subscriber.complete();\\n            }\\n        }, function (err) { return subscriber.error(err); })\\n            .then(null, _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_11__.reportUnhandledError);\\n    });\\n}\\nfunction fromIterable(iterable) {\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable(function (subscriber) {\\n        var e_1, _a;\\n        try {\\n            for (var iterable_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__values)(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {\\n                var value = iterable_1_1.value;\\n                subscriber.next(value);\\n                if (subscriber.closed) {\\n                    return;\\n                }\\n            }\\n        }\\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\\n        finally {\\n            try {\\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);\\n            }\\n            finally { if (e_1) throw e_1.error; }\\n        }\\n        subscriber.complete();\\n    });\\n}\\nfunction fromAsyncIterable(asyncIterable) {\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable(function (subscriber) {\\n        process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });\\n    });\\n}\\nfunction fromReadableStreamLike(readableStream) {\\n    return fromAsyncIterable((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_7__.readableStreamLikeToAsyncGenerator)(readableStream));\\n}\\nfunction process(asyncIterable, subscriber) {\\n    var asyncIterable_1, asyncIterable_1_1;\\n    var e_2, _a;\\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function () {\\n        var value, e_2_1;\\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__generator)(this, function (_b) {\\n            switch (_b.label) {\\n                case 0:\\n                    _b.trys.push([0, 5, 6, 11]);\\n                    asyncIterable_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__asyncValues)(asyncIterable);\\n                    _b.label = 1;\\n                case 1: return [4, asyncIterable_1.next()];\\n                case 2:\\n                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];\\n                    value = asyncIterable_1_1.value;\\n                    subscriber.next(value);\\n                    if (subscriber.closed) {\\n                        return [2];\\n                    }\\n                    _b.label = 3;\\n                case 3: return [3, 1];\\n                case 4: return [3, 11];\\n                case 5:\\n                    e_2_1 = _b.sent();\\n                    e_2 = { error: e_2_1 };\\n                    return [3, 11];\\n                case 6:\\n                    _b.trys.push([6, , 9, 10]);\\n                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];\\n                    return [4, _a.call(asyncIterable_1)];\\n                case 7:\\n                    _b.sent();\\n                    _b.label = 8;\\n                case 8: return [3, 10];\\n                case 9:\\n                    if (e_2) throw e_2.error;\\n                    return [7];\\n                case 10: return [7];\\n                case 11:\\n                    subscriber.complete();\\n                    return [2];\\n            }\\n        });\\n    });\\n}\\n//# sourceMappingURL=from.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/observable/from.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\":\n/*!******************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js ***!\n  \\******************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"OperatorSubscriber\\\": () => (/* binding */ OperatorSubscriber)\\n/* harmony export */ });\\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \\\"./node_modules/rxjs/node_modules/tslib/tslib.es6.js\\\");\\n/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscriber */ \\\"./node_modules/rxjs/dist/esm5/internal/Subscriber.js\\\");\\n\\n\\nvar OperatorSubscriber = (function (_super) {\\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(OperatorSubscriber, _super);\\n    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.onFinalize = onFinalize;\\n        _this._next = onNext\\n            ? function (value) {\\n                try {\\n                    onNext(value);\\n                }\\n                catch (err) {\\n                    destination.error(err);\\n                }\\n            }\\n            : _super.prototype._next;\\n        _this._error = onError\\n            ? function (err) {\\n                try {\\n                    onError(err);\\n                }\\n                catch (err) {\\n                    destination.error(err);\\n                }\\n                finally {\\n                    this.unsubscribe();\\n                }\\n            }\\n            : _super.prototype._error;\\n        _this._complete = onComplete\\n            ? function () {\\n                try {\\n                    onComplete();\\n                }\\n                catch (err) {\\n                    destination.error(err);\\n                }\\n                finally {\\n                    this.unsubscribe();\\n                }\\n            }\\n            : _super.prototype._complete;\\n        return _this;\\n    }\\n    OperatorSubscriber.prototype.unsubscribe = function () {\\n        var _a;\\n        var closed = this.closed;\\n        _super.prototype.unsubscribe.call(this);\\n        !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\\n    };\\n    return OperatorSubscriber;\\n}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__.Subscriber));\\n\\n//# sourceMappingURL=OperatorSubscriber.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js\":\n/*!**************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js ***!\n  \\**************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"defaultIfEmpty\\\": () => (/* binding */ defaultIfEmpty)\\n/* harmony export */ });\\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \\\"./node_modules/rxjs/dist/esm5/internal/util/lift.js\\\");\\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\\\");\\n\\n\\nfunction defaultIfEmpty(defaultValue) {\\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\\n        var hasValue = false;\\n        source.subscribe(new _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.OperatorSubscriber(subscriber, function (value) {\\n            hasValue = true;\\n            subscriber.next(value);\\n        }, function () {\\n            if (!hasValue) {\\n                subscriber.next(defaultValue);\\n            }\\n            subscriber.complete();\\n        }));\\n    });\\n}\\n//# sourceMappingURL=defaultIfEmpty.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/operators/filter.js\":\n/*!******************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/operators/filter.js ***!\n  \\******************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"filter\\\": () => (/* binding */ filter)\\n/* harmony export */ });\\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \\\"./node_modules/rxjs/dist/esm5/internal/util/lift.js\\\");\\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\\\");\\n\\n\\nfunction filter(predicate, thisArg) {\\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\\n        var index = 0;\\n        source.subscribe(new _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.OperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));\\n    });\\n}\\n//# sourceMappingURL=filter.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/operators/filter.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/operators/finalize.js\":\n/*!********************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/operators/finalize.js ***!\n  \\********************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"finalize\\\": () => (/* binding */ finalize)\\n/* harmony export */ });\\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \\\"./node_modules/rxjs/dist/esm5/internal/util/lift.js\\\");\\n\\nfunction finalize(callback) {\\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\\n        try {\\n            source.subscribe(subscriber);\\n        }\\n        finally {\\n            subscriber.add(callback);\\n        }\\n    });\\n}\\n//# sourceMappingURL=finalize.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/operators/finalize.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/operators/first.js\":\n/*!*****************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/operators/first.js ***!\n  \\*****************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"first\\\": () => (/* binding */ first)\\n/* harmony export */ });\\n/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/EmptyError */ \\\"./node_modules/rxjs/dist/esm5/internal/util/EmptyError.js\\\");\\n/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/filter.js\\\");\\n/* harmony import */ var _take__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./take */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/take.js\\\");\\n/* harmony import */ var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defaultIfEmpty */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js\\\");\\n/* harmony import */ var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./throwIfEmpty */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js\\\");\\n/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ \\\"./node_modules/rxjs/dist/esm5/internal/util/identity.js\\\");\\n\\n\\n\\n\\n\\n\\nfunction first(predicate, defaultValue) {\\n    var hasDefaultValue = arguments.length >= 2;\\n    return function (source) {\\n        return source.pipe(predicate ? (0,_filter__WEBPACK_IMPORTED_MODULE_0__.filter)(function (v, i) { return predicate(v, i, source); }) : _util_identity__WEBPACK_IMPORTED_MODULE_1__.identity, (0,_take__WEBPACK_IMPORTED_MODULE_2__.take)(1), hasDefaultValue ? (0,_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__.defaultIfEmpty)(defaultValue) : (0,_throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__.throwIfEmpty)(function () { return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__.EmptyError(); }));\\n    };\\n}\\n//# sourceMappingURL=first.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/operators/first.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/operators/share.js\":\n/*!*****************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/operators/share.js ***!\n  \\*****************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"share\\\": () => (/* binding */ share)\\n/* harmony export */ });\\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \\\"./node_modules/rxjs/node_modules/tslib/tslib.es6.js\\\");\\n/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../observable/from */ \\\"./node_modules/rxjs/dist/esm5/internal/observable/from.js\\\");\\n/* harmony import */ var _operators_take__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../operators/take */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/take.js\\\");\\n/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ \\\"./node_modules/rxjs/dist/esm5/internal/Subject.js\\\");\\n/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Subscriber */ \\\"./node_modules/rxjs/dist/esm5/internal/Subscriber.js\\\");\\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ \\\"./node_modules/rxjs/dist/esm5/internal/util/lift.js\\\");\\n\\n\\n\\n\\n\\n\\nfunction share(options) {\\n    if (options === void 0) { options = {}; }\\n    var _a = options.connector, connector = _a === void 0 ? function () { return new _Subject__WEBPACK_IMPORTED_MODULE_0__.Subject(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;\\n    return function (wrapperSource) {\\n        var connection = null;\\n        var resetConnection = null;\\n        var subject = null;\\n        var refCount = 0;\\n        var hasCompleted = false;\\n        var hasErrored = false;\\n        var cancelReset = function () {\\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\\n            resetConnection = null;\\n        };\\n        var reset = function () {\\n            cancelReset();\\n            connection = subject = null;\\n            hasCompleted = hasErrored = false;\\n        };\\n        var resetAndUnsubscribe = function () {\\n            var conn = connection;\\n            reset();\\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\\n        };\\n        return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)(function (source, subscriber) {\\n            refCount++;\\n            if (!hasErrored && !hasCompleted) {\\n                cancelReset();\\n            }\\n            var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\\n            subscriber.add(function () {\\n                refCount--;\\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\\n                }\\n            });\\n            dest.subscribe(subscriber);\\n            if (!connection) {\\n                connection = new _Subscriber__WEBPACK_IMPORTED_MODULE_2__.SafeSubscriber({\\n                    next: function (value) { return dest.next(value); },\\n                    error: function (err) {\\n                        hasErrored = true;\\n                        cancelReset();\\n                        resetConnection = handleReset(reset, resetOnError, err);\\n                        dest.error(err);\\n                    },\\n                    complete: function () {\\n                        hasCompleted = true;\\n                        cancelReset();\\n                        resetConnection = handleReset(reset, resetOnComplete);\\n                        dest.complete();\\n                    },\\n                });\\n                (0,_observable_from__WEBPACK_IMPORTED_MODULE_3__.from)(source).subscribe(connection);\\n            }\\n        })(wrapperSource);\\n    };\\n}\\nfunction handleReset(reset, on) {\\n    var args = [];\\n    for (var _i = 2; _i < arguments.length; _i++) {\\n        args[_i - 2] = arguments[_i];\\n    }\\n    if (on === true) {\\n        reset();\\n        return null;\\n    }\\n    if (on === false) {\\n        return null;\\n    }\\n    return on.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__read)(args))).pipe((0,_operators_take__WEBPACK_IMPORTED_MODULE_5__.take)(1))\\n        .subscribe(function () { return reset(); });\\n}\\n//# sourceMappingURL=share.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/operators/share.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/operators/take.js\":\n/*!****************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/operators/take.js ***!\n  \\****************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"take\\\": () => (/* binding */ take)\\n/* harmony export */ });\\n/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/empty */ \\\"./node_modules/rxjs/dist/esm5/internal/observable/empty.js\\\");\\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ \\\"./node_modules/rxjs/dist/esm5/internal/util/lift.js\\\");\\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\\\");\\n\\n\\n\\nfunction take(count) {\\n    return count <= 0\\n        ?\\n            function () { return _observable_empty__WEBPACK_IMPORTED_MODULE_0__.EMPTY; }\\n        : (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)(function (source, subscriber) {\\n            var seen = 0;\\n            source.subscribe(new _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.OperatorSubscriber(subscriber, function (value) {\\n                if (++seen <= count) {\\n                    subscriber.next(value);\\n                    if (count <= seen) {\\n                        subscriber.complete();\\n                    }\\n                }\\n            }));\\n        });\\n}\\n//# sourceMappingURL=take.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/operators/take.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js\":\n/*!************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js ***!\n  \\************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"throwIfEmpty\\\": () => (/* binding */ throwIfEmpty)\\n/* harmony export */ });\\n/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/EmptyError */ \\\"./node_modules/rxjs/dist/esm5/internal/util/EmptyError.js\\\");\\n/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ \\\"./node_modules/rxjs/dist/esm5/internal/util/lift.js\\\");\\n/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ \\\"./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js\\\");\\n\\n\\n\\nfunction throwIfEmpty(errorFactory) {\\n    if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }\\n    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (source, subscriber) {\\n        var hasValue = false;\\n        source.subscribe(new _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.OperatorSubscriber(subscriber, function (value) {\\n            hasValue = true;\\n            subscriber.next(value);\\n        }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));\\n    });\\n}\\nfunction defaultErrorFactory() {\\n    return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_2__.EmptyError();\\n}\\n//# sourceMappingURL=throwIfEmpty.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js\":\n/*!*************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js ***!\n  \\*************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"scheduleArray\\\": () => (/* binding */ scheduleArray)\\n/* harmony export */ });\\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ \\\"./node_modules/rxjs/dist/esm5/internal/Observable.js\\\");\\n\\nfunction scheduleArray(input, scheduler) {\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\\n        var i = 0;\\n        return scheduler.schedule(function () {\\n            if (i === input.length) {\\n                subscriber.complete();\\n            }\\n            else {\\n                subscriber.next(input[i++]);\\n                if (!subscriber.closed) {\\n                    this.schedule();\\n                }\\n            }\\n        });\\n    });\\n}\\n//# sourceMappingURL=scheduleArray.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js\":\n/*!*********************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js ***!\n  \\*********************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"scheduleAsyncIterable\\\": () => (/* binding */ scheduleAsyncIterable)\\n/* harmony export */ });\\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ \\\"./node_modules/rxjs/dist/esm5/internal/Observable.js\\\");\\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ \\\"./node_modules/rxjs/dist/esm5/internal/Subscription.js\\\");\\n\\n\\nfunction scheduleAsyncIterable(input, scheduler) {\\n    if (!input) {\\n        throw new Error('Iterable cannot be null');\\n    }\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\\n        var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription();\\n        sub.add(scheduler.schedule(function () {\\n            var iterator = input[Symbol.asyncIterator]();\\n            sub.add(scheduler.schedule(function () {\\n                var _this = this;\\n                iterator.next().then(function (result) {\\n                    if (result.done) {\\n                        subscriber.complete();\\n                    }\\n                    else {\\n                        subscriber.next(result.value);\\n                        _this.schedule();\\n                    }\\n                });\\n            }));\\n        }));\\n        return sub;\\n    });\\n}\\n//# sourceMappingURL=scheduleAsyncIterable.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js\":\n/*!****************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js ***!\n  \\****************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"scheduleIterable\\\": () => (/* binding */ scheduleIterable)\\n/* harmony export */ });\\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ \\\"./node_modules/rxjs/dist/esm5/internal/Observable.js\\\");\\n/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/iterator */ \\\"./node_modules/rxjs/dist/esm5/internal/symbol/iterator.js\\\");\\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isFunction */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\\\");\\n/* harmony import */ var _util_caughtSchedule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/caughtSchedule */ \\\"./node_modules/rxjs/dist/esm5/internal/util/caughtSchedule.js\\\");\\n\\n\\n\\n\\nfunction scheduleIterable(input, scheduler) {\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\\n        var iterator;\\n        subscriber.add(scheduler.schedule(function () {\\n            iterator = input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator]();\\n            (0,_util_caughtSchedule__WEBPACK_IMPORTED_MODULE_2__.caughtSchedule)(subscriber, scheduler, function () {\\n                var _a = iterator.next(), value = _a.value, done = _a.done;\\n                if (done) {\\n                    subscriber.complete();\\n                }\\n                else {\\n                    subscriber.next(value);\\n                    this.schedule();\\n                }\\n            });\\n        }));\\n        return function () { return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_3__.isFunction)(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };\\n    });\\n}\\n//# sourceMappingURL=scheduleIterable.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js\":\n/*!******************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js ***!\n  \\******************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"scheduleObservable\\\": () => (/* binding */ scheduleObservable)\\n/* harmony export */ });\\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ \\\"./node_modules/rxjs/dist/esm5/internal/Observable.js\\\");\\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ \\\"./node_modules/rxjs/dist/esm5/internal/Subscription.js\\\");\\n/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../symbol/observable */ \\\"./node_modules/rxjs/dist/esm5/internal/symbol/observable.js\\\");\\n\\n\\n\\nfunction scheduleObservable(input, scheduler) {\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\\n        var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription();\\n        sub.add(scheduler.schedule(function () {\\n            var observable = input[_symbol_observable__WEBPACK_IMPORTED_MODULE_2__.observable]();\\n            sub.add(observable.subscribe({\\n                next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },\\n                error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },\\n                complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },\\n            }));\\n        }));\\n        return sub;\\n    });\\n}\\n//# sourceMappingURL=scheduleObservable.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js\":\n/*!***************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js ***!\n  \\***************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"schedulePromise\\\": () => (/* binding */ schedulePromise)\\n/* harmony export */ });\\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ \\\"./node_modules/rxjs/dist/esm5/internal/Observable.js\\\");\\n\\nfunction schedulePromise(input, scheduler) {\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {\\n        return scheduler.schedule(function () {\\n            return input.then(function (value) {\\n                subscriber.add(scheduler.schedule(function () {\\n                    subscriber.next(value);\\n                    subscriber.add(scheduler.schedule(function () { return subscriber.complete(); }));\\n                }));\\n            }, function (err) {\\n                subscriber.add(scheduler.schedule(function () { return subscriber.error(err); }));\\n            });\\n        });\\n    });\\n}\\n//# sourceMappingURL=schedulePromise.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js\":\n/*!**************************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js ***!\n  \\**************************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"scheduleReadableStreamLike\\\": () => (/* binding */ scheduleReadableStreamLike)\\n/* harmony export */ });\\n/* harmony import */ var _scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scheduleAsyncIterable */ \\\"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js\\\");\\n/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isReadableStreamLike */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js\\\");\\n\\n\\nfunction scheduleReadableStreamLike(input, scheduler) {\\n    return (0,_scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_0__.scheduleAsyncIterable)((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_1__.readableStreamLikeToAsyncGenerator)(input), scheduler);\\n}\\n//# sourceMappingURL=scheduleReadableStreamLike.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js\":\n/*!*********************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js ***!\n  \\*********************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"scheduled\\\": () => (/* binding */ scheduled)\\n/* harmony export */ });\\n/* harmony import */ var _scheduleObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scheduleObservable */ \\\"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js\\\");\\n/* harmony import */ var _schedulePromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./schedulePromise */ \\\"./node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js\\\");\\n/* harmony import */ var _scheduleArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scheduleArray */ \\\"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js\\\");\\n/* harmony import */ var _scheduleIterable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scheduleIterable */ \\\"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js\\\");\\n/* harmony import */ var _scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scheduleAsyncIterable */ \\\"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js\\\");\\n/* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isInteropObservable */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js\\\");\\n/* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isPromise */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isPromise.js\\\");\\n/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArrayLike */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js\\\");\\n/* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/isIterable */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isIterable.js\\\");\\n/* harmony import */ var _util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/isAsyncIterable */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js\\\");\\n/* harmony import */ var _util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../util/throwUnobservableError */ \\\"./node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js\\\");\\n/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/isReadableStreamLike */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js\\\");\\n/* harmony import */ var _scheduleReadableStreamLike__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./scheduleReadableStreamLike */ \\\"./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction scheduled(input, scheduler) {\\n    if (input != null) {\\n        if ((0,_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__.isInteropObservable)(input)) {\\n            return (0,_scheduleObservable__WEBPACK_IMPORTED_MODULE_1__.scheduleObservable)(input, scheduler);\\n        }\\n        if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__.isArrayLike)(input)) {\\n            return (0,_scheduleArray__WEBPACK_IMPORTED_MODULE_3__.scheduleArray)(input, scheduler);\\n        }\\n        if ((0,_util_isPromise__WEBPACK_IMPORTED_MODULE_4__.isPromise)(input)) {\\n            return (0,_schedulePromise__WEBPACK_IMPORTED_MODULE_5__.schedulePromise)(input, scheduler);\\n        }\\n        if ((0,_util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_6__.isAsyncIterable)(input)) {\\n            return (0,_scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_7__.scheduleAsyncIterable)(input, scheduler);\\n        }\\n        if ((0,_util_isIterable__WEBPACK_IMPORTED_MODULE_8__.isIterable)(input)) {\\n            return (0,_scheduleIterable__WEBPACK_IMPORTED_MODULE_9__.scheduleIterable)(input, scheduler);\\n        }\\n        if ((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_10__.isReadableStreamLike)(input)) {\\n            return (0,_scheduleReadableStreamLike__WEBPACK_IMPORTED_MODULE_11__.scheduleReadableStreamLike)(input, scheduler);\\n        }\\n    }\\n    throw (0,_util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_12__.createInvalidObservableTypeError)(input);\\n}\\n//# sourceMappingURL=scheduled.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js\":\n/*!***************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js ***!\n  \\***************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"timeoutProvider\\\": () => (/* binding */ timeoutProvider)\\n/* harmony export */ });\\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \\\"./node_modules/rxjs/node_modules/tslib/tslib.es6.js\\\");\\n\\nvar timeoutProvider = {\\n    setTimeout: function () {\\n        var args = [];\\n        for (var _i = 0; _i < arguments.length; _i++) {\\n            args[_i] = arguments[_i];\\n        }\\n        var delegate = timeoutProvider.delegate;\\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) || setTimeout).apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(args)));\\n    },\\n    clearTimeout: function (handle) {\\n        var delegate = timeoutProvider.delegate;\\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);\\n    },\\n    delegate: undefined,\\n};\\n//# sourceMappingURL=timeoutProvider.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/symbol/iterator.js\":\n/*!*****************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/symbol/iterator.js ***!\n  \\*****************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"getSymbolIterator\\\": () => (/* binding */ getSymbolIterator),\\n/* harmony export */   \\\"iterator\\\": () => (/* binding */ iterator)\\n/* harmony export */ });\\nfunction getSymbolIterator() {\\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\\n        return '@@iterator';\\n    }\\n    return Symbol.iterator;\\n}\\nvar iterator = getSymbolIterator();\\n//# sourceMappingURL=iterator.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/symbol/iterator.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/symbol/observable.js\":\n/*!*******************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/symbol/observable.js ***!\n  \\*******************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"observable\\\": () => (/* binding */ observable)\\n/* harmony export */ });\\nvar observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();\\n//# sourceMappingURL=observable.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/symbol/observable.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/EmptyError.js\":\n/*!*****************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/EmptyError.js ***!\n  \\*****************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"EmptyError\\\": () => (/* binding */ EmptyError)\\n/* harmony export */ });\\n/* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createErrorClass */ \\\"./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js\\\");\\n\\nvar EmptyError = (0,_createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(function (_super) { return function EmptyErrorImpl() {\\n    _super(this);\\n    this.name = 'EmptyError';\\n    this.message = 'no elements in sequence';\\n}; });\\n//# sourceMappingURL=EmptyError.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/EmptyError.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js\":\n/*!******************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js ***!\n  \\******************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"ObjectUnsubscribedError\\\": () => (/* binding */ ObjectUnsubscribedError)\\n/* harmony export */ });\\n/* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createErrorClass */ \\\"./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js\\\");\\n\\nvar ObjectUnsubscribedError = (0,_createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(function (_super) {\\n    return function ObjectUnsubscribedErrorImpl() {\\n        _super(this);\\n        this.name = 'ObjectUnsubscribedError';\\n        this.message = 'object unsubscribed';\\n    };\\n});\\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js\":\n/*!**************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js ***!\n  \\**************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"UnsubscriptionError\\\": () => (/* binding */ UnsubscriptionError)\\n/* harmony export */ });\\n/* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createErrorClass */ \\\"./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js\\\");\\n\\nvar UnsubscriptionError = (0,_createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(function (_super) {\\n    return function UnsubscriptionErrorImpl(errors) {\\n        _super(this);\\n        this.message = errors\\n            ? errors.length + \\\" errors occurred during unsubscription:\\\\n\\\" + errors.map(function (err, i) { return i + 1 + \\\") \\\" + err.toString(); }).join('\\\\n  ')\\n            : '';\\n        this.name = 'UnsubscriptionError';\\n        this.errors = errors;\\n    };\\n});\\n//# sourceMappingURL=UnsubscriptionError.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js\":\n/*!****************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js ***!\n  \\****************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"arrRemove\\\": () => (/* binding */ arrRemove)\\n/* harmony export */ });\\nfunction arrRemove(arr, item) {\\n    if (arr) {\\n        var index = arr.indexOf(item);\\n        0 <= index && arr.splice(index, 1);\\n    }\\n}\\n//# sourceMappingURL=arrRemove.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/caughtSchedule.js\":\n/*!*********************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/caughtSchedule.js ***!\n  \\*********************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"caughtSchedule\\\": () => (/* binding */ caughtSchedule)\\n/* harmony export */ });\\nfunction caughtSchedule(subscriber, scheduler, execute, delay) {\\n    if (delay === void 0) { delay = 0; }\\n    var subscription = scheduler.schedule(function () {\\n        try {\\n            execute.call(this);\\n        }\\n        catch (err) {\\n            subscriber.error(err);\\n        }\\n    }, delay);\\n    subscriber.add(subscription);\\n    return subscription;\\n}\\n//# sourceMappingURL=caughtSchedule.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/caughtSchedule.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js\":\n/*!***********************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js ***!\n  \\***********************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"createErrorClass\\\": () => (/* binding */ createErrorClass)\\n/* harmony export */ });\\nfunction createErrorClass(createImpl) {\\n    var _super = function (instance) {\\n        Error.call(instance);\\n        instance.stack = new Error().stack;\\n    };\\n    var ctorFunc = createImpl(_super);\\n    ctorFunc.prototype = Object.create(Error.prototype);\\n    ctorFunc.prototype.constructor = ctorFunc;\\n    return ctorFunc;\\n}\\n//# sourceMappingURL=createErrorClass.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/errorContext.js\":\n/*!*******************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/errorContext.js ***!\n  \\*******************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"errorContext\\\": () => (/* binding */ errorContext),\\n/* harmony export */   \\\"captureError\\\": () => (/* binding */ captureError)\\n/* harmony export */ });\\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ \\\"./node_modules/rxjs/dist/esm5/internal/config.js\\\");\\n\\nvar context = null;\\nfunction errorContext(cb) {\\n    if (_config__WEBPACK_IMPORTED_MODULE_0__.config.useDeprecatedSynchronousErrorHandling) {\\n        var isRoot = !context;\\n        if (isRoot) {\\n            context = { errorThrown: false, error: null };\\n        }\\n        cb();\\n        if (isRoot) {\\n            var _a = context, errorThrown = _a.errorThrown, error = _a.error;\\n            context = null;\\n            if (errorThrown) {\\n                throw error;\\n            }\\n        }\\n    }\\n    else {\\n        cb();\\n    }\\n}\\nfunction captureError(err) {\\n    if (_config__WEBPACK_IMPORTED_MODULE_0__.config.useDeprecatedSynchronousErrorHandling && context) {\\n        context.errorThrown = true;\\n        context.error = err;\\n    }\\n}\\n//# sourceMappingURL=errorContext.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/errorContext.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/identity.js\":\n/*!***************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/identity.js ***!\n  \\***************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"identity\\\": () => (/* binding */ identity)\\n/* harmony export */ });\\nfunction identity(x) {\\n    return x;\\n}\\n//# sourceMappingURL=identity.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/identity.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js\":\n/*!******************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js ***!\n  \\******************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"isArrayLike\\\": () => (/* binding */ isArrayLike)\\n/* harmony export */ });\\nvar isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\\n//# sourceMappingURL=isArrayLike.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js\":\n/*!**********************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js ***!\n  \\**********************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"isAsyncIterable\\\": () => (/* binding */ isAsyncIterable)\\n/* harmony export */ });\\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\\\");\\n\\nfunction isAsyncIterable(obj) {\\n    return Symbol.asyncIterator && (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);\\n}\\n//# sourceMappingURL=isAsyncIterable.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\":\n/*!*****************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/isFunction.js ***!\n  \\*****************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"isFunction\\\": () => (/* binding */ isFunction)\\n/* harmony export */ });\\nfunction isFunction(value) {\\n    return typeof value === 'function';\\n}\\n//# sourceMappingURL=isFunction.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/isFunction.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js\":\n/*!**************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js ***!\n  \\**************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"isInteropObservable\\\": () => (/* binding */ isInteropObservable)\\n/* harmony export */ });\\n/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/observable */ \\\"./node_modules/rxjs/dist/esm5/internal/symbol/observable.js\\\");\\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\\\");\\n\\n\\nfunction isInteropObservable(input) {\\n    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(input[_symbol_observable__WEBPACK_IMPORTED_MODULE_1__.observable]);\\n}\\n//# sourceMappingURL=isInteropObservable.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/isIterable.js\":\n/*!*****************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/isIterable.js ***!\n  \\*****************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"isIterable\\\": () => (/* binding */ isIterable)\\n/* harmony export */ });\\n/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/iterator */ \\\"./node_modules/rxjs/dist/esm5/internal/symbol/iterator.js\\\");\\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\\\");\\n\\n\\nfunction isIterable(input) {\\n    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(input === null || input === void 0 ? void 0 : input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator]);\\n}\\n//# sourceMappingURL=isIterable.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/isIterable.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/isPromise.js\":\n/*!****************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/isPromise.js ***!\n  \\****************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"isPromise\\\": () => (/* binding */ isPromise)\\n/* harmony export */ });\\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\\\");\\n\\nfunction isPromise(value) {\\n    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value === null || value === void 0 ? void 0 : value.then);\\n}\\n//# sourceMappingURL=isPromise.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/isPromise.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js\":\n/*!***************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js ***!\n  \\***************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"readableStreamLikeToAsyncGenerator\\\": () => (/* binding */ readableStreamLikeToAsyncGenerator),\\n/* harmony export */   \\\"isReadableStreamLike\\\": () => (/* binding */ isReadableStreamLike)\\n/* harmony export */ });\\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \\\"./node_modules/rxjs/node_modules/tslib/tslib.es6.js\\\");\\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isFunction */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\\\");\\n\\n\\nfunction readableStreamLikeToAsyncGenerator(readableStream) {\\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__asyncGenerator)(this, arguments, function readableStreamLikeToAsyncGenerator_1() {\\n        var reader, _a, value, done;\\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {\\n            switch (_b.label) {\\n                case 0:\\n                    reader = readableStream.getReader();\\n                    _b.label = 1;\\n                case 1:\\n                    _b.trys.push([1, , 9, 10]);\\n                    _b.label = 2;\\n                case 2:\\n                    if (false) {}\\n                    return [4, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(reader.read())];\\n                case 3:\\n                    _a = _b.sent(), value = _a.value, done = _a.done;\\n                    if (!done) return [3, 5];\\n                    return [4, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(void 0)];\\n                case 4: return [2, _b.sent()];\\n                case 5: return [4, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(value)];\\n                case 6: return [4, _b.sent()];\\n                case 7:\\n                    _b.sent();\\n                    return [3, 2];\\n                case 8: return [3, 10];\\n                case 9:\\n                    reader.releaseLock();\\n                    return [7];\\n                case 10: return [2];\\n            }\\n        });\\n    });\\n}\\nfunction isReadableStreamLike(obj) {\\n    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(obj === null || obj === void 0 ? void 0 : obj.getReader);\\n}\\n//# sourceMappingURL=isReadableStreamLike.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/lift.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/lift.js ***!\n  \\***********************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"hasLift\\\": () => (/* binding */ hasLift),\\n/* harmony export */   \\\"operate\\\": () => (/* binding */ operate)\\n/* harmony export */ });\\n/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ \\\"./node_modules/rxjs/dist/esm5/internal/util/isFunction.js\\\");\\n\\nfunction hasLift(source) {\\n    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(source === null || source === void 0 ? void 0 : source.lift);\\n}\\nfunction operate(init) {\\n    return function (source) {\\n        if (hasLift(source)) {\\n            return source.lift(function (liftedSource) {\\n                try {\\n                    return init(liftedSource, this);\\n                }\\n                catch (err) {\\n                    this.error(err);\\n                }\\n            });\\n        }\\n        throw new TypeError('Unable to lift unknown Observable type');\\n    };\\n}\\n//# sourceMappingURL=lift.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/lift.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/noop.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/noop.js ***!\n  \\***********************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"noop\\\": () => (/* binding */ noop)\\n/* harmony export */ });\\nfunction noop() { }\\n//# sourceMappingURL=noop.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/noop.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/pipe.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/pipe.js ***!\n  \\***********************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"pipe\\\": () => (/* binding */ pipe),\\n/* harmony export */   \\\"pipeFromArray\\\": () => (/* binding */ pipeFromArray)\\n/* harmony export */ });\\n/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity */ \\\"./node_modules/rxjs/dist/esm5/internal/util/identity.js\\\");\\n\\nfunction pipe() {\\n    var fns = [];\\n    for (var _i = 0; _i < arguments.length; _i++) {\\n        fns[_i] = arguments[_i];\\n    }\\n    return pipeFromArray(fns);\\n}\\nfunction pipeFromArray(fns) {\\n    if (fns.length === 0) {\\n        return _identity__WEBPACK_IMPORTED_MODULE_0__.identity;\\n    }\\n    if (fns.length === 1) {\\n        return fns[0];\\n    }\\n    return function piped(input) {\\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\\n    };\\n}\\n//# sourceMappingURL=pipe.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/pipe.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js\":\n/*!***************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js ***!\n  \\***************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"reportUnhandledError\\\": () => (/* binding */ reportUnhandledError)\\n/* harmony export */ });\\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ \\\"./node_modules/rxjs/dist/esm5/internal/config.js\\\");\\n/* harmony import */ var _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/timeoutProvider */ \\\"./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js\\\");\\n\\n\\nfunction reportUnhandledError(err) {\\n    _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_0__.timeoutProvider.setTimeout(function () {\\n        var onUnhandledError = _config__WEBPACK_IMPORTED_MODULE_1__.config.onUnhandledError;\\n        if (onUnhandledError) {\\n            onUnhandledError(err);\\n        }\\n        else {\\n            throw err;\\n        }\\n    });\\n}\\n//# sourceMappingURL=reportUnhandledError.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js\":\n/*!*****************************************************************************!*\\\n  !*** ./node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js ***!\n  \\*****************************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"createInvalidObservableTypeError\\\": () => (/* binding */ createInvalidObservableTypeError)\\n/* harmony export */ });\\nfunction createInvalidObservableTypeError(input) {\\n    return new TypeError(\\\"You provided \\\" + (input !== null && typeof input === 'object' ? 'an invalid object' : \\\"'\\\" + input + \\\"'\\\") + \\\" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.\\\");\\n}\\n//# sourceMappingURL=throwUnobservableError.js.map\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/rxjs/node_modules/tslib/tslib.es6.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/rxjs/node_modules/tslib/tslib.es6.js ***!\n  \\***********************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"__extends\\\": () => (/* binding */ __extends),\\n/* harmony export */   \\\"__assign\\\": () => (/* binding */ __assign),\\n/* harmony export */   \\\"__rest\\\": () => (/* binding */ __rest),\\n/* harmony export */   \\\"__decorate\\\": () => (/* binding */ __decorate),\\n/* harmony export */   \\\"__param\\\": () => (/* binding */ __param),\\n/* harmony export */   \\\"__metadata\\\": () => (/* binding */ __metadata),\\n/* harmony export */   \\\"__awaiter\\\": () => (/* binding */ __awaiter),\\n/* harmony export */   \\\"__generator\\\": () => (/* binding */ __generator),\\n/* harmony export */   \\\"__createBinding\\\": () => (/* binding */ __createBinding),\\n/* harmony export */   \\\"__exportStar\\\": () => (/* binding */ __exportStar),\\n/* harmony export */   \\\"__values\\\": () => (/* binding */ __values),\\n/* harmony export */   \\\"__read\\\": () => (/* binding */ __read),\\n/* harmony export */   \\\"__spread\\\": () => (/* binding */ __spread),\\n/* harmony export */   \\\"__spreadArrays\\\": () => (/* binding */ __spreadArrays),\\n/* harmony export */   \\\"__spreadArray\\\": () => (/* binding */ __spreadArray),\\n/* harmony export */   \\\"__await\\\": () => (/* binding */ __await),\\n/* harmony export */   \\\"__asyncGenerator\\\": () => (/* binding */ __asyncGenerator),\\n/* harmony export */   \\\"__asyncDelegator\\\": () => (/* binding */ __asyncDelegator),\\n/* harmony export */   \\\"__asyncValues\\\": () => (/* binding */ __asyncValues),\\n/* harmony export */   \\\"__makeTemplateObject\\\": () => (/* binding */ __makeTemplateObject),\\n/* harmony export */   \\\"__importStar\\\": () => (/* binding */ __importStar),\\n/* harmony export */   \\\"__importDefault\\\": () => (/* binding */ __importDefault),\\n/* harmony export */   \\\"__classPrivateFieldGet\\\": () => (/* binding */ __classPrivateFieldGet),\\n/* harmony export */   \\\"__classPrivateFieldSet\\\": () => (/* binding */ __classPrivateFieldSet)\\n/* harmony export */ });\\n/*! *****************************************************************************\\r\\nCopyright (c) Microsoft Corporation.\\r\\n\\r\\nPermission to use, copy, modify, and/or distribute this software for any\\r\\npurpose with or without fee is hereby granted.\\r\\n\\r\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\\r\\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\\r\\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\\r\\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\\r\\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\\r\\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\\r\\nPERFORMANCE OF THIS SOFTWARE.\\r\\n***************************************************************************** */\\r\\n/* global Reflect, Promise */\\r\\n\\r\\nvar extendStatics = function(d, b) {\\r\\n    extendStatics = Object.setPrototypeOf ||\\r\\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\\r\\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\\r\\n    return extendStatics(d, b);\\r\\n};\\r\\n\\r\\nfunction __extends(d, b) {\\r\\n    if (typeof b !== \\\"function\\\" && b !== null)\\r\\n        throw new TypeError(\\\"Class extends value \\\" + String(b) + \\\" is not a constructor or null\\\");\\r\\n    extendStatics(d, b);\\r\\n    function __() { this.constructor = d; }\\r\\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\\r\\n}\\r\\n\\r\\nvar __assign = function() {\\r\\n    __assign = Object.assign || function __assign(t) {\\r\\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\\r\\n            s = arguments[i];\\r\\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\\r\\n        }\\r\\n        return t;\\r\\n    }\\r\\n    return __assign.apply(this, arguments);\\r\\n}\\r\\n\\r\\nfunction __rest(s, e) {\\r\\n    var t = {};\\r\\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\\r\\n        t[p] = s[p];\\r\\n    if (s != null && typeof Object.getOwnPropertySymbols === \\\"function\\\")\\r\\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\\r\\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\\r\\n                t[p[i]] = s[p[i]];\\r\\n        }\\r\\n    return t;\\r\\n}\\r\\n\\r\\nfunction __decorate(decorators, target, key, desc) {\\r\\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\\r\\n    if (typeof Reflect === \\\"object\\\" && typeof Reflect.decorate === \\\"function\\\") r = Reflect.decorate(decorators, target, key, desc);\\r\\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\\r\\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\\r\\n}\\r\\n\\r\\nfunction __param(paramIndex, decorator) {\\r\\n    return function (target, key) { decorator(target, key, paramIndex); }\\r\\n}\\r\\n\\r\\nfunction __metadata(metadataKey, metadataValue) {\\r\\n    if (typeof Reflect === \\\"object\\\" && typeof Reflect.metadata === \\\"function\\\") return Reflect.metadata(metadataKey, metadataValue);\\r\\n}\\r\\n\\r\\nfunction __awaiter(thisArg, _arguments, P, generator) {\\r\\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\\r\\n    return new (P || (P = Promise))(function (resolve, reject) {\\r\\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\\r\\n        function rejected(value) { try { step(generator[\\\"throw\\\"](value)); } catch (e) { reject(e); } }\\r\\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\\r\\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\\r\\n    });\\r\\n}\\r\\n\\r\\nfunction __generator(thisArg, body) {\\r\\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\\r\\n    return g = { next: verb(0), \\\"throw\\\": verb(1), \\\"return\\\": verb(2) }, typeof Symbol === \\\"function\\\" && (g[Symbol.iterator] = function() { return this; }), g;\\r\\n    function verb(n) { return function (v) { return step([n, v]); }; }\\r\\n    function step(op) {\\r\\n        if (f) throw new TypeError(\\\"Generator is already executing.\\\");\\r\\n        while (_) try {\\r\\n            if (f = 1, y && (t = op[0] & 2 ? y[\\\"return\\\"] : op[0] ? y[\\\"throw\\\"] || ((t = y[\\\"return\\\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\\r\\n            if (y = 0, t) op = [op[0] & 2, t.value];\\r\\n            switch (op[0]) {\\r\\n                case 0: case 1: t = op; break;\\r\\n                case 4: _.label++; return { value: op[1], done: false };\\r\\n                case 5: _.label++; y = op[1]; op = [0]; continue;\\r\\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\\r\\n                default:\\r\\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\\r\\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\\r\\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\\r\\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\\r\\n                    if (t[2]) _.ops.pop();\\r\\n                    _.trys.pop(); continue;\\r\\n            }\\r\\n            op = body.call(thisArg, _);\\r\\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\\r\\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\\r\\n    }\\r\\n}\\r\\n\\r\\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\\r\\n    if (k2 === undefined) k2 = k;\\r\\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\\r\\n}) : (function(o, m, k, k2) {\\r\\n    if (k2 === undefined) k2 = k;\\r\\n    o[k2] = m[k];\\r\\n});\\r\\n\\r\\nfunction __exportStar(m, o) {\\r\\n    for (var p in m) if (p !== \\\"default\\\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\\r\\n}\\r\\n\\r\\nfunction __values(o) {\\r\\n    var s = typeof Symbol === \\\"function\\\" && Symbol.iterator, m = s && o[s], i = 0;\\r\\n    if (m) return m.call(o);\\r\\n    if (o && typeof o.length === \\\"number\\\") return {\\r\\n        next: function () {\\r\\n            if (o && i >= o.length) o = void 0;\\r\\n            return { value: o && o[i++], done: !o };\\r\\n        }\\r\\n    };\\r\\n    throw new TypeError(s ? \\\"Object is not iterable.\\\" : \\\"Symbol.iterator is not defined.\\\");\\r\\n}\\r\\n\\r\\nfunction __read(o, n) {\\r\\n    var m = typeof Symbol === \\\"function\\\" && o[Symbol.iterator];\\r\\n    if (!m) return o;\\r\\n    var i = m.call(o), r, ar = [], e;\\r\\n    try {\\r\\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\\r\\n    }\\r\\n    catch (error) { e = { error: error }; }\\r\\n    finally {\\r\\n        try {\\r\\n            if (r && !r.done && (m = i[\\\"return\\\"])) m.call(i);\\r\\n        }\\r\\n        finally { if (e) throw e.error; }\\r\\n    }\\r\\n    return ar;\\r\\n}\\r\\n\\r\\n/** @deprecated */\\r\\nfunction __spread() {\\r\\n    for (var ar = [], i = 0; i < arguments.length; i++)\\r\\n        ar = ar.concat(__read(arguments[i]));\\r\\n    return ar;\\r\\n}\\r\\n\\r\\n/** @deprecated */\\r\\nfunction __spreadArrays() {\\r\\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\\r\\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\\r\\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\\r\\n            r[k] = a[j];\\r\\n    return r;\\r\\n}\\r\\n\\r\\nfunction __spreadArray(to, from) {\\r\\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\\r\\n        to[j] = from[i];\\r\\n    return to;\\r\\n}\\r\\n\\r\\nfunction __await(v) {\\r\\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\\r\\n}\\r\\n\\r\\nfunction __asyncGenerator(thisArg, _arguments, generator) {\\r\\n    if (!Symbol.asyncIterator) throw new TypeError(\\\"Symbol.asyncIterator is not defined.\\\");\\r\\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\\r\\n    return i = {}, verb(\\\"next\\\"), verb(\\\"throw\\\"), verb(\\\"return\\\"), i[Symbol.asyncIterator] = function () { return this; }, i;\\r\\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\\r\\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\\r\\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\\r\\n    function fulfill(value) { resume(\\\"next\\\", value); }\\r\\n    function reject(value) { resume(\\\"throw\\\", value); }\\r\\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\\r\\n}\\r\\n\\r\\nfunction __asyncDelegator(o) {\\r\\n    var i, p;\\r\\n    return i = {}, verb(\\\"next\\\"), verb(\\\"throw\\\", function (e) { throw e; }), verb(\\\"return\\\"), i[Symbol.iterator] = function () { return this; }, i;\\r\\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \\\"return\\\" } : f ? f(v) : v; } : f; }\\r\\n}\\r\\n\\r\\nfunction __asyncValues(o) {\\r\\n    if (!Symbol.asyncIterator) throw new TypeError(\\\"Symbol.asyncIterator is not defined.\\\");\\r\\n    var m = o[Symbol.asyncIterator], i;\\r\\n    return m ? m.call(o) : (o = typeof __values === \\\"function\\\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\\\"next\\\"), verb(\\\"throw\\\"), verb(\\\"return\\\"), i[Symbol.asyncIterator] = function () { return this; }, i);\\r\\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\\r\\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\\r\\n}\\r\\n\\r\\nfunction __makeTemplateObject(cooked, raw) {\\r\\n    if (Object.defineProperty) { Object.defineProperty(cooked, \\\"raw\\\", { value: raw }); } else { cooked.raw = raw; }\\r\\n    return cooked;\\r\\n};\\r\\n\\r\\nvar __setModuleDefault = Object.create ? (function(o, v) {\\r\\n    Object.defineProperty(o, \\\"default\\\", { enumerable: true, value: v });\\r\\n}) : function(o, v) {\\r\\n    o[\\\"default\\\"] = v;\\r\\n};\\r\\n\\r\\nfunction __importStar(mod) {\\r\\n    if (mod && mod.__esModule) return mod;\\r\\n    var result = {};\\r\\n    if (mod != null) for (var k in mod) if (k !== \\\"default\\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\\r\\n    __setModuleDefault(result, mod);\\r\\n    return result;\\r\\n}\\r\\n\\r\\nfunction __importDefault(mod) {\\r\\n    return (mod && mod.__esModule) ? mod : { default: mod };\\r\\n}\\r\\n\\r\\nfunction __classPrivateFieldGet(receiver, privateMap) {\\r\\n    if (!privateMap.has(receiver)) {\\r\\n        throw new TypeError(\\\"attempted to get private field on non-instance\\\");\\r\\n    }\\r\\n    return privateMap.get(receiver);\\r\\n}\\r\\n\\r\\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\\r\\n    if (!privateMap.has(receiver)) {\\r\\n        throw new TypeError(\\\"attempted to set private field on non-instance\\\");\\r\\n    }\\r\\n    privateMap.set(receiver, value);\\r\\n    return value;\\r\\n}\\r\\n\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/rxjs/node_modules/tslib/tslib.es6.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\":\n/*!*********************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!\n  \\*********************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _arrayLikeToArray)\\n/* harmony export */ });\\nfunction _arrayLikeToArray(arr, len) {\\n  if (len == null || len > arr.length) len = arr.length;\\n\\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\\n    arr2[i] = arr[i];\\n  }\\n\\n  return arr2;\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\":\n/*!*******************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js ***!\n  \\*******************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _arrayWithHoles)\\n/* harmony export */ });\\nfunction _arrayWithHoles(arr) {\\n  if (Array.isArray(arr)) return arr;\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\":\n/*!**************************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!\n  \\**************************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _assertThisInitialized)\\n/* harmony export */ });\\nfunction _assertThisInitialized(self) {\\n  if (self === void 0) {\\n    throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\");\\n  }\\n\\n  return self;\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\":\n/*!*********************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!\n  \\*********************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _asyncToGenerator)\\n/* harmony export */ });\\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\\n  try {\\n    var info = gen[key](arg);\\n    var value = info.value;\\n  } catch (error) {\\n    reject(error);\\n    return;\\n  }\\n\\n  if (info.done) {\\n    resolve(value);\\n  } else {\\n    Promise.resolve(value).then(_next, _throw);\\n  }\\n}\\n\\nfunction _asyncToGenerator(fn) {\\n  return function () {\\n    var self = this,\\n        args = arguments;\\n    return new Promise(function (resolve, reject) {\\n      var gen = fn.apply(self, args);\\n\\n      function _next(value) {\\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value);\\n      }\\n\\n      function _throw(err) {\\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err);\\n      }\\n\\n      _next(undefined);\\n    });\\n  };\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\":\n/*!*******************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!\n  \\*******************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _classCallCheck)\\n/* harmony export */ });\\nfunction _classCallCheck(instance, Constructor) {\\n  if (!(instance instanceof Constructor)) {\\n    throw new TypeError(\\\"Cannot call a class as a function\\\");\\n  }\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/construct.js\":\n/*!**************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/construct.js ***!\n  \\**************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _construct)\\n/* harmony export */ });\\n/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ \\\"./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\\\");\\n/* harmony import */ var _isNativeReflectConstruct_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isNativeReflectConstruct.js */ \\\"./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js\\\");\\n\\n\\nfunction _construct(Parent, args, Class) {\\n  if ((0,_isNativeReflectConstruct_js__WEBPACK_IMPORTED_MODULE_1__.default)()) {\\n    _construct = Reflect.construct;\\n  } else {\\n    _construct = function _construct(Parent, args, Class) {\\n      var a = [null];\\n      a.push.apply(a, args);\\n      var Constructor = Function.bind.apply(Parent, a);\\n      var instance = new Constructor();\\n      if (Class) (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(instance, Class.prototype);\\n      return instance;\\n    };\\n  }\\n\\n  return _construct.apply(null, arguments);\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/construct.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\":\n/*!****************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!\n  \\****************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _createClass)\\n/* harmony export */ });\\nfunction _defineProperties(target, props) {\\n  for (var i = 0; i < props.length; i++) {\\n    var descriptor = props[i];\\n    descriptor.enumerable = descriptor.enumerable || false;\\n    descriptor.configurable = true;\\n    if (\\\"value\\\" in descriptor) descriptor.writable = true;\\n    Object.defineProperty(target, descriptor.key, descriptor);\\n  }\\n}\\n\\nfunction _createClass(Constructor, protoProps, staticProps) {\\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\\n  if (staticProps) _defineProperties(Constructor, staticProps);\\n  return Constructor;\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/createClass.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\":\n/*!*******************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!\n  \\*******************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _defineProperty)\\n/* harmony export */ });\\nfunction _defineProperty(obj, key, value) {\\n  if (key in obj) {\\n    Object.defineProperty(obj, key, {\\n      value: value,\\n      enumerable: true,\\n      configurable: true,\\n      writable: true\\n    });\\n  } else {\\n    obj[key] = value;\\n  }\\n\\n  return obj;\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/defineProperty.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\":\n/*!*******************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js ***!\n  \\*******************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _getPrototypeOf)\\n/* harmony export */ });\\nfunction _getPrototypeOf(o) {\\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\\n    return o.__proto__ || Object.getPrototypeOf(o);\\n  };\\n  return _getPrototypeOf(o);\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/inherits.js ***!\n  \\*************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _inherits)\\n/* harmony export */ });\\n/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ \\\"./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\\\");\\n\\nfunction _inherits(subClass, superClass) {\\n  if (typeof superClass !== \\\"function\\\" && superClass !== null) {\\n    throw new TypeError(\\\"Super expression must either be null or a function\\\");\\n  }\\n\\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\\n    constructor: {\\n      value: subClass,\\n      writable: true,\\n      configurable: true\\n    }\\n  });\\n  if (superClass) (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(subClass, superClass);\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/inherits.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js\":\n/*!*********************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js ***!\n  \\*********************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _isNativeFunction)\\n/* harmony export */ });\\nfunction _isNativeFunction(fn) {\\n  return Function.toString.call(fn).indexOf(\\\"[native code]\\\") !== -1;\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js\":\n/*!*****************************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js ***!\n  \\*****************************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _isNativeReflectConstruct)\\n/* harmony export */ });\\nfunction _isNativeReflectConstruct() {\\n  if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false;\\n  if (Reflect.construct.sham) return false;\\n  if (typeof Proxy === \\\"function\\\") return true;\\n\\n  try {\\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\\n    return true;\\n  } catch (e) {\\n    return false;\\n  }\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\":\n/*!*************************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js ***!\n  \\*************************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _iterableToArrayLimit)\\n/* harmony export */ });\\nfunction _iterableToArrayLimit(arr, i) {\\n  var _i = arr == null ? null : typeof Symbol !== \\\"undefined\\\" && arr[Symbol.iterator] || arr[\\\"@@iterator\\\"];\\n\\n  if (_i == null) return;\\n  var _arr = [];\\n  var _n = true;\\n  var _d = false;\\n\\n  var _s, _e;\\n\\n  try {\\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\\n      _arr.push(_s.value);\\n\\n      if (i && _arr.length === i) break;\\n    }\\n  } catch (err) {\\n    _d = true;\\n    _e = err;\\n  } finally {\\n    try {\\n      if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"]();\\n    } finally {\\n      if (_d) throw _e;\\n    }\\n  }\\n\\n  return _arr;\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\":\n/*!********************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js ***!\n  \\********************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _nonIterableRest)\\n/* harmony export */ });\\nfunction _nonIterableRest() {\\n  throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\");\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\":\n/*!******************************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js ***!\n  \\******************************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _possibleConstructorReturn)\\n/* harmony export */ });\\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \\\"./node_modules/@babel/runtime/helpers/esm/typeof.js\\\");\\n/* harmony import */ var _assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assertThisInitialized.js */ \\\"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\\\");\\n\\n\\nfunction _possibleConstructorReturn(self, call) {\\n  if (call && ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(call) === \\\"object\\\" || typeof call === \\\"function\\\")) {\\n    return call;\\n  } else if (call !== void 0) {\\n    throw new TypeError(\\\"Derived constructors may only return object or undefined\\\");\\n  }\\n\\n  return (0,_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__.default)(self);\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\":\n/*!*******************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!\n  \\*******************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _setPrototypeOf)\\n/* harmony export */ });\\nfunction _setPrototypeOf(o, p) {\\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\\n    o.__proto__ = p;\\n    return o;\\n  };\\n\\n  return _setPrototypeOf(o, p);\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\":\n/*!******************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js ***!\n  \\******************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _slicedToArray)\\n/* harmony export */ });\\n/* harmony import */ var _arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithHoles.js */ \\\"./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\\\");\\n/* harmony import */ var _iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArrayLimit.js */ \\\"./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\\\");\\n/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ \\\"./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\\\");\\n/* harmony import */ var _nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableRest.js */ \\\"./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\\\");\\n\\n\\n\\n\\nfunction _slicedToArray(arr, i) {\\n  return (0,_arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__.default)(arr) || (0,_iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__.default)(arr, i) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__.default)(arr, i) || (0,_nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__.default)();\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/typeof.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!\n  \\***********************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _typeof)\\n/* harmony export */ });\\nfunction _typeof(obj) {\\n  \\\"@babel/helpers - typeof\\\";\\n\\n  if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") {\\n    _typeof = function _typeof(obj) {\\n      return typeof obj;\\n    };\\n  } else {\\n    _typeof = function _typeof(obj) {\\n      return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj;\\n    };\\n  }\\n\\n  return _typeof(obj);\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/typeof.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\":\n/*!*******************************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!\n  \\*******************************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _unsupportedIterableToArray)\\n/* harmony export */ });\\n/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ \\\"./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\\\");\\n\\nfunction _unsupportedIterableToArray(o, minLen) {\\n  if (!o) return;\\n  if (typeof o === \\\"string\\\") return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(o, minLen);\\n  var n = Object.prototype.toString.call(o).slice(8, -1);\\n  if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name;\\n  if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o);\\n  if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(o, minLen);\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\":\n/*!********************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js ***!\n  \\********************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ _wrapNativeSuper)\\n/* harmony export */ });\\n/* harmony import */ var _getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getPrototypeOf.js */ \\\"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\\\");\\n/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setPrototypeOf.js */ \\\"./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\\\");\\n/* harmony import */ var _isNativeFunction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isNativeFunction.js */ \\\"./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js\\\");\\n/* harmony import */ var _construct_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./construct.js */ \\\"./node_modules/@babel/runtime/helpers/esm/construct.js\\\");\\n\\n\\n\\n\\nfunction _wrapNativeSuper(Class) {\\n  var _cache = typeof Map === \\\"function\\\" ? new Map() : undefined;\\n\\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\\n    if (Class === null || !(0,_isNativeFunction_js__WEBPACK_IMPORTED_MODULE_2__.default)(Class)) return Class;\\n\\n    if (typeof Class !== \\\"function\\\") {\\n      throw new TypeError(\\\"Super expression must either be null or a function\\\");\\n    }\\n\\n    if (typeof _cache !== \\\"undefined\\\") {\\n      if (_cache.has(Class)) return _cache.get(Class);\\n\\n      _cache.set(Class, Wrapper);\\n    }\\n\\n    function Wrapper() {\\n      return (0,_construct_js__WEBPACK_IMPORTED_MODULE_3__.default)(Class, arguments, (0,_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(this).constructor);\\n    }\\n\\n    Wrapper.prototype = Object.create(Class.prototype, {\\n      constructor: {\\n        value: Wrapper,\\n        enumerable: false,\\n        writable: true,\\n        configurable: true\\n      }\\n    });\\n    return (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_1__.default)(Wrapper, Class);\\n  };\\n\\n  return _wrapNativeSuper(Class);\\n}\\n\\n//# sourceURL=webpack://DerivAPIBasic/./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js?\");\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_466557__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_466557__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_466557__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_466557__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_466557__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_466557__.o(definition, key) && !__nested_webpack_require_466557__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_466557__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_466557__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval devtool is used.\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_466557__(\"./src/deriv_api/DerivAPIBasic.js\");\n/******/ \t__webpack_exports__ = __webpack_exports__.default;\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../node_modules/@deriv/deriv-api/dist/DerivAPIBasic.js\n");

/***/ })

}]);