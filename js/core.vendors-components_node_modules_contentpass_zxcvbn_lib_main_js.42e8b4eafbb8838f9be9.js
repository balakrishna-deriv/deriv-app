/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-components_node_modules_contentpass_zxcvbn_lib_main_js"],{

/***/ "../../components/node_modules/@contentpass/zxcvbn/lib/adjacency_graphs.js":
/*!*********************************************************************************!*\
  !*** ../../components/node_modules/@contentpass/zxcvbn/lib/adjacency_graphs.js ***!
  \*********************************************************************************/
/***/ ((module) => {

eval("// Generated by CoffeeScript 1.12.7\nvar adjacency_graphs;\n\nadjacency_graphs = {\n  qwerty: {\n    \"!\": [\"`~\", null, null, \"2@\", \"qQ\", null],\n    \"\\\"\": [\";:\", \"[{\", \"]}\", null, null, \"/?\"],\n    \"#\": [\"2@\", null, null, \"4$\", \"eE\", \"wW\"],\n    \"$\": [\"3#\", null, null, \"5%\", \"rR\", \"eE\"],\n    \"%\": [\"4$\", null, null, \"6^\", \"tT\", \"rR\"],\n    \"&\": [\"6^\", null, null, \"8*\", \"uU\", \"yY\"],\n    \"'\": [\";:\", \"[{\", \"]}\", null, null, \"/?\"],\n    \"(\": [\"8*\", null, null, \"0)\", \"oO\", \"iI\"],\n    \")\": [\"9(\", null, null, \"-_\", \"pP\", \"oO\"],\n    \"*\": [\"7&\", null, null, \"9(\", \"iI\", \"uU\"],\n    \"+\": [\"-_\", null, null, null, \"]}\", \"[{\"],\n    \",\": [\"mM\", \"kK\", \"lL\", \".>\", null, null],\n    \"-\": [\"0)\", null, null, \"=+\", \"[{\", \"pP\"],\n    \".\": [\",<\", \"lL\", \";:\", \"/?\", null, null],\n    \"/\": [\".>\", \";:\", \"'\\\"\", null, null, null],\n    \"0\": [\"9(\", null, null, \"-_\", \"pP\", \"oO\"],\n    \"1\": [\"`~\", null, null, \"2@\", \"qQ\", null],\n    \"2\": [\"1!\", null, null, \"3#\", \"wW\", \"qQ\"],\n    \"3\": [\"2@\", null, null, \"4$\", \"eE\", \"wW\"],\n    \"4\": [\"3#\", null, null, \"5%\", \"rR\", \"eE\"],\n    \"5\": [\"4$\", null, null, \"6^\", \"tT\", \"rR\"],\n    \"6\": [\"5%\", null, null, \"7&\", \"yY\", \"tT\"],\n    \"7\": [\"6^\", null, null, \"8*\", \"uU\", \"yY\"],\n    \"8\": [\"7&\", null, null, \"9(\", \"iI\", \"uU\"],\n    \"9\": [\"8*\", null, null, \"0)\", \"oO\", \"iI\"],\n    \":\": [\"lL\", \"pP\", \"[{\", \"'\\\"\", \"/?\", \".>\"],\n    \";\": [\"lL\", \"pP\", \"[{\", \"'\\\"\", \"/?\", \".>\"],\n    \"<\": [\"mM\", \"kK\", \"lL\", \".>\", null, null],\n    \"=\": [\"-_\", null, null, null, \"]}\", \"[{\"],\n    \">\": [\",<\", \"lL\", \";:\", \"/?\", null, null],\n    \"?\": [\".>\", \";:\", \"'\\\"\", null, null, null],\n    \"@\": [\"1!\", null, null, \"3#\", \"wW\", \"qQ\"],\n    \"A\": [null, \"qQ\", \"wW\", \"sS\", \"zZ\", null],\n    \"B\": [\"vV\", \"gG\", \"hH\", \"nN\", null, null],\n    \"C\": [\"xX\", \"dD\", \"fF\", \"vV\", null, null],\n    \"D\": [\"sS\", \"eE\", \"rR\", \"fF\", \"cC\", \"xX\"],\n    \"E\": [\"wW\", \"3#\", \"4$\", \"rR\", \"dD\", \"sS\"],\n    \"F\": [\"dD\", \"rR\", \"tT\", \"gG\", \"vV\", \"cC\"],\n    \"G\": [\"fF\", \"tT\", \"yY\", \"hH\", \"bB\", \"vV\"],\n    \"H\": [\"gG\", \"yY\", \"uU\", \"jJ\", \"nN\", \"bB\"],\n    \"I\": [\"uU\", \"8*\", \"9(\", \"oO\", \"kK\", \"jJ\"],\n    \"J\": [\"hH\", \"uU\", \"iI\", \"kK\", \"mM\", \"nN\"],\n    \"K\": [\"jJ\", \"iI\", \"oO\", \"lL\", \",<\", \"mM\"],\n    \"L\": [\"kK\", \"oO\", \"pP\", \";:\", \".>\", \",<\"],\n    \"M\": [\"nN\", \"jJ\", \"kK\", \",<\", null, null],\n    \"N\": [\"bB\", \"hH\", \"jJ\", \"mM\", null, null],\n    \"O\": [\"iI\", \"9(\", \"0)\", \"pP\", \"lL\", \"kK\"],\n    \"P\": [\"oO\", \"0)\", \"-_\", \"[{\", \";:\", \"lL\"],\n    \"Q\": [null, \"1!\", \"2@\", \"wW\", \"aA\", null],\n    \"R\": [\"eE\", \"4$\", \"5%\", \"tT\", \"fF\", \"dD\"],\n    \"S\": [\"aA\", \"wW\", \"eE\", \"dD\", \"xX\", \"zZ\"],\n    \"T\": [\"rR\", \"5%\", \"6^\", \"yY\", \"gG\", \"fF\"],\n    \"U\": [\"yY\", \"7&\", \"8*\", \"iI\", \"jJ\", \"hH\"],\n    \"V\": [\"cC\", \"fF\", \"gG\", \"bB\", null, null],\n    \"W\": [\"qQ\", \"2@\", \"3#\", \"eE\", \"sS\", \"aA\"],\n    \"X\": [\"zZ\", \"sS\", \"dD\", \"cC\", null, null],\n    \"Y\": [\"tT\", \"6^\", \"7&\", \"uU\", \"hH\", \"gG\"],\n    \"Z\": [null, \"aA\", \"sS\", \"xX\", null, null],\n    \"[\": [\"pP\", \"-_\", \"=+\", \"]}\", \"'\\\"\", \";:\"],\n    \"\\\\\": [\"]}\", null, null, null, null, null],\n    \"]\": [\"[{\", \"=+\", null, \"\\\\|\", null, \"'\\\"\"],\n    \"^\": [\"5%\", null, null, \"7&\", \"yY\", \"tT\"],\n    \"_\": [\"0)\", null, null, \"=+\", \"[{\", \"pP\"],\n    \"`\": [null, null, null, \"1!\", null, null],\n    \"a\": [null, \"qQ\", \"wW\", \"sS\", \"zZ\", null],\n    \"b\": [\"vV\", \"gG\", \"hH\", \"nN\", null, null],\n    \"c\": [\"xX\", \"dD\", \"fF\", \"vV\", null, null],\n    \"d\": [\"sS\", \"eE\", \"rR\", \"fF\", \"cC\", \"xX\"],\n    \"e\": [\"wW\", \"3#\", \"4$\", \"rR\", \"dD\", \"sS\"],\n    \"f\": [\"dD\", \"rR\", \"tT\", \"gG\", \"vV\", \"cC\"],\n    \"g\": [\"fF\", \"tT\", \"yY\", \"hH\", \"bB\", \"vV\"],\n    \"h\": [\"gG\", \"yY\", \"uU\", \"jJ\", \"nN\", \"bB\"],\n    \"i\": [\"uU\", \"8*\", \"9(\", \"oO\", \"kK\", \"jJ\"],\n    \"j\": [\"hH\", \"uU\", \"iI\", \"kK\", \"mM\", \"nN\"],\n    \"k\": [\"jJ\", \"iI\", \"oO\", \"lL\", \",<\", \"mM\"],\n    \"l\": [\"kK\", \"oO\", \"pP\", \";:\", \".>\", \",<\"],\n    \"m\": [\"nN\", \"jJ\", \"kK\", \",<\", null, null],\n    \"n\": [\"bB\", \"hH\", \"jJ\", \"mM\", null, null],\n    \"o\": [\"iI\", \"9(\", \"0)\", \"pP\", \"lL\", \"kK\"],\n    \"p\": [\"oO\", \"0)\", \"-_\", \"[{\", \";:\", \"lL\"],\n    \"q\": [null, \"1!\", \"2@\", \"wW\", \"aA\", null],\n    \"r\": [\"eE\", \"4$\", \"5%\", \"tT\", \"fF\", \"dD\"],\n    \"s\": [\"aA\", \"wW\", \"eE\", \"dD\", \"xX\", \"zZ\"],\n    \"t\": [\"rR\", \"5%\", \"6^\", \"yY\", \"gG\", \"fF\"],\n    \"u\": [\"yY\", \"7&\", \"8*\", \"iI\", \"jJ\", \"hH\"],\n    \"v\": [\"cC\", \"fF\", \"gG\", \"bB\", null, null],\n    \"w\": [\"qQ\", \"2@\", \"3#\", \"eE\", \"sS\", \"aA\"],\n    \"x\": [\"zZ\", \"sS\", \"dD\", \"cC\", null, null],\n    \"y\": [\"tT\", \"6^\", \"7&\", \"uU\", \"hH\", \"gG\"],\n    \"z\": [null, \"aA\", \"sS\", \"xX\", null, null],\n    \"{\": [\"pP\", \"-_\", \"=+\", \"]}\", \"'\\\"\", \";:\"],\n    \"|\": [\"]}\", null, null, null, null, null],\n    \"}\": [\"[{\", \"=+\", null, \"\\\\|\", null, \"'\\\"\"],\n    \"~\": [null, null, null, \"1!\", null, null]\n  },\n  dvorak: {\n    \"!\": [\"`~\", null, null, \"2@\", \"'\\\"\", null],\n    \"\\\"\": [null, \"1!\", \"2@\", \",<\", \"aA\", null],\n    \"#\": [\"2@\", null, null, \"4$\", \".>\", \",<\"],\n    \"$\": [\"3#\", null, null, \"5%\", \"pP\", \".>\"],\n    \"%\": [\"4$\", null, null, \"6^\", \"yY\", \"pP\"],\n    \"&\": [\"6^\", null, null, \"8*\", \"gG\", \"fF\"],\n    \"'\": [null, \"1!\", \"2@\", \",<\", \"aA\", null],\n    \"(\": [\"8*\", null, null, \"0)\", \"rR\", \"cC\"],\n    \")\": [\"9(\", null, null, \"[{\", \"lL\", \"rR\"],\n    \"*\": [\"7&\", null, null, \"9(\", \"cC\", \"gG\"],\n    \"+\": [\"/?\", \"]}\", null, \"\\\\|\", null, \"-_\"],\n    \",\": [\"'\\\"\", \"2@\", \"3#\", \".>\", \"oO\", \"aA\"],\n    \"-\": [\"sS\", \"/?\", \"=+\", null, null, \"zZ\"],\n    \".\": [\",<\", \"3#\", \"4$\", \"pP\", \"eE\", \"oO\"],\n    \"/\": [\"lL\", \"[{\", \"]}\", \"=+\", \"-_\", \"sS\"],\n    \"0\": [\"9(\", null, null, \"[{\", \"lL\", \"rR\"],\n    \"1\": [\"`~\", null, null, \"2@\", \"'\\\"\", null],\n    \"2\": [\"1!\", null, null, \"3#\", \",<\", \"'\\\"\"],\n    \"3\": [\"2@\", null, null, \"4$\", \".>\", \",<\"],\n    \"4\": [\"3#\", null, null, \"5%\", \"pP\", \".>\"],\n    \"5\": [\"4$\", null, null, \"6^\", \"yY\", \"pP\"],\n    \"6\": [\"5%\", null, null, \"7&\", \"fF\", \"yY\"],\n    \"7\": [\"6^\", null, null, \"8*\", \"gG\", \"fF\"],\n    \"8\": [\"7&\", null, null, \"9(\", \"cC\", \"gG\"],\n    \"9\": [\"8*\", null, null, \"0)\", \"rR\", \"cC\"],\n    \":\": [null, \"aA\", \"oO\", \"qQ\", null, null],\n    \";\": [null, \"aA\", \"oO\", \"qQ\", null, null],\n    \"<\": [\"'\\\"\", \"2@\", \"3#\", \".>\", \"oO\", \"aA\"],\n    \"=\": [\"/?\", \"]}\", null, \"\\\\|\", null, \"-_\"],\n    \">\": [\",<\", \"3#\", \"4$\", \"pP\", \"eE\", \"oO\"],\n    \"?\": [\"lL\", \"[{\", \"]}\", \"=+\", \"-_\", \"sS\"],\n    \"@\": [\"1!\", null, null, \"3#\", \",<\", \"'\\\"\"],\n    \"A\": [null, \"'\\\"\", \",<\", \"oO\", \";:\", null],\n    \"B\": [\"xX\", \"dD\", \"hH\", \"mM\", null, null],\n    \"C\": [\"gG\", \"8*\", \"9(\", \"rR\", \"tT\", \"hH\"],\n    \"D\": [\"iI\", \"fF\", \"gG\", \"hH\", \"bB\", \"xX\"],\n    \"E\": [\"oO\", \".>\", \"pP\", \"uU\", \"jJ\", \"qQ\"],\n    \"F\": [\"yY\", \"6^\", \"7&\", \"gG\", \"dD\", \"iI\"],\n    \"G\": [\"fF\", \"7&\", \"8*\", \"cC\", \"hH\", \"dD\"],\n    \"H\": [\"dD\", \"gG\", \"cC\", \"tT\", \"mM\", \"bB\"],\n    \"I\": [\"uU\", \"yY\", \"fF\", \"dD\", \"xX\", \"kK\"],\n    \"J\": [\"qQ\", \"eE\", \"uU\", \"kK\", null, null],\n    \"K\": [\"jJ\", \"uU\", \"iI\", \"xX\", null, null],\n    \"L\": [\"rR\", \"0)\", \"[{\", \"/?\", \"sS\", \"nN\"],\n    \"M\": [\"bB\", \"hH\", \"tT\", \"wW\", null, null],\n    \"N\": [\"tT\", \"rR\", \"lL\", \"sS\", \"vV\", \"wW\"],\n    \"O\": [\"aA\", \",<\", \".>\", \"eE\", \"qQ\", \";:\"],\n    \"P\": [\".>\", \"4$\", \"5%\", \"yY\", \"uU\", \"eE\"],\n    \"Q\": [\";:\", \"oO\", \"eE\", \"jJ\", null, null],\n    \"R\": [\"cC\", \"9(\", \"0)\", \"lL\", \"nN\", \"tT\"],\n    \"S\": [\"nN\", \"lL\", \"/?\", \"-_\", \"zZ\", \"vV\"],\n    \"T\": [\"hH\", \"cC\", \"rR\", \"nN\", \"wW\", \"mM\"],\n    \"U\": [\"eE\", \"pP\", \"yY\", \"iI\", \"kK\", \"jJ\"],\n    \"V\": [\"wW\", \"nN\", \"sS\", \"zZ\", null, null],\n    \"W\": [\"mM\", \"tT\", \"nN\", \"vV\", null, null],\n    \"X\": [\"kK\", \"iI\", \"dD\", \"bB\", null, null],\n    \"Y\": [\"pP\", \"5%\", \"6^\", \"fF\", \"iI\", \"uU\"],\n    \"Z\": [\"vV\", \"sS\", \"-_\", null, null, null],\n    \"[\": [\"0)\", null, null, \"]}\", \"/?\", \"lL\"],\n    \"\\\\\": [\"=+\", null, null, null, null, null],\n    \"]\": [\"[{\", null, null, null, \"=+\", \"/?\"],\n    \"^\": [\"5%\", null, null, \"7&\", \"fF\", \"yY\"],\n    \"_\": [\"sS\", \"/?\", \"=+\", null, null, \"zZ\"],\n    \"`\": [null, null, null, \"1!\", null, null],\n    \"a\": [null, \"'\\\"\", \",<\", \"oO\", \";:\", null],\n    \"b\": [\"xX\", \"dD\", \"hH\", \"mM\", null, null],\n    \"c\": [\"gG\", \"8*\", \"9(\", \"rR\", \"tT\", \"hH\"],\n    \"d\": [\"iI\", \"fF\", \"gG\", \"hH\", \"bB\", \"xX\"],\n    \"e\": [\"oO\", \".>\", \"pP\", \"uU\", \"jJ\", \"qQ\"],\n    \"f\": [\"yY\", \"6^\", \"7&\", \"gG\", \"dD\", \"iI\"],\n    \"g\": [\"fF\", \"7&\", \"8*\", \"cC\", \"hH\", \"dD\"],\n    \"h\": [\"dD\", \"gG\", \"cC\", \"tT\", \"mM\", \"bB\"],\n    \"i\": [\"uU\", \"yY\", \"fF\", \"dD\", \"xX\", \"kK\"],\n    \"j\": [\"qQ\", \"eE\", \"uU\", \"kK\", null, null],\n    \"k\": [\"jJ\", \"uU\", \"iI\", \"xX\", null, null],\n    \"l\": [\"rR\", \"0)\", \"[{\", \"/?\", \"sS\", \"nN\"],\n    \"m\": [\"bB\", \"hH\", \"tT\", \"wW\", null, null],\n    \"n\": [\"tT\", \"rR\", \"lL\", \"sS\", \"vV\", \"wW\"],\n    \"o\": [\"aA\", \",<\", \".>\", \"eE\", \"qQ\", \";:\"],\n    \"p\": [\".>\", \"4$\", \"5%\", \"yY\", \"uU\", \"eE\"],\n    \"q\": [\";:\", \"oO\", \"eE\", \"jJ\", null, null],\n    \"r\": [\"cC\", \"9(\", \"0)\", \"lL\", \"nN\", \"tT\"],\n    \"s\": [\"nN\", \"lL\", \"/?\", \"-_\", \"zZ\", \"vV\"],\n    \"t\": [\"hH\", \"cC\", \"rR\", \"nN\", \"wW\", \"mM\"],\n    \"u\": [\"eE\", \"pP\", \"yY\", \"iI\", \"kK\", \"jJ\"],\n    \"v\": [\"wW\", \"nN\", \"sS\", \"zZ\", null, null],\n    \"w\": [\"mM\", \"tT\", \"nN\", \"vV\", null, null],\n    \"x\": [\"kK\", \"iI\", \"dD\", \"bB\", null, null],\n    \"y\": [\"pP\", \"5%\", \"6^\", \"fF\", \"iI\", \"uU\"],\n    \"z\": [\"vV\", \"sS\", \"-_\", null, null, null],\n    \"{\": [\"0)\", null, null, \"]}\", \"/?\", \"lL\"],\n    \"|\": [\"=+\", null, null, null, null, null],\n    \"}\": [\"[{\", null, null, null, \"=+\", \"/?\"],\n    \"~\": [null, null, null, \"1!\", null, null]\n  },\n  keypad: {\n    \"*\": [\"/\", null, null, null, \"-\", \"+\", \"9\", \"8\"],\n    \"+\": [\"9\", \"*\", \"-\", null, null, null, null, \"6\"],\n    \"-\": [\"*\", null, null, null, null, null, \"+\", \"9\"],\n    \".\": [\"0\", \"2\", \"3\", null, null, null, null, null],\n    \"/\": [null, null, null, null, \"*\", \"9\", \"8\", \"7\"],\n    \"0\": [null, \"1\", \"2\", \"3\", \".\", null, null, null],\n    \"1\": [null, null, \"4\", \"5\", \"2\", \"0\", null, null],\n    \"2\": [\"1\", \"4\", \"5\", \"6\", \"3\", \".\", \"0\", null],\n    \"3\": [\"2\", \"5\", \"6\", null, null, null, \".\", \"0\"],\n    \"4\": [null, null, \"7\", \"8\", \"5\", \"2\", \"1\", null],\n    \"5\": [\"4\", \"7\", \"8\", \"9\", \"6\", \"3\", \"2\", \"1\"],\n    \"6\": [\"5\", \"8\", \"9\", \"+\", null, null, \"3\", \"2\"],\n    \"7\": [null, null, null, \"/\", \"8\", \"5\", \"4\", null],\n    \"8\": [\"7\", null, \"/\", \"*\", \"9\", \"6\", \"5\", \"4\"],\n    \"9\": [\"8\", \"/\", \"*\", \"-\", \"+\", null, \"6\", \"5\"]\n  },\n  mac_keypad: {\n    \"*\": [\"/\", null, null, null, null, null, \"-\", \"9\"],\n    \"+\": [\"6\", \"9\", \"-\", null, null, null, null, \"3\"],\n    \"-\": [\"9\", \"/\", \"*\", null, null, null, \"+\", \"6\"],\n    \".\": [\"0\", \"2\", \"3\", null, null, null, null, null],\n    \"/\": [\"=\", null, null, null, \"*\", \"-\", \"9\", \"8\"],\n    \"0\": [null, \"1\", \"2\", \"3\", \".\", null, null, null],\n    \"1\": [null, null, \"4\", \"5\", \"2\", \"0\", null, null],\n    \"2\": [\"1\", \"4\", \"5\", \"6\", \"3\", \".\", \"0\", null],\n    \"3\": [\"2\", \"5\", \"6\", \"+\", null, null, \".\", \"0\"],\n    \"4\": [null, null, \"7\", \"8\", \"5\", \"2\", \"1\", null],\n    \"5\": [\"4\", \"7\", \"8\", \"9\", \"6\", \"3\", \"2\", \"1\"],\n    \"6\": [\"5\", \"8\", \"9\", \"-\", \"+\", null, \"3\", \"2\"],\n    \"7\": [null, null, null, \"=\", \"8\", \"5\", \"4\", null],\n    \"8\": [\"7\", null, \"=\", \"/\", \"9\", \"6\", \"5\", \"4\"],\n    \"9\": [\"8\", \"=\", \"/\", \"*\", \"-\", \"+\", \"6\", \"5\"],\n    \"=\": [null, null, null, null, \"/\", \"9\", \"8\", \"7\"]\n  }\n};\n\nmodule.exports = adjacency_graphs;\n\n//# sourceMappingURL=adjacency_graphs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/node_modules/@contentpass/zxcvbn/lib/adjacency_graphs.js\n");

/***/ }),

/***/ "../../components/node_modules/@contentpass/zxcvbn/lib/feedback.js":
/*!*************************************************************************!*\
  !*** ../../components/node_modules/@contentpass/zxcvbn/lib/feedback.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Generated by CoffeeScript 1.12.7\nvar feedback, scoring;\n\nscoring = __webpack_require__(/*! ./scoring */ \"../../components/node_modules/@contentpass/zxcvbn/lib/scoring.js\");\n\nfeedback = {\n  messages: {\n    use_a_few_words: 'Use a few words, avoid common phrases',\n    no_need_for_mixed_chars: 'No need for symbols, digits, or uppercase letters',\n    uncommon_words_are_better: 'Add another word or two. Uncommon words are better.',\n    straight_rows_of_keys_are_easy: 'Straight rows of keys are easy to guess',\n    short_keyboard_patterns_are_easy: 'Short keyboard patterns are easy to guess',\n    use_longer_keyboard_patterns: 'Use a longer keyboard pattern with more turns',\n    repeated_chars_are_easy: 'Repeats like \"aaa\" are easy to guess',\n    repeated_patterns_are_easy: 'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"',\n    avoid_repeated_chars: 'Avoid repeated words and characters',\n    sequences_are_easy: 'Sequences like abc or 6543 are easy to guess',\n    avoid_sequences: 'Avoid sequences',\n    recent_years_are_easy: 'Recent years are easy to guess',\n    avoid_recent_years: 'Avoid recent years',\n    avoid_associated_years: 'Avoid years that are associated with you',\n    dates_are_easy: 'Dates are often easy to guess',\n    avoid_associated_dates_and_years: 'Avoid dates and years that are associated with you',\n    top10_common_password: 'This is a top-10 common password',\n    top100_common_password: 'This is a top-100 common password',\n    very_common_password: 'This is a very common password',\n    similar_to_common_password: 'This is similar to a commonly used password',\n    a_word_is_easy: 'A word by itself is easy to guess',\n    names_are_easy: 'Names and surnames by themselves are easy to guess',\n    common_names_are_easy: 'Common names and surnames are easy to guess',\n    capitalization_doesnt_help: 'Capitalization doesn\\'t help very much',\n    all_uppercase_doesnt_help: 'All-uppercase is almost as easy to guess as all-lowercase',\n    reverse_doesnt_help: 'Reversed words aren\\'t much harder to guess',\n    substitution_doesnt_help: 'Predictable substitutions like \\'@\\' instead of \\'a\\' don\\'t help very much',\n    user_dictionary: 'This password is on the blacklist'\n  },\n  get_feedback: function(score, sequence, custom_messages) {\n    var extra_feedback, i, len, longest_match, match, ref;\n    this.custom_messages = custom_messages;\n    if (sequence.length === 0) {\n      return this.build_feedback(null, ['use_a_few_words', 'no_need_for_mixed_chars']);\n    }\n    if (score > 2) {\n      return this.build_feedback();\n    }\n    longest_match = sequence[0];\n    ref = sequence.slice(1);\n    for (i = 0, len = ref.length; i < len; i++) {\n      match = ref[i];\n      if (match.token.length > longest_match.token.length) {\n        longest_match = match;\n      }\n    }\n    feedback = this.get_match_feedback(longest_match, sequence.length === 1);\n    extra_feedback = ['uncommon_words_are_better'];\n    if (feedback != null) {\n      return this.build_feedback(feedback.warning, extra_feedback.concat(feedback.suggestions));\n    } else {\n      return this.build_feedback(null, extra_feedback);\n    }\n  },\n  get_match_feedback: function(match, is_sole_match) {\n    var warning;\n    switch (match.pattern) {\n      case 'dictionary':\n        return this.get_dictionary_match_feedback(match, is_sole_match);\n      case 'spatial':\n        warning = match.turns === 1 ? 'straight_rows_of_keys_are_easy' : 'short_keyboard_patterns_are_easy';\n        return {\n          warning: warning,\n          suggestions: ['use_longer_keyboard_patterns']\n        };\n      case 'repeat':\n        warning = match.base_token.length === 1 ? 'repeated_chars_are_easy' : 'repeated_patterns_are_easy';\n        return {\n          warning: warning,\n          suggestions: ['avoid_repeated_chars']\n        };\n      case 'sequence':\n        return {\n          warning: 'sequences_are_easy',\n          suggestions: ['avoid_sequences']\n        };\n      case 'regex':\n        if (match.regex_name === 'recent_year') {\n          return {\n            warning: 'recent_years_are_easy',\n            suggestions: ['avoid_recent_years', 'avoid_associated_years']\n          };\n        }\n        break;\n      case 'date':\n        return {\n          warning: 'dates_are_easy',\n          suggestions: ['avoid_associated_dates_and_years']\n        };\n    }\n  },\n  get_dictionary_match_feedback: function(match, is_sole_match) {\n    var ref, result, suggestions, warning, word;\n    warning = match.dictionary_name === 'user_inputs' ? 'user_dictionary' : match.dictionary_name === 'passwords' ? is_sole_match && !match.l33t && !match.reversed ? match.rank <= 10 ? 'top10_common_password' : match.rank <= 100 ? 'top100_common_password' : 'very_common_password' : match.guesses_log10 <= 4 ? 'similar_to_common_password' : void 0 : match.dictionary_name === 'english_wikipedia' ? is_sole_match ? 'a_word_is_easy' : void 0 : (ref = match.dictionary_name) === 'surnames' || ref === 'male_names' || ref === 'female_names' ? is_sole_match ? 'names_are_easy' : 'common_names_are_easy' : void 0;\n    suggestions = [];\n    word = match.token;\n    if (word.match(scoring.START_UPPER)) {\n      suggestions.push('capitalization_doesnt_help');\n    } else if (word.match(scoring.ALL_UPPER) && word.toLowerCase() !== word) {\n      suggestions.push('all_uppercase_doesnt_help');\n    }\n    if (match.reversed && match.token.length >= 4) {\n      suggestions.push('reverse_doesnt_help');\n    }\n    if (match.l33t) {\n      suggestions.push('substitution_doesnt_help');\n    }\n    result = {\n      warning: warning,\n      suggestions: suggestions\n    };\n    return result;\n  },\n  get_message: function(key) {\n    if ((this.custom_messages != null) && key in this.custom_messages) {\n      return this.custom_messages[key] || '';\n    } else if (this.messages[key] != null) {\n      return this.messages[key];\n    } else {\n      throw new Error(\"unknown message: \" + key);\n    }\n  },\n  build_feedback: function(warning_key, suggestion_keys) {\n    var i, len, message, suggestion_key, suggestions;\n    if (warning_key == null) {\n      warning_key = null;\n    }\n    if (suggestion_keys == null) {\n      suggestion_keys = [];\n    }\n    suggestions = [];\n    for (i = 0, len = suggestion_keys.length; i < len; i++) {\n      suggestion_key = suggestion_keys[i];\n      message = this.get_message(suggestion_key);\n      if (message != null) {\n        suggestions.push(message);\n      }\n    }\n    feedback = {\n      warning: warning_key ? this.get_message(warning_key) : '',\n      suggestions: suggestions\n    };\n    return feedback;\n  }\n};\n\nmodule.exports = feedback;\n\n//# sourceMappingURL=feedback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/node_modules/@contentpass/zxcvbn/lib/feedback.js\n");

/***/ }),

/***/ "../../components/node_modules/@contentpass/zxcvbn/lib/main.js":
/*!*********************************************************************!*\
  !*** ../../components/node_modules/@contentpass/zxcvbn/lib/main.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Generated by CoffeeScript 1.12.7\nvar feedback, matching, scoring, time, time_estimates, zxcvbn;\n\nmatching = __webpack_require__(/*! ./matching */ \"../../components/node_modules/@contentpass/zxcvbn/lib/matching.js\");\n\nscoring = __webpack_require__(/*! ./scoring */ \"../../components/node_modules/@contentpass/zxcvbn/lib/scoring.js\");\n\ntime_estimates = __webpack_require__(/*! ./time_estimates */ \"../../components/node_modules/@contentpass/zxcvbn/lib/time_estimates.js\");\n\nfeedback = __webpack_require__(/*! ./feedback */ \"../../components/node_modules/@contentpass/zxcvbn/lib/feedback.js\");\n\ntime = function() {\n  return (new Date()).getTime();\n};\n\nzxcvbn = function(password, options) {\n  var arg, attack_times, feedback_messages, i, len, matches, prop, ref, ref1, ref2, result, sanitized_inputs, start, user_inputs, val;\n  if (options == null) {\n    options = {};\n  }\n  if (options instanceof Array) {\n    user_inputs = options;\n  } else if (typeof options === 'object') {\n    user_inputs = (ref = options.user_inputs) != null ? ref : [], feedback_messages = (ref1 = options.feedback_messages) != null ? ref1 : {};\n  } else {\n    user_inputs = [];\n    feedback_messages = {};\n  }\n  start = time();\n  sanitized_inputs = [];\n  for (i = 0, len = user_inputs.length; i < len; i++) {\n    arg = user_inputs[i];\n    if ((ref2 = typeof arg) === \"string\" || ref2 === \"number\" || ref2 === \"boolean\") {\n      sanitized_inputs.push(arg.toString().toLowerCase());\n    }\n  }\n  matching.set_user_input_dictionary(sanitized_inputs);\n  matches = matching.omnimatch(password);\n  result = scoring.most_guessable_match_sequence(password, matches);\n  result.calc_time = time() - start;\n  attack_times = time_estimates.estimate_attack_times(result.guesses);\n  for (prop in attack_times) {\n    val = attack_times[prop];\n    result[prop] = val;\n  }\n  result.feedback = feedback.get_feedback(result.score, result.sequence, feedback_messages);\n  return result;\n};\n\nmodule.exports = zxcvbn;\n\n//# sourceMappingURL=main.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQGNvbnRlbnRwYXNzL3p4Y3Zibi9saWIvbWFpbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9AY29udGVudHBhc3MvenhjdmJuL2xpYi9tYWluLmpzP2Q0YjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbnZhciBmZWVkYmFjaywgbWF0Y2hpbmcsIHNjb3JpbmcsIHRpbWUsIHRpbWVfZXN0aW1hdGVzLCB6eGN2Ym47XG5cbm1hdGNoaW5nID0gcmVxdWlyZSgnLi9tYXRjaGluZycpO1xuXG5zY29yaW5nID0gcmVxdWlyZSgnLi9zY29yaW5nJyk7XG5cbnRpbWVfZXN0aW1hdGVzID0gcmVxdWlyZSgnLi90aW1lX2VzdGltYXRlcycpO1xuXG5mZWVkYmFjayA9IHJlcXVpcmUoJy4vZmVlZGJhY2snKTtcblxudGltZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbn07XG5cbnp4Y3ZibiA9IGZ1bmN0aW9uKHBhc3N3b3JkLCBvcHRpb25zKSB7XG4gIHZhciBhcmcsIGF0dGFja190aW1lcywgZmVlZGJhY2tfbWVzc2FnZXMsIGksIGxlbiwgbWF0Y2hlcywgcHJvcCwgcmVmLCByZWYxLCByZWYyLCByZXN1bHQsIHNhbml0aXplZF9pbnB1dHMsIHN0YXJ0LCB1c2VyX2lucHV0cywgdmFsO1xuICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB1c2VyX2lucHV0cyA9IG9wdGlvbnM7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgdXNlcl9pbnB1dHMgPSAocmVmID0gb3B0aW9ucy51c2VyX2lucHV0cykgIT0gbnVsbCA/IHJlZiA6IFtdLCBmZWVkYmFja19tZXNzYWdlcyA9IChyZWYxID0gb3B0aW9ucy5mZWVkYmFja19tZXNzYWdlcykgIT0gbnVsbCA/IHJlZjEgOiB7fTtcbiAgfSBlbHNlIHtcbiAgICB1c2VyX2lucHV0cyA9IFtdO1xuICAgIGZlZWRiYWNrX21lc3NhZ2VzID0ge307XG4gIH1cbiAgc3RhcnQgPSB0aW1lKCk7XG4gIHNhbml0aXplZF9pbnB1dHMgPSBbXTtcbiAgZm9yIChpID0gMCwgbGVuID0gdXNlcl9pbnB1dHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcmcgPSB1c2VyX2lucHV0c1tpXTtcbiAgICBpZiAoKHJlZjIgPSB0eXBlb2YgYXJnKSA9PT0gXCJzdHJpbmdcIiB8fCByZWYyID09PSBcIm51bWJlclwiIHx8IHJlZjIgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICBzYW5pdGl6ZWRfaW5wdXRzLnB1c2goYXJnLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuICB9XG4gIG1hdGNoaW5nLnNldF91c2VyX2lucHV0X2RpY3Rpb25hcnkoc2FuaXRpemVkX2lucHV0cyk7XG4gIG1hdGNoZXMgPSBtYXRjaGluZy5vbW5pbWF0Y2gocGFzc3dvcmQpO1xuICByZXN1bHQgPSBzY29yaW5nLm1vc3RfZ3Vlc3NhYmxlX21hdGNoX3NlcXVlbmNlKHBhc3N3b3JkLCBtYXRjaGVzKTtcbiAgcmVzdWx0LmNhbGNfdGltZSA9IHRpbWUoKSAtIHN0YXJ0O1xuICBhdHRhY2tfdGltZXMgPSB0aW1lX2VzdGltYXRlcy5lc3RpbWF0ZV9hdHRhY2tfdGltZXMocmVzdWx0Lmd1ZXNzZXMpO1xuICBmb3IgKHByb3AgaW4gYXR0YWNrX3RpbWVzKSB7XG4gICAgdmFsID0gYXR0YWNrX3RpbWVzW3Byb3BdO1xuICAgIHJlc3VsdFtwcm9wXSA9IHZhbDtcbiAgfVxuICByZXN1bHQuZmVlZGJhY2sgPSBmZWVkYmFjay5nZXRfZmVlZGJhY2socmVzdWx0LnNjb3JlLCByZXN1bHQuc2VxdWVuY2UsIGZlZWRiYWNrX21lc3NhZ2VzKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0genhjdmJuO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWluLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../components/node_modules/@contentpass/zxcvbn/lib/main.js\n");

/***/ }),

/***/ "../../components/node_modules/@contentpass/zxcvbn/lib/matching.js":
/*!*************************************************************************!*\
  !*** ../../components/node_modules/@contentpass/zxcvbn/lib/matching.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Generated by CoffeeScript 1.12.7\nvar DATE_MAX_YEAR, DATE_MIN_YEAR, DATE_SPLITS, GRAPHS, L33T_TABLE, RANKED_DICTIONARIES, REGEXEN, adjacency_graphs, build_ranked_dict, frequency_lists, lst, matching, name, scoring;\n\nfrequency_lists = __webpack_require__(/*! ./frequency_lists */ \"../../components/node_modules/@contentpass/zxcvbn/lib/frequency_lists.js\");\n\nadjacency_graphs = __webpack_require__(/*! ./adjacency_graphs */ \"../../components/node_modules/@contentpass/zxcvbn/lib/adjacency_graphs.js\");\n\nscoring = __webpack_require__(/*! ./scoring */ \"../../components/node_modules/@contentpass/zxcvbn/lib/scoring.js\");\n\nbuild_ranked_dict = function(ordered_list) {\n  var i, len1, o, result, word;\n  result = {};\n  i = 1;\n  for (o = 0, len1 = ordered_list.length; o < len1; o++) {\n    word = ordered_list[o];\n    result[word] = i;\n    i += 1;\n  }\n  return result;\n};\n\nRANKED_DICTIONARIES = {};\n\nfor (name in frequency_lists) {\n  lst = frequency_lists[name];\n  RANKED_DICTIONARIES[name] = build_ranked_dict(lst);\n}\n\nGRAPHS = {\n  qwerty: adjacency_graphs.qwerty,\n  dvorak: adjacency_graphs.dvorak,\n  keypad: adjacency_graphs.keypad,\n  mac_keypad: adjacency_graphs.mac_keypad\n};\n\nL33T_TABLE = {\n  a: ['4', '@'],\n  b: ['8'],\n  c: ['(', '{', '[', '<'],\n  e: ['3'],\n  g: ['6', '9'],\n  i: ['1', '!', '|'],\n  l: ['1', '|', '7'],\n  o: ['0'],\n  s: ['$', '5'],\n  t: ['+', '7'],\n  x: ['%'],\n  z: ['2']\n};\n\nREGEXEN = {\n  recent_year: /19\\d\\d|200\\d|201\\d/g\n};\n\nDATE_MAX_YEAR = 2050;\n\nDATE_MIN_YEAR = 1000;\n\nDATE_SPLITS = {\n  4: [[1, 2], [2, 3]],\n  5: [[1, 3], [2, 3]],\n  6: [[1, 2], [2, 4], [4, 5]],\n  7: [[1, 3], [2, 3], [4, 5], [4, 6]],\n  8: [[2, 4], [4, 6]]\n};\n\nmatching = {\n  empty: function(obj) {\n    var k;\n    return ((function() {\n      var results;\n      results = [];\n      for (k in obj) {\n        results.push(k);\n      }\n      return results;\n    })()).length === 0;\n  },\n  extend: function(lst, lst2) {\n    return lst.push.apply(lst, lst2);\n  },\n  translate: function(string, chr_map) {\n    var chr;\n    return ((function() {\n      var len1, o, ref, results;\n      ref = string.split('');\n      results = [];\n      for (o = 0, len1 = ref.length; o < len1; o++) {\n        chr = ref[o];\n        results.push(chr_map[chr] || chr);\n      }\n      return results;\n    })()).join('');\n  },\n  mod: function(n, m) {\n    return ((n % m) + m) % m;\n  },\n  sorted: function(matches) {\n    return matches.sort(function(m1, m2) {\n      return (m1.i - m2.i) || (m1.j - m2.j);\n    });\n  },\n  omnimatch: function(password) {\n    var len1, matcher, matchers, matches, o;\n    matches = [];\n    matchers = [this.dictionary_match, this.reverse_dictionary_match, this.l33t_match, this.spatial_match, this.repeat_match, this.sequence_match, this.regex_match, this.date_match];\n    for (o = 0, len1 = matchers.length; o < len1; o++) {\n      matcher = matchers[o];\n      this.extend(matches, matcher.call(this, password));\n    }\n    return this.sorted(matches);\n  },\n  dictionary_match: function(password, _ranked_dictionaries) {\n    var dictionary_name, i, j, len, matches, o, p, password_lower, rank, ranked_dict, ref, ref1, ref2, word;\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n    matches = [];\n    len = password.length;\n    password_lower = password.toLowerCase();\n    for (dictionary_name in _ranked_dictionaries) {\n      ranked_dict = _ranked_dictionaries[dictionary_name];\n      for (i = o = 0, ref = len; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        for (j = p = ref1 = i, ref2 = len; ref1 <= ref2 ? p < ref2 : p > ref2; j = ref1 <= ref2 ? ++p : --p) {\n          if (password_lower.slice(i, +j + 1 || 9e9) in ranked_dict) {\n            word = password_lower.slice(i, +j + 1 || 9e9);\n            rank = ranked_dict[word];\n            matches.push({\n              pattern: 'dictionary',\n              i: i,\n              j: j,\n              token: password.slice(i, +j + 1 || 9e9),\n              matched_word: word,\n              rank: rank,\n              dictionary_name: dictionary_name,\n              reversed: false,\n              l33t: false\n            });\n          }\n        }\n      }\n    }\n    return this.sorted(matches);\n  },\n  reverse_dictionary_match: function(password, _ranked_dictionaries) {\n    var len1, match, matches, o, ref, reversed_password;\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n    reversed_password = password.split('').reverse().join('');\n    matches = this.dictionary_match(reversed_password, _ranked_dictionaries);\n    for (o = 0, len1 = matches.length; o < len1; o++) {\n      match = matches[o];\n      match.token = match.token.split('').reverse().join('');\n      match.reversed = true;\n      ref = [password.length - 1 - match.j, password.length - 1 - match.i], match.i = ref[0], match.j = ref[1];\n    }\n    return this.sorted(matches);\n  },\n  set_user_input_dictionary: function(ordered_list) {\n    return RANKED_DICTIONARIES['user_inputs'] = build_ranked_dict(ordered_list.slice());\n  },\n  relevant_l33t_subtable: function(password, table) {\n    var chr, len1, letter, o, password_chars, ref, relevant_subs, sub, subs, subtable;\n    password_chars = {};\n    ref = password.split('');\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      chr = ref[o];\n      password_chars[chr] = true;\n    }\n    subtable = {};\n    for (letter in table) {\n      subs = table[letter];\n      relevant_subs = (function() {\n        var len2, p, results;\n        results = [];\n        for (p = 0, len2 = subs.length; p < len2; p++) {\n          sub = subs[p];\n          if (sub in password_chars) {\n            results.push(sub);\n          }\n        }\n        return results;\n      })();\n      if (relevant_subs.length > 0) {\n        subtable[letter] = relevant_subs;\n      }\n    }\n    return subtable;\n  },\n  enumerate_l33t_subs: function(table) {\n    var chr, dedup, helper, k, keys, l33t_chr, len1, len2, o, p, ref, sub, sub_dict, sub_dicts, subs;\n    keys = (function() {\n      var results;\n      results = [];\n      for (k in table) {\n        results.push(k);\n      }\n      return results;\n    })();\n    subs = [[]];\n    dedup = function(subs) {\n      var assoc, deduped, label, len1, members, o, sub, v;\n      deduped = [];\n      members = {};\n      for (o = 0, len1 = subs.length; o < len1; o++) {\n        sub = subs[o];\n        assoc = (function() {\n          var len2, p, results;\n          results = [];\n          for (v = p = 0, len2 = sub.length; p < len2; v = ++p) {\n            k = sub[v];\n            results.push([k, v]);\n          }\n          return results;\n        })();\n        assoc.sort();\n        label = ((function() {\n          var len2, p, results;\n          results = [];\n          for (v = p = 0, len2 = assoc.length; p < len2; v = ++p) {\n            k = assoc[v];\n            results.push(k + ',' + v);\n          }\n          return results;\n        })()).join('-');\n        if (!(label in members)) {\n          members[label] = true;\n          deduped.push(sub);\n        }\n      }\n      return deduped;\n    };\n    helper = function(keys) {\n      var dup_l33t_index, first_key, i, l33t_chr, len1, len2, next_subs, o, p, q, ref, ref1, rest_keys, sub, sub_alternative, sub_extension;\n      if (!keys.length) {\n        return;\n      }\n      first_key = keys[0];\n      rest_keys = keys.slice(1);\n      next_subs = [];\n      ref = table[first_key];\n      for (o = 0, len1 = ref.length; o < len1; o++) {\n        l33t_chr = ref[o];\n        for (p = 0, len2 = subs.length; p < len2; p++) {\n          sub = subs[p];\n          dup_l33t_index = -1;\n          for (i = q = 0, ref1 = sub.length; 0 <= ref1 ? q < ref1 : q > ref1; i = 0 <= ref1 ? ++q : --q) {\n            if (sub[i][0] === l33t_chr) {\n              dup_l33t_index = i;\n              break;\n            }\n          }\n          if (dup_l33t_index === -1) {\n            sub_extension = sub.concat([[l33t_chr, first_key]]);\n            next_subs.push(sub_extension);\n          } else {\n            sub_alternative = sub.slice(0);\n            sub_alternative.splice(dup_l33t_index, 1);\n            sub_alternative.push([l33t_chr, first_key]);\n            next_subs.push(sub);\n            next_subs.push(sub_alternative);\n          }\n        }\n      }\n      subs = dedup(next_subs);\n      return helper(rest_keys);\n    };\n    helper(keys);\n    sub_dicts = [];\n    for (o = 0, len1 = subs.length; o < len1; o++) {\n      sub = subs[o];\n      sub_dict = {};\n      for (p = 0, len2 = sub.length; p < len2; p++) {\n        ref = sub[p], l33t_chr = ref[0], chr = ref[1];\n        sub_dict[l33t_chr] = chr;\n      }\n      sub_dicts.push(sub_dict);\n    }\n    return sub_dicts;\n  },\n  l33t_match: function(password, _ranked_dictionaries, _l33t_table) {\n    var chr, k, len1, len2, match, match_sub, matches, o, p, ref, ref1, sub, subbed_chr, subbed_password, token, v;\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n    if (_l33t_table == null) {\n      _l33t_table = L33T_TABLE;\n    }\n    matches = [];\n    ref = this.enumerate_l33t_subs(this.relevant_l33t_subtable(password, _l33t_table));\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      sub = ref[o];\n      if (this.empty(sub)) {\n        break;\n      }\n      subbed_password = this.translate(password, sub);\n      ref1 = this.dictionary_match(subbed_password, _ranked_dictionaries);\n      for (p = 0, len2 = ref1.length; p < len2; p++) {\n        match = ref1[p];\n        token = password.slice(match.i, +match.j + 1 || 9e9);\n        if (token.toLowerCase() === match.matched_word) {\n          continue;\n        }\n        match_sub = {};\n        for (subbed_chr in sub) {\n          chr = sub[subbed_chr];\n          if (token.indexOf(subbed_chr) !== -1) {\n            match_sub[subbed_chr] = chr;\n          }\n        }\n        match.l33t = true;\n        match.token = token;\n        match.sub = match_sub;\n        match.sub_display = ((function() {\n          var results;\n          results = [];\n          for (k in match_sub) {\n            v = match_sub[k];\n            results.push(k + \" -> \" + v);\n          }\n          return results;\n        })()).join(', ');\n        matches.push(match);\n      }\n    }\n    return this.sorted(matches.filter(function(match) {\n      return match.token.length > 1;\n    }));\n  },\n  spatial_match: function(password, _graphs) {\n    var graph, graph_name, matches;\n    if (_graphs == null) {\n      _graphs = GRAPHS;\n    }\n    matches = [];\n    for (graph_name in _graphs) {\n      graph = _graphs[graph_name];\n      this.extend(matches, this.spatial_match_helper(password, graph, graph_name));\n    }\n    return this.sorted(matches);\n  },\n  SHIFTED_RX: /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/,\n  spatial_match_helper: function(password, graph, graph_name) {\n    var adj, adjacents, cur_char, cur_direction, found, found_direction, i, j, last_direction, len1, matches, o, prev_char, shifted_count, turns;\n    matches = [];\n    i = 0;\n    while (i < password.length - 1) {\n      j = i + 1;\n      last_direction = null;\n      turns = 0;\n      if ((graph_name === 'qwerty' || graph_name === 'dvorak') && this.SHIFTED_RX.exec(password.charAt(i))) {\n        shifted_count = 1;\n      } else {\n        shifted_count = 0;\n      }\n      while (true) {\n        prev_char = password.charAt(j - 1);\n        found = false;\n        found_direction = -1;\n        cur_direction = -1;\n        adjacents = graph[prev_char] || [];\n        if (j < password.length) {\n          cur_char = password.charAt(j);\n          for (o = 0, len1 = adjacents.length; o < len1; o++) {\n            adj = adjacents[o];\n            cur_direction += 1;\n            if (adj && adj.indexOf(cur_char) !== -1) {\n              found = true;\n              found_direction = cur_direction;\n              if (adj.indexOf(cur_char) === 1) {\n                shifted_count += 1;\n              }\n              if (last_direction !== found_direction) {\n                turns += 1;\n                last_direction = found_direction;\n              }\n              break;\n            }\n          }\n        }\n        if (found) {\n          j += 1;\n        } else {\n          if (j - i > 2) {\n            matches.push({\n              pattern: 'spatial',\n              i: i,\n              j: j - 1,\n              token: password.slice(i, j),\n              graph: graph_name,\n              turns: turns,\n              shifted_count: shifted_count\n            });\n          }\n          i = j;\n          break;\n        }\n      }\n    }\n    return matches;\n  },\n  repeat_match: function(password) {\n    var base_analysis, base_guesses, base_matches, base_token, greedy, greedy_match, i, j, lastIndex, lazy, lazy_anchored, lazy_match, match, matches, ref;\n    matches = [];\n    greedy = /(.+)\\1+/g;\n    lazy = /(.+?)\\1+/g;\n    lazy_anchored = /^(.+?)\\1+$/;\n    lastIndex = 0;\n    while (lastIndex < password.length) {\n      greedy.lastIndex = lazy.lastIndex = lastIndex;\n      greedy_match = greedy.exec(password);\n      lazy_match = lazy.exec(password);\n      if (greedy_match == null) {\n        break;\n      }\n      if (greedy_match[0].length > lazy_match[0].length) {\n        match = greedy_match;\n        base_token = lazy_anchored.exec(match[0])[1];\n      } else {\n        match = lazy_match;\n        base_token = match[1];\n      }\n      ref = [match.index, match.index + match[0].length - 1], i = ref[0], j = ref[1];\n      base_analysis = scoring.most_guessable_match_sequence(base_token, this.omnimatch(base_token));\n      base_matches = base_analysis.sequence;\n      base_guesses = base_analysis.guesses;\n      matches.push({\n        pattern: 'repeat',\n        i: i,\n        j: j,\n        token: match[0],\n        base_token: base_token,\n        base_guesses: base_guesses,\n        base_matches: base_matches,\n        repeat_count: match[0].length / base_token.length\n      });\n      lastIndex = j + 1;\n    }\n    return matches;\n  },\n  MAX_DELTA: 5,\n  sequence_match: function(password) {\n    var delta, i, j, k, last_delta, o, ref, result, update;\n    if (password.length === 1) {\n      return [];\n    }\n    update = (function(_this) {\n      return function(i, j, delta) {\n        var ref, sequence_name, sequence_space, token;\n        if (j - i > 1 || Math.abs(delta) === 1) {\n          if ((0 < (ref = Math.abs(delta)) && ref <= _this.MAX_DELTA)) {\n            token = password.slice(i, +j + 1 || 9e9);\n            if (/^[a-z]+$/.test(token)) {\n              sequence_name = 'lower';\n              sequence_space = 26;\n            } else if (/^[A-Z]+$/.test(token)) {\n              sequence_name = 'upper';\n              sequence_space = 26;\n            } else if (/^\\d+$/.test(token)) {\n              sequence_name = 'digits';\n              sequence_space = 10;\n            } else {\n              sequence_name = 'unicode';\n              sequence_space = 26;\n            }\n            return result.push({\n              pattern: 'sequence',\n              i: i,\n              j: j,\n              token: password.slice(i, +j + 1 || 9e9),\n              sequence_name: sequence_name,\n              sequence_space: sequence_space,\n              ascending: delta > 0\n            });\n          }\n        }\n      };\n    })(this);\n    result = [];\n    i = 0;\n    last_delta = null;\n    for (k = o = 1, ref = password.length; 1 <= ref ? o < ref : o > ref; k = 1 <= ref ? ++o : --o) {\n      delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n      if (last_delta == null) {\n        last_delta = delta;\n      }\n      if (delta === last_delta) {\n        continue;\n      }\n      j = k - 1;\n      update(i, j, last_delta);\n      i = j;\n      last_delta = delta;\n    }\n    update(i, password.length - 1, last_delta);\n    return result;\n  },\n  regex_match: function(password, _regexen) {\n    var matches, regex, rx_match, token;\n    if (_regexen == null) {\n      _regexen = REGEXEN;\n    }\n    matches = [];\n    for (name in _regexen) {\n      regex = _regexen[name];\n      regex.lastIndex = 0;\n      while (rx_match = regex.exec(password)) {\n        token = rx_match[0];\n        matches.push({\n          pattern: 'regex',\n          token: token,\n          i: rx_match.index,\n          j: rx_match.index + rx_match[0].length - 1,\n          regex_name: name,\n          regex_match: rx_match\n        });\n      }\n    }\n    return this.sorted(matches);\n  },\n  date_match: function(password) {\n    var best_candidate, candidate, candidates, distance, dmy, i, j, k, l, len1, len2, matches, maybe_date_no_separator, maybe_date_with_separator, metric, min_distance, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, rx_match, s, t, token;\n    matches = [];\n    maybe_date_no_separator = /^\\d{4,8}$/;\n    maybe_date_with_separator = /^(\\d{1,4})([\\s\\/\\\\_.-])(\\d{1,2})\\2(\\d{1,4})$/;\n    for (i = o = 0, ref = password.length - 4; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n      for (j = p = ref1 = i + 3, ref2 = i + 7; ref1 <= ref2 ? p <= ref2 : p >= ref2; j = ref1 <= ref2 ? ++p : --p) {\n        if (j >= password.length) {\n          break;\n        }\n        token = password.slice(i, +j + 1 || 9e9);\n        if (!maybe_date_no_separator.exec(token)) {\n          continue;\n        }\n        candidates = [];\n        ref3 = DATE_SPLITS[token.length];\n        for (q = 0, len1 = ref3.length; q < len1; q++) {\n          ref4 = ref3[q], k = ref4[0], l = ref4[1];\n          dmy = this.map_ints_to_dmy([parseInt(token.slice(0, k)), parseInt(token.slice(k, l)), parseInt(token.slice(l))]);\n          if (dmy != null) {\n            candidates.push(dmy);\n          }\n        }\n        if (!(candidates.length > 0)) {\n          continue;\n        }\n        best_candidate = candidates[0];\n        metric = function(candidate) {\n          return Math.abs(candidate.year - scoring.REFERENCE_YEAR);\n        };\n        min_distance = metric(candidates[0]);\n        ref5 = candidates.slice(1);\n        for (r = 0, len2 = ref5.length; r < len2; r++) {\n          candidate = ref5[r];\n          distance = metric(candidate);\n          if (distance < min_distance) {\n            ref6 = [candidate, distance], best_candidate = ref6[0], min_distance = ref6[1];\n          }\n        }\n        matches.push({\n          pattern: 'date',\n          token: token,\n          i: i,\n          j: j,\n          separator: '',\n          year: best_candidate.year,\n          month: best_candidate.month,\n          day: best_candidate.day\n        });\n      }\n    }\n    for (i = s = 0, ref7 = password.length - 6; 0 <= ref7 ? s <= ref7 : s >= ref7; i = 0 <= ref7 ? ++s : --s) {\n      for (j = t = ref8 = i + 5, ref9 = i + 9; ref8 <= ref9 ? t <= ref9 : t >= ref9; j = ref8 <= ref9 ? ++t : --t) {\n        if (j >= password.length) {\n          break;\n        }\n        token = password.slice(i, +j + 1 || 9e9);\n        rx_match = maybe_date_with_separator.exec(token);\n        if (rx_match == null) {\n          continue;\n        }\n        dmy = this.map_ints_to_dmy([parseInt(rx_match[1]), parseInt(rx_match[3]), parseInt(rx_match[4])]);\n        if (dmy == null) {\n          continue;\n        }\n        matches.push({\n          pattern: 'date',\n          token: token,\n          i: i,\n          j: j,\n          separator: rx_match[2],\n          year: dmy.year,\n          month: dmy.month,\n          day: dmy.day\n        });\n      }\n    }\n    return this.sorted(matches.filter(function(match) {\n      var is_submatch, len3, other_match, u;\n      is_submatch = false;\n      for (u = 0, len3 = matches.length; u < len3; u++) {\n        other_match = matches[u];\n        if (match === other_match) {\n          continue;\n        }\n        if (other_match.i <= match.i && other_match.j >= match.j) {\n          is_submatch = true;\n          break;\n        }\n      }\n      return !is_submatch;\n    }));\n  },\n  map_ints_to_dmy: function(ints) {\n    var dm, int, len1, len2, len3, o, over_12, over_31, p, possible_year_splits, q, ref, ref1, rest, under_1, y;\n    if (ints[1] > 31 || ints[1] <= 0) {\n      return;\n    }\n    over_12 = 0;\n    over_31 = 0;\n    under_1 = 0;\n    for (o = 0, len1 = ints.length; o < len1; o++) {\n      int = ints[o];\n      if ((99 < int && int < DATE_MIN_YEAR) || int > DATE_MAX_YEAR) {\n        return;\n      }\n      if (int > 31) {\n        over_31 += 1;\n      }\n      if (int > 12) {\n        over_12 += 1;\n      }\n      if (int <= 0) {\n        under_1 += 1;\n      }\n    }\n    if (over_31 >= 2 || over_12 === 3 || under_1 >= 2) {\n      return;\n    }\n    possible_year_splits = [[ints[2], ints.slice(0, 2)], [ints[0], ints.slice(1, 3)]];\n    for (p = 0, len2 = possible_year_splits.length; p < len2; p++) {\n      ref = possible_year_splits[p], y = ref[0], rest = ref[1];\n      if ((DATE_MIN_YEAR <= y && y <= DATE_MAX_YEAR)) {\n        dm = this.map_ints_to_dm(rest);\n        if (dm != null) {\n          return {\n            year: y,\n            month: dm.month,\n            day: dm.day\n          };\n        } else {\n          return;\n        }\n      }\n    }\n    for (q = 0, len3 = possible_year_splits.length; q < len3; q++) {\n      ref1 = possible_year_splits[q], y = ref1[0], rest = ref1[1];\n      dm = this.map_ints_to_dm(rest);\n      if (dm != null) {\n        y = this.two_to_four_digit_year(y);\n        return {\n          year: y,\n          month: dm.month,\n          day: dm.day\n        };\n      }\n    }\n  },\n  map_ints_to_dm: function(ints) {\n    var d, len1, m, o, ref, ref1;\n    ref = [ints, ints.slice().reverse()];\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      ref1 = ref[o], d = ref1[0], m = ref1[1];\n      if ((1 <= d && d <= 31) && (1 <= m && m <= 12)) {\n        return {\n          day: d,\n          month: m\n        };\n      }\n    }\n  },\n  two_to_four_digit_year: function(year) {\n    if (year > 99) {\n      return year;\n    } else if (year > 50) {\n      return year + 1900;\n    } else {\n      return year + 2000;\n    }\n  }\n};\n\nmodule.exports = matching;\n\n//# sourceMappingURL=matching.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/node_modules/@contentpass/zxcvbn/lib/matching.js\n");

/***/ }),

/***/ "../../components/node_modules/@contentpass/zxcvbn/lib/scoring.js":
/*!************************************************************************!*\
  !*** ../../components/node_modules/@contentpass/zxcvbn/lib/scoring.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Generated by CoffeeScript 1.12.7\nvar BRUTEFORCE_CARDINALITY, MIN_GUESSES_BEFORE_GROWING_SEQUENCE, MIN_SUBMATCH_GUESSES_MULTI_CHAR, MIN_SUBMATCH_GUESSES_SINGLE_CHAR, adjacency_graphs, calc_average_degree, k, scoring, v;\n\nadjacency_graphs = __webpack_require__(/*! ./adjacency_graphs */ \"../../components/node_modules/@contentpass/zxcvbn/lib/adjacency_graphs.js\");\n\ncalc_average_degree = function(graph) {\n  var average, k, key, n, neighbors, v;\n  average = 0;\n  for (key in graph) {\n    neighbors = graph[key];\n    average += ((function() {\n      var len, o, results;\n      results = [];\n      for (o = 0, len = neighbors.length; o < len; o++) {\n        n = neighbors[o];\n        if (n) {\n          results.push(n);\n        }\n      }\n      return results;\n    })()).length;\n  }\n  average /= ((function() {\n    var results;\n    results = [];\n    for (k in graph) {\n      v = graph[k];\n      results.push(k);\n    }\n    return results;\n  })()).length;\n  return average;\n};\n\nBRUTEFORCE_CARDINALITY = 10;\n\nMIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000;\n\nMIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10;\n\nMIN_SUBMATCH_GUESSES_MULTI_CHAR = 50;\n\nscoring = {\n  nCk: function(n, k) {\n    var d, o, r, ref;\n    if (k > n) {\n      return 0;\n    }\n    if (k === 0) {\n      return 1;\n    }\n    r = 1;\n    for (d = o = 1, ref = k; 1 <= ref ? o <= ref : o >= ref; d = 1 <= ref ? ++o : --o) {\n      r *= n;\n      r /= d;\n      n -= 1;\n    }\n    return r;\n  },\n  log10: function(n) {\n    return Math.log(n) / Math.log(10);\n  },\n  log2: function(n) {\n    return Math.log(n) / Math.log(2);\n  },\n  factorial: function(n) {\n    var f, i, o, ref;\n    if (n < 2) {\n      return 1;\n    }\n    f = 1;\n    for (i = o = 2, ref = n; 2 <= ref ? o <= ref : o >= ref; i = 2 <= ref ? ++o : --o) {\n      f *= i;\n    }\n    return f;\n  },\n  most_guessable_match_sequence: function(password, matches, _exclude_additive) {\n    var _, bruteforce_update, guesses, k, l, len, len1, len2, lst, m, make_bruteforce_match, matches_by_j, n, o, optimal, optimal_l, optimal_match_sequence, q, ref, ref1, u, unwind, update, w;\n    if (_exclude_additive == null) {\n      _exclude_additive = false;\n    }\n    n = password.length;\n    matches_by_j = (function() {\n      var o, ref, results;\n      results = [];\n      for (_ = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; _ = 0 <= ref ? ++o : --o) {\n        results.push([]);\n      }\n      return results;\n    })();\n    for (o = 0, len = matches.length; o < len; o++) {\n      m = matches[o];\n      matches_by_j[m.j].push(m);\n    }\n    for (q = 0, len1 = matches_by_j.length; q < len1; q++) {\n      lst = matches_by_j[q];\n      lst.sort(function(m1, m2) {\n        return m1.i - m2.i;\n      });\n    }\n    optimal = {\n      m: (function() {\n        var ref, results, u;\n        results = [];\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n        return results;\n      })(),\n      pi: (function() {\n        var ref, results, u;\n        results = [];\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n        return results;\n      })(),\n      g: (function() {\n        var ref, results, u;\n        results = [];\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n        return results;\n      })()\n    };\n    update = (function(_this) {\n      return function(m, l) {\n        var competing_g, competing_l, g, k, pi, ref;\n        k = m.j;\n        pi = _this.estimate_guesses(m, password);\n        if (l > 1) {\n          pi *= optimal.pi[m.i - 1][l - 1];\n        }\n        g = _this.factorial(l) * pi;\n        if (!_exclude_additive) {\n          g += Math.pow(MIN_GUESSES_BEFORE_GROWING_SEQUENCE, l - 1);\n        }\n        ref = optimal.g[k];\n        for (competing_l in ref) {\n          competing_g = ref[competing_l];\n          if (competing_l > l) {\n            continue;\n          }\n          if (competing_g <= g) {\n            return;\n          }\n        }\n        optimal.g[k][l] = g;\n        optimal.m[k][l] = m;\n        return optimal.pi[k][l] = pi;\n      };\n    })(this);\n    bruteforce_update = (function(_this) {\n      return function(k) {\n        var i, l, last_m, ref, results, u;\n        m = make_bruteforce_match(0, k);\n        update(m, 1);\n        results = [];\n        for (i = u = 1, ref = k; 1 <= ref ? u <= ref : u >= ref; i = 1 <= ref ? ++u : --u) {\n          m = make_bruteforce_match(i, k);\n          results.push((function() {\n            var ref1, results1;\n            ref1 = optimal.m[i - 1];\n            results1 = [];\n            for (l in ref1) {\n              last_m = ref1[l];\n              l = parseInt(l);\n              if (last_m.pattern === 'bruteforce') {\n                continue;\n              }\n              results1.push(update(m, l + 1));\n            }\n            return results1;\n          })());\n        }\n        return results;\n      };\n    })(this);\n    make_bruteforce_match = (function(_this) {\n      return function(i, j) {\n        return {\n          pattern: 'bruteforce',\n          token: password.slice(i, +j + 1 || 9e9),\n          i: i,\n          j: j\n        };\n      };\n    })(this);\n    unwind = (function(_this) {\n      return function(n) {\n        var candidate_g, candidate_l, g, k, l, optimal_match_sequence, ref;\n        optimal_match_sequence = [];\n        k = n - 1;\n        l = void 0;\n        g = 2e308;\n        ref = optimal.g[k];\n        for (candidate_l in ref) {\n          candidate_g = ref[candidate_l];\n          if (candidate_g < g) {\n            l = candidate_l;\n            g = candidate_g;\n          }\n        }\n        while (k >= 0) {\n          m = optimal.m[k][l];\n          optimal_match_sequence.unshift(m);\n          k = m.i - 1;\n          l--;\n        }\n        return optimal_match_sequence;\n      };\n    })(this);\n    for (k = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; k = 0 <= ref ? ++u : --u) {\n      ref1 = matches_by_j[k];\n      for (w = 0, len2 = ref1.length; w < len2; w++) {\n        m = ref1[w];\n        if (m.i > 0) {\n          for (l in optimal.m[m.i - 1]) {\n            l = parseInt(l);\n            update(m, l + 1);\n          }\n        } else {\n          update(m, 1);\n        }\n      }\n      bruteforce_update(k);\n    }\n    optimal_match_sequence = unwind(n);\n    optimal_l = optimal_match_sequence.length;\n    if (password.length === 0) {\n      guesses = 1;\n    } else {\n      guesses = optimal.g[n - 1][optimal_l];\n    }\n    return {\n      password: password,\n      guesses: guesses,\n      guesses_log10: this.log10(guesses),\n      sequence: optimal_match_sequence\n    };\n  },\n  estimate_guesses: function(match, password) {\n    var estimation_functions, guesses, min_guesses;\n    if (match.guesses != null) {\n      return match.guesses;\n    }\n    min_guesses = 1;\n    if (match.token.length < password.length) {\n      min_guesses = match.token.length === 1 ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR : MIN_SUBMATCH_GUESSES_MULTI_CHAR;\n    }\n    estimation_functions = {\n      bruteforce: this.bruteforce_guesses,\n      dictionary: this.dictionary_guesses,\n      spatial: this.spatial_guesses,\n      repeat: this.repeat_guesses,\n      sequence: this.sequence_guesses,\n      regex: this.regex_guesses,\n      date: this.date_guesses\n    };\n    guesses = estimation_functions[match.pattern].call(this, match);\n    match.guesses = Math.max(guesses, min_guesses);\n    match.guesses_log10 = this.log10(match.guesses);\n    return match.guesses;\n  },\n  bruteforce_guesses: function(match) {\n    var guesses, min_guesses;\n    guesses = Math.pow(BRUTEFORCE_CARDINALITY, match.token.length);\n    if (guesses === Number.POSITIVE_INFINITY) {\n      guesses = Number.MAX_VALUE;\n    }\n    min_guesses = match.token.length === 1 ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1 : MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1;\n    return Math.max(guesses, min_guesses);\n  },\n  repeat_guesses: function(match) {\n    return match.base_guesses * match.repeat_count;\n  },\n  sequence_guesses: function(match) {\n    var base_guesses, first_chr;\n    first_chr = match.token.charAt(0);\n    if (first_chr === 'a' || first_chr === 'A' || first_chr === 'z' || first_chr === 'Z' || first_chr === '0' || first_chr === '1' || first_chr === '9') {\n      base_guesses = 4;\n    } else {\n      if (first_chr.match(/\\d/)) {\n        base_guesses = 10;\n      } else {\n        base_guesses = 26;\n      }\n    }\n    if (!match.ascending) {\n      base_guesses *= 2;\n    }\n    return base_guesses * match.token.length;\n  },\n  MIN_YEAR_SPACE: 20,\n  REFERENCE_YEAR: new Date().getFullYear(),\n  regex_guesses: function(match) {\n    var char_class_bases, year_space;\n    char_class_bases = {\n      alpha_lower: 26,\n      alpha_upper: 26,\n      alpha: 52,\n      alphanumeric: 62,\n      digits: 10,\n      symbols: 33\n    };\n    if (match.regex_name in char_class_bases) {\n      return Math.pow(char_class_bases[match.regex_name], match.token.length);\n    } else {\n      switch (match.regex_name) {\n        case 'recent_year':\n          year_space = Math.abs(parseInt(match.regex_match[0]) - this.REFERENCE_YEAR);\n          year_space = Math.max(year_space, this.MIN_YEAR_SPACE);\n          return year_space;\n      }\n    }\n  },\n  date_guesses: function(match) {\n    var guesses, year_space;\n    year_space = Math.max(Math.abs(match.year - this.REFERENCE_YEAR), this.MIN_YEAR_SPACE);\n    guesses = year_space * 365;\n    if (match.separator) {\n      guesses *= 4;\n    }\n    return guesses;\n  },\n  KEYBOARD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.qwerty),\n  KEYPAD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.keypad),\n  KEYBOARD_STARTING_POSITIONS: ((function() {\n    var ref, results;\n    ref = adjacency_graphs.qwerty;\n    results = [];\n    for (k in ref) {\n      v = ref[k];\n      results.push(k);\n    }\n    return results;\n  })()).length,\n  KEYPAD_STARTING_POSITIONS: ((function() {\n    var ref, results;\n    ref = adjacency_graphs.keypad;\n    results = [];\n    for (k in ref) {\n      v = ref[k];\n      results.push(k);\n    }\n    return results;\n  })()).length,\n  spatial_guesses: function(match) {\n    var L, S, U, d, guesses, i, j, o, possible_turns, q, ref, ref1, ref2, ref3, s, shifted_variations, t, u;\n    if ((ref = match.graph) === 'qwerty' || ref === 'dvorak') {\n      s = this.KEYBOARD_STARTING_POSITIONS;\n      d = this.KEYBOARD_AVERAGE_DEGREE;\n    } else {\n      s = this.KEYPAD_STARTING_POSITIONS;\n      d = this.KEYPAD_AVERAGE_DEGREE;\n    }\n    guesses = 0;\n    L = match.token.length;\n    t = match.turns;\n    for (i = o = 2, ref1 = L; 2 <= ref1 ? o <= ref1 : o >= ref1; i = 2 <= ref1 ? ++o : --o) {\n      possible_turns = Math.min(t, i - 1);\n      for (j = q = 1, ref2 = possible_turns; 1 <= ref2 ? q <= ref2 : q >= ref2; j = 1 <= ref2 ? ++q : --q) {\n        guesses += this.nCk(i - 1, j - 1) * s * Math.pow(d, j);\n      }\n    }\n    if (match.shifted_count) {\n      S = match.shifted_count;\n      U = match.token.length - match.shifted_count;\n      if (S === 0 || U === 0) {\n        guesses *= 2;\n      } else {\n        shifted_variations = 0;\n        for (i = u = 1, ref3 = Math.min(S, U); 1 <= ref3 ? u <= ref3 : u >= ref3; i = 1 <= ref3 ? ++u : --u) {\n          shifted_variations += this.nCk(S + U, i);\n        }\n        guesses *= shifted_variations;\n      }\n    }\n    return guesses;\n  },\n  dictionary_guesses: function(match) {\n    var reversed_variations;\n    match.base_guesses = match.rank;\n    match.uppercase_variations = this.uppercase_variations(match);\n    match.l33t_variations = this.l33t_variations(match);\n    reversed_variations = match.reversed && 2 || 1;\n    return match.base_guesses * match.uppercase_variations * match.l33t_variations * reversed_variations;\n  },\n  START_UPPER: /^[A-Z][^A-Z]+$/,\n  END_UPPER: /^[^A-Z]+[A-Z]$/,\n  ALL_UPPER: /^[^a-z]+$/,\n  ALL_LOWER: /^[^A-Z]+$/,\n  uppercase_variations: function(match) {\n    var L, U, chr, i, len, o, q, ref, ref1, regex, variations, word;\n    word = match.token;\n    if (word.match(this.ALL_LOWER) || word.toLowerCase() === word) {\n      return 1;\n    }\n    ref = [this.START_UPPER, this.END_UPPER, this.ALL_UPPER];\n    for (o = 0, len = ref.length; o < len; o++) {\n      regex = ref[o];\n      if (word.match(regex)) {\n        return 2;\n      }\n    }\n    U = ((function() {\n      var len1, q, ref1, results;\n      ref1 = word.split('');\n      results = [];\n      for (q = 0, len1 = ref1.length; q < len1; q++) {\n        chr = ref1[q];\n        if (chr.match(/[A-Z]/)) {\n          results.push(chr);\n        }\n      }\n      return results;\n    })()).length;\n    L = ((function() {\n      var len1, q, ref1, results;\n      ref1 = word.split('');\n      results = [];\n      for (q = 0, len1 = ref1.length; q < len1; q++) {\n        chr = ref1[q];\n        if (chr.match(/[a-z]/)) {\n          results.push(chr);\n        }\n      }\n      return results;\n    })()).length;\n    variations = 0;\n    for (i = q = 1, ref1 = Math.min(U, L); 1 <= ref1 ? q <= ref1 : q >= ref1; i = 1 <= ref1 ? ++q : --q) {\n      variations += this.nCk(U + L, i);\n    }\n    return variations;\n  },\n  l33t_variations: function(match) {\n    var S, U, chr, chrs, i, o, p, possibilities, ref, ref1, subbed, unsubbed, variations;\n    if (!match.l33t) {\n      return 1;\n    }\n    variations = 1;\n    ref = match.sub;\n    for (subbed in ref) {\n      unsubbed = ref[subbed];\n      chrs = match.token.toLowerCase().split('');\n      S = ((function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = chrs.length; o < len; o++) {\n          chr = chrs[o];\n          if (chr === subbed) {\n            results.push(chr);\n          }\n        }\n        return results;\n      })()).length;\n      U = ((function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = chrs.length; o < len; o++) {\n          chr = chrs[o];\n          if (chr === unsubbed) {\n            results.push(chr);\n          }\n        }\n        return results;\n      })()).length;\n      if (S === 0 || U === 0) {\n        variations *= 2;\n      } else {\n        p = Math.min(U, S);\n        possibilities = 0;\n        for (i = o = 1, ref1 = p; 1 <= ref1 ? o <= ref1 : o >= ref1; i = 1 <= ref1 ? ++o : --o) {\n          possibilities += this.nCk(U + S, i);\n        }\n        variations *= possibilities;\n      }\n    }\n    return variations;\n  }\n};\n\nmodule.exports = scoring;\n\n//# sourceMappingURL=scoring.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/node_modules/@contentpass/zxcvbn/lib/scoring.js\n");

/***/ }),

/***/ "../../components/node_modules/@contentpass/zxcvbn/lib/time_estimates.js":
/*!*******************************************************************************!*\
  !*** ../../components/node_modules/@contentpass/zxcvbn/lib/time_estimates.js ***!
  \*******************************************************************************/
/***/ ((module) => {

eval("// Generated by CoffeeScript 1.12.7\nvar time_estimates;\n\ntime_estimates = {\n  estimate_attack_times: function(guesses) {\n    var crack_times_display, crack_times_seconds, scenario, seconds;\n    crack_times_seconds = {\n      online_throttling_100_per_hour: guesses / (100 / 3600),\n      online_no_throttling_10_per_second: guesses / 10,\n      offline_slow_hashing_1e4_per_second: guesses / 1e4,\n      offline_fast_hashing_1e10_per_second: guesses / 1e10\n    };\n    crack_times_display = {};\n    for (scenario in crack_times_seconds) {\n      seconds = crack_times_seconds[scenario];\n      crack_times_display[scenario] = this.display_time(seconds);\n    }\n    return {\n      crack_times_seconds: crack_times_seconds,\n      crack_times_display: crack_times_display,\n      score: this.guesses_to_score(guesses)\n    };\n  },\n  guesses_to_score: function(guesses) {\n    var DELTA;\n    DELTA = 5;\n    if (guesses < 1e3 + DELTA) {\n      return 0;\n    } else if (guesses < 1e6 + DELTA) {\n      return 1;\n    } else if (guesses < 1e8 + DELTA) {\n      return 2;\n    } else if (guesses < 1e10 + DELTA) {\n      return 3;\n    } else {\n      return 4;\n    }\n  },\n  display_time: function(seconds) {\n    var base, century, day, display_num, display_str, hour, minute, month, ref, year;\n    minute = 60;\n    hour = minute * 60;\n    day = hour * 24;\n    month = day * 31;\n    year = month * 12;\n    century = year * 100;\n    ref = seconds < 1 ? [null, 'less than a second'] : seconds < minute ? (base = Math.round(seconds), [base, base + \" second\"]) : seconds < hour ? (base = Math.round(seconds / minute), [base, base + \" minute\"]) : seconds < day ? (base = Math.round(seconds / hour), [base, base + \" hour\"]) : seconds < month ? (base = Math.round(seconds / day), [base, base + \" day\"]) : seconds < year ? (base = Math.round(seconds / month), [base, base + \" month\"]) : seconds < century ? (base = Math.round(seconds / year), [base, base + \" year\"]) : [null, 'centuries'], display_num = ref[0], display_str = ref[1];\n    if ((display_num != null) && display_num !== 1) {\n      display_str += 's';\n    }\n    return display_str;\n  }\n};\n\nmodule.exports = time_estimates;\n\n//# sourceMappingURL=time_estimates.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQGNvbnRlbnRwYXNzL3p4Y3Zibi9saWIvdGltZV9lc3RpbWF0ZXMuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL0Bjb250ZW50cGFzcy96eGN2Ym4vbGliL3RpbWVfZXN0aW1hdGVzLmpzPzM5ZGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbnZhciB0aW1lX2VzdGltYXRlcztcblxudGltZV9lc3RpbWF0ZXMgPSB7XG4gIGVzdGltYXRlX2F0dGFja190aW1lczogZnVuY3Rpb24oZ3Vlc3Nlcykge1xuICAgIHZhciBjcmFja190aW1lc19kaXNwbGF5LCBjcmFja190aW1lc19zZWNvbmRzLCBzY2VuYXJpbywgc2Vjb25kcztcbiAgICBjcmFja190aW1lc19zZWNvbmRzID0ge1xuICAgICAgb25saW5lX3Rocm90dGxpbmdfMTAwX3Blcl9ob3VyOiBndWVzc2VzIC8gKDEwMCAvIDM2MDApLFxuICAgICAgb25saW5lX25vX3Rocm90dGxpbmdfMTBfcGVyX3NlY29uZDogZ3Vlc3NlcyAvIDEwLFxuICAgICAgb2ZmbGluZV9zbG93X2hhc2hpbmdfMWU0X3Blcl9zZWNvbmQ6IGd1ZXNzZXMgLyAxZTQsXG4gICAgICBvZmZsaW5lX2Zhc3RfaGFzaGluZ18xZTEwX3Blcl9zZWNvbmQ6IGd1ZXNzZXMgLyAxZTEwXG4gICAgfTtcbiAgICBjcmFja190aW1lc19kaXNwbGF5ID0ge307XG4gICAgZm9yIChzY2VuYXJpbyBpbiBjcmFja190aW1lc19zZWNvbmRzKSB7XG4gICAgICBzZWNvbmRzID0gY3JhY2tfdGltZXNfc2Vjb25kc1tzY2VuYXJpb107XG4gICAgICBjcmFja190aW1lc19kaXNwbGF5W3NjZW5hcmlvXSA9IHRoaXMuZGlzcGxheV90aW1lKHNlY29uZHMpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY3JhY2tfdGltZXNfc2Vjb25kczogY3JhY2tfdGltZXNfc2Vjb25kcyxcbiAgICAgIGNyYWNrX3RpbWVzX2Rpc3BsYXk6IGNyYWNrX3RpbWVzX2Rpc3BsYXksXG4gICAgICBzY29yZTogdGhpcy5ndWVzc2VzX3RvX3Njb3JlKGd1ZXNzZXMpXG4gICAgfTtcbiAgfSxcbiAgZ3Vlc3Nlc190b19zY29yZTogZnVuY3Rpb24oZ3Vlc3Nlcykge1xuICAgIHZhciBERUxUQTtcbiAgICBERUxUQSA9IDU7XG4gICAgaWYgKGd1ZXNzZXMgPCAxZTMgKyBERUxUQSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIGlmIChndWVzc2VzIDwgMWU2ICsgREVMVEEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZ3Vlc3NlcyA8IDFlOCArIERFTFRBKSB7XG4gICAgICByZXR1cm4gMjtcbiAgICB9IGVsc2UgaWYgKGd1ZXNzZXMgPCAxZTEwICsgREVMVEEpIHtcbiAgICAgIHJldHVybiAzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gNDtcbiAgICB9XG4gIH0sXG4gIGRpc3BsYXlfdGltZTogZnVuY3Rpb24oc2Vjb25kcykge1xuICAgIHZhciBiYXNlLCBjZW50dXJ5LCBkYXksIGRpc3BsYXlfbnVtLCBkaXNwbGF5X3N0ciwgaG91ciwgbWludXRlLCBtb250aCwgcmVmLCB5ZWFyO1xuICAgIG1pbnV0ZSA9IDYwO1xuICAgIGhvdXIgPSBtaW51dGUgKiA2MDtcbiAgICBkYXkgPSBob3VyICogMjQ7XG4gICAgbW9udGggPSBkYXkgKiAzMTtcbiAgICB5ZWFyID0gbW9udGggKiAxMjtcbiAgICBjZW50dXJ5ID0geWVhciAqIDEwMDtcbiAgICByZWYgPSBzZWNvbmRzIDwgMSA/IFtudWxsLCAnbGVzcyB0aGFuIGEgc2Vjb25kJ10gOiBzZWNvbmRzIDwgbWludXRlID8gKGJhc2UgPSBNYXRoLnJvdW5kKHNlY29uZHMpLCBbYmFzZSwgYmFzZSArIFwiIHNlY29uZFwiXSkgOiBzZWNvbmRzIDwgaG91ciA/IChiYXNlID0gTWF0aC5yb3VuZChzZWNvbmRzIC8gbWludXRlKSwgW2Jhc2UsIGJhc2UgKyBcIiBtaW51dGVcIl0pIDogc2Vjb25kcyA8IGRheSA/IChiYXNlID0gTWF0aC5yb3VuZChzZWNvbmRzIC8gaG91ciksIFtiYXNlLCBiYXNlICsgXCIgaG91clwiXSkgOiBzZWNvbmRzIDwgbW9udGggPyAoYmFzZSA9IE1hdGgucm91bmQoc2Vjb25kcyAvIGRheSksIFtiYXNlLCBiYXNlICsgXCIgZGF5XCJdKSA6IHNlY29uZHMgPCB5ZWFyID8gKGJhc2UgPSBNYXRoLnJvdW5kKHNlY29uZHMgLyBtb250aCksIFtiYXNlLCBiYXNlICsgXCIgbW9udGhcIl0pIDogc2Vjb25kcyA8IGNlbnR1cnkgPyAoYmFzZSA9IE1hdGgucm91bmQoc2Vjb25kcyAvIHllYXIpLCBbYmFzZSwgYmFzZSArIFwiIHllYXJcIl0pIDogW251bGwsICdjZW50dXJpZXMnXSwgZGlzcGxheV9udW0gPSByZWZbMF0sIGRpc3BsYXlfc3RyID0gcmVmWzFdO1xuICAgIGlmICgoZGlzcGxheV9udW0gIT0gbnVsbCkgJiYgZGlzcGxheV9udW0gIT09IDEpIHtcbiAgICAgIGRpc3BsYXlfc3RyICs9ICdzJztcbiAgICB9XG4gICAgcmV0dXJuIGRpc3BsYXlfc3RyO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRpbWVfZXN0aW1hdGVzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lX2VzdGltYXRlcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../components/node_modules/@contentpass/zxcvbn/lib/time_estimates.js\n");

/***/ })

}]);