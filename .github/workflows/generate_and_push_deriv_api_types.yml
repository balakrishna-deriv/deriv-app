name: Generate and push @deriv/api-types
on:
  workflow_dispatch:
  schedule:
    - cron: "30 * * * *"

jobs:
  generate_and_push_deriv_api_types:
    runs-on: "ubuntu-latest"
    steps:
      - name: Bump version and create PR
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: master
        id: step4
        run: |
          if [ true = true ]
          then
            # Sleep to make sure the package is available on NPM.
            sleep 30s

            new_version=$(npm show @deriv/api-types version)

            # Make a shallow clone of the project
            #git clone "git@github.com:binary-com/deriv-app.git" --depth 1

            # lerna: To allow us to bootstrap the project.
            # json: To manually edit the target package's package.json
            npm i -g lerna@latest json@latest

            cd deriv-app

            package_name="@deriv/api-types"
            old_version=$(json -f packages/appstore/package.json -a dependencies."$package_name")
            safe_old_version=$(echo $old_version | sed 's/[^a-zA-Z0-9.]//g')

            git checkout -b "$package_name"

            # "Manually" bump the version in package.json to accommodate 
            # Lerna's flexibility (or its lack thereof).
            json -I -f packages/appstore/package.json -e "this.dependencies[\"$package_name\"]=\"$new_version\"" -o json-4
            json -I -f packages/trader/package.json -e "this.dependencies[\"$package_name\"]=\"$new_version\"" -o json-4

            # We have to run "lerna bootstrap --no-ci" to generate a new 
            # package-lock.json ("npm run bootstrap" requires this).
            lerna bootstrap --no-ci
            npm run bootstrap

            # Identify with Git, these values come from the shared Deriv FE account. https://github.com/DerivFE
            git config --global user.name "DerivFE"
            git config --global user.email "80095553+DerivFE@users.noreply.github.com"

            # Commit the files + add a message
            git commit -a -m "feat: bump $package_name from $safe_old_version to $new_version"

            # Force push to this branch in case a previous run created it.
            git push --set-upstream origin "$package_name" -f

            # Get the diff and use this as the PRs body.
            pr_body=$(curl "https://diff.intrinsic.com/$package_name/$safe_old_version/$new_version.diff")

            # Use "gh" to create a PR from the CLI.
            sudo apt install gh
            gh auth login --with-token <<< ${{ secrets.PERSONAL_ACCESS_TOKEN }}
            gh pr close "$package_name" || true
            gh pr create --title "Bump $package_name from $safe_old_version to $new_version" --body "\`\`\`diff $pr_body \`\`\`" --base "master" --head "binary-com:$package_name"
          fi
