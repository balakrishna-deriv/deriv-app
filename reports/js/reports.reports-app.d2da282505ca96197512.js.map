{"version":3,"file":"reports/js/reports.reports-app.d2da282505ca96197512.js","mappings":"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","sources":["webpack://@deriv/reports/./src/Stores/Modules/Profit/Helpers/format-request.js","webpack://@deriv/reports/./src/Stores/base-store.js","webpack://@deriv/reports/./src/Stores/Modules/Profit/profit-store.js","webpack://@deriv/reports/./src/Stores/Modules/Profit/Helpers/format-response.js","webpack://@deriv/reports/./src/Stores/Modules/Statement/Helpers/format-response.js","webpack://@deriv/reports/./src/Stores/Modules/Statement/statement-store.js","webpack://@deriv/reports/./src/Stores/useReportsStores.tsx","webpack://@deriv/reports/./src/Constants/routes-config.tsx","webpack://@deriv/reports/./src/Components/Routes/route-with-sub-routes.tsx","webpack://@deriv/reports/./src/Components/Routes/binary-routes.tsx","webpack://@deriv/reports/./src/Components/Routes/index.ts","webpack://@deriv/reports/./src/Components/Errors/error-component.tsx","webpack://@deriv/reports/./src/Components/Errors/index.ts","webpack://@deriv/reports/./src/Containers/routes.tsx","webpack://@deriv/reports/./src/reports-providers.tsx","webpack://@deriv/reports/./src/app.tsx","webpack://@deriv/reports/../stores/src/storeContext.ts","webpack://@deriv/reports/../api/src/APIContext.ts","webpack://@deriv/reports/../api/src/useAPI.ts","webpack://@deriv/reports/../api/src/APIProvider.tsx","webpack://@deriv/reports/../api/src/useSubscription.ts","webpack://@deriv/reports/../stores/src/useStore.ts","webpack://@deriv/reports/../stores/src/providers/ExchangeRatesProvider.tsx","webpack://@deriv/reports/../stores/src/stores/BaseStore.ts","webpack://@deriv/reports/../stores/src/stores/ExchangeRatesStore.ts","webpack://@deriv/reports/../stores/src/stores/FeatureFlagsStore.ts","webpack://@deriv/reports/../stores/src/storeProvider.tsx"],"sourcesContent":["import { epochToMoment, toMoment } from '@deriv/shared';\n\nconst getDateTo = (partial_fetch_time, date_to) => {\n    const today = toMoment().startOf('day').unix();\n    if (date_to && today > date_to) {\n        return date_to;\n    } else if (partial_fetch_time) {\n        return epochToMoment(today).add(1, 'd').subtract(1, 's').unix();\n    }\n    return epochToMoment(today).add(1, 'd').subtract(1, 's').unix();\n};\n\nconst getDateFrom = (should_load_partially, partial_fetch_time, date_from, date_to) => {\n    const today = toMoment().startOf('day').unix();\n    if (today > date_to) {\n        return date_from;\n    }\n    return should_load_partially && partial_fetch_time ? partial_fetch_time : date_from;\n};\n\nconst shouldSendDateFrom = (date_from, should_load_partially, partial_fetch_time, date_to) => {\n    const today = toMoment().startOf('day').unix();\n    if (today > date_to) {\n        return !!date_from || should_load_partially;\n    }\n    return should_load_partially ? partial_fetch_time || date_from : !!date_from || false;\n};\n\nconst getDateBoundaries = (date_from, date_to, partial_fetch_time, should_load_partially = false) => ({\n    // eslint-disable-next-line max-len\n    ...(shouldSendDateFrom(date_from, should_load_partially, partial_fetch_time, date_to) && {\n        date_from: getDateFrom(should_load_partially, partial_fetch_time, date_from, date_to),\n    }),\n    ...((date_to || should_load_partially) && { date_to: getDateTo(partial_fetch_time, date_to) }),\n});\n\nexport default getDateBoundaries;\n","import { action, intercept, makeObservable, observable, reaction, toJS, when } from 'mobx';\n\nimport { isEmptyObject, isProduction, Validator } from '@deriv/shared';\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n\n    validation_errors = {};\n\n    validation_rules = {};\n\n    preSwitchAccountDisposer = null;\n    pre_switch_account_listener = null;\n\n    switchAccountDisposer = null;\n    switch_account_listener = null;\n\n    logoutDisposer = null;\n    logout_listener = null;\n\n    clientInitDisposer = null;\n    client_init_listener = null;\n\n    networkStatusChangeDisposer = null;\n    network_status_change_listener = null;\n\n    themeChangeDisposer = null;\n    theme_change_listener = null;\n\n    realAccountSignupEndedDisposer = null;\n    real_account_signup_ended_listener = null;\n\n    partial_fetch_time = 0;\n\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {}) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage =\n            (local_storage_properties && local_storage_properties.length) ||\n            (session_storage_properties && session_storage_properties.length);\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties) {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties && properties.length) {\n            snapshot = properties.reduce((result, p) => Object.assign(result, { [p]: snapshot[p] }), {});\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties, storage) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n        const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName, messages) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules = {}) {\n        Object.keys(rules).forEach(key => {\n            this.addRule(key, rules[key]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule(property, rules) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty(property, value) {\n        const trigger = this.validation_rules[property].trigger;\n        const inputs = { [property]: value !== undefined ? value : this[property] };\n        const validation_rules = { [property]: this.validation_rules[property].rules || [] };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n        }\n\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener) {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener) {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener) {\n        this.logoutDisposer = when(\n            () => this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener) {\n        this.clientInitDisposer = when(\n            () => this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener) {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener) {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener) {\n        this.realAccountSignupEndedDisposer = when(\n            () => this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid, ...reactions) {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = false;\n        }\n    }\n}\n","import debounce from 'lodash.debounce';\nimport { action, computed, observable, makeObservable, override } from 'mobx';\nimport { filterDisabledPositions, toMoment, WS } from '@deriv/shared';\n\nimport getDateBoundaries from './Helpers/format-request';\nimport { formatProfitTableTransactions } from './Helpers/format-response';\nimport BaseStore from '../../base-store';\n\nconst batch_size = 50;\nconst delay_on_scroll_time = 150;\n\nexport default class ProfitTableStore extends BaseStore {\n    data = [];\n    date_from = null;\n    date_to = toMoment().startOf('day').add(1, 'd').subtract(1, 's').unix();\n    error = '';\n    has_loaded_all = false;\n    is_loading = false;\n    filtered_date_range;\n\n    // `client_loginid` is only used to detect if this is in sync with the client-store, don't rely on\n    // this for calculations. Use the client.currency instead.\n    client_loginid = '';\n\n    constructor({ root_store }) {\n        // TODO: [mobx-undecorate] verify the constructor arguments and the arguments of this automatically generated super call\n        super({ root_store });\n\n        makeObservable(this, {\n            data: observable,\n            date_from: observable,\n            date_to: observable,\n            error: observable,\n            has_loaded_all: observable,\n            is_loading: observable,\n            filtered_date_range: observable,\n            client_loginid: observable,\n            total_profit: computed,\n            is_empty: computed,\n            has_selected_date: computed,\n            fetchNextBatch: action.bound,\n            profitTableResponseHandler: action.bound,\n            handleScroll: action.bound,\n            networkStatusChangeListener: action.bound,\n            onMount: action.bound,\n            onUnmount: override,\n            totals: computed,\n            accountSwitcherListener: action.bound,\n            clearTable: action.bound,\n            clearDateFilter: action.bound,\n            handleDateChange: action.bound,\n        });\n    }\n\n    get total_profit() {\n        return this.data.reduce((previous, current) => {\n            const buy_price = Number(parseFloat(current.buy_price));\n            const sell_price = Number(parseFloat(current.sell_price));\n            const pl = sell_price - buy_price;\n            return previous + pl;\n        }, 0);\n    }\n\n    get is_empty() {\n        return !this.is_loading && this.data.length === 0;\n    }\n\n    get has_selected_date() {\n        return !!(this.date_from || this.date_to);\n    }\n\n    shouldFetchNextBatch() {\n        if (this.has_loaded_all || this.is_loading) return false;\n        return true;\n    }\n\n    async fetchNextBatch() {\n        if (!this.shouldFetchNextBatch()) return;\n        this.is_loading = true;\n\n        const response = await WS.profitTable(\n            batch_size,\n            this.data.length,\n            getDateBoundaries(this.date_from, this.date_to, 0, false)\n        );\n\n        this.profitTableResponseHandler(response);\n    }\n\n    profitTableResponseHandler(response) {\n        if ('error' in response) {\n            this.error = response.error.message;\n            return;\n        }\n\n        const formatted_transactions = response.profit_table.transactions\n            .map(transaction =>\n                formatProfitTableTransactions(\n                    transaction,\n                    this.root_store.client.currency,\n                    this.root_store.active_symbols.active_symbols\n                )\n            )\n            .filter(filterDisabledPositions);\n\n        this.data = [...this.data, ...formatted_transactions];\n        this.has_loaded_all = formatted_transactions.length < batch_size;\n        this.is_loading = false;\n    }\n\n    fetchOnScroll = debounce(left => {\n        if (left < 1500) {\n            this.fetchNextBatch();\n        }\n    }, delay_on_scroll_time);\n\n    handleScroll(event) {\n        const { scrollTop, scrollHeight, clientHeight } = event.target;\n        const left_to_scroll = scrollHeight - (scrollTop + clientHeight);\n        this.fetchOnScroll(left_to_scroll);\n    }\n\n    networkStatusChangeListener(is_online) {\n        this.is_loading = !is_online;\n    }\n\n    async onMount() {\n        this.assertHasValidCache(this.client_loginid, this.clearDateFilter, WS.forgetAll.bind(null, 'proposal'));\n        this.client_loginid = this.root_store.client.loginid;\n        this.onSwitchAccount(this.accountSwitcherListener);\n        this.onNetworkStatusChange(this.networkStatusChangeListener);\n        await WS.wait('authorize');\n\n        /* Caching won't work for profit_table because date filtering happens based on `buy_time` of a contract.\n        If we already have a cache for a period and if we sell a contract that was purchased in that period\n        then the sold contract won't be there in profit_table when visited again unless we fetch it again.\n        Caching will only work if the date filtering happens based on `sell_time` of a contract in BE. */\n        this.clearTable();\n        this.fetchNextBatch();\n    }\n\n    /* DO NOT call clearDateFilter() upon unmounting the component, date filters should stay\n    as we change tab or click on any contract for later references as discussed with UI/UX and QA */\n    onUnmount() {\n        this.disposeSwitchAccount();\n        WS.forgetAll('proposal');\n    }\n\n    get totals() {\n        let profit_loss = 0;\n\n        this.data.forEach(transaction => {\n            profit_loss += parseFloat(transaction.profit_loss.replace(/,/g, ''));\n        });\n        return {\n            profit_loss: profit_loss.toString(),\n        };\n    }\n\n    accountSwitcherListener() {\n        return new Promise(resolve => {\n            this.clearTable();\n            this.clearDateFilter();\n            return resolve(this.fetchNextBatch());\n        });\n    }\n\n    clearTable() {\n        this.data = [];\n        this.has_loaded_all = false;\n        this.is_loading = false;\n    }\n\n    clearDateFilter() {\n        this.date_from = null;\n        this.date_to = toMoment().startOf('day').add(1, 'd').subtract(1, 's').unix();\n    }\n\n    handleDateChange(date_values, { date_range } = {}) {\n        const { from, to, is_batch } = date_values;\n\n        this.filtered_date_range = date_range;\n\n        if (from) {\n            this.date_from = toMoment(from).unix();\n        } else if (is_batch) {\n            this.date_from = null;\n        }\n\n        if (to) this.date_to = toMoment(to).unix();\n\n        this.clearTable();\n        this.fetchNextBatch();\n    }\n}\n","import { formatMoney, toMoment, getSymbolDisplayName, getMarketInformation } from '@deriv/shared';\n\nexport const formatProfitTableTransactions = (transaction, currency, active_symbols = []) => {\n    const format_string = 'DD MMM YYYY HH:mm:ss';\n    const purchase_time = `${toMoment(+transaction.purchase_time).format(format_string)}`;\n    const purchase_time_unix = transaction.purchase_time;\n    const sell_time = `${toMoment(+transaction.sell_time).format(format_string)}`;\n    const payout = parseFloat(transaction.payout);\n    const sell_price = parseFloat(transaction.sell_price);\n    const buy_price = parseFloat(transaction.buy_price);\n    const profit_loss = formatMoney(currency, Number(sell_price - buy_price), true);\n    const display_name = getSymbolDisplayName(active_symbols, getMarketInformation(transaction.shortcode).underlying);\n\n    return {\n        ...transaction,\n        ...{\n            payout,\n            sell_price,\n            buy_price,\n            profit_loss,\n            sell_time,\n            purchase_time,\n            display_name,\n            purchase_time_unix,\n        },\n    };\n};\n","import { formatMoney, toTitleCase, toMoment, getMarketInformation, getSymbolDisplayName } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nexport const formatStatementTransaction = (transaction, currency, active_symbols = []) => {\n    const format_string = 'DD MMM YYYY HH:mm:ss';\n    const transaction_time = toMoment(transaction.transaction_time).format(format_string);\n    const payout = parseFloat(transaction.payout);\n    const amount = parseFloat(transaction.amount);\n    const balance = parseFloat(transaction.balance_after);\n    const should_exclude_currency = true;\n    const shortcode = ['buy', 'sell'].includes(transaction.action_type) ? transaction.shortcode : null;\n    const display_name = shortcode\n        ? getSymbolDisplayName(active_symbols, getMarketInformation(shortcode).underlying)\n        : '';\n\n    return {\n        action: localize(toTitleCase(transaction.action_type) /* localize-ignore */), // handled in static_strings_app.js: 'Buy', 'Sell', 'Deposit', 'Withdrawal'\n        date: transaction_time,\n        display_name,\n        refid: transaction.transaction_id,\n        payout: isNaN(payout) ? '-' : formatMoney(currency, payout, should_exclude_currency),\n        amount: isNaN(amount) ? '-' : formatMoney(currency, amount, should_exclude_currency),\n        balance: isNaN(balance) ? '-' : formatMoney(currency, balance, should_exclude_currency),\n        desc: transaction.longcode.replace(/\\n/g, '<br />'),\n        id: transaction.contract_id,\n        app_id: transaction.app_id,\n        shortcode,\n        action_type: transaction.action_type,\n        purchase_time: transaction.purchase_time,\n        transaction_time: transaction.transaction_time,\n        ...(transaction.withdrawal_details && {\n            withdrawal_details: transaction.withdrawal_details,\n            longcode: transaction.longcode,\n        }),\n    };\n};\n","import debounce from 'lodash.debounce';\nimport { action, computed, observable, runInAction, makeObservable, override } from 'mobx';\nimport { filterDisabledPositions, toMoment, WS } from '@deriv/shared';\n\nimport { formatStatementTransaction } from './Helpers/format-response';\nimport getDateBoundaries from '../Profit/Helpers/format-request';\nimport BaseStore from '../../base-store';\n\nconst batch_size = 100; // request response limit\nconst delay_on_scroll_time = 150; // fetch debounce delay on scroll\n\nexport default class StatementStore extends BaseStore {\n    data = [];\n    is_loading = false;\n    has_loaded_all = false;\n    date_from = null;\n    date_to = toMoment().startOf('day').add(1, 'd').subtract(1, 's').unix();\n    error = '';\n    action_type = 'all';\n    filtered_date_range;\n\n    // `client_loginid` is only used to detect if this is in sync with the client-store, don't rely on\n    // this for calculations. Use the client.currency instead.\n    client_loginid = '';\n\n    account_statistics = {};\n\n    constructor({ root_store }) {\n        // TODO: [mobx-undecorate] verify the constructor arguments and the arguments of this automatically generated super call\n        super({ root_store });\n\n        makeObservable(this, {\n            data: observable,\n            is_loading: observable,\n            has_loaded_all: observable,\n            date_from: observable,\n            date_to: observable,\n            error: observable,\n            action_type: observable,\n            filtered_date_range: observable,\n            client_loginid: observable,\n            account_statistics: observable,\n            is_empty: computed,\n            has_selected_date: computed,\n            clearTable: action.bound,\n            clearDateFilter: action.bound,\n            fetchNextBatch: action.bound,\n            statementHandler: action.bound,\n            handleDateChange: action.bound,\n            handleFilterChange: action.bound,\n            handleScroll: action.bound,\n            loadAccountStatistics: action.bound,\n            accountSwitcherListener: action.bound,\n            networkStatusChangeListener: action.bound,\n            onMount: action.bound,\n            onUnmount: override,\n        });\n    }\n\n    get is_empty() {\n        return !this.is_loading && this.data.length === 0;\n    }\n\n    get has_selected_date() {\n        return !!(this.date_from || this.date_to);\n    }\n\n    clearTable() {\n        this.data = [];\n        this.has_loaded_all = false;\n        this.is_loading = false;\n    }\n\n    clearDateFilter() {\n        this.date_from = null;\n        this.date_to = toMoment().startOf('day').add(1, 'd').subtract(1, 's').unix();\n        this.partial_fetch_time = 0;\n    }\n\n    shouldFetchNextBatch(should_load_partially) {\n        if (!should_load_partially && (this.has_loaded_all || this.is_loading)) return false;\n        const today = toMoment().startOf('day').add(1, 'd').subtract(1, 's').unix();\n        if (this.date_to < today) return !should_load_partially && this.partial_fetch_time;\n        return true;\n    }\n\n    async fetchNextBatch(should_load_partially = false) {\n        if (!this.shouldFetchNextBatch(should_load_partially)) return;\n        this.is_loading = true;\n\n        const optional_arguments = getDateBoundaries(\n            this.date_from,\n            this.date_to,\n            this.partial_fetch_time,\n            should_load_partially\n        );\n\n        if (this.action_type !== 'all') {\n            optional_arguments.action_type = this.action_type;\n        }\n\n        const response = await WS.statement(\n            batch_size,\n            !should_load_partially ? this.data.length : undefined,\n            optional_arguments\n        );\n        this.statementHandler(response, should_load_partially);\n    }\n\n    statementHandler(response, should_load_partially) {\n        if ('error' in response) {\n            this.error = response.error.message;\n            return;\n        }\n\n        const formatted_transactions = response.statement.transactions\n            .map(transaction =>\n                formatStatementTransaction(\n                    transaction,\n                    this.root_store.client.currency,\n                    this.root_store.active_symbols.active_symbols\n                )\n            )\n            .filter(filterDisabledPositions);\n\n        if (should_load_partially) {\n            this.data = [...formatted_transactions, ...this.data];\n        } else {\n            this.data = [...this.data, ...formatted_transactions];\n        }\n        this.has_loaded_all = !should_load_partially && formatted_transactions.length < batch_size;\n        this.is_loading = false;\n        if (formatted_transactions.length > 0) {\n            this.partial_fetch_time = toMoment().unix();\n        }\n    }\n\n    handleDateChange(date_values, { date_range } = {}) {\n        const { from, to, is_batch } = date_values;\n\n        this.filtered_date_range = date_range;\n\n        if (from) {\n            this.date_from = toMoment(from).unix();\n        } else if (is_batch) {\n            this.date_from = null;\n        }\n\n        if (to) this.date_to = toMoment(to).unix();\n\n        this.clearTable();\n        this.fetchNextBatch();\n    }\n\n    handleFilterChange(filterValue = {}) {\n        this.action_type = filterValue;\n        this.clearTable();\n        this.fetchNextBatch();\n    }\n\n    fetchOnScroll = debounce(left => {\n        if (left < 1500) {\n            this.fetchNextBatch();\n        }\n    }, delay_on_scroll_time);\n\n    handleScroll(event) {\n        const { scrollTop, scrollHeight, clientHeight } = event.target;\n        const left_to_scroll = scrollHeight - (scrollTop + clientHeight);\n\n        this.fetchOnScroll(left_to_scroll);\n    }\n\n    async loadAccountStatistics() {\n        this.account_statistics = {};\n        const { client } = this.root_store;\n        const is_mx_mlt = client.standpoint.iom || client.standpoint.malta;\n        if (is_mx_mlt) {\n            const response_account_statistics = await WS.accountStatistics();\n            runInAction(() => {\n                if (response_account_statistics.error) {\n                    this.account_statistics = {};\n                    return;\n                }\n\n                this.account_statistics = response_account_statistics.account_statistics;\n            });\n        }\n    }\n\n    accountSwitcherListener() {\n        return new Promise(resolve => {\n            this.clearTable();\n            this.clearDateFilter();\n            this.loadAccountStatistics();\n            return resolve(this.fetchNextBatch());\n        });\n    }\n\n    networkStatusChangeListener(is_online) {\n        this.is_loading = !is_online;\n    }\n\n    async onMount() {\n        this.assertHasValidCache(\n            this.client_loginid,\n            this.clearDateFilter,\n            this.clearTable,\n            WS.forgetAll.bind(null, 'proposal')\n        );\n        this.client_loginid = this.root_store.client.loginid;\n        this.onSwitchAccount(this.accountSwitcherListener);\n        this.onNetworkStatusChange(this.networkStatusChangeListener);\n        await WS.wait('authorize');\n        this.fetchNextBatch(true);\n        this.loadAccountStatistics();\n    }\n\n    /* DO NOT call clearDateFilter() upon unmounting the component, date filters should stay\n    as we change tab or click on any contract for later references as discussed with UI/UX and QA */\n    onUnmount() {\n        this.disposeSwitchAccount();\n        WS.forgetAll('proposal');\n    }\n}\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport ProfitStores from './Modules/Profit/profit-store';\nimport StatementStores from './Modules/Statement/statement-store';\n\ntype TOverrideProfitStore = Omit<ProfitStores, 'data' | 'date_from' | 'totals'> & {\n    date_from: number;\n    data: { [key: string]: string }[];\n    totals: { [key: string]: unknown };\n};\n\ntype TOverrideStatementStore = Omit<\n    StatementStores,\n    | 'account_statistics'\n    | 'action_type'\n    | 'data'\n    | 'date_from'\n    | 'date_to'\n    | 'filtered_date_range'\n    | 'handleDateChange'\n    | 'handleFilterChange'\n    | 'handleScroll'\n    | 'suffix_icon'\n> & {\n    account_statistics: { total_deposits: number; total_withdrawals: number };\n    action_type: string;\n    data: { [key: string]: string }[];\n    date_from: number;\n    date_to: number;\n    filtered_date_range: {\n        duration: number;\n        label: string;\n        onClick?: () => void;\n        value?: string;\n    };\n    handleDateChange: () => void;\n    handleFilterChange: () => void;\n    handleScroll: React.UIEventHandler<HTMLDivElement>;\n    suffix_icon: string;\n};\n\ntype TReportsStore = {\n    profit_table: TOverrideProfitStore;\n    statement: TOverrideStatementStore;\n};\n\nconst ReportsStoreContext = React.createContext<TReportsStore | null>(null);\n\nexport const ReportsStoreProvider = ({ children }: React.PropsWithChildren<unknown>) => {\n    const root_store = useStore();\n    const memoizedValue = React.useMemo(() => {\n        return {\n            profit_table: new ProfitStores({ root_store }),\n            statement: new StatementStores({ root_store }),\n        } as unknown as TReportsStore;\n    }, [root_store]);\n\n    return <ReportsStoreContext.Provider value={memoizedValue}>{children}</ReportsStoreContext.Provider>;\n};\n\nexport const useReportsStore = () => {\n    const store = React.useContext(ReportsStoreContext);\n\n    if (!store) {\n        throw new Error('useReportsStore must be used within ReportsStoreProvider');\n    }\n\n    return store;\n};\n","import React from 'react';\nimport { routes, makeLazyLoader, moduleLoader } from '@deriv/shared';\nimport { Loading } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport type { TRoute, TRouteConfig } from 'Types';\n\nconst Page404 = React.lazy(() => import(/* webpackChunkName: \"404\" */ 'Modules/Page404'));\n\nconst lazyLoadReportComponent = makeLazyLoader(\n    () => moduleLoader(() => import(/* webpackChunkName: \"reports-routes\" */ '../Containers')),\n    () => <Loading />\n);\n\n// Order matters\nconst initRoutesConfig = (): TRouteConfig[] => {\n    return [\n        {\n            path: routes.reports,\n            component: lazyLoadReportComponent('Reports'),\n            is_authenticated: true,\n            getTitle: () => localize('Reports'),\n            icon_component: 'IcReports',\n            routes: [\n                {\n                    path: routes.positions,\n                    component: lazyLoadReportComponent('OpenPositions'),\n                    getTitle: () => localize('Open positions'),\n                    icon_component: 'IcOpenPositions',\n                    default: true,\n                },\n                {\n                    path: routes.profit,\n                    component: lazyLoadReportComponent('ProfitTable'),\n                    getTitle: () => localize('Trade table'),\n                    icon_component: 'IcProfitTable',\n                },\n                {\n                    path: routes.statement,\n                    component: lazyLoadReportComponent('Statement'),\n                    getTitle: () => localize('Statement'),\n                    icon_component: 'IcStatement',\n                },\n            ],\n        },\n    ];\n};\n\nlet routesConfig: TRouteConfig[];\n\n// For default page route if page/path is not found, must be kept at the end of routes_config array\nconst route_default: TRoute = { component: Page404, getTitle: () => localize('Error 404') };\n\nconst getRoutesConfig = (): TRouteConfig[] => {\n    if (!routesConfig) {\n        routesConfig = initRoutesConfig();\n        routesConfig.push(route_default);\n    }\n    return routesConfig;\n};\n\nexport default getRoutesConfig;\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router';\nimport { redirectToLogin, isEmptyObject, routes, removeBranchName, default_title } from '@deriv/shared';\nimport { getLanguage } from '@deriv/translations';\nimport type { TBinaryRoutes, TRoute } from 'Types';\n\ntype TRouteWithSubRoutes = TRoute & TBinaryRoutes;\n\nconst RouteWithSubRoutes = (route: TRouteWithSubRoutes) => {\n    const renderFactory = (props: RouteComponentProps) => {\n        let result = null;\n        if (route.component === Redirect) {\n            let to = route.to;\n\n            // This if clause has been added just to remove '/index' from url in localhost env.\n            if (route.path === routes.index) {\n                const { location } = props;\n                to = location.pathname.toLowerCase().replace(route.path, '');\n            }\n            result = <Redirect to={to} />;\n        } else if (route.is_authenticated && !route.is_logging_in && !route.is_logged_in) {\n            redirectToLogin(route.is_logged_in, getLanguage());\n        } else {\n            const default_subroute = route.routes ? route.routes.find(r => r.default) : { path: '' };\n            const has_default_subroute = !isEmptyObject(default_subroute);\n            const pathname = removeBranchName(location.pathname);\n\n            const RouteComponent = route.component as React.ElementType;\n\n            result = (\n                <React.Fragment>\n                    {has_default_subroute && pathname === route.path && <Redirect to={default_subroute?.path} />}\n                    <RouteComponent {...props} routes={route.routes} />\n                </React.Fragment>\n            );\n        }\n\n        const title = route.getTitle?.() || '';\n        document.title = `${title} | ${default_title}`;\n        return result;\n    };\n\n    return <Route exact={route.exact} path={route.path} render={renderFactory} />;\n};\n\nexport default RouteWithSubRoutes;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\nimport { Localize } from '@deriv/translations';\nimport getRoutesConfig from '../../Constants/routes-config';\nimport RouteWithSubRoutes from './route-with-sub-routes';\nimport { TBinaryRoutes } from 'Types';\n\nconst BinaryRoutes = (props: TBinaryRoutes) => {\n    return (\n        <React.Suspense\n            fallback={\n                <div>\n                    <Localize i18n_default_text='Loading...' />\n                </div>\n            }\n        >\n            <Switch>\n                {getRoutesConfig().map((route, idx) => (\n                    <RouteWithSubRoutes key={route.path ?? idx} {...route} {...props} />\n                ))}\n            </Switch>\n        </React.Suspense>\n    );\n};\n\nexport default BinaryRoutes;\n","import BinaryLink from './binary-link';\nimport RouteWithSubRoutes from './route-with-sub-routes';\nimport BinaryRoutes from './binary-routes';\n\nexport * from './helpers';\nexport { BinaryLink, RouteWithSubRoutes };\nexport default BinaryRoutes;\n","import React from 'react';\nimport { Dialog, PageErrorContainer } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TErrorComponent } from 'Types';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    is_dialog,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}: Partial<TErrorComponent>) => {\n    const refresh_message = should_show_refresh ? localize('Please refresh this page to continue.') : '';\n\n    if (is_dialog) {\n        return (\n            <Dialog\n                title={header || localize('There was an error')}\n                is_visible\n                confirm_button_text={redirect_label || localize('Ok')}\n                onConfirm={redirectOnClick || (() => location.reload())}\n                has_close_icon={false}\n            >\n                {message || localize('Sorry, an error occured while processing your request.')}\n            </Dialog>\n        );\n    }\n    return (\n        <PageErrorContainer\n            error_header={header ?? ''}\n            error_messages={message ? [message, refresh_message] : []}\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label || localize('Refresh')]}\n            buttonOnClick={redirectOnClick || (() => location.reload())}\n        />\n    );\n};\n\nexport default ErrorComponent;\n","import ErrorComponent from './error-component';\n\nexport default ErrorComponent;\n","import { observer, useStore } from '@deriv/stores';\nimport { withRouter } from 'react-router';\nimport React from 'react';\nimport BinaryRoutes from 'Components/Routes';\nimport ErrorComponent from 'Components/Errors';\nimport { TRoutes } from 'Types';\n\nconst Routes = observer(({ passthrough }: TRoutes) => {\n    const { client, common } = useStore();\n    const { is_logged_in, is_logging_in } = client;\n    const { error, has_error } = common;\n    if (has_error) {\n        return <ErrorComponent {...error} />;\n    }\n\n    return <BinaryRoutes is_logged_in={is_logged_in} is_logging_in={is_logging_in} passthrough={passthrough} />;\n});\n\nexport default withRouter(Routes);\n","import React from 'react';\nimport { StoreProvider } from '@deriv/stores';\nimport { ReportsStoreProvider } from 'Stores/useReportsStores';\nimport type { TCoreStores } from '@deriv/stores/types';\n\nexport const ReportsProviders = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    return (\n        <StoreProvider store={store}>\n            <ReportsStoreProvider>{children}</ReportsStoreProvider>\n        </StoreProvider>\n    );\n};\n\nexport default ReportsProviders;\n","import React from 'react';\nimport Routes from 'Containers/routes';\nimport ReportsProviders from './reports-providers';\nimport 'Sass/app.scss';\nimport type { TCoreStores } from '@deriv/stores/types';\n\ntype TAppProps = {\n    passthrough: {\n        root_store: TCoreStores;\n    };\n};\n\nconst App = ({ passthrough }: TAppProps) => {\n    return (\n        <ReportsProviders store={passthrough.root_store}>\n            <Routes />\n        </ReportsProviders>\n    );\n};\n\nexport default App;\n","import { createContext } from 'react';\nimport type { TStores } from '../types';\n\nconst StoreContext = createContext<TStores | null>(null);\n\nexport default StoreContext;\n","import { createContext } from 'react';\n\n// Don't need to type `deriv_api` here, We will be using these methods inside\n// the `useQuery`, `useMutation` and `useSubscription` hook to make it type-safe.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst APIContext = createContext<Record<string, any> | null>(null);\n\nexport default APIContext;\n","import { useCallback, useContext } from 'react';\n\nimport type {\n    TSocketEndpointNames,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nimport APIContext from './APIContext';\n\nconst useAPI = () => {\n    const api = useContext(APIContext);\n\n    const send = useCallback(\n        async <T extends TSocketEndpointNames | TSocketPaginateableEndpointNames = TSocketEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): Promise<TSocketResponseData<T>> => {\n            const response = await api?.send({ [name]: 1, ...(payload || {}) });\n\n            if (response.error) {\n                throw response.error;\n            }\n\n            return response;\n        },\n        [api]\n    );\n\n    const subscribe = useCallback(\n        <T extends TSocketSubscribableEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): {\n            subscribe: (\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onData: (response: any) => void,\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onError: (response: any) => void\n            ) => { unsubscribe?: VoidFunction };\n        } => api?.subscribe({ [name]: 1, subscribe: 1, ...(payload || {}) }),\n        [api]\n    );\n\n    return {\n        send,\n        subscribe,\n    };\n};\n\nexport default useAPI;\n","import React, { PropsWithChildren } from 'react';\n// @ts-expect-error `@deriv/deriv-api` is not in TypeScript, Hence we ignore the TS error.\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic';\nimport { getAppId, getSocketURL, useWS } from '@deriv/shared';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n// import { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport APIContext from './APIContext';\n\ndeclare global {\n    interface Window {\n        ReactQueryClient?: QueryClient;\n        DerivAPI?: Record<string, DerivAPIBasic>;\n    }\n}\n\n// This is a temporary workaround to share a single `QueryClient` instance between all the packages.\n// Later once we have each package separated we won't need this anymore and can remove this.\nconst getSharedQueryClientContext = (): QueryClient => {\n    if (!window.ReactQueryClient) {\n        window.ReactQueryClient = new QueryClient();\n    }\n\n    return window.ReactQueryClient;\n};\n\n// This is a temporary workaround to share a single `DerivAPIBasic` instance for every unique URL.\n// Later once we have each package separated we won't need this anymore and can remove this.\nconst getDerivAPIInstance = (): DerivAPIBasic => {\n    const endpoint = getSocketURL();\n    const app_id = getAppId();\n    const language = 'EN'; // Need to use the language from the app context.\n    const brand = 'deriv';\n    const wss = `wss://${endpoint}/websockets/v3?app_id=${app_id}&l=${language}&brand=${brand}`;\n\n    if (!window.DerivAPI) {\n        window.DerivAPI = {};\n    }\n\n    if (!window.DerivAPI?.[wss]) {\n        window.DerivAPI[wss] = new DerivAPIBasic({ connection: new WebSocket(wss) });\n    }\n\n    return window.DerivAPI?.[wss];\n};\n\nconst queryClient = getSharedQueryClientContext();\n\ntype TProps = {\n    /** If set to true, the APIProvider will instantiate it's own socket connection. */\n    standalone?: boolean;\n};\n\nconst APIProvider = ({ children, standalone = false }: PropsWithChildren<TProps>) => {\n    const WS = useWS();\n    // Use the new API instance if the `standalone` prop is set to true,\n    // else use the legacy socket connection.\n    const active_connection = standalone ? getDerivAPIInstance() : WS;\n\n    return (\n        <APIContext.Provider value={active_connection}>\n            <QueryClientProvider client={queryClient}>\n                {children}\n                {/* <ReactQueryDevtools /> */}\n            </QueryClientProvider>\n        </APIContext.Provider>\n    );\n};\n\nexport default APIProvider;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport useAPI from './useAPI';\nimport type {\n    TSocketAcceptableProps,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nconst useSubscription = <T extends TSocketSubscribableEndpointNames>(name: T) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isSubscribed, setSubscribed] = useState(false);\n    const [error, setError] = useState<unknown>();\n    const [data, setData] = useState<TSocketResponseData<T>>();\n    const subscriber = useRef<{ unsubscribe?: VoidFunction }>();\n    const { subscribe: _subscribe } = useAPI();\n\n    const subscribe = useCallback(\n        (...props: TSocketAcceptableProps<T>) => {\n            const prop = props?.[0];\n            const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n            setIsLoading(true);\n            setSubscribed(true);\n\n            try {\n                subscriber.current = _subscribe(name, payload).subscribe(\n                    response => {\n                        setData(response);\n                        setIsLoading(false);\n                    },\n                    response => {\n                        setError(response.error);\n                        setIsLoading(false);\n                    }\n                );\n            } catch (e) {\n                setError(e);\n            }\n        },\n        [_subscribe, name]\n    );\n\n    const unsubscribe = useCallback(() => {\n        subscriber.current?.unsubscribe?.();\n        setSubscribed(false);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            unsubscribe();\n        };\n    }, [unsubscribe]);\n\n    return {\n        subscribe,\n        unsubscribe,\n        isLoading,\n        isSubscribed,\n        error,\n        data,\n    };\n};\n\nexport default useSubscription;\n","import { useContext } from 'react';\nimport StoreContext from './storeContext';\n\nconst useStore = () => {\n    const store = useContext(StoreContext);\n\n    if (!store) {\n        throw new Error('useStore must be used within StoreProvider');\n    }\n\n    return store;\n};\n\nexport default useStore;\n","import React, { useEffect } from 'react';\nimport { useSubscription } from '@deriv/api';\nimport merge from 'lodash.merge';\nimport { observer } from 'mobx-react-lite';\nimport useStore from '../useStore';\n\nconst ExchangeRatesProvider = observer(({ children }: React.PropsWithChildren<unknown>) => {\n    const { data, subscribe } = useSubscription('exchange_rates');\n    const {\n        exchange_rates: { update },\n    } = useStore();\n\n    useEffect(() => {\n        subscribe({ payload: { base_currency: 'USD' } });\n    }, [subscribe]);\n\n    useEffect(() => {\n        if (data) {\n            const { exchange_rates } = data;\n\n            if (exchange_rates) update(prev => merge(prev, exchange_rates));\n        }\n    }, [update, data]);\n\n    return <>{children}</>;\n});\n\nexport default ExchangeRatesProvider;\n","import { action, makeObservable, observable } from 'mobx';\nimport { makePersistable, stopPersisting } from 'mobx-persist-store';\n\nexport default class BaseStore<T> {\n    data: T | undefined = undefined;\n\n    constructor(name: string, onHydrationDone?: VoidFunction) {\n        makeObservable(this, {\n            data: observable,\n            update: action.bound,\n            unmount: action.bound,\n        });\n\n        makePersistable(this, { name, properties: ['data'], storage: window.localStorage }).then(() =>\n            onHydrationDone?.()\n        );\n    }\n\n    update(data: NonNullable<T> | ((previous?: T) => NonNullable<T>)) {\n        this.data = data instanceof Function ? data(this.data) : data;\n    }\n\n    unmount() {\n        stopPersisting(this);\n    }\n}\n","import BaseStore from './BaseStore';\nimport type { ExchangeRatesResponse } from '@deriv/api-types';\n\nexport default class ExchangeRatesStore extends BaseStore<ExchangeRatesResponse['exchange_rates']> {\n    constructor() {\n        super('ExchangeRatesStore');\n    }\n}\n","import BaseStore from './BaseStore';\n\nconst FLAGS = {\n    wallet: false,\n    next_wallet: false,\n    sharkfin: false,\n} satisfies Record<string, boolean>;\n\nexport default class FeatureFlagsStore extends BaseStore<{ [k in keyof typeof FLAGS]: boolean }> {\n    constructor() {\n        super('FeatureFlagsStore', () => {\n            // Set the default values for the first time.\n            if (!this.data) this.update(FLAGS);\n\n            // Update the store data if a new flag was added or removed.\n            if (this.data && Object.keys(this.data).length !== Object.keys(FLAGS).length) {\n                this.update(old => {\n                    const data = FLAGS;\n\n                    Object.keys(FLAGS).forEach(flag => {\n                        // @ts-expect-error flag key is always present in the object, Hence can ignore the TS error.\n                        if (old[flag] !== undefined) data[flag] = old[flag];\n                    });\n\n                    return data;\n                });\n            }\n        });\n\n        this.data = FLAGS;\n    }\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { APIProvider } from '@deriv/api';\nimport { ExchangeRatesProvider } from './providers';\nimport StoreContext from './storeContext';\nimport { ExchangeRatesStore, FeatureFlagsStore } from './stores';\nimport type { TCoreStores, TStores } from '../types';\n\nconst StoreProvider = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    const memoizedValue: TStores = useMemo(() => {\n        // If the store is mocked for testing purposes, then return the mocked value.\n        if ('is_mock' in store && store.is_mock) return store as unknown as TStores;\n\n        // Otherwise, instantiate store and return it.\n        return {\n            ...store,\n            exchange_rates: new ExchangeRatesStore(),\n            feature_flags: new FeatureFlagsStore(),\n        };\n    }, [store]);\n\n    useEffect(() => {\n        return () => {\n            Object.values(memoizedValue).forEach(value => {\n                if (typeof value === 'object' && 'unmount' in value) value.unmount();\n            });\n        };\n    }, [memoizedValue]);\n\n    return (\n        <APIProvider>\n            <StoreContext.Provider value={memoizedValue}>\n                <ExchangeRatesProvider>{children}</ExchangeRatesProvider>\n            </StoreContext.Provider>\n        </APIProvider>\n    );\n};\n\nexport default StoreProvider;\n"],"names":["getDateTo","partial_fetch_time","date_to","today","toMoment","startOf","unix","epochToMoment","add","subtract","getDateFrom","should_load_partially","date_from","shouldSendDateFrom","BaseStore","options","validation_errors","validation_rules","preSwitchAccountDisposer","pre_switch_account_listener","switchAccountDisposer","switch_account_listener","logoutDisposer","logout_listener","clientInitDisposer","client_init_listener","networkStatusChangeDisposer","network_status_change_listener","themeChangeDisposer","theme_change_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","makeObservable","this","observable","retrieveFromStorage","action","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","onUnmount","assertHasValidCache","root_store","local_storage_properties","session_storage_properties","store_name","Object","defineProperty","enumerable","writable","length","Error","value","setTimeout","setupReactionForLocalStorage","setupReactionForSessionStorage","properties","snapshot","toJS","isEmptyObject","reduce","result","p","assign","reaction","map","i","saveToStorage","STORAGES","LOCAL_STORAGE","SESSION_STORAGE","storage","JSON","stringify","getSnapshot","key","localStorage","setItem","sessionStorage","local_storage_snapshot","parse","getItem","session_storage_snapshot","keys","forEach","k","propertyName","messages","filter","x","includes","concat","rules","property","intercept","change","newValue","trigger","inputs","undefined","hasOwnProperty","call","validator","Validator","isPassed","errors","get","error","listener","when","client","switch_broadcast","then","switchEndSignal","isProduction","console","pre_switch_broadcast","setPreSwitchAccount","has_logged_out","setLogout","initialized_broadcast","setInitialized","common","is_network_online","is_online","ui","is_dark_mode_on","has_real_account_signup_ended","setRealAccountSignupEnd","loginid","reactions","act","freeze","Symbol","ProfitTableStore","data","has_loaded_all","is_loading","filtered_date_range","client_loginid","fetchOnScroll","debounce","left","fetchNextBatch","total_profit","computed","is_empty","has_selected_date","profitTableResponseHandler","handleScroll","networkStatusChangeListener","onMount","override","totals","accountSwitcherListener","clearTable","clearDateFilter","handleDateChange","previous","current","buy_price","Number","parseFloat","sell_price","shouldFetchNextBatch","WS","getDateBoundaries","response","message","formatted_transactions","profit_table","transactions","transaction","currency","active_symbols","format_string","purchase_time","format","purchase_time_unix","sell_time","payout","profit_loss","formatMoney","display_name","getSymbolDisplayName","getMarketInformation","shortcode","underlying","formatProfitTableTransactions","filterDisabledPositions","event","target","scrollTop","left_to_scroll","scrollHeight","clientHeight","replace","toString","Promise","resolve","date_values","date_range","from","to","is_batch","formatStatementTransaction","transaction_time","amount","balance","balance_after","should_exclude_currency","action_type","localize","toTitleCase","date","refid","transaction_id","isNaN","desc","longcode","id","contract_id","app_id","withdrawal_details","StatementStore","account_statistics","statementHandler","handleFilterChange","loadAccountStatistics","optional_arguments","statement","filterValue","standpoint","iom","malta","response_account_statistics","runInAction","ReportsStoreContext","React","ReportsStoreProvider","children","useStore","memoizedValue","ProfitStores","StatementStores","Provider","useReportsStore","store","routesConfig","Page404","lazyLoadReportComponent","makeLazyLoader","moduleLoader","Loading","route_default","component","getTitle","path","routes","is_authenticated","icon_component","default","push","route","Route","exact","render","props","Redirect","location","pathname","toLowerCase","is_logging_in","is_logged_in","default_subroute","find","r","has_default_subroute","removeBranchName","RouteComponent","redirectToLogin","getLanguage","title","document","default_title","fallback","Localize","i18n_default_text","Switch","getRoutesConfig","idx","header","is_dialog","redirect_label","redirectOnClick","should_show_refresh","refresh_message","Dialog","is_visible","confirm_button_text","onConfirm","reload","has_close_icon","PageErrorContainer","error_header","error_messages","redirect_urls","redirect_labels","buttonOnClick","Routes","observer","passthrough","has_error","withRouter","createContext","api","useContext","APIContext","send","useCallback","name","payload","subscribe","queryClient","window","ReactQueryClient","QueryClient","endpoint","wss","standalone","useWS","active_connection","getSocketURL","getAppId","DerivAPI","DerivAPIBasic","connection","WebSocket","QueryClientProvider","useState","isLoading","setIsLoading","isSubscribed","setSubscribed","setError","setData","subscriber","useRef","_subscribe","useAPI","prop","e","unsubscribe","useEffect","StoreContext","useSubscription","update","exchange_rates","base_currency","prev","merge","onHydrationDone","unmount","makePersistable","Function","stopPersisting","ExchangeRatesStore","FLAGS","wallet","next_wallet","sharkfin","FeatureFlagsStore","old","flag","useMemo","is_mock","feature_flags","values"],"sourceRoot":""}