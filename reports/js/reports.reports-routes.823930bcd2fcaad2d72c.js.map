{"version":3,"file":"reports/js/reports.reports-routes.823930bcd2fcaad2d72c.js","mappings":"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","sources":["webpack://@deriv/reports/./src/Components/Elements/ContentLoader/reports-table-row.tsx","webpack://@deriv/reports/./src/Components/empty-trade-history-message.tsx","webpack://@deriv/reports/./src/Containers/progress-slider-stream.tsx","webpack://@deriv/reports/./src/Helpers/profit-loss.ts","webpack://@deriv/reports/./src/Components/indicative-cell.tsx","webpack://@deriv/reports/./src/Components/market-symbol-icon-row.tsx","webpack://@deriv/reports/./src/Helpers/market-underlying.ts","webpack://@deriv/reports/./src/Components/profit_loss_cell.tsx","webpack://@deriv/reports/./src/Components/currency-wrapper.tsx","webpack://@deriv/reports/./src/Constants/data-table-constants.tsx","webpack://@deriv/reports/./src/_common/components/loading.jsx","webpack://@deriv/reports/./src/Components/placeholder-component.jsx","webpack://@deriv/reports/./src/Containers/open-positions.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/composite-calendar-mobile.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/list-item.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/side-list.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/calendar-icon.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/composite-calendar.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/index.ts","webpack://@deriv/reports/./src/Components/reports-meta.tsx","webpack://@deriv/reports/./src/Containers/profit-table.tsx","webpack://@deriv/reports/./src/Components/account-statistics.tsx","webpack://@deriv/reports/./src/Components/filter-component.tsx","webpack://@deriv/reports/./src/Containers/statement.tsx","webpack://@deriv/reports/./src/Containers/reports.tsx","webpack://@deriv/reports/./src/Containers/index.ts"],"sourcesContent":["import ContentLoader from 'react-content-loader';\nimport React from 'react';\n\ntype TReportsTableRowLoader = {\n    speed?: number;\n};\n\nconst ReportsTableRowLoader = ({ speed }: TReportsTableRowLoader) => (\n    <ContentLoader\n        height={64}\n        width={992}\n        speed={speed}\n        backgroundColor={'var(--general-hover)'}\n        foregroundColor={'var(--general-active)'}\n    >\n        <rect x='16' y='16' rx='4' ry='4' width='32' height='32' />\n        <rect x='52' y='16' rx='4' ry='4' width='32' height='32' />\n        <rect x='132' y='28' rx='4' ry='4' width='101' height='8' />\n        <rect x='273' y='28' rx='4' ry='4' width='120' height='8' />\n        <rect x='460' y='28' rx='4' ry='4' width='46' height='8' />\n        <rect x='593' y='28' rx='4' ry='4' width='46' height='8' />\n        <rect x='726' y='28' rx='4' ry='4' width='64' height='8' />\n        <rect x='906' y='28' rx='4' ry='4' width='64' height='8' />\n    </ContentLoader>\n);\n\nexport { ReportsTableRowLoader };\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\n\ntype TEmptyTradeHistoryMessage = {\n    component_icon: string;\n    has_selected_date: boolean;\n    localized_message: string;\n    localized_period_message: string;\n};\n\nconst EmptyTradeHistoryMessage = ({\n    has_selected_date,\n    component_icon,\n    localized_message,\n    localized_period_message,\n}: TEmptyTradeHistoryMessage) => (\n    <React.Fragment>\n        <div className='empty-trade-history'>\n            <Icon\n                data_testid='dt_empty_trade_history_icon'\n                icon={component_icon}\n                className='empty-trade-history__icon'\n                color='disabled'\n                size={96}\n            />\n            <Text size='xs' align='center' color='disabled' className='empty-trade-history__text'>\n                {!has_selected_date ? localized_message : localized_period_message}\n            </Text>\n        </div>\n    </React.Fragment>\n);\n\nexport default EmptyTradeHistoryMessage;\n","import React from 'react';\nimport { ProgressSlider } from '@deriv/components';\nimport { getCurrentTick, TContractInfo, getCardLabels } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TProgressSliderStream = {\n    contract_info: Required<TContractInfo>;\n};\n\nconst ProgressSliderStream = observer(({ contract_info }: TProgressSliderStream) => {\n    const { common, portfolio } = useStore();\n    const { server_time } = common;\n    const { is_loading } = portfolio;\n\n    if (!contract_info) {\n        return <div />;\n    }\n    const current_tick = contract_info.tick_count && getCurrentTick(contract_info);\n\n    if (!server_time) return null;\n\n    return (\n        <ProgressSlider\n            current_tick={current_tick}\n            expiry_time={contract_info.date_expiry}\n            getCardLabels={getCardLabels}\n            is_loading={is_loading}\n            server_time={server_time}\n            start_time={contract_info.date_start}\n            ticks_count={contract_info.tick_count}\n        />\n    );\n});\n\nexport default ProgressSliderStream;\n","export const getProfitOrLoss = (value: string) => (+value.replace(/,/g, '') >= 0 ? 'profit' : 'loss');\n","import React from 'react';\nimport { Icon, Money, DesktopWrapper, ContractCard } from '@deriv/components';\nimport { getCardLabels, TContractInfo } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TIndicativeCell = {\n    amount: number;\n    contract_info: TContractInfo;\n    currency: string;\n    status?: string;\n    is_footer: boolean;\n    is_sell_requested: boolean;\n};\n\nconst IndicativeCell = observer((props: TIndicativeCell) => {\n    const { amount, contract_info, currency, is_footer, is_sell_requested, status } = props;\n    const { portfolio } = useStore();\n    const { onClickSell } = portfolio;\n    const [movement, setMovement] = React.useState<string | null>(null);\n    const [amount_state, setAmountState] = React.useState(0);\n\n    React.useEffect(() => {\n        setMovement(() => {\n            return amount >= amount_state ? 'profit' : 'loss';\n        });\n        setAmountState(amount);\n    }, [amount, amount_state]);\n\n    return (\n        <div className='open-positions__indicative'>\n            <div className='open-positions__indicative--amount'>\n                <Money amount={Math.abs(amount)} currency={currency} />\n                {status !== 'no-resale' && amount !== 0 && (\n                    <React.Fragment>\n                        {movement === 'profit' && <Icon icon='IcProfit' />}\n                        {movement === 'loss' && <Icon icon='IcLoss' />}\n                    </React.Fragment>\n                )}\n            </div>\n            <DesktopWrapper>\n                {!is_footer && (\n                    <ContractCard.Sell\n                        contract_info={contract_info}\n                        is_sell_requested={is_sell_requested}\n                        getCardLabels={getCardLabels}\n                        onClickSell={contract_id => {\n                            if (contract_id) onClickSell(contract_id);\n                        }}\n                    />\n                )}\n            </DesktopWrapper>\n        </div>\n    );\n});\n\nexport default IndicativeCell;\n","import React from 'react';\nimport { extractInfoFromShortcode, isHighLow } from '@deriv/shared';\nimport { Icon, Popover, IconTradeTypes } from '@deriv/components';\nimport { getMarketName, getTradeTypeName } from '../Helpers/market-underlying';\nimport classNames from 'classnames';\n\ntype TMarketSymbolIconRow = {\n    has_full_contract_title?: boolean;\n    icon?: string | null;\n    payload: {\n        shortcode: string;\n        display_name: string;\n        action_type: string;\n    };\n    should_show_multiplier?: boolean;\n    should_show_accumulator?: boolean;\n};\n\nconst MarketSymbolIconRow = ({\n    has_full_contract_title,\n    icon,\n    payload,\n    should_show_accumulator = true,\n    should_show_multiplier = true,\n}: TMarketSymbolIconRow) => {\n    const should_show_category_icon = typeof payload.shortcode === 'string';\n    const info_from_shortcode = extractInfoFromShortcode(payload.shortcode);\n    const is_high_low = isHighLow({ shortcode_info: info_from_shortcode });\n    const category_label = getTradeTypeName(\n        info_from_shortcode.category as string,\n        is_high_low,\n        has_full_contract_title\n    );\n    if (should_show_category_icon && info_from_shortcode) {\n        return (\n            <div\n                className={classNames('market-symbol-icon', {\n                    'market-symbol-icon__full-title': has_full_contract_title,\n                })}\n            >\n                <div className='market-symbol-icon-name'>\n                    <Popover\n                        classNameTarget='market-symbol-icon__popover'\n                        classNameBubble='market-symbol-icon__popover-bubble'\n                        alignment='top'\n                        message={getMarketName(info_from_shortcode.underlying as string)}\n                        is_bubble_hover_enabled\n                        disable_target_icon\n                    >\n                        <Icon\n                            icon={\n                                info_from_shortcode.underlying\n                                    ? `IcUnderlying${info_from_shortcode.underlying}`\n                                    : 'IcUnknown'\n                            }\n                            size={32}\n                        />\n                    </Popover>\n                    {has_full_contract_title && payload.display_name}\n                </div>\n\n                <div className='market-symbol-icon-category'>\n                    <Popover\n                        classNameTarget='category-type-icon__popover'\n                        classNameBubble='category-type-icon__popover-bubble'\n                        alignment='top'\n                        message={category_label}\n                        is_bubble_hover_enabled\n                        disable_target_icon\n                    >\n                        <IconTradeTypes\n                            type={\n                                is_high_low\n                                    ? `${(info_from_shortcode.category as string).toLowerCase()}_barrier`\n                                    : (info_from_shortcode.category as string).toLowerCase()\n                            }\n                            color='brand'\n                        />\n                    </Popover>\n                    {has_full_contract_title && category_label}\n                </div>\n                {should_show_multiplier && info_from_shortcode.multiplier && (\n                    <div className='market-symbol-icon__multiplier'>x{info_from_shortcode.multiplier}</div>\n                )}\n                {should_show_accumulator && info_from_shortcode.growth_rate && (\n                    <div className='market-symbol-icon__multiplier'>{+info_from_shortcode.growth_rate * 100}%</div>\n                )}\n            </div>\n        );\n    } else if (['deposit', 'hold', 'release', 'withdrawal', 'transfer'].includes(payload.action_type)) {\n        return (\n            <div className='market-symbol-icon'>\n                {payload.action_type === 'deposit' && <Icon icon={icon || 'IcCashierDeposit'} size={32} />}\n                {payload.action_type === 'withdrawal' && <Icon icon='IcCashierWithdrawal' size={32} />}\n                {payload.action_type === 'transfer' && <Icon icon='IcAccountTransferColored' size={32} />}\n                {(payload.action_type === 'hold' || payload.action_type === 'release') && (\n                    <Icon icon='IcCashierDp2p' size={32} />\n                )}\n            </div>\n        );\n    } else if (['adjustment'].includes(payload.action_type)) {\n        return (\n            <div className='market-symbol-icon'>\n                <Icon icon='IcAdjustment' size={32} />\n            </div>\n        );\n    }\n\n    return (\n        <svg width='32' height='32' className='unknown-icon'>\n            <rect width='32' height='32' />\n        </svg>\n    );\n};\n\nexport default MarketSymbolIconRow;\n","import { getContractConfig, getMarketNamesMap } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\ntype TMarketInfo = {\n    category: string;\n    underlying: string;\n};\n\ntype TTradeConfig = {\n    button_name?: JSX.Element;\n    name: JSX.Element;\n    position: string;\n};\n\n/**\n * Fetch market information from shortcode\n * @param shortcode: string\n * @returns {{underlying: string, category: string}}\n */\n\n// TODO: Combine with  extractInfoFromShortcode function in shared, both are currently used\nexport const getMarketInformation = (shortcode: string): TMarketInfo => {\n    const market_info: TMarketInfo = {\n        category: '',\n        underlying: '',\n    };\n\n    const pattern = new RegExp(\n        '^([A-Z]+)_((1HZ[0-9-V]+)|((CRASH|BOOM)[0-9\\\\d]+[A-Z]?)|(OTC_[A-Z0-9]+)|R_[\\\\d]{2,3}|[A-Z]+)'\n    );\n    const extracted = pattern.exec(shortcode);\n    if (extracted !== null) {\n        market_info.category = extracted[1].toLowerCase();\n        market_info.underlying = extracted[2];\n    }\n\n    return market_info;\n};\n\nexport const getMarketName = (underlying: string) =>\n    underlying ? getMarketNamesMap()[underlying.toUpperCase() as keyof typeof getMarketNamesMap] : null;\n\nexport const getTradeTypeName = (category: string, is_high_low = false, show_button_name = false) => {\n    const trade_type =\n        category &&\n        (getContractConfig(is_high_low)[category.toUpperCase() as keyof typeof getContractConfig] as TTradeConfig);\n    if (!trade_type) return null;\n    return (show_button_name && trade_type.button_name) || trade_type.name || null;\n};\n\nexport const getContractDurationType = (longcode: string, shortcode?: string): string => {\n    if (shortcode && /^(MULTUP|MULTDOWN)/.test(shortcode)) return '';\n\n    const duration_pattern = new RegExp('ticks|tick|seconds|minutes|minute|hour|hours');\n    const extracted = duration_pattern.exec(longcode);\n    if (extracted !== null) {\n        const duration_type = extracted[0];\n        const duration_text = duration_type[0].toUpperCase() + duration_type.slice(1);\n        return duration_text.endsWith('s') ? duration_text : `${duration_text}s`;\n    }\n    return localize('Days');\n};\n","import React from 'react';\nimport { getProfitOrLoss } from '../Helpers/profit-loss';\n\ntype TProfitLossCell = {\n    value: string;\n    children: React.ReactNode;\n};\n\nconst ProfitLossCell = ({ value, children }: TProfitLossCell) => {\n    const status = getProfitOrLoss(value);\n\n    return <span className={`amount--${status}`}>{children}</span>;\n};\n\nexport default ProfitLossCell;\n","import React from 'react';\nimport { Text } from '@deriv/components';\n\ntype TCurrencyWrapper = {\n    currency: string;\n};\n\nconst CurrencyWrapper = ({ currency }: TCurrencyWrapper) => (\n    <div className='currency__wrapper'>\n        <Text color='colored-background' weight='bold' size='xxxs'>\n            {currency}\n        </Text>\n    </div>\n);\n\nexport default CurrencyWrapper;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Label, Money, ContractCard, ContractCardSell, Popover } from '@deriv/components';\nimport {\n    isMobile,\n    getCurrencyDisplayCode,\n    getTotalProfit,\n    shouldShowCancellation,\n    getGrowthRatePercentage,\n    getCardLabels,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport ProgressSliderStream from '../Containers/progress-slider-stream';\nimport { TCellContentProps, THeaderProps } from 'Types';\nimport { getProfitOrLoss } from '../Helpers/profit-loss';\nimport IndicativeCell from '../Components/indicative-cell';\nimport MarketSymbolIconRow from '../Components/market-symbol-icon-row';\nimport ProfitLossCell from '../Components/profit_loss_cell';\nimport CurrencyWrapper from '../Components/currency-wrapper';\nimport { useStore } from '@deriv/stores';\nimport moment from 'moment';\n\ntype TPortfolioStore = ReturnType<typeof useStore>['portfolio'];\n\nconst map = {\n    buy: 'success',\n    deposit: 'success',\n    hold: 'warn',\n    release: 'success',\n    sell: 'danger',\n    withdrawal: 'info',\n    default: 'default',\n    adjustment: 'adjustment',\n    transfer: 'transfer',\n} as const;\n\nexport type TKeys = keyof typeof map;\n\nconst getModeFromValue = (key: TKeys) => map[key] || map.default;\n\ntype TAccumulatorOpenPositionstemplateProps = Omit<\n    TMultiplierOpenPositionstemplateProps,\n    'onClickCancel' | 'server_time'\n>;\n\ntype TMultiplierOpenPositionstemplateProps = Pick<\n    TPortfolioStore,\n    'getPositionById' | 'onClickCancel' | 'onClickSell'\n> & {\n    currency: string;\n    server_time: moment.Moment;\n};\n\n/* eslint-disable react/display-name, react/prop-types */\nexport const getStatementTableColumnsTemplate = (currency: string) => [\n    {\n        key: 'icon',\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'icon',\n        renderCellContent: ({ passthrough, row_obj }: TCellContentProps) => {\n            const icon = passthrough.isTopUp(row_obj) ? 'icCashierTopUp' : null;\n            return <MarketSymbolIconRow icon={icon} key={row_obj.transaction_id} payload={row_obj} />;\n        },\n    },\n    {\n        title: localize('Ref. ID'),\n        col_index: 'refid',\n        renderCellContent: ({ cell_value, row_obj }: TCellContentProps) => {\n            return (\n                <Popover\n                    alignment={'top'}\n                    message={localize('Transaction performed by (App ID: {{app_id}})', { app_id: row_obj.app_id })}\n                >\n                    {cell_value}\n                </Popover>\n            );\n        },\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: () => <CurrencyWrapper currency={getCurrencyDisplayCode(currency)} />,\n    },\n    {\n        title: localize('Transaction time'),\n        col_index: 'date',\n        renderCellContent: ({ cell_value }: TCellContentProps) => {\n            return <span>{cell_value} GMT</span>;\n        },\n    },\n    {\n        key: 'mode',\n        title: localize('Transaction'),\n        col_index: 'action_type',\n        renderCellContent: ({ cell_value, passthrough, row_obj }: TCellContentProps) => (\n            <Label mode={getModeFromValue(cell_value)}>\n                {(passthrough.isTopUp(row_obj) && localize('Top up')) || row_obj.action}\n            </Label>\n        ),\n    },\n    {\n        title: localize('Credit/Debit'),\n        col_index: 'amount',\n        renderCellContent: ({ cell_value }: TCellContentProps) => (\n            <div className={`amount--${getProfitOrLoss(cell_value)}`}>\n                <Money has_sign amount={cell_value.replace(/[,]+/g, '')} currency={currency} />\n            </div>\n        ),\n    },\n    {\n        title: localize('Balance'),\n        col_index: 'balance',\n        renderCellContent: ({ cell_value }: TCellContentProps) => (\n            <Money amount={cell_value.replace(/[,]+/g, '')} currency={currency} />\n        ),\n    },\n];\nexport const getProfitTableColumnsTemplate = (currency: string, items_count: number) => [\n    {\n        key: 'icon',\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'action_type',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return localize('Profit/loss on the last {{item_count}} contracts', { item_count: items_count });\n            }\n            return <MarketSymbolIconRow key={row_obj.transaction_id} payload={row_obj} />;\n        },\n    },\n    {\n        title: localize('Ref. ID'),\n        col_index: 'transaction_id',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ is_footer }: TCellContentProps) =>\n            is_footer ? '' : <CurrencyWrapper currency={getCurrencyDisplayCode(currency)} />,\n    },\n    {\n        title: localize('Buy time'),\n        col_index: 'purchase_time',\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n            return <span>{cell_value} GMT</span>;\n        },\n    },\n    {\n        title: localize('Buy price'),\n        col_index: 'buy_price',\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n\n            return <Money amount={cell_value} currency={currency} />;\n        },\n    },\n    {\n        title: localize('Sell time'),\n        col_index: 'sell_time',\n        renderHeader: ({ title }: THeaderProps) => <span>{title}</span>,\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n            return <span>{cell_value} GMT</span>;\n        },\n    },\n    {\n        title: localize('Sell price'),\n        col_index: 'sell_price',\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n\n            return <Money amount={cell_value} currency={currency} />;\n        },\n    },\n    {\n        title: localize('Profit / Loss'),\n        col_index: 'profit_loss',\n        renderCellContent: ({ cell_value }: TCellContentProps) => (\n            <ProfitLossCell value={cell_value}>\n                <Money has_sign amount={cell_value.replace(/[,]+/g, '')} currency={currency} />\n            </ProfitLossCell>\n        ),\n    },\n];\nexport const getOpenPositionsColumnsTemplate = (currency: string) => [\n    {\n        key: 'icon',\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'type',\n        renderCellContent: ({ row_obj, is_footer, is_vanilla, is_turbos }: TCellContentProps) => {\n            if (is_footer) return localize('Total');\n\n            return (\n                <MarketSymbolIconRow\n                    key={row_obj.id}\n                    payload={row_obj.contract_info}\n                    has_full_contract_title={is_vanilla || is_turbos}\n                />\n            );\n        },\n    },\n    {\n        title: localize('Ref. ID'),\n        col_index: 'reference',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <CurrencyWrapper currency={getCurrencyDisplayCode(row_obj.contract_info?.currency)} />\n        ),\n    },\n    {\n        title: localize('Buy price'),\n        col_index: 'purchase',\n        renderCellContent: ({ cell_value }: TCellContentProps) => <Money amount={cell_value} currency={currency} />,\n    },\n    {\n        title: localize('Payout limit'),\n        col_index: 'payout',\n        renderHeader: ({ title, is_vanilla }: THeaderProps) => <span>{is_vanilla ? localize('Strike') : title}</span>,\n        renderCellContent: ({ cell_value, row_obj, is_vanilla }: TCellContentProps) => {\n            const non_vanilla_payout = cell_value ? <Money amount={cell_value} currency={currency} /> : <span>-</span>;\n            return is_vanilla ? row_obj.barrier?.toFixed(2) : non_vanilla_payout;\n        },\n    },\n    {\n        title: localize('Indicative profit/loss'),\n        col_index: 'profit',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.profit_loss && (!row_obj.contract_info || !row_obj.contract_info.profit)) return;\n            const profit = row_obj.profit_loss || row_obj.contract_info.profit;\n            // eslint-disable-next-line consistent-return\n            return (\n                <div\n                    className={classNames('open-positions__profit-loss', {\n                        'open-positions__profit-loss--negative': profit < 0,\n                        'open-positions__profit-loss--positive': profit > 0,\n                    })}\n                >\n                    <Money amount={Math.abs(profit)} currency={currency} />\n                    <div className='open-positions__profit-loss--movement'>\n                        {profit > 0 ? <Icon icon='IcProfit' /> : <Icon icon='IcLoss' />}\n                    </div>\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Indicative price'),\n        col_index: 'indicative',\n        renderCellContent: ({ cell_value, row_obj, is_footer }: TCellContentProps) => (\n            <IndicativeCell\n                amount={+cell_value}\n                currency={currency}\n                contract_info={row_obj.contract_info}\n                is_sell_requested={row_obj.is_sell_requested}\n                is_footer={is_footer}\n            />\n        ),\n    },\n    {\n        title: localize('Remaining time'),\n        col_index: 'id',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <ProgressSliderStream contract_info={row_obj.contract_info} />\n        ),\n    },\n];\n\nexport const getMultiplierOpenPositionsColumnsTemplate = ({\n    currency,\n    onClickCancel,\n    onClickSell,\n    getPositionById,\n    server_time,\n}: TMultiplierOpenPositionstemplateProps) => [\n    {\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'type',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) return localize('Total');\n\n            return (\n                <MarketSymbolIconRow key={row_obj.id} payload={row_obj.contract_info} should_show_multiplier={false} />\n            );\n        },\n    },\n    {\n        title: localize('Multiplier'),\n        col_index: 'multiplier',\n        renderCellContent: ({ row_obj }: TCellContentProps) =>\n            row_obj.contract_info && row_obj.contract_info.multiplier ? `x${row_obj.contract_info.multiplier}` : '',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <CurrencyWrapper currency={getCurrencyDisplayCode(row_obj.contract_info?.currency)} />\n        ),\n    },\n    {\n        title: localize('Stake'),\n        col_index: 'buy_price',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (row_obj.contract_info) {\n                const { ask_price: cancellation_price = 0 } = row_obj.contract_info.cancellation || {};\n                return <Money amount={row_obj.contract_info.buy_price - cancellation_price} currency={currency} />;\n            }\n            return '';\n        },\n    },\n    {\n        title: localize('Deal cancel. fee'),\n        col_index: 'cancellation',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.underlying) return '-';\n\n            if (!shouldShowCancellation(row_obj.contract_info.underlying)) return localize('N/A');\n\n            if (row_obj.contract_info.cancellation) {\n                return <Money amount={row_obj.contract_info.cancellation.ask_price} currency={currency} />;\n            }\n            return '-';\n        },\n    },\n    {\n        title: isMobile() ? (\n            <Localize i18n_default_text='Total buy price' />\n        ) : (\n            <Localize i18n_default_text='Buy price' />\n        ),\n        col_index: 'purchase',\n        renderCellContent: ({ cell_value }: TCellContentProps) => <Money amount={cell_value} currency={currency} />,\n    },\n    {\n        title: <Localize i18n_default_text='Take profit<0 />Stop loss' components={[<br key={0} />]} />,\n        col_index: 'limit_order',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return '';\n            }\n\n            const { take_profit, stop_loss } = row_obj.contract_info?.limit_order || {};\n            return (\n                <React.Fragment>\n                    <div>\n                        {take_profit?.order_amount ? (\n                            <Money has_sign amount={take_profit.order_amount} currency={currency} />\n                        ) : (\n                            '-'\n                        )}\n                    </div>\n                    <div>\n                        {stop_loss?.order_amount ? (\n                            <Money has_sign amount={stop_loss.order_amount} currency={currency} />\n                        ) : (\n                            '-'\n                        )}\n                    </div>\n                </React.Fragment>\n            );\n        },\n    },\n    {\n        title: localize('Current stake'),\n        col_index: 'bid_price',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return '';\n            }\n\n            if (!row_obj.contract_info || !row_obj.contract_info.bid_price) return '-';\n\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            return (\n                <div\n                    className={classNames('open-positions__bid_price', {\n                        'open-positions__bid_price--negative': total_profit < 0,\n                        'open-positions__bid_price--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={row_obj.contract_info.bid_price} currency={currency} />\n                </div>\n            );\n        },\n    },\n    {\n        title: isMobile() ? (\n            <Localize i18n_default_text='Total profit/loss' />\n        ) : (\n            <Localize i18n_default_text='Total<0 />profit/loss' components={[<br key={0} />]} />\n        ),\n        col_index: 'profit',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.profit) return null;\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            // eslint-disable-next-line consistent-return\n            return (\n                <div\n                    className={classNames('open-positions__profit-loss', {\n                        'open-positions__profit-loss--negative': total_profit < 0,\n                        'open-positions__profit-loss--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={Math.abs(total_profit)} currency={currency} />\n                    <div className='open-positions__profit-loss--movement'>\n                        {total_profit > 0 ? <Icon icon='IcProfit' /> : <Icon icon='IcLoss' />}\n                    </div>\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Action'),\n        col_index: 'action',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return <div className='open-positions__row-action' />;\n            }\n\n            const { contract_info } = row_obj;\n            const position = getPositionById(contract_info.contract_id);\n            const { is_sell_requested } = position || {};\n\n            return (\n                <div className='open-positions__row-action'>\n                    <ContractCard.MultiplierCloseActions\n                        contract_info={contract_info}\n                        getCardLabels={getCardLabels}\n                        is_sell_requested={is_sell_requested}\n                        onClickCancel={onClickCancel}\n                        onClickSell={onClickSell}\n                        server_time={server_time}\n                    />\n                </div>\n            );\n        },\n    },\n];\n\nexport const getAccumulatorOpenPositionsColumnsTemplate = ({\n    currency,\n    onClickSell,\n    getPositionById,\n}: TAccumulatorOpenPositionstemplateProps) => [\n    {\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'type',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) return localize('Total');\n\n            return (\n                <MarketSymbolIconRow\n                    key={row_obj.id}\n                    payload={row_obj.contract_info}\n                    should_show_multiplier={false}\n                    should_show_accumulator={false}\n                />\n            );\n        },\n    },\n    {\n        title: localize('Growth rate'),\n        col_index: 'growth_rate',\n        renderCellContent: ({ row_obj }: TCellContentProps) =>\n            row_obj.contract_info && row_obj.contract_info.growth_rate\n                ? `${getGrowthRatePercentage(row_obj.contract_info.growth_rate)}%`\n                : '',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <CurrencyWrapper currency={getCurrencyDisplayCode(row_obj.contract_info?.currency)} />\n        ),\n    },\n    {\n        title: isMobile() ? localize('Total stake') : localize('Initial stake'),\n        col_index: isMobile() ? 'purchase' : 'buy_price',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (row_obj.contract_info) {\n                return <Money amount={row_obj.contract_info.buy_price} currency={currency} />;\n            }\n            return '';\n        },\n    },\n    {\n        title: localize('Take profit'),\n        col_index: 'limit_order',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            const { take_profit } = row_obj.contract_info?.limit_order || {};\n            return (\n                <div>\n                    {take_profit?.order_amount ? (\n                        <Money has_sign amount={take_profit.order_amount} currency={currency} />\n                    ) : (\n                        '-'\n                    )}\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Current stake'),\n        col_index: 'bid_price',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.bid_price) return '-';\n\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            return (\n                <div\n                    className={classNames('open-positions__bid_price', {\n                        'open-positions__bid_price--negative': total_profit < 0,\n                        'open-positions__bid_price--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={row_obj.contract_info.bid_price} currency={currency} />\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Total profit/loss'),\n        col_index: 'profit',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.profit) return null;\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            // eslint-disable-next-line consistent-return\n            return (\n                <div\n                    className={classNames('open-positions__profit-loss', {\n                        'open-positions__profit-loss--negative': total_profit < 0,\n                        'open-positions__profit-loss--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={Math.abs(total_profit)} currency={currency} />\n                    <div className='open-positions__profit-loss--movement'>\n                        {total_profit > 0 ? <Icon icon='IcProfit' /> : <Icon icon='IcLoss' />}\n                    </div>\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Action'),\n        col_index: 'action',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return <div className='open-positions__row-action' />;\n            }\n\n            const { contract_info } = row_obj;\n            const position = getPositionById(contract_info.contract_id);\n            const { is_sell_requested } = position || {};\n\n            return (\n                <div className='open-positions__row-action'>\n                    <ContractCardSell\n                        contract_info={contract_info}\n                        is_sell_requested={is_sell_requested}\n                        getCardLabels={getCardLabels}\n                        onClickSell={onClickSell}\n                    />\n                </div>\n            );\n        },\n    },\n];\n","import classNames from 'classnames';\nimport React from 'react';\n\nconst Loading = ({ className, is_invisible, theme, id, data_testid }) => (\n    <div\n        id={id}\n        data-testid={data_testid}\n        className={classNames('barspinner', `barspinner--${theme || 'dark'}`, { invisible: is_invisible }, className)}\n    >\n        {Array.from(new Array(5)).map((x, inx) => (\n            <div key={inx} className={`barspinner__rect barspinner__rect--${inx + 1} rect${inx + 1}`} />\n        ))}\n    </div>\n);\n\nexport default Loading;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Loading from '_common/components/loading.jsx';\n\nconst PlaceholderComponent = props => {\n    const EmptyMessageComponent = props.empty_message_component;\n    return (\n        <React.Fragment>\n            {props.is_empty && (\n                <EmptyMessageComponent\n                    component_icon={props.component_icon}\n                    has_selected_date={props.has_selected_date}\n                    localized_message={props.localized_message}\n                    localized_period_message={props.localized_period_message}\n                />\n            )}\n            {props.is_loading && <Loading data_testid='dt_loading_component' />}\n        </React.Fragment>\n    );\n};\n\nPlaceholderComponent.propTypes = {\n    component_icon: PropTypes.string,\n    empty_message_component: PropTypes.func,\n    has_selected_date: PropTypes.bool,\n    is_empty: PropTypes.bool,\n    is_loading: PropTypes.bool,\n    localized_message: PropTypes.string,\n    localized_period_message: PropTypes.string,\n};\n\nexport default PlaceholderComponent;\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport {\n    DesktopWrapper,\n    MobileWrapper,\n    ProgressBar,\n    ProgressSliderMobile,\n    DataList,\n    DataTable,\n    ContractCard,\n    usePrevious,\n    PositionsDrawerCard,\n    SelectNative,\n    Dropdown,\n} from '@deriv/components';\nimport {\n    isAccumulatorContract,\n    isMobile,\n    isMultiplierContract,\n    isVanillaContract,\n    isTurbosContract,\n    getTimePercentage,\n    getUnsupportedContracts,\n    getTotalProfit,\n    getContractPath,\n    getCurrentTick,\n    getDurationPeriod,\n    getDurationUnitText,\n    getGrowthRatePercentage,\n    getCardLabels,\n    toMoment,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { ReportsTableRowLoader } from '../Components/Elements/ContentLoader';\nimport { getContractDurationType } from '../Helpers/market-underlying';\n\nimport EmptyTradeHistoryMessage from '../Components/empty-trade-history-message';\nimport {\n    getOpenPositionsColumnsTemplate,\n    getAccumulatorOpenPositionsColumnsTemplate,\n    getMultiplierOpenPositionsColumnsTemplate,\n} from 'Constants/data-table-constants';\nimport PlaceholderComponent from '../Components/placeholder-component';\nimport { observer, useStore } from '@deriv/stores';\nimport { TColIndex, TUnsupportedContractType } from 'Types';\nimport moment from 'moment';\n\ntype TRangeFloatZeroToOne = React.ComponentProps<typeof ProgressBar>['value'];\ntype TPortfolioStore = ReturnType<typeof useStore>['portfolio'];\ntype TDataList = React.ComponentProps<typeof DataList>;\ntype TDataListCell = React.ComponentProps<typeof DataList.Cell>;\ntype TRowRenderer = TDataList['rowRenderer'];\n\ntype TEmptyPlaceholderWrapper = React.PropsWithChildren<{\n    is_empty: boolean;\n    component_icon: string;\n}>;\n\ntype TUiStore = Pick<\n    ReturnType<typeof useStore>['ui'],\n    | 'addToast'\n    | 'current_focus'\n    | 'removeToast'\n    | 'setCurrentFocus'\n    | 'should_show_cancellation_warning'\n    | 'toggleCancellationWarning'\n    | 'toggleUnsupportedContractModal'\n>;\n\ntype TMobileRowRenderer = TUiStore & {\n    row?: TDataList['data_source'][0];\n    is_footer?: boolean;\n    columns_map: Record<TColIndex, TDataListCell['column']>;\n    getContractById: ReturnType<typeof useStore>['contract_trade']['getContractById'];\n    server_time: moment.Moment;\n    onClickCancel: (contract_id?: number) => void;\n    onClickRemove: TPortfolioStore['removePositionById'];\n    onClickSell: (contract_id?: number) => void;\n    measure?: () => void;\n};\n\ntype TOpenPositionsTable = {\n    className: string;\n    columns: Record<string, unknown>[];\n    component_icon: string;\n    currency: string;\n    active_positions: TPortfolioStore['active_positions'];\n    is_loading: boolean;\n    getRowAction: TDataList['getRowAction'];\n    mobileRowRenderer: TRowRenderer;\n    preloaderCheck: (item: TTotals) => boolean;\n    row_size: number;\n    totals: TTotals;\n    is_empty: boolean;\n};\n\ntype TTotals = {\n    contract_info?: {\n        profit?: number;\n        buy_price?: number;\n        bid_price?: number;\n        cancellation?: {\n            ask_price?: number;\n        };\n        limit_order?: {\n            take_profit?: {\n                order_amount?: number | null;\n            };\n        };\n    };\n    indicative?: number;\n    purchase?: number;\n    profit_loss?: number;\n    payout?: number;\n};\n\ntype TOpenPositions = RouteComponentProps & {\n    component_icon: string;\n};\n\nconst EmptyPlaceholderWrapper = ({ is_empty, component_icon, children }: TEmptyPlaceholderWrapper) => (\n    <React.Fragment>\n        {is_empty ? (\n            <PlaceholderComponent\n                is_empty={is_empty}\n                empty_message_component={EmptyTradeHistoryMessage}\n                component_icon={component_icon}\n                localized_message={localize('You have no open positions yet.')}\n            />\n        ) : (\n            children\n        )}\n    </React.Fragment>\n);\n\nconst MobileRowRenderer = ({\n    row = {},\n    is_footer,\n    columns_map = {},\n    server_time = toMoment(),\n    onClickCancel,\n    onClickSell,\n    measure,\n    ...props\n}: TMobileRowRenderer) => {\n    React.useEffect(() => {\n        if (!is_footer) {\n            measure?.();\n        }\n    }, [row.contract_info?.underlying, measure, is_footer]);\n\n    if (is_footer) {\n        return (\n            <>\n                <div className='open-positions__data-list-footer--content'>\n                    <div>\n                        <DataList.Cell row={row} column={columns_map.purchase} />\n                        <DataList.Cell row={row} column={columns_map.payout} />\n                    </div>\n                    <div>\n                        <DataList.Cell\n                            className='data-list__row-cell--amount'\n                            row={row}\n                            column={columns_map.indicative}\n                        />\n                        <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.profit} />\n                    </div>\n                </div>\n            </>\n        );\n    }\n\n    const { contract_info, contract_update, type, is_sell_requested } = row as TPortfolioStore['active_positions'][0];\n    const { currency, status, date_expiry, date_start, tick_count, purchase_time } = contract_info;\n    const current_tick = tick_count ? getCurrentTick(contract_info) : null;\n    const turbos_duration_unit = tick_count ? 'ticks' : getDurationUnitText(getDurationPeriod(contract_info), true);\n    const duration_type = getContractDurationType(\n        isTurbosContract(contract_info.contract_type) ? turbos_duration_unit : contract_info.longcode || ''\n    );\n    const progress_value = (getTimePercentage(server_time, date_start ?? 0, date_expiry ?? 0) /\n        100) as TRangeFloatZeroToOne;\n\n    if (isMultiplierContract(type) || isAccumulatorContract(type)) {\n        return (\n            <PositionsDrawerCard\n                contract_info={contract_info}\n                contract_update={contract_update}\n                currency={currency ?? ''}\n                is_link_disabled\n                onClickCancel={onClickCancel}\n                onClickSell={onClickSell}\n                server_time={server_time}\n                status={status ?? ''}\n                {...props}\n            />\n        );\n    }\n\n    return (\n        <>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.type} />\n                {isVanillaContract(type) || (isTurbosContract(type) && !tick_count) ? (\n                    <ProgressSliderMobile\n                        current_tick={current_tick}\n                        className='data-list__row--timer'\n                        expiry_time={date_expiry}\n                        getCardLabels={getCardLabels}\n                        is_loading={false}\n                        server_time={server_time}\n                        start_time={purchase_time}\n                        ticks_count={tick_count}\n                    />\n                ) : (\n                    <ProgressBar label={duration_type ?? ''} value={progress_value} />\n                )}\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.reference} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.currency} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.purchase} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.indicative} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.payout} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.profit} />\n            </div>\n            <div className='data-list__row-divider' />\n            <div className='data-list__row'>\n                <ContractCard.Sell\n                    contract_info={contract_info}\n                    is_sell_requested={is_sell_requested}\n                    getCardLabels={getCardLabels}\n                    onClickSell={onClickSell}\n                />\n            </div>\n        </>\n    );\n};\n\nexport const OpenPositionsTable = ({\n    className,\n    columns,\n    component_icon,\n    currency,\n    active_positions,\n    is_loading,\n    getRowAction,\n    mobileRowRenderer,\n    preloaderCheck,\n    row_size,\n    totals,\n    is_empty,\n}: TOpenPositionsTable) => (\n    <React.Fragment>\n        {is_loading ? (\n            <PlaceholderComponent\n                is_loading={is_loading}\n                empty_message_component={EmptyTradeHistoryMessage}\n                component_icon={component_icon}\n                localized_message={localize('You have no open positions yet.')}\n            />\n        ) : (\n            currency && (\n                <div className='reports__content'>\n                    <DesktopWrapper>\n                        <EmptyPlaceholderWrapper component_icon={component_icon} is_empty={is_empty}>\n                            <DataTable\n                                className={className}\n                                columns={columns}\n                                preloaderCheck={preloaderCheck}\n                                footer={totals}\n                                data_source={active_positions}\n                                getRowAction={getRowAction}\n                                getRowSize={() => row_size}\n                                content_loader={ReportsTableRowLoader}\n                            >\n                                <PlaceholderComponent is_loading={is_loading} />\n                            </DataTable>\n                        </EmptyPlaceholderWrapper>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <EmptyPlaceholderWrapper component_icon={component_icon} is_empty={is_empty}>\n                            <DataList\n                                className={className}\n                                data_source={active_positions}\n                                footer={totals}\n                                rowRenderer={mobileRowRenderer}\n                                getRowAction={getRowAction}\n                                row_gap={8}\n                                keyMapper={item => item?.id}\n                            >\n                                <PlaceholderComponent is_loading={is_loading} />\n                            </DataList>\n                        </EmptyPlaceholderWrapper>\n                    </MobileWrapper>\n                </div>\n            )\n        )}\n    </React.Fragment>\n);\n\nconst getRowAction: TDataList['getRowAction'] = row_obj =>\n    row_obj.is_unsupported\n        ? {\n              component: (\n                  <Localize\n                      i18n_default_text=\"The {{trade_type_name}} contract details aren't currently available. We're working on making them available soon.\"\n                      values={{\n                          trade_type_name: getUnsupportedContracts()[row_obj.type as TUnsupportedContractType]?.name,\n                      }}\n                  />\n              ),\n          }\n        : getContractPath(row_obj.id || 0);\n\n/*\n * After refactoring transactionHandler for creating positions,\n * purchase property in contract positions object is somehow NaN or undefined in the first few responses.\n * So we set it to true in these cases to show a preloader for the data-table-row until the correct value is set.\n */\nconst isPurchaseReceived: TOpenPositionsTable['preloaderCheck'] = (item: { purchase?: number }) =>\n    isNaN(Number(item.purchase)) || !item.purchase;\n\nconst getOpenPositionsTotals = (\n    active_positions_filtered: TPortfolioStore['active_positions'],\n    is_multiplier_selected: boolean,\n    is_accumulator_selected: boolean\n) => {\n    let totals: TTotals;\n\n    if (is_multiplier_selected) {\n        let ask_price = 0;\n        let profit = 0;\n        let buy_price = 0;\n        let bid_price = 0;\n        let purchase = 0;\n\n        active_positions_filtered.forEach(portfolio_pos => {\n            buy_price += Number(portfolio_pos.contract_info.buy_price);\n            bid_price += Number(portfolio_pos.contract_info.bid_price);\n            purchase += Number(portfolio_pos.purchase);\n            if (portfolio_pos.contract_info) {\n                const prices = {\n                    bid_price: portfolio_pos.contract_info.bid_price ?? 0,\n                    buy_price: portfolio_pos.contract_info.buy_price ?? 0,\n                };\n                profit += getTotalProfit(prices);\n\n                if (portfolio_pos.contract_info.cancellation) {\n                    ask_price += portfolio_pos.contract_info.cancellation.ask_price || 0;\n                }\n            }\n        });\n        totals = {\n            contract_info: {\n                profit,\n                buy_price,\n                bid_price,\n            },\n            purchase,\n        };\n\n        if (ask_price > 0) {\n            if (totals.contract_info)\n                totals.contract_info.cancellation = {\n                    ask_price,\n                };\n        }\n    } else if (is_accumulator_selected) {\n        let buy_price = 0;\n        let bid_price = 0;\n        let take_profit = 0;\n        let profit = 0;\n\n        active_positions_filtered?.forEach(({ contract_info }) => {\n            buy_price += Number(contract_info.buy_price);\n            bid_price += Number(contract_info.bid_price);\n            if (contract_info.limit_order?.take_profit?.order_amount)\n                take_profit += contract_info.limit_order.take_profit.order_amount;\n            if (contract_info) {\n                profit += getTotalProfit(contract_info);\n            }\n        });\n        totals = {\n            contract_info: {\n                buy_price,\n                bid_price,\n                profit,\n                limit_order: {\n                    take_profit: {\n                        order_amount: take_profit,\n                    },\n                },\n            },\n            purchase: buy_price,\n        };\n    } else {\n        let indicative = 0;\n        let purchase = 0;\n        let profit_loss = 0;\n        let payout = 0;\n\n        active_positions_filtered?.forEach(portfolio_pos => {\n            indicative += +portfolio_pos.indicative;\n            purchase += Number(portfolio_pos.purchase);\n            profit_loss += Number(portfolio_pos.profit_loss);\n            payout += Number(portfolio_pos.payout);\n        });\n        totals = {\n            indicative,\n            purchase,\n            profit_loss,\n            payout,\n        };\n    }\n    return totals;\n};\n\nconst OpenPositions = observer(({ component_icon, ...props }: TOpenPositions) => {\n    const { portfolio, client, ui, common, contract_trade } = useStore();\n    const {\n        active_positions,\n        error,\n        getPositionById,\n        is_accumulator,\n        is_loading,\n        is_multiplier,\n        onClickCancel,\n        onClickSell,\n        onMount,\n        removePositionById: onClickRemove,\n    } = portfolio;\n    const { currency, is_eu: hide_accu_in_dropdown } = client;\n    const {\n        notification_messages_ui: NotificationMessages,\n        addToast,\n        current_focus,\n        is_mobile,\n        removeToast,\n        setCurrentFocus,\n        should_show_cancellation_warning,\n        toggleCancellationWarning,\n        toggleUnsupportedContractModal,\n    } = ui;\n    const { server_time } = common;\n    const { getContractById } = contract_trade;\n\n    const store_props = {\n        onClickRemove,\n        NotificationMessages,\n        addToast,\n        current_focus,\n        is_mobile,\n        removeToast,\n        setCurrentFocus,\n        should_show_cancellation_warning,\n        toggleCancellationWarning,\n        toggleUnsupportedContractModal,\n        getContractById,\n    };\n\n    const [has_accumulator_contract, setHasAccumulatorContract] = React.useState(false);\n    const [has_multiplier_contract, setHasMultiplierContract] = React.useState(false);\n    const previous_active_positions = usePrevious(active_positions);\n    const contract_types = [\n        { text: localize('Options'), is_default: !is_multiplier && !is_accumulator },\n        { text: localize('Multipliers'), is_default: is_multiplier },\n        { text: localize('Accumulators'), is_default: is_accumulator },\n    ];\n    const [contract_type_value, setContractTypeValue] = React.useState(\n        contract_types.find(type => type.is_default)?.text || localize('Options')\n    );\n    const accumulator_rates = [localize('All growth rates'), '1%', '2%', '3%', '4%', '5%'];\n    const [accumulator_rate, setAccumulatorRate] = React.useState(accumulator_rates[0]);\n    const is_accumulator_selected = contract_type_value === contract_types[2].text;\n    const is_multiplier_selected = contract_type_value === contract_types[1].text;\n    const contract_types_list = contract_types\n        .filter(contract_type => contract_type.text !== localize('Accumulators') || !hide_accu_in_dropdown)\n        .map(({ text }) => ({ text, value: text }));\n    const accumulators_rates_list = accumulator_rates.map(value => ({ text: value, value }));\n    const active_positions_filtered = active_positions?.filter(({ contract_info }) => {\n        if (contract_info) {\n            if (is_multiplier_selected) return isMultiplierContract(contract_info.contract_type || '');\n            if (is_accumulator_selected)\n                return (\n                    isAccumulatorContract(contract_info.contract_type) &&\n                    (`${getGrowthRatePercentage(Number(contract_info.growth_rate))}%` === accumulator_rate ||\n                        !accumulator_rate.includes('%'))\n                );\n            return (\n                !isMultiplierContract(contract_info.contract_type || '') &&\n                !isAccumulatorContract(contract_info.contract_type)\n            );\n        }\n        return true;\n    });\n    const active_positions_filtered_totals = getOpenPositionsTotals(\n        active_positions_filtered,\n        is_multiplier_selected,\n        is_accumulator_selected\n    );\n\n    React.useEffect(() => {\n        /*\n         * For mobile, we show portfolio stepper in header even for reports pages.\n         * `onMount` in portfolio store will be invoked from portfolio stepper component in `trade-header-extensions.jsx`\n         */\n\n        onMount();\n        checkForAccuAndMultContracts();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        checkForAccuAndMultContracts(previous_active_positions);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [previous_active_positions]);\n\n    const checkForAccuAndMultContracts = (prev_active_positions: TPortfolioStore['active_positions'] = []) => {\n        if (active_positions === prev_active_positions) return;\n        if (!has_accumulator_contract) {\n            setHasAccumulatorContract(\n                active_positions.some(({ contract_info }) => isAccumulatorContract(contract_info?.contract_type))\n            );\n        }\n        if (!has_multiplier_contract) {\n            setHasMultiplierContract(\n                active_positions.some(({ contract_info }) => isMultiplierContract(contract_info?.contract_type || ''))\n            );\n        }\n    };\n\n    if (error) return <p>{error}</p>;\n\n    const getColumns = () => {\n        if (is_multiplier_selected && server_time) {\n            return getMultiplierOpenPositionsColumnsTemplate({\n                currency,\n                onClickCancel,\n                onClickSell,\n                getPositionById,\n                server_time,\n            });\n        }\n        if (is_accumulator_selected) {\n            return getAccumulatorOpenPositionsColumnsTemplate({\n                currency,\n                onClickSell,\n                getPositionById,\n            });\n        }\n        return getOpenPositionsColumnsTemplate(currency);\n    };\n\n    const columns = getColumns();\n\n    const columns_map = {} as Record<TColIndex, TDataListCell['column']>;\n    columns.forEach(e => {\n        columns_map[e.col_index as TColIndex] = e as TDataListCell['column'];\n    });\n\n    const mobileRowRenderer: TRowRenderer = args => (\n        <MobileRowRenderer\n            {...args}\n            columns_map={columns_map}\n            server_time={server_time || toMoment()}\n            onClickCancel={onClickCancel}\n            onClickSell={onClickSell}\n            {...props}\n            {...store_props}\n        />\n    );\n\n    const shared_props = {\n        active_positions: active_positions_filtered,\n        component_icon,\n        currency,\n        is_loading,\n        mobileRowRenderer,\n        getRowAction,\n        preloaderCheck: isPurchaseReceived,\n        totals: active_positions_filtered_totals,\n    };\n\n    const getOpenPositionsTable = () => {\n        let classname = 'open-positions';\n        let row_size = isMobile() ? 5 : 63;\n\n        if (is_accumulator_selected) {\n            classname = 'open-positions-accumulator open-positions';\n            row_size = isMobile() ? 3 : 68;\n        } else if (is_multiplier_selected) {\n            classname = 'open-positions-multiplier open-positions';\n            row_size = isMobile() ? 3 : 68;\n        }\n\n        return (\n            <OpenPositionsTable\n                className={classname}\n                columns={columns}\n                is_empty={active_positions_filtered.length === 0}\n                row_size={row_size}\n                {...shared_props}\n            />\n        );\n    };\n\n    return (\n        <React.Fragment>\n            <NotificationMessages />\n            {active_positions.length !== 0 && (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <div\n                            className={\n                                is_accumulator_selected\n                                    ? 'open-positions__accumulator-container'\n                                    : 'open-positions__contract-types-selector-container'\n                            }\n                        >\n                            <div className='open-positions__accumulator-container__contract-dropdown'>\n                                <Dropdown\n                                    is_align_text_left\n                                    name='contract_types'\n                                    list={contract_types_list}\n                                    value={contract_type_value}\n                                    onChange={e => setContractTypeValue(e.target.value)}\n                                />\n                            </div>\n                            {is_accumulator_selected && !hide_accu_in_dropdown && (\n                                <div className='open-positions__accumulator-container__rates-dropdown'>\n                                    <Dropdown\n                                        is_align_text_left\n                                        name='accumulator_rates'\n                                        list={accumulators_rates_list}\n                                        value={accumulator_rate}\n                                        onChange={e => setAccumulatorRate(e.target.value)}\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <div\n                            className={\n                                is_accumulator_selected\n                                    ? 'open-positions__accumulator-container--mobile'\n                                    : 'open-positions__contract-types-selector-container--mobile'\n                            }\n                        >\n                            <SelectNative\n                                className='open-positions__accumulator-container-mobile__contract-dropdown'\n                                list_items={contract_types_list}\n                                value={contract_type_value}\n                                should_show_empty_option={false}\n                                onChange={(e: React.ChangeEvent<HTMLSelectElement> & { target: { value: string } }) =>\n                                    setContractTypeValue(e.target.value)\n                                }\n                            />\n                            {is_accumulator_selected && !hide_accu_in_dropdown && (\n                                <SelectNative\n                                    className='open-positions__accumulator-container--mobile__rates-dropdown'\n                                    list_items={accumulators_rates_list}\n                                    value={accumulator_rate}\n                                    should_show_empty_option={false}\n                                    onChange={(\n                                        e: React.ChangeEvent<HTMLSelectElement> & { target: { value: string } }\n                                    ) => setAccumulatorRate(e.target.value)}\n                                />\n                            )}\n                        </div>\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n            {getOpenPositionsTable()}\n        </React.Fragment>\n    );\n});\n\nexport default withRouter(OpenPositions);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Button, DatePicker, Icon, InputField, MobileDialog, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { toMoment } from '@deriv/shared';\nimport { TInputDateRange } from 'Types';\n\ntype TRadioButton = {\n    id: string;\n    className?: string;\n    selected_value?: string;\n    value?: string;\n    label?: string;\n    onChange: (value: { label?: string; value?: string }) => void;\n};\n\nexport const RadioButton = ({ id, className, selected_value, value, label, onChange }: TRadioButton) => {\n    return (\n        <label\n            htmlFor={id}\n            className={classNames('composite-calendar-modal__radio', className, {\n                'composite-calendar-modal__radio--selected': selected_value === value,\n            })}\n            onClick={() => onChange({ label, value })}\n        >\n            <input className='composite-calendar-modal__radio-input' id={id} type='radio' value={value} />\n            <span\n                className={classNames('composite-calendar-modal__radio-circle', {\n                    'composite-calendar-modal__radio-circle--selected': selected_value === value,\n                })}\n            />\n            <Text\n                as='p'\n                color='prominent'\n                size='xs'\n                line_height='unset'\n                weight={selected_value === value ? 'bold' : 'normal'}\n            >\n                {label}\n            </Text>\n        </label>\n    );\n};\nconst CUSTOM_KEY = 'custom';\n\ntype TCompositeCalendarMobile = {\n    input_date_range?: TInputDateRange;\n    current_focus?: string;\n    duration_list?: Array<TInputDateRange>;\n    onChange: (\n        value: { from?: moment.Moment; to?: moment.Moment; is_batch?: boolean },\n        extra_data?: { date_range: TInputDateRange }\n    ) => void;\n    setCurrentFocus?: (focus: string) => void;\n    from: number;\n    to: number;\n};\n\nconst CompositeCalendarMobile = React.memo(\n    ({\n        input_date_range,\n        current_focus,\n        duration_list,\n        onChange,\n        setCurrentFocus,\n        from,\n        to,\n    }: TCompositeCalendarMobile) => {\n        const date_range = input_date_range || duration_list?.find(range => range.value === 'all_time');\n\n        const [from_date, setFrom] = React.useState(from ? toMoment(from).format('YYYY-MM-DD') : undefined);\n        const [to_date, setTo] = React.useState(to ? toMoment(to).format('YYYY-MM-DD') : undefined);\n        const [is_open, setIsOpen] = React.useState(false);\n\n        const [applied_date_range, setAppliedDateRange] = React.useState(date_range);\n        const [selected_date_range, setSelectedDateRange] = React.useState(date_range);\n        const today = toMoment().format('YYYY-MM-DD');\n\n        const selectDateRange = (_selected_date_range: TInputDateRange, is_today?: boolean) => {\n            const new_from = _selected_date_range.duration;\n            onChange(\n                {\n                    from:\n                        is_today || new_from\n                            ? toMoment().startOf('day').subtract(new_from, 'day').add(1, 's')\n                            : undefined,\n                    to: toMoment().endOf('day'),\n                    is_batch: true,\n                },\n                {\n                    date_range: _selected_date_range,\n                }\n            );\n        };\n\n        const selectCustomDateRange = () => {\n            const new_from = from_date || to_date || today;\n            const new_to = to_date || today;\n\n            const new_date_range = Object.assign(selected_date_range as TInputDateRange, {\n                label: `${toMoment(new_from).format('DD MMM YYYY')} - ${toMoment(new_to).format('DD MMM YYYY')}`,\n            });\n\n            onChange(\n                {\n                    from: toMoment(new_from).startOf('day').add(1, 's'),\n                    to: toMoment(new_to).endOf('day'),\n                    is_batch: true,\n                },\n                {\n                    date_range: new_date_range,\n                }\n            );\n        };\n\n        const applyDateRange = () => {\n            if (selected_date_range?.onClick) {\n                selectDateRange(selected_date_range);\n            } else if (selected_date_range?.value === CUSTOM_KEY) {\n                selectCustomDateRange();\n            }\n            setAppliedDateRange(selected_date_range);\n            setIsOpen(false);\n        };\n\n        const selectToday = () => {\n            const new_date_range = {\n                duration: 0,\n                label: localize('Today'),\n            };\n            selectDateRange(new_date_range, true);\n            setAppliedDateRange(new_date_range);\n            setSelectedDateRange(new_date_range);\n            setIsOpen(false);\n        };\n\n        const selectDate = (e: React.ChangeEvent<HTMLInputElement>, key: string) => {\n            setSelectedDateRange({ value: CUSTOM_KEY });\n\n            if (key === 'from') setFrom(e.target?.value);\n            if (key === 'to') setTo(e.target?.value);\n        };\n\n        const getMobileFooter = () => {\n            return (\n                <div className='composite-calendar-modal__actions'>\n                    <Button\n                        className='composite-calendar-modal__actions__cancel'\n                        text={localize('Cancel')}\n                        onClick={() => setIsOpen(false)}\n                        has_effect\n                        secondary\n                        large\n                    />\n                    <Button\n                        className='composite-calendar-modal__actions__ok'\n                        text={localize('OK')}\n                        onClick={applyDateRange}\n                        has_effect\n                        primary\n                        large\n                    />\n                </div>\n            );\n        };\n\n        const onDateRangeChange = (_date_range: TInputDateRange) => {\n            setSelectedDateRange(\n                duration_list?.find(range => _date_range && range.value === _date_range.value) || _date_range\n            );\n        };\n\n        const openDialog = () => {\n            setSelectedDateRange(applied_date_range);\n            setIsOpen(true);\n        };\n\n        return (\n            <React.Fragment>\n                <div className='composite-calendar__input-fields composite-calendar__input-fields--fill'>\n                    <InputField\n                        id='dt_calendar_input'\n                        current_focus={current_focus}\n                        is_read_only={true}\n                        icon={() => <Icon icon='IcCalendarDatefrom' className='inline-icon' />}\n                        onClick={openDialog}\n                        setCurrentFocus={setCurrentFocus}\n                        value={applied_date_range?.label}\n                    />\n                </div>\n                <MobileDialog\n                    portal_element_id='modal_root'\n                    title={localize('Please select duration')}\n                    visible={is_open}\n                    has_content_scroll\n                    onClose={() => setIsOpen(false)}\n                    content_height_offset='94px'\n                    footer={getMobileFooter()}\n                >\n                    <div className='composite-calendar-modal'>\n                        <div className='composite-calendar-modal__radio-group'>\n                            {duration_list?.map(duration => (\n                                <RadioButton\n                                    id={`composite-calendar-modal__radio__${duration.value}`}\n                                    key={duration.value}\n                                    value={duration.value}\n                                    label={duration.label}\n                                    selected_value={selected_date_range?.value}\n                                    onChange={onDateRangeChange}\n                                />\n                            ))}\n                        </div>\n                        <div className='composite-calendar-modal__custom'>\n                            <RadioButton\n                                id={'composite-calendar-modal__custom-radio'}\n                                className='composite-calendar-modal__custom-radio'\n                                value={CUSTOM_KEY}\n                                label={localize('Custom')}\n                                selected_value={selected_date_range?.value}\n                                onChange={onDateRangeChange}\n                            />\n\n                            <div className='composite-calendar-modal__custom-date-range'>\n                                <DatePicker\n                                    className='composite-calendar-modal__custom-date-range-start-date'\n                                    is_nativepicker={true}\n                                    placeholder={localize('Start date')}\n                                    value={from_date}\n                                    max_date={to_date || today}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => selectDate(e, 'from')}\n                                />\n                                <DatePicker\n                                    className='composite-calendar-modal__custom-date-range-end-date'\n                                    is_nativepicker={true}\n                                    placeholder={localize('End date')}\n                                    value={to_date}\n                                    max_date={today}\n                                    min_date={from_date}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => selectDate(e, 'to')}\n                                />\n                            </div>\n                        </div>\n                        <Button\n                            className='composite-calendar-modal__actions-today'\n                            text={localize('Back to today')}\n                            onClick={selectToday}\n                            has_effect\n                            tertiary\n                            large\n                        />\n                    </div>\n                </MobileDialog>\n            </React.Fragment>\n        );\n    }\n);\n\nCompositeCalendarMobile.displayName = 'CompositeCalendarMobile';\nexport default CompositeCalendarMobile;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype TListItem = {\n    label: string | React.ReactElement | Array<string>;\n    is_active: boolean;\n    onClick: () => void;\n};\n\nconst ListItem = ({ onClick, is_active, label }: TListItem) => (\n    <li\n        className={classNames({\n            'composite-calendar__prepopulated-list--is-active': is_active,\n        })}\n        onClick={onClick}\n    >\n        {label}\n    </li>\n);\n\nexport default ListItem;\n","import React from 'react';\nimport { toMoment } from '@deriv/shared';\nimport ListItem from './list-item';\n\ntype TItem = {\n    value: string;\n    label: string;\n    onClick: () => void;\n    duration: number;\n};\n\ntype TSideList = {\n    from: number;\n    items: Array<TItem>;\n    to: number;\n};\n\nconst isActive = (from: number, to: number, flag: number) => {\n    if (flag === 0) {\n        return toMoment().endOf('day').unix() === to && from === null;\n    }\n    return Math.ceil(to / 86400) - Math.ceil(from / 86400) === flag;\n};\n\nconst SideList = ({ items, from, to }: TSideList) => (\n    <ul className='composite-calendar__prepopulated-list'>\n        {items.map(item => {\n            const { duration, label, onClick } = item;\n            const is_active = isActive(from, to, duration);\n            return <ListItem key={duration} is_active={is_active} label={label} onClick={onClick} />;\n        })}\n    </ul>\n);\n\nexport default SideList;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\n\ntype TCalendarIcon = {\n    onClick: () => void;\n};\n\nconst CalendarIcon = ({ onClick }: TCalendarIcon) => (\n    <Icon onClick={onClick} icon='IcCalendarDatefrom' className='inline-icon' />\n);\n\nexport default CalendarIcon;\n","import React from 'react';\nimport Loadable from 'react-loadable';\nimport { DesktopWrapper, InputField, MobileWrapper, useOnClickOutside } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { daysFromTodayTo, toMoment } from '@deriv/shared';\nimport CompositeCalendarMobile from './composite-calendar-mobile';\nimport SideList from './side-list';\nimport CalendarIcon from './calendar-icon';\nimport TwoMonthPicker from './two-month-picker';\nimport moment from 'moment';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TCompositeCalendar = {\n    onChange: (values: { to?: moment.Moment; from?: moment.Moment; is_batch?: boolean }) => void;\n    to: number;\n    from: number;\n};\n\ntype TTwoMonthPickerLoadable = {\n    onChange: (date: moment.Moment) => void;\n    isPeriodDisabled: (date: moment.Moment) => boolean;\n    value: number;\n};\n\nconst TwoMonthPickerLoadable = Loadable<TTwoMonthPickerLoadable, typeof TwoMonthPicker>({\n    loader: () => import(/* webpackChunkName: \"two-month-picker\" */ './two-month-picker'),\n    loading: () => null,\n    render(loaded, props) {\n        const Component = loaded.default;\n        return <Component {...props} />;\n    },\n});\n\nconst CompositeCalendar = observer((props: TCompositeCalendar) => {\n    const { ui } = useStore();\n    const { current_focus, setCurrentFocus } = ui;\n    const { onChange, to, from } = props;\n\n    const [show_to, setShowTo] = React.useState(false);\n    const [show_from, setShowFrom] = React.useState(false);\n    const [list] = React.useState([\n        {\n            value: 'all_time',\n            label: localize('All time'),\n            onClick: () => selectDateRange(),\n            duration: 0,\n        },\n        {\n            value: 'last_7_days',\n            label: localize('Last 7 days'),\n            onClick: () => selectDateRange(7),\n            duration: 7,\n        },\n        {\n            value: 'last_30_days',\n            label: localize('Last 30 days'),\n            onClick: () => selectDateRange(30),\n            duration: 30,\n        },\n        {\n            value: 'last_60_days',\n            label: localize('Last 60 days'),\n            onClick: () => selectDateRange(60),\n            duration: 60,\n        },\n        {\n            value: 'last_quarter',\n            label: localize('Last quarter'),\n            onClick: () => selectDateRange(90),\n            duration: 90,\n        },\n    ]);\n\n    const wrapper_ref = React.useRef<HTMLInputElement>(null);\n\n    const validateClickOutside = (event: MouseEvent) => !wrapper_ref.current?.contains(event.target as Node);\n\n    const selectDateRange = (new_from?: number) => {\n        hideCalendar();\n        onChange({\n            from: new_from ? toMoment().startOf('day').subtract(new_from, 'day').add(1, 's') : undefined,\n            to: toMoment().endOf('day'),\n            is_batch: true,\n        });\n    };\n\n    const getToDateLabel = () => {\n        const date = toMoment(to);\n        return daysFromTodayTo(date) === 0 ? localize('Today') : date.format('MMM, DD YYYY');\n    };\n\n    const getFromDateLabel = () => {\n        const date = toMoment(from);\n        return from ? date.format('MMM, DD YYYY') : '';\n    };\n\n    const hideCalendar = () => {\n        setShowFrom(false);\n        setShowTo(false);\n    };\n\n    const showCalendar = (e: string) => {\n        if (e === 'from') {\n            setShowFrom(true);\n        }\n        if (e === 'to') {\n            setShowTo(true);\n        }\n    };\n\n    useOnClickOutside(\n        wrapper_ref,\n        (event: React.MouseEvent) => {\n            event?.stopPropagation();\n            event?.preventDefault();\n            hideCalendar();\n        },\n        validateClickOutside\n    );\n\n    const setToDate = (date: moment.Moment) => {\n        onChange({ to: toMoment(date).endOf('day') });\n    };\n\n    const setFromDate = (date: moment.Moment) => {\n        onChange({ from: toMoment(date) });\n        hideCalendar();\n    };\n\n    const isPeriodDisabledTo = (date: moment.Moment) => {\n        return date.unix() < from || date.unix() > toMoment().endOf('day').unix();\n    };\n\n    const isPeriodDisabledFrom = (date: moment.Moment) => date.unix() > to;\n\n    return (\n        <React.Fragment>\n            <DesktopWrapper>\n                <div id='dt_composite_calendar_inputs' className='composite-calendar__input-fields'>\n                    <InputField\n                        id='dt_calendar_input_from'\n                        current_focus={current_focus}\n                        is_read_only\n                        placeholder={localize('Date from')}\n                        icon={CalendarIcon}\n                        onClick={() => showCalendar('from')}\n                        setCurrentFocus={setCurrentFocus}\n                        value={getFromDateLabel()}\n                    />\n                    <InputField\n                        id='dt_calendar_input_to'\n                        current_focus={current_focus}\n                        is_read_only\n                        placeholder={localize('Date to')}\n                        icon={CalendarIcon}\n                        onClick={() => showCalendar('to')}\n                        setCurrentFocus={setCurrentFocus}\n                        value={getToDateLabel()}\n                    />\n                </div>\n                {show_to && (\n                    <div className='composite-calendar' ref={wrapper_ref}>\n                        <SideList from={from} to={to} items={list} />\n                        <TwoMonthPickerLoadable value={to} onChange={setToDate} isPeriodDisabled={isPeriodDisabledTo} />\n                    </div>\n                )}\n                {show_from && (\n                    <div className='composite-calendar' ref={wrapper_ref}>\n                        <SideList from={from} to={to} items={list} />\n                        <TwoMonthPickerLoadable\n                            value={from}\n                            onChange={setFromDate}\n                            isPeriodDisabled={isPeriodDisabledFrom}\n                        />\n                    </div>\n                )}\n            </DesktopWrapper>\n            <MobileWrapper>\n                <CompositeCalendarMobile duration_list={list} {...props} />\n            </MobileWrapper>\n        </React.Fragment>\n    );\n});\n\nCompositeCalendar.displayName = 'CompositeCalendar';\n\nexport default React.memo(CompositeCalendar);\n","import CompositeCalendar from './composite-calendar';\n\nexport default CompositeCalendar;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype TReportsMeta = {\n    filter_component: React.ReactNode;\n    optional_component?: React.ReactNode;\n    className?: string;\n    is_statement?: boolean;\n};\n\nconst ReportsMeta = ({ filter_component, className, optional_component, is_statement }: TReportsMeta) => {\n    return (\n        <div className={classNames('reports__meta', className)}>\n            {optional_component}\n            {filter_component && (\n                <div\n                    className={classNames('reports__meta-filter', {\n                        'reports__meta-filter--statement': is_statement,\n                    })}\n                >\n                    {filter_component}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport { ReportsMeta };\n","import classNames from 'classnames';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { DesktopWrapper, MobileWrapper, DataList, DataTable } from '@deriv/components';\nimport {\n    extractInfoFromShortcode,\n    isForwardStarting,\n    getContractPath,\n    getSupportedContracts,\n    getUnsupportedContracts,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { ReportsTableRowLoader } from '../Components/Elements/ContentLoader';\nimport CompositeCalendar from '../Components/Form/CompositeCalendar';\nimport { TSupportedContractType, TUnsupportedContractType } from 'Types';\nimport EmptyTradeHistoryMessage from '../Components/empty-trade-history-message';\nimport PlaceholderComponent from '../Components/placeholder-component';\nimport { ReportsMeta } from '../Components/reports-meta';\nimport { getProfitTableColumnsTemplate } from 'Constants/data-table-constants';\nimport { observer, useStore } from '@deriv/stores';\nimport { useReportsStore } from 'Stores/useReportsStores';\n\ntype TProfitTable = {\n    component_icon: string;\n};\n\ntype TDataListCell = React.ComponentProps<typeof DataList.Cell>;\n\ntype TGetProfitTableColumnsTemplate = ReturnType<typeof getProfitTableColumnsTemplate>;\n\nconst getRowAction = (row_obj: { [key: string]: unknown }) => {\n    const contract_type = extractInfoFromShortcode(row_obj?.shortcode as string)\n        ?.category?.toString()\n        .toUpperCase();\n    return getSupportedContracts()[contract_type as TSupportedContractType] &&\n        !isForwardStarting(row_obj.shortcode as string, Number(row_obj.purchase_time_unix))\n        ? getContractPath(Number(row_obj.contract_id))\n        : {\n              component: (\n                  <Localize\n                      i18n_default_text=\"The {{trade_type_name}} contract details aren't currently available. We're working on making them available soon.\"\n                      values={{\n                          trade_type_name: getUnsupportedContracts()[contract_type as TUnsupportedContractType]?.name,\n                      }}\n                  />\n              ),\n          };\n};\n\nconst ProfitTable = observer(({ component_icon }: TProfitTable) => {\n    const { client } = useStore();\n    const { profit_table } = useReportsStore();\n    const { currency, is_switching } = client;\n    const {\n        data,\n        date_from,\n        date_to,\n        error,\n        is_empty,\n        is_loading,\n        handleDateChange,\n        handleScroll,\n        has_selected_date,\n        onMount,\n        onUnmount,\n        totals,\n    } = profit_table;\n\n    React.useEffect(() => {\n        onMount();\n        return () => {\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (error) return <p>{error}</p>;\n\n    const filter_component = <CompositeCalendar onChange={handleDateChange} from={date_from} to={date_to} />;\n\n    const columns: TGetProfitTableColumnsTemplate = getProfitTableColumnsTemplate(currency, data.length);\n\n    const columns_map = Object.fromEntries(columns.map(column => [column.col_index, column])) as Record<\n        TGetProfitTableColumnsTemplate[number]['col_index'],\n        TGetProfitTableColumnsTemplate[number]\n    >;\n\n    const mobileRowRenderer: React.ComponentProps<typeof DataList>['rowRenderer'] = ({ row, is_footer }) => {\n        const duration_type = /^(MULTUP|MULTDOWN)/.test(row?.shortcode) ? '' : row?.duration_type;\n        const duration_classname = duration_type ? `duration-type__${duration_type.toLowerCase()}` : '';\n\n        if (is_footer) {\n            return (\n                <div className='data-list__row'>\n                    <DataList.Cell\n                        row={row}\n                        column={columns_map.action_type as TDataListCell['column']}\n                        is_footer={is_footer}\n                    />\n                    <DataList.Cell\n                        className='data-list__row-cell--amount'\n                        row={row}\n                        column={columns_map.profit_loss as TDataListCell['column']}\n                        is_footer={is_footer}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.action_type as TDataListCell['column']} />\n                    <div className={classNames('duration-type', duration_classname)}>\n                        <div className={classNames('duration-type__background', `${duration_classname}__background`)} />\n                        <span className={`${duration_classname}__label`}>{localize(duration_type)}</span>\n                    </div>\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.transaction_id as TDataListCell['column']} />\n                    <DataList.Cell\n                        className='data-list__row-cell--amount'\n                        row={row}\n                        column={columns_map.currency as TDataListCell['column']}\n                    />\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.purchase_time as TDataListCell['column']} />\n                    <DataList.Cell\n                        className='data-list__row-cell--amount'\n                        row={row}\n                        column={columns_map.buy_price as TDataListCell['column']}\n                    />\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.sell_time as TDataListCell['column']} />\n                    <DataList.Cell\n                        className='data-list__row-cell--amount'\n                        row={row}\n                        column={columns_map.sell_price as TDataListCell['column']}\n                    />\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.profit_loss as TDataListCell['column']} />\n                </div>\n            </>\n        );\n    };\n\n    return (\n        <React.Fragment>\n            <ReportsMeta filter_component={filter_component} className='profit-table__filter' />\n            {is_switching ? (\n                <PlaceholderComponent is_loading />\n            ) : (\n                <React.Fragment>\n                    {data.length === 0 || is_empty ? (\n                        <PlaceholderComponent\n                            is_loading={is_loading}\n                            has_selected_date={has_selected_date}\n                            is_empty={is_empty}\n                            empty_message_component={EmptyTradeHistoryMessage}\n                            component_icon={component_icon}\n                            localized_message={localize('You have no trading activity yet.')}\n                            localized_period_message={localize(\n                                \"You've made no transactions of this type during this period.\"\n                            )}\n                        />\n                    ) : (\n                        <div className='reports__content'>\n                            <DesktopWrapper>\n                                <DataTable\n                                    className='profit-table'\n                                    data_source={data}\n                                    columns={columns}\n                                    onScroll={handleScroll}\n                                    footer={totals}\n                                    getRowAction={getRowAction}\n                                    getRowSize={() => 63}\n                                    content_loader={ReportsTableRowLoader}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataTable>\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                <DataList\n                                    className='profit-table'\n                                    data_source={data}\n                                    rowRenderer={mobileRowRenderer}\n                                    getRowAction={getRowAction}\n                                    onScroll={handleScroll}\n                                    footer={totals}\n                                    row_gap={8}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataList>\n                            </MobileWrapper>\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default withRouter(ProfitTable);\n","import React from 'react';\nimport { MobileWrapper, Money, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { useReportsStore } from 'Stores/useReportsStores';\n\nconst AccountStatistics = observer(() => {\n    const { client } = useStore();\n    const { statement } = useReportsStore();\n    const { currency } = client;\n    const { account_statistics } = statement;\n\n    return (\n        <div className='statement__account-statistics'>\n            <div className='statement__account-statistics-item'>\n                <div className='statement__account-statistics--is-rectangle'>\n                    <Text color='less-prominent' className='statement__account-statistics-title'>\n                        {localize('Total deposits')} <MobileWrapper> ({currency}) </MobileWrapper>\n                    </Text>\n                    <Text\n                        color='prominent'\n                        weight='bold'\n                        align='center'\n                        className='statement__account-statistics-amount'\n                    >\n                        <Money amount={account_statistics.total_deposits} currency={currency} />\n                    </Text>\n                </div>\n            </div>\n            <div className='statement__account-statistics-item statement__account-statistics-total-withdrawal'>\n                <div className='statement__account-statistics--is-rectangle'>\n                    <Text color='less-prominent' className='statement__account-statistics-title'>\n                        {localize('Total withdrawals')} <MobileWrapper> ({currency}) </MobileWrapper>\n                    </Text>\n                    <Text\n                        color='prominent'\n                        weight='bold'\n                        align='center'\n                        className='statement__account-statistics-amount'\n                    >\n                        <Money amount={account_statistics.total_withdrawals} currency={currency} />\n                    </Text>\n                </div>\n            </div>\n            <div className='statement__account-statistics-item'>\n                <div className='statement__account-statistics--is-rectangle'>\n                    <Text color='less-prominent' className='statement__account-statistics-title'>\n                        {localize('Net deposits')} <MobileWrapper> ({currency}) </MobileWrapper>\n                    </Text>\n                    <Text\n                        color='prominent'\n                        weight='bold'\n                        align='center'\n                        className='statement__account-statistics-amount'\n                    >\n                        <Money\n                            amount={account_statistics.total_deposits - account_statistics.total_withdrawals}\n                            currency={currency}\n                        />\n                    </Text>\n                </div>\n            </div>\n        </div>\n    );\n});\n\nexport default AccountStatistics;\n","import React from 'react';\nimport { FilterDropdown } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport CompositeCalendar from './Form/CompositeCalendar';\nimport { observer } from '@deriv/stores';\nimport { useReportsStore } from 'Stores/useReportsStores';\n\nconst FilterComponent = observer(() => {\n    const { statement } = useReportsStore();\n    const { action_type, date_from, date_to, handleFilterChange, handleDateChange } = statement;\n\n    const filter_list = [\n        {\n            text: localize('All transactions'),\n            value: 'all',\n        },\n        {\n            text: localize('Buy'),\n            value: 'buy',\n        },\n        {\n            text: localize('Sell'),\n            value: 'sell',\n        },\n        {\n            text: localize('Deposit'),\n            value: 'deposit',\n        },\n        {\n            text: localize('Withdrawal'),\n            value: 'withdrawal',\n        },\n        {\n            text: localize('Transfer'),\n            value: 'transfer',\n        },\n    ];\n\n    return (\n        <React.Fragment>\n            <CompositeCalendar onChange={handleDateChange} from={date_from} to={date_to} />\n            <FilterDropdown\n                dropdown_display_className='dc-dropdown__display--has-suffix-icon'\n                filter_list={filter_list}\n                handleFilterChange={handleFilterChange}\n                initial_selected_filter={action_type}\n            />\n        </React.Fragment>\n    );\n});\n\nexport default FilterComponent;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { DesktopWrapper, MobileWrapper, DataList, DataTable, Text, Clipboard } from '@deriv/components';\nimport {\n    extractInfoFromShortcode,\n    isForwardStarting,\n    getUnsupportedContracts,\n    getContractPath,\n    getSupportedContracts,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { ReportsTableRowLoader } from '../Components/Elements/ContentLoader';\nimport { getStatementTableColumnsTemplate } from '../Constants/data-table-constants';\nimport PlaceholderComponent from '../Components/placeholder-component';\nimport AccountStatistics from '../Components/account-statistics';\nimport FilterComponent from '../Components/filter-component';\nimport { ReportsMeta } from '../Components/reports-meta';\nimport EmptyTradeHistoryMessage from '../Components/empty-trade-history-message';\nimport { observer, useStore } from '@deriv/stores';\nimport { useReportsStore } from 'Stores/useReportsStores';\nimport { TSupportedContractType, TUnsupportedContractType } from 'Types';\nimport { TSource } from '@deriv/components/src/components/data-table/data-table';\nimport { TRow } from '@deriv/components/src/components/types/common.types';\n\ntype TGetStatementTableColumnsTemplate = ReturnType<typeof getStatementTableColumnsTemplate>;\ntype TColIndex = 'icon' | 'refid' | 'currency' | 'date' | 'action_type' | 'amount' | 'balance';\n\ntype TAction =\n    | {\n          message?: string;\n          component?: React.ReactElement;\n      }\n    | string;\n\ntype TStatement = {\n    component_icon: string;\n};\n\ntype TDetailsComponent = {\n    message: string;\n    action_type: string;\n};\n\ntype TDataList = React.ComponentProps<typeof DataList>;\ntype TDataListCell = React.ComponentProps<typeof DataList.Cell>;\n\nconst DetailsComponent = ({ message = '', action_type = '' }: TDetailsComponent) => {\n    const address_hash_match = /:\\s([0-9a-zA-Z]+.{25,28})/gm.exec(message.split(/,\\s/)[0]);\n    const address_hash = address_hash_match?.[1];\n    const blockchain_hash_match = /:\\s([0-9a-zA-Z]+.{25,34})/gm.exec(message.split(/,\\s/)[1]);\n    const blockchain_hash = blockchain_hash_match?.[1];\n\n    let messages = [message];\n\n    if (address_hash || blockchain_hash) {\n        const lines = message.split(/,\\s/);\n        messages = lines.map((text, index) => {\n            if (index !== lines.length - 1) {\n                return `${text}, `;\n            }\n            return text;\n        });\n    }\n\n    return (\n        <Text as='div' size='xs' className='statement__row--detail-text' align='center'>\n            {messages.map((text, index) => {\n                return (\n                    <div key={text}>\n                        {text}\n                        {blockchain_hash && index === messages.length - 1 && (\n                            <Clipboard text_copy={blockchain_hash} popoverAlignment='top' />\n                        )}\n                        {address_hash && action_type === 'withdrawal' && index === messages.length - 1 && (\n                            <Clipboard text_copy={address_hash} popoverAlignment='top' />\n                        )}\n                    </div>\n                );\n            })}\n        </Text>\n    );\n};\n\ntype TGetRowAction = TDataList['getRowAction'] | React.ComponentProps<typeof DataTable>['getRowAction'];\n\nconst getRowAction: TGetRowAction = (row_obj: TSource | TRow) => {\n    let action: TAction = {};\n    if (row_obj.id && ['buy', 'sell'].includes(row_obj.action_type)) {\n        const contract_type = extractInfoFromShortcode(row_obj.shortcode)?.category?.toUpperCase();\n        action =\n            getSupportedContracts()[contract_type as TSupportedContractType] &&\n            !isForwardStarting(row_obj.shortcode, row_obj.purchase_time || row_obj.transaction_time)\n                ? getContractPath(row_obj.id)\n                : {\n                      message: '',\n                      component: (\n                          <Localize\n                              i18n_default_text=\"The {{trade_type_name}} contract details aren't currently available. We're working on making them available soon.\"\n                              values={{\n                                  trade_type_name:\n                                      getUnsupportedContracts()[contract_type as TUnsupportedContractType]?.name,\n                              }}\n                          />\n                      ),\n                  };\n    } else if (row_obj.action_type === 'withdrawal') {\n        if (row_obj.withdrawal_details && row_obj.longcode) {\n            action = {\n                message: `${row_obj.withdrawal_details} ${row_obj.longcode}`,\n            };\n        } else {\n            action = {\n                message: row_obj.desc,\n            };\n        }\n    } else if (row_obj.desc && ['deposit', 'transfer', 'adjustment', 'hold', 'release'].includes(row_obj.action_type)) {\n        action = {\n            message: row_obj.desc,\n        };\n    }\n\n    // add typeof check because action can be object or string\n    if (typeof action === 'object' && action?.message) {\n        action.component = <DetailsComponent message={action.message} action_type={row_obj.action_type} />;\n    }\n\n    return action;\n};\n\nconst Statement = observer(({ component_icon }: TStatement) => {\n    const { client } = useStore();\n    const { statement } = useReportsStore();\n    const { currency, standpoint, is_switching, is_virtual } = client;\n    const { data, error, handleScroll, has_selected_date, is_empty, is_loading, onMount, onUnmount } = statement;\n    const is_mx_mlt = standpoint.iom || standpoint.malta;\n\n    React.useEffect(() => {\n        onMount();\n        return () => {\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (error) return <p>{error}</p>;\n\n    const columns: TGetStatementTableColumnsTemplate = getStatementTableColumnsTemplate(currency);\n    const columns_map = columns.reduce((map, item) => {\n        map[item.col_index as TColIndex] = item;\n        return map;\n    }, {} as Record<TColIndex, typeof columns[number]>);\n\n    // TODO: Export type instead of any from 'DataList' component when it migrates to tsx\n    const mobileRowRenderer = ({\n        row,\n        passthrough,\n    }: Pick<Parameters<TDataList['rowRenderer']>[0], 'row' | 'passthrough'>) => (\n        <React.Fragment>\n            <div className='data-list__row'>\n                <DataList.Cell\n                    row={row}\n                    column={columns_map.icon as TDataListCell['column']}\n                    passthrough={passthrough}\n                />\n                <DataList.Cell\n                    row={row}\n                    column={columns_map.action_type as TDataListCell['column']}\n                    passthrough={passthrough}\n                />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.refid as TDataListCell['column']} />\n                <DataList.Cell\n                    className='data-list__row-cell--amount'\n                    row={row}\n                    column={columns_map.currency as TDataListCell['column']}\n                />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.date as TDataListCell['column']} />\n                <DataList.Cell\n                    className='data-list__row-cell--amount'\n                    row={row}\n                    column={columns_map.amount as TDataListCell['column']}\n                />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.balance as TDataListCell['column']} />\n            </div>\n        </React.Fragment>\n    );\n\n    return (\n        <React.Fragment>\n            <ReportsMeta\n                className={is_mx_mlt ? undefined : 'reports__meta--statement'}\n                filter_component={<FilterComponent />}\n                is_statement\n                optional_component={!is_switching && is_mx_mlt && <AccountStatistics />}\n            />\n            {is_switching ? (\n                <PlaceholderComponent is_loading />\n            ) : (\n                <React.Fragment>\n                    {data?.length === 0 || is_empty ? (\n                        <PlaceholderComponent\n                            is_loading={is_loading}\n                            has_selected_date={has_selected_date}\n                            is_empty={is_empty}\n                            empty_message_component={EmptyTradeHistoryMessage}\n                            component_icon={component_icon}\n                            localized_message={localize('You have no transactions yet.')}\n                            localized_period_message={localize(\n                                \"You've made no transactions of this type during this period.\"\n                            )}\n                        />\n                    ) : (\n                        <div className='reports__content'>\n                            <DesktopWrapper>\n                                <DataTable\n                                    className='statement'\n                                    columns={columns}\n                                    content_loader={ReportsTableRowLoader}\n                                    data_source={data}\n                                    getRowAction={getRowAction}\n                                    onScroll={handleScroll}\n                                    passthrough={{\n                                        isTopUp: (item: { action?: string }) => is_virtual && item.action === 'Deposit',\n                                    }}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataTable>\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                <DataList\n                                    className='statement'\n                                    data_source={data}\n                                    getRowAction={getRowAction}\n                                    onScroll={handleScroll}\n                                    rowRenderer={mobileRowRenderer}\n                                    row_gap={8}\n                                    passthrough={{\n                                        isTopUp: (item: { action?: string }) => is_virtual && item.action === 'Deposit',\n                                    }}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataList>\n                            </MobileWrapper>\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default withRouter(Statement);\n","import React from 'react';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\nimport {\n    DesktopWrapper,\n    Div100vhContainer,\n    FadeWrapper,\n    Loading,\n    MobileWrapper,\n    PageOverlay,\n    SelectNative,\n    VerticalTab,\n} from '@deriv/components';\nimport { getSelectedRoute } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { TRoute } from 'Types';\nimport 'Sass/app/modules/reports.scss';\n\ntype TList = {\n    value: React.ComponentType | typeof Redirect;\n    default?: boolean;\n    label: string;\n    icon?: string;\n    path?: string;\n};\n\ntype TReports = {\n    history: RouteComponentProps['history'];\n    location: RouteComponentProps['location'];\n    routes: TRoute[];\n};\n\nconst Reports = observer(({ history, location, routes }: TReports) => {\n    const { client, common, ui } = useStore();\n\n    const { is_logged_in, is_logging_in, setVisibilityRealityCheck } = client;\n    const { is_from_derivgo, routeBackInApp } = common;\n    const { is_reports_visible, setReportsTabIndex, reports_route_tab_index, toggleReports } = ui;\n\n    React.useEffect(() => {\n        toggleReports(true);\n        return () => {\n            setVisibilityRealityCheck(1);\n            toggleReports(false);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onClickClose = () => routeBackInApp(history);\n\n    const handleRouteChange = (e: React.ChangeEvent<HTMLSelectElement>) => history.push(e.target.value);\n\n    const menu_options = () => {\n        const options: TList[] = [];\n\n        routes.forEach(route => {\n            options.push({\n                default: route.default,\n                icon: route.icon_component,\n                label: route.getTitle(),\n                value: route.component,\n                path: route.path,\n            });\n        });\n\n        return options;\n    };\n\n    const selected_route = getSelectedRoute({ routes, pathname: location.pathname });\n\n    if (!is_logged_in && is_logging_in) {\n        return <Loading is_fullscreen />;\n    }\n    return (\n        <FadeWrapper is_visible={is_reports_visible} className='reports-page-wrapper' keyname='reports-page-wrapper'>\n            <div className='reports'>\n                <PageOverlay header={localize('Reports')} onClickClose={onClickClose} is_from_app={is_from_derivgo}>\n                    <DesktopWrapper>\n                        <VerticalTab\n                            is_floating\n                            current_path={location.pathname}\n                            is_routed\n                            is_full_width\n                            setVerticalTabIndex={setReportsTabIndex}\n                            vertical_tab_index={selected_route.default ? 0 : reports_route_tab_index}\n                            list={menu_options()}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <Div100vhContainer className='reports__mobile-wrapper' height_offset='80px'>\n                            <SelectNative\n                                className='reports__route-selection'\n                                list_items={menu_options().map(option => ({\n                                    text: option.label,\n                                    value: option.path ?? '',\n                                }))}\n                                value={selected_route.path ?? ''}\n                                should_show_empty_option={false}\n                                onChange={handleRouteChange}\n                                label={''}\n                                hide_top_placeholder={false}\n                            />\n                            {selected_route?.component && (\n                                <selected_route.component icon_component={selected_route.icon_component} />\n                            )}\n                        </Div100vhContainer>\n                    </MobileWrapper>\n                </PageOverlay>\n            </div>\n        </FadeWrapper>\n    );\n});\n\nexport default Reports;\n","import OpenPositions from './open-positions';\nimport ProfitTable from './profit-table';\nimport Statement from './statement';\nimport Reports from './reports';\n\nexport default {\n    OpenPositions,\n    ProfitTable,\n    Statement,\n    Reports,\n};\n"],"names":["ReportsTableRowLoader","speed","height","width","backgroundColor","foregroundColor","x","y","rx","ry","has_selected_date","component_icon","localized_message","localized_period_message","className","Icon","data_testid","icon","color","size","Text","align","observer","contract_info","useStore","common","portfolio","server_time","is_loading","current_tick","tick_count","getCurrentTick","ProgressSlider","expiry_time","date_expiry","getCardLabels","start_time","date_start","ticks_count","getProfitOrLoss","value","replace","props","amount","currency","is_footer","is_sell_requested","status","onClickSell","React","movement","setMovement","amount_state","setAmountState","Money","Math","abs","DesktopWrapper","ContractCard","contract_id","underlying","has_full_contract_title","payload","should_show_accumulator","should_show_multiplier","should_show_category_icon","shortcode","info_from_shortcode","extractInfoFromShortcode","is_high_low","isHighLow","shortcode_info","category_label","category","show_button_name","trade_type","getContractConfig","toUpperCase","button_name","name","getTradeTypeName","classNames","Popover","classNameTarget","classNameBubble","alignment","message","getMarketNamesMap","is_bubble_hover_enabled","disable_target_icon","display_name","IconTradeTypes","type","toLowerCase","multiplier","growth_rate","includes","action_type","children","weight","map","buy","deposit","hold","release","sell","withdrawal","default","adjustment","transfer","is_invisible","theme","id","invisible","Array","from","inx","key","PlaceholderComponent","EmptyMessageComponent","empty_message_component","is_empty","propTypes","PropTypes","EmptyPlaceholderWrapper","EmptyTradeHistoryMessage","localize","MobileRowRenderer","row","columns_map","toMoment","onClickCancel","measure","DataList","column","purchase","payout","indicative","profit","contract_update","purchase_time","turbos_duration_unit","getDurationUnitText","getDurationPeriod","duration_type","longcode","test","extracted","RegExp","exec","duration_text","slice","endsWith","getContractDurationType","isTurbosContract","contract_type","progress_value","getTimePercentage","isMultiplierContract","isAccumulatorContract","PositionsDrawerCard","is_link_disabled","isVanillaContract","ProgressSliderMobile","ProgressBar","label","reference","OpenPositionsTable","columns","active_positions","getRowAction","mobileRowRenderer","preloaderCheck","row_size","totals","DataTable","footer","data_source","getRowSize","content_loader","MobileWrapper","rowRenderer","row_gap","keyMapper","item","row_obj","is_unsupported","component","Localize","i18n_default_text","values","trade_type_name","getUnsupportedContracts","getContractPath","isPurchaseReceived","isNaN","Number","OpenPositions","client","ui","contract_trade","error","getPositionById","is_accumulator","is_multiplier","onMount","onClickRemove","removePositionById","hide_accu_in_dropdown","is_eu","NotificationMessages","notification_messages_ui","addToast","current_focus","is_mobile","removeToast","setCurrentFocus","should_show_cancellation_warning","toggleCancellationWarning","toggleUnsupportedContractModal","store_props","getContractById","has_accumulator_contract","setHasAccumulatorContract","has_multiplier_contract","setHasMultiplierContract","previous_active_positions","usePrevious","contract_types","text","is_default","find","contract_type_value","setContractTypeValue","accumulator_rates","accumulator_rate","setAccumulatorRate","is_accumulator_selected","is_multiplier_selected","contract_types_list","filter","accumulators_rates_list","active_positions_filtered","getGrowthRatePercentage","active_positions_filtered_totals","ask_price","buy_price","bid_price","forEach","portfolio_pos","prices","getTotalProfit","cancellation","take_profit","limit_order","order_amount","profit_loss","getOpenPositionsTotals","checkForAccuAndMultContracts","some","title","isMobile","col_index","renderCellContent","getCurrencyDisplayCode","cancellation_price","shouldShowCancellation","cell_value","components","stop_loss","has_sign","total_profit","getMultiplierOpenPositionsColumnsTemplate","ContractCardSell","getAccumulatorOpenPositionsColumnsTemplate","is_vanilla","is_turbos","renderHeader","non_vanilla_payout","barrier","toFixed","getOpenPositionsColumnsTemplate","e","classname","shared_props","args","length","Dropdown","is_align_text_left","list","onChange","target","SelectNative","list_items","should_show_empty_option","withRouter","RadioButton","selected_value","htmlFor","onClick","as","line_height","CUSTOM_KEY","CompositeCalendarMobile","input_date_range","duration_list","to","date_range","range","format","undefined","from_date","setFrom","to_date","setTo","is_open","setIsOpen","applied_date_range","setAppliedDateRange","selected_date_range","setSelectedDateRange","today","selectDateRange","_selected_date_range","is_today","new_from","duration","startOf","subtract","add","endOf","is_batch","applyDateRange","new_to","new_date_range","Object","assign","selectDate","onDateRangeChange","_date_range","InputField","is_read_only","MobileDialog","portal_element_id","visible","has_content_scroll","onClose","content_height_offset","Button","has_effect","secondary","large","primary","DatePicker","is_nativepicker","placeholder","max_date","min_date","tertiary","displayName","is_active","items","flag","unix","ceil","isActive","TwoMonthPickerLoadable","Loadable","loader","loading","render","loaded","Component","CompositeCalendar","show_to","setShowTo","show_from","setShowFrom","wrapper_ref","hideCalendar","showCalendar","useOnClickOutside","event","stopPropagation","preventDefault","current","contains","date","CalendarIcon","daysFromTodayTo","getToDateLabel","ref","isPeriodDisabled","ReportsMeta","filter_component","optional_component","is_statement","toString","getSupportedContracts","isForwardStarting","purchase_time_unix","ProfitTable","profit_table","useReportsStore","is_switching","data","date_from","date_to","handleDateChange","handleScroll","onUnmount","items_count","item_count","transaction_id","getProfitTableColumnsTemplate","fromEntries","onScroll","duration_classname","sell_time","sell_price","AccountStatistics","statement","account_statistics","total_deposits","total_withdrawals","FilterComponent","handleFilterChange","filter_list","FilterDropdown","dropdown_display_className","initial_selected_filter","DetailsComponent","address_hash_match","split","address_hash","blockchain_hash_match","blockchain_hash","messages","lines","index","Clipboard","text_copy","popoverAlignment","action","transaction_time","withdrawal_details","desc","Statement","standpoint","is_virtual","is_mx_mlt","iom","malta","passthrough","isTopUp","app_id","Label","mode","getStatementTableColumnsTemplate","reduce","refid","balance","Reports","history","location","routes","is_logged_in","is_logging_in","setVisibilityRealityCheck","is_from_derivgo","routeBackInApp","is_reports_visible","setReportsTabIndex","reports_route_tab_index","toggleReports","menu_options","options","route","push","icon_component","getTitle","path","selected_route","getSelectedRoute","pathname","Loading","is_fullscreen","FadeWrapper","is_visible","keyname","PageOverlay","header","onClickClose","is_from_app","VerticalTab","is_floating","current_path","is_routed","is_full_width","setVerticalTabIndex","vertical_tab_index","Div100vhContainer","height_offset","option","hide_top_placeholder"],"sourceRoot":""}