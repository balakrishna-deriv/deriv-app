{"version":3,"file":"trader/js/trader.trade-modals.5f91dde14290e290d47c.js","mappings":"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","sources":["webpack://@deriv/trader/./src/App/Components/Elements/Modals/UnsupportedContractModal/unsupported-contract-modal.jsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/UnsupportedContractModal/index.js","webpack://@deriv/trader/./src/App/Components/Elements/Modals/MarketUnavailableModal/market-unavailable.jsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/MarketUnavailableModal/index.js","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/constants.js","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/authorization-required-modal.jsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/insufficient-balance-modal.jsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/company-wide-limit-exceeded-modal.jsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/account-verification-required-modal.tsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/services-error-modal.tsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/index.js","webpack://@deriv/trader/./src/App/Containers/Modals/trade-modals.jsx","webpack://@deriv/trader/./src/App/Containers/Modals/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dialog } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { website_name } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\nconst UnsupportedContractModal = observer(({ onConfirm, onClose }) => {\n    const { ui } = useStore();\n    const { disableApp, enableApp, is_loading, is_unsupported_contract_modal_visible: is_visible } = ui;\n\n    return (\n        <Dialog\n            title={localize('We’re working on it')}\n            confirm_button_text={localize('Stay on {{website_domain}}', { website_domain: website_name })}\n            cancel_button_text={localize('Go to Binary.com')}\n            onConfirm={onConfirm}\n            onCancel={onClose}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading}\n            is_closed_on_cancel\n            is_visible={is_visible}\n        >\n            <Localize i18n_default_text='You’ve selected a trade type that is currently unsupported, but we’re working on it.' />\n        </Dialog>\n    );\n});\n\nUnsupportedContractModal.propTypes = {\n    onClose: PropTypes.func,\n    onConfirm: PropTypes.func,\n};\n\nexport default UnsupportedContractModal;\n","import UnsupportedContractModal from './unsupported-contract-modal.jsx';\n\nexport default UnsupportedContractModal;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dialog } from '@deriv/components';\nimport { getPlatformSettings } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\n\nconst MarketUnavailableModal = observer(({ onCancel, onConfirm }) => {\n    const { ui } = useStore();\n    const { disableApp, enableApp, is_loading, has_only_forward_starting_contracts: is_visible } = ui;\n\n    return (\n        <Dialog\n            className='market-unavailable-modal'\n            title={localize('We’re working on it')}\n            confirm_button_text={localize('Stay on {{platform_name_trader}}', {\n                platform_name_trader: getPlatformSettings('trader').name,\n            })}\n            cancel_button_text={localize('Go to {{platform_name_smarttrader}}', {\n                platform_name_smarttrader: getPlatformSettings('smarttrader').name,\n            })}\n            onConfirm={onConfirm}\n            onCancel={onCancel}\n            is_mobile_full_width={false}\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading}\n        >\n            <Localize\n                i18n_default_text='This market is not yet available on {{platform_name_trader}}, but it is on {{platform_name_smarttrader}}.'\n                values={{\n                    platform_name_trader: getPlatformSettings('trader').name,\n                    platform_name_smarttrader: getPlatformSettings('smarttrader').name,\n                }}\n            />\n        </Dialog>\n    );\n});\n\nMarketUnavailableModal.propTypes = {\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func,\n};\n\nexport default MarketUnavailableModal;\n","import MarketUnavailableModal from './market-unavailable.jsx';\n\nexport default MarketUnavailableModal;\n","import { localize } from '@deriv/translations';\n\nexport const getTitle = type => {\n    switch (type) {\n        case 'buy':\n            return localize('Purchase Error');\n        case 'cancel':\n            return localize('Deal Cancellation Error');\n        case 'contract_update':\n            return localize('Contract Update Error');\n        case 'sell':\n            return localize('Sell Error');\n        default:\n            return 'Error';\n    }\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { getLanguage, localize } from '@deriv/translations';\nimport { redirectToLogin, redirectToSignUp } from '@deriv/shared';\n\nconst AuthorizationRequiredModal = ({ is_visible, toggleModal, is_appstore, is_logged_in }) => (\n    <Modal\n        id='dt_authorization_required_modal'\n        is_open={is_visible}\n        small\n        toggleModal={toggleModal}\n        title={localize('Start trading with us')}\n    >\n        <Modal.Body>{localize('Log in or create a free account to place a trade.')}</Modal.Body>\n        <Modal.Footer>\n            <Button\n                has_effect\n                text={localize('Log in')}\n                onClick={() => redirectToLogin(is_logged_in, getLanguage())}\n                secondary\n            />\n            <Button\n                has_effect\n                text={localize('Create free account')}\n                onClick={() => redirectToSignUp({ is_appstore })}\n                primary\n            />\n        </Modal.Footer>\n    </Modal>\n);\n\nAuthorizationRequiredModal.propTypes = {\n    is_appstore: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    toggleModal: PropTypes.func,\n};\n\nexport default AuthorizationRequiredModal;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Modal } from '@deriv/components';\nimport { routes, isMobile } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst InsufficientBalanceModal = ({ history, is_virtual, is_visible, message, toggleModal }) => (\n    <Modal\n        id='dt_insufficient_balance_modal'\n        is_open={is_visible}\n        small\n        is_vertical_centered={isMobile()}\n        toggleModal={toggleModal}\n        title={localize('Insufficient balance')}\n    >\n        <Modal.Body>{message}</Modal.Body>\n        <Modal.Footer>\n            {/* TODO: Add topping up mechanism for demo accounts after confirmation */}\n            <Button\n                has_effect\n                text={is_virtual ? localize('OK') : localize('Deposit now')}\n                onClick={() => {\n                    if (!is_virtual) {\n                        history.push(routes.cashier_deposit);\n                    } else {\n                        toggleModal();\n                    }\n                }}\n                primary\n            />\n        </Modal.Footer>\n    </Modal>\n);\n\nInsufficientBalanceModal.propTypes = {\n    history: PropTypes.object,\n    is_virtual: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    message: PropTypes.string,\n    toggleModal: PropTypes.func,\n};\n\nexport default withRouter(InsufficientBalanceModal);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Modal, StaticUrl } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\n\nconst CompanyWideLimitExceededModal = ({ is_visible, onConfirm }) => {\n    return (\n        <Modal\n            is_open={is_visible}\n            small\n            is_vertical_centered={isMobile()}\n            toggleModal={onConfirm}\n            title={localize('Purchase Error')}\n        >\n            <Modal.Body>\n                <Localize\n                    i18n_default_text='No further trading is allowed on this contract type for the current trading session. For more info, refer to our <0>terms and conditions</0>.'\n                    components={[<StaticUrl key={0} className='link' href='tnc/trading-terms.pdf' is_document />]}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button has_effect text={localize('OK')} onClick={onConfirm} primary />\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nCompanyWideLimitExceededModal.propTypes = {\n    is_visible: PropTypes.bool,\n    onConfirm: PropTypes.func,\n};\n\nexport default CompanyWideLimitExceededModal;\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { isMobile, routes } from '@deriv/shared';\nimport { useHistory } from 'react-router-dom';\n\ntype TAccountVerificationRequiredModalProps = {\n    is_visible: boolean;\n    onConfirm: () => void;\n};\n\nconst AccountVerificationRequiredModal = ({ is_visible, onConfirm }: TAccountVerificationRequiredModalProps) => {\n    const history = useHistory();\n    return (\n        <Modal\n            is_open={is_visible}\n            is_vertical_centered={isMobile()}\n            className='account-verification-required-modal'\n            toggleModal={onConfirm}\n            title={localize('Account verification required')}\n            width='440px'\n            height={isMobile() ? 'auto' : '220px'}\n        >\n            <Modal.Body className='account-verification-required-modal-text'>\n                <Localize i18n_default_text='Please submit your proof of identity and proof of address to verify your account and continue trading.' />\n            </Modal.Body>\n\n            <div className='account-verification-required-modal-button'>\n                <Modal.Footer>\n                    <Button\n                        has_effect\n                        text={localize('Submit Proof')}\n                        onClick={() => history.push(routes.proof_of_identity)}\n                        primary\n                    />\n                </Modal.Footer>\n            </div>\n        </Modal>\n    );\n};\n\nexport default AccountVerificationRequiredModal;\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getTitle } from './constants';\nimport AuthorizationRequiredModal from './authorization-required-modal.jsx';\nimport InsufficientBalanceModal from './insufficient-balance-modal.jsx';\nimport CompanyWideLimitExceededModal from './company-wide-limit-exceeded-modal.jsx';\nimport AccountVerificationRequiredModal from './account-verification-required-modal';\n\ntype TServicesError = {\n    code: string;\n    message: string;\n    type?: string;\n};\n\ntype TPropServicesErrorModel = {\n    is_virtual?: boolean;\n    is_visible: boolean;\n    is_logged_in?: boolean;\n    onConfirm: () => void;\n    services_error: TServicesError;\n};\n\nconst ServicesErrorModal = ({\n    is_virtual,\n    is_visible,\n    is_logged_in,\n    onConfirm,\n    services_error,\n}: TPropServicesErrorModel) => {\n    const { code, message, type } = services_error;\n\n    if (!code || !message) return <React.Fragment />;\n\n    switch (code) {\n        case 'AuthorizationRequired':\n            return (\n                <AuthorizationRequiredModal\n                    is_logged_in={is_logged_in}\n                    is_visible={is_visible}\n                    toggleModal={onConfirm}\n                />\n            );\n        case 'InsufficientBalance':\n            return (\n                <InsufficientBalanceModal\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    // TODO: This component needs to be TS migrated so error isn't there\n                    is_virtual={is_virtual}\n                    is_visible={is_visible}\n                    message={message}\n                    toggleModal={onConfirm}\n                />\n            );\n        case 'CompanyWideLimitExceeded':\n            return <CompanyWideLimitExceededModal is_visible={is_visible} onConfirm={onConfirm} />;\n        case 'PleaseAuthenticate':\n            return <AccountVerificationRequiredModal is_visible={is_visible} onConfirm={onConfirm} />;\n        default:\n            return (\n                <Modal is_open={is_visible} small title={getTitle(type)} toggleModal={onConfirm}>\n                    <Modal.Body>{message}</Modal.Body>\n                    <Modal.Footer>\n                        <Button has_effect text={localize('OK')} onClick={onConfirm} primary />\n                    </Modal.Footer>\n                </Modal>\n            );\n    }\n};\n\nexport default ServicesErrorModal;\n","import ServicesErrorModal from './services-error-modal';\n\nexport default ServicesErrorModal;\n","import React from 'react';\nimport { getUrlSmartTrader, urlFor } from '@deriv/shared';\nimport UnsupportedContractModal from 'App/Components/Elements/Modals/UnsupportedContractModal';\nimport MarketUnavailableModal from 'App/Components/Elements/Modals/MarketUnavailableModal';\nimport ServicesErrorModal from 'App/Components/Elements/Modals/ServicesErrorModal';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst TradeModals = observer(() => {\n    const { ui, client, common } = useStore();\n    const { resetPreviousSymbol, clearPurchaseInfo, requestProposal: resetPurchase } = useTraderStore();\n    const { is_virtual, is_logged_in } = client;\n    const { services_error } = common;\n    const {\n        is_services_error_visible,\n        setHasOnlyForwardingContracts,\n        toggleServicesErrorModal,\n        toggleUnsupportedContractModal,\n    } = ui;\n    const resetToPreviousMarket = () => {\n        setHasOnlyForwardingContracts(false);\n        resetPreviousSymbol();\n    };\n\n    const marketUnavailableOnConfirm = () => {\n        resetToPreviousMarket();\n    };\n\n    const marketUnavailableOnCancel = () => {\n        window.open(getUrlSmartTrader());\n        resetToPreviousMarket();\n    };\n\n    const servicesErrorModalOnConfirm = () => {\n        toggleServicesErrorModal(false);\n        if (services_error.type === 'buy') {\n            clearPurchaseInfo();\n            resetPurchase();\n        }\n    };\n\n    const unsupportedContractOnConfirm = () => {\n        toggleUnsupportedContractModal(false);\n    };\n\n    const unsupportedContractOnClose = () => {\n        const portfoliows_url = urlFor('user/portfoliows', { legacy: true });\n        window.open(portfoliows_url, '_blank');\n        unsupportedContractOnConfirm(false);\n    };\n\n    return (\n        <React.Fragment>\n            <UnsupportedContractModal onConfirm={unsupportedContractOnConfirm} onClose={unsupportedContractOnClose} />\n\n            <MarketUnavailableModal onConfirm={marketUnavailableOnConfirm} onCancel={marketUnavailableOnCancel} />\n\n            <ServicesErrorModal\n                onConfirm={servicesErrorModalOnConfirm}\n                services_error={services_error}\n                is_visible={is_services_error_visible}\n                is_virtual={is_virtual}\n                is_logged_in={is_logged_in}\n            />\n        </React.Fragment>\n    );\n});\n\nexport default TradeModals;\n","import TradeModals from './trade-modals.jsx';\n\nexport default TradeModals;\n"],"names":["UnsupportedContractModal","observer","onConfirm","onClose","ui","useStore","disableApp","enableApp","is_loading","is_visible","is_unsupported_contract_modal_visible","Dialog","title","localize","confirm_button_text","website_domain","website_name","cancel_button_text","onCancel","is_closed_on_cancel","Localize","i18n_default_text","propTypes","PropTypes","MarketUnavailableModal","has_only_forward_starting_contracts","className","platform_name_trader","getPlatformSettings","name","platform_name_smarttrader","is_mobile_full_width","values","getTitle","type","AuthorizationRequiredModal","toggleModal","is_appstore","is_logged_in","Modal","id","is_open","small","Button","has_effect","text","onClick","redirectToLogin","getLanguage","secondary","redirectToSignUp","primary","InsufficientBalanceModal","history","is_virtual","message","is_vertical_centered","isMobile","push","routes","withRouter","CompanyWideLimitExceededModal","components","StaticUrl","key","href","is_document","useHistory","width","height","services_error","code","client","common","useTraderStore","resetPreviousSymbol","clearPurchaseInfo","resetPurchase","requestProposal","is_services_error_visible","setHasOnlyForwardingContracts","toggleServicesErrorModal","toggleUnsupportedContractModal","resetToPreviousMarket","unsupportedContractOnConfirm","portfoliows_url","urlFor","legacy","window","open","getUrlSmartTrader"],"sourceRoot":""}