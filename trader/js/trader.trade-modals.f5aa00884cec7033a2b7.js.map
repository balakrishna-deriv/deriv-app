{"version":3,"file":"trader/js/trader.trade-modals.f5aa00884cec7033a2b7.js","mappings":"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","sources":["webpack://@deriv/trader/./src/App/Components/Elements/Modals/UnsupportedContractModal/unsupported-contract-modal.tsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/UnsupportedContractModal/index.ts","webpack://@deriv/trader/./src/App/Components/Elements/Modals/MarketUnavailableModal/market-unavailable.tsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/MarketUnavailableModal/index.ts","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/constants.ts","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/authorization-required-modal.tsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/insufficient-balance-modal.tsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/company-wide-limit-exceeded-modal.tsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/account-verification-required-modal.tsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/services-error-modal.tsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/ServicesErrorModal/index.js","webpack://@deriv/trader/./src/App/Containers/Modals/trade-modals.tsx","webpack://@deriv/trader/./src/App/Containers/Modals/index.ts"],"sourcesContent":["import React from 'react';\nimport { Dialog } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { website_name } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TUnsupportedContractModalProps = {\n    is_loading?: boolean;\n    is_visible?: boolean;\n    onClose: () => void;\n    onConfirm: () => void;\n};\n\nconst UnsupportedContractModal = observer(\n    ({ is_loading, is_visible: is_modal_visible, onConfirm, onClose }: TUnsupportedContractModalProps) => {\n        const { ui } = useStore();\n        const { disableApp, enableApp, is_unsupported_contract_modal_visible } = ui;\n        const is_visible = !!(is_unsupported_contract_modal_visible || is_modal_visible);\n\n        return (\n            <Dialog\n                title={localize('We’re working on it')}\n                confirm_button_text={localize('Stay on {{website_domain}}', { website_domain: website_name })}\n                cancel_button_text={localize('Go to Binary.com')}\n                onConfirm={onConfirm}\n                onCancel={onClose}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_loading={is_loading}\n                is_closed_on_cancel\n                is_visible={is_visible}\n            >\n                <Localize i18n_default_text='You’ve selected a trade type that is currently unsupported, but we’re working on it.' />\n            </Dialog>\n        );\n    }\n);\n\nexport default UnsupportedContractModal;\n","import UnsupportedContractModal from './unsupported-contract-modal';\n\nexport default UnsupportedContractModal;\n","import React from 'react';\nimport { Dialog } from '@deriv/components';\nimport { getPlatformSettings } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TMarketUnavailableModalProps = {\n    is_loading?: boolean;\n    onCancel: () => void;\n    onConfirm: () => void;\n};\n\nconst MarketUnavailableModal = observer(({ is_loading, onCancel, onConfirm }: TMarketUnavailableModalProps) => {\n    const { ui } = useStore();\n    const { disableApp, enableApp, has_only_forward_starting_contracts: is_visible } = ui;\n\n    return (\n        <Dialog\n            className='market-unavailable-modal'\n            title={localize('We’re working on it')}\n            confirm_button_text={localize('Stay on {{platform_name_trader}}', {\n                platform_name_trader: getPlatformSettings('trader').name,\n            })}\n            cancel_button_text={localize('Go to {{platform_name_smarttrader}}', {\n                platform_name_smarttrader: getPlatformSettings('smarttrader').name,\n            })}\n            onConfirm={onConfirm}\n            onCancel={onCancel}\n            is_mobile_full_width={false}\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading}\n        >\n            <Localize\n                i18n_default_text='This market is not yet available on {{platform_name_trader}}, but it is on {{platform_name_smarttrader}}.'\n                values={{\n                    platform_name_trader: getPlatformSettings('trader').name,\n                    platform_name_smarttrader: getPlatformSettings('smarttrader').name,\n                }}\n            />\n        </Dialog>\n    );\n});\n\nexport default MarketUnavailableModal;\n","import MarketUnavailableModal from './market-unavailable';\n\nexport default MarketUnavailableModal;\n","import { localize } from '@deriv/translations';\n\nexport const getTitle = (type?: string) => {\n    switch (type) {\n        case 'buy':\n            return localize('Purchase Error');\n        case 'cancel':\n            return localize('Deal Cancellation Error');\n        case 'contract_update':\n            return localize('Contract Update Error');\n        case 'sell':\n            return localize('Sell Error');\n        default:\n            return 'Error';\n    }\n};\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { getLanguage, localize } from '@deriv/translations';\nimport { redirectToLogin, redirectToSignUp } from '@deriv/shared';\n\ntype TAuthorizationRequiredModal = {\n    is_visible: boolean;\n    toggleModal: () => void;\n    is_appstore?: boolean;\n    is_logged_in: boolean;\n};\n\nconst AuthorizationRequiredModal = ({\n    is_visible,\n    toggleModal,\n    is_appstore,\n    is_logged_in,\n}: TAuthorizationRequiredModal) => (\n    <Modal\n        id='dt_authorization_required_modal'\n        is_open={is_visible}\n        small\n        toggleModal={toggleModal}\n        title={localize('Start trading with us')}\n    >\n        <Modal.Body>{localize('Log in or create a free account to place a trade.')}</Modal.Body>\n        <Modal.Footer>\n            <Button\n                has_effect\n                text={localize('Log in')}\n                onClick={() => redirectToLogin(is_logged_in, getLanguage())}\n                secondary\n            />\n            <Button\n                has_effect\n                text={localize('Create free account')}\n                onClick={() => redirectToSignUp({ is_appstore })}\n                primary\n            />\n        </Modal.Footer>\n    </Modal>\n);\n\nexport default AuthorizationRequiredModal;\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { Button, Modal } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\n\ntype TInsufficientBalanceModal = RouteComponentProps & {\n    is_virtual?: boolean;\n    is_visible: boolean;\n    message: string;\n    toggleModal: () => void;\n};\n\nconst InsufficientBalanceModal = observer(\n    ({ history, is_virtual, is_visible, message, toggleModal }: TInsufficientBalanceModal) => {\n        const {\n            ui: { is_mobile },\n        } = useStore();\n        return (\n            <Modal\n                id='dt_insufficient_balance_modal'\n                is_open={is_visible}\n                small\n                is_vertical_centered={is_mobile}\n                toggleModal={toggleModal}\n                title={localize('Insufficient balance')}\n            >\n                <Modal.Body>{message}</Modal.Body>\n                <Modal.Footer>\n                    {/* TODO: Add topping up mechanism for demo accounts after confirmation */}\n                    <Button\n                        has_effect\n                        text={is_virtual ? localize('OK') : localize('Deposit now')}\n                        onClick={() => {\n                            if (!is_virtual) {\n                                history?.push?.(routes.cashier_deposit);\n                            } else {\n                                toggleModal();\n                            }\n                        }}\n                        primary\n                    />\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n);\n\nexport default withRouter(InsufficientBalanceModal);\n","import React from 'react';\nimport { Button, Modal, StaticUrl } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize, Localize } from '@deriv/translations';\n\ntype TCompanyWideLimitExceededModal = {\n    is_visible: boolean;\n    onConfirm: () => void;\n};\n\nconst CompanyWideLimitExceededModal = observer(({ is_visible, onConfirm }: TCompanyWideLimitExceededModal) => {\n    const {\n        ui: { is_mobile },\n    } = useStore();\n    return (\n        <Modal\n            is_open={is_visible}\n            small\n            is_vertical_centered={is_mobile}\n            toggleModal={onConfirm}\n            title={localize('Purchase Error')}\n        >\n            <Modal.Body>\n                <Localize\n                    i18n_default_text='No further trading is allowed on this contract type for the current trading session. For more info, refer to our <0>terms and conditions</0>.'\n                    components={[<StaticUrl key={0} className='link' href='tnc/trading-terms.pdf' is_document />]}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button has_effect text={localize('OK')} onClick={onConfirm} primary />\n            </Modal.Footer>\n        </Modal>\n    );\n});\n\nexport default CompanyWideLimitExceededModal;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Modal } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize, Localize } from '@deriv/translations';\n\ntype TAccountVerificationRequiredModalProps = {\n    is_visible: boolean;\n    onConfirm: () => void;\n};\n\nconst AccountVerificationRequiredModal = observer(\n    ({ is_visible, onConfirm }: TAccountVerificationRequiredModalProps) => {\n        const history = useHistory();\n        const {\n            ui: { is_mobile },\n        } = useStore();\n        return (\n            <Modal\n                is_open={is_visible}\n                is_vertical_centered={is_mobile}\n                className='account-verification-required-modal'\n                toggleModal={onConfirm}\n                title={localize('Account verification required')}\n                width='440px'\n                height={is_mobile ? 'auto' : '220px'}\n            >\n                <Modal.Body className='account-verification-required-modal-text'>\n                    <Localize i18n_default_text='Please submit your proof of identity and proof of address to verify your account and continue trading.' />\n                </Modal.Body>\n\n                <div className='account-verification-required-modal-button'>\n                    <Modal.Footer>\n                        <Button\n                            has_effect\n                            text={localize('Submit Proof')}\n                            onClick={() => history.push(routes.proof_of_identity)}\n                            primary\n                        />\n                    </Modal.Footer>\n                </div>\n            </Modal>\n        );\n    }\n);\n\nexport default AccountVerificationRequiredModal;\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getTitle } from './constants';\nimport AuthorizationRequiredModal from './authorization-required-modal';\nimport InsufficientBalanceModal from './insufficient-balance-modal';\nimport CompanyWideLimitExceededModal from './company-wide-limit-exceeded-modal';\nimport AccountVerificationRequiredModal from './account-verification-required-modal';\n\ntype TServicesError = {\n    code?: string;\n    message?: string;\n    type?: string;\n};\n\ntype TPropServicesErrorModel = {\n    is_virtual?: boolean;\n    is_visible: boolean;\n    is_logged_in: boolean;\n    onConfirm: () => void;\n    services_error: TServicesError;\n};\n\nconst ServicesErrorModal = ({\n    is_virtual,\n    is_visible,\n    is_logged_in,\n    onConfirm,\n    services_error,\n}: TPropServicesErrorModel) => {\n    const { code, message, type } = services_error;\n\n    if (!code || !message) return <React.Fragment />;\n\n    switch (code) {\n        case 'AuthorizationRequired':\n            return (\n                <AuthorizationRequiredModal\n                    is_logged_in={is_logged_in}\n                    is_visible={is_visible}\n                    toggleModal={onConfirm}\n                />\n            );\n        case 'InsufficientBalance':\n            return (\n                <InsufficientBalanceModal\n                    is_virtual={is_virtual}\n                    is_visible={is_visible}\n                    message={message}\n                    toggleModal={onConfirm}\n                />\n            );\n        case 'CompanyWideLimitExceeded':\n            return <CompanyWideLimitExceededModal is_visible={is_visible} onConfirm={onConfirm} />;\n        case 'PleaseAuthenticate':\n            return <AccountVerificationRequiredModal is_visible={is_visible} onConfirm={onConfirm} />;\n        default:\n            return (\n                <Modal is_open={is_visible} small title={getTitle(type)} toggleModal={onConfirm}>\n                    <Modal.Body>{message}</Modal.Body>\n                    <Modal.Footer>\n                        <Button has_effect text={localize('OK')} onClick={onConfirm} primary />\n                    </Modal.Footer>\n                </Modal>\n            );\n    }\n};\n\nexport default ServicesErrorModal;\n","import ServicesErrorModal from './services-error-modal';\n\nexport default ServicesErrorModal;\n","import React from 'react';\nimport { getUrlSmartTrader, urlFor } from '@deriv/shared';\nimport UnsupportedContractModal from 'App/Components/Elements/Modals/UnsupportedContractModal';\nimport MarketUnavailableModal from 'App/Components/Elements/Modals/MarketUnavailableModal';\nimport ServicesErrorModal from 'App/Components/Elements/Modals/ServicesErrorModal';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst TradeModals = observer(() => {\n    const { ui, client, common } = useStore();\n    const { resetPreviousSymbol, clearPurchaseInfo, requestProposal: resetPurchase } = useTraderStore();\n    const { is_virtual, is_logged_in } = client;\n    const { services_error } = common;\n    const {\n        is_services_error_visible,\n        setHasOnlyForwardingContracts,\n        toggleServicesErrorModal,\n        toggleUnsupportedContractModal,\n    } = ui;\n    const resetToPreviousMarket = () => {\n        setHasOnlyForwardingContracts(false);\n        resetPreviousSymbol();\n    };\n\n    const marketUnavailableOnConfirm = () => {\n        resetToPreviousMarket();\n    };\n\n    const marketUnavailableOnCancel = () => {\n        window.open(getUrlSmartTrader());\n        resetToPreviousMarket();\n    };\n\n    const servicesErrorModalOnConfirm = () => {\n        toggleServicesErrorModal(false);\n        if (services_error.type === 'buy') {\n            clearPurchaseInfo();\n            resetPurchase();\n        }\n    };\n\n    const unsupportedContractOnConfirm = () => {\n        toggleUnsupportedContractModal(false);\n    };\n\n    const unsupportedContractOnClose = () => {\n        const portfoliows_url = urlFor('user/portfoliows', { legacy: true });\n        window.open(portfoliows_url, '_blank');\n        unsupportedContractOnConfirm();\n    };\n\n    return (\n        <React.Fragment>\n            <UnsupportedContractModal onConfirm={unsupportedContractOnConfirm} onClose={unsupportedContractOnClose} />\n\n            <MarketUnavailableModal onConfirm={marketUnavailableOnConfirm} onCancel={marketUnavailableOnCancel} />\n\n            <ServicesErrorModal\n                onConfirm={servicesErrorModalOnConfirm}\n                services_error={services_error}\n                is_visible={is_services_error_visible}\n                is_virtual={is_virtual}\n                is_logged_in={is_logged_in}\n            />\n        </React.Fragment>\n    );\n});\n\nexport default TradeModals;\n","import TradeModals from './trade-modals';\n\nexport default TradeModals;\n"],"names":["observer","is_loading","is_modal_visible","is_visible","onConfirm","onClose","ui","useStore","disableApp","enableApp","is_unsupported_contract_modal_visible","Dialog","title","localize","confirm_button_text","website_domain","website_name","cancel_button_text","onCancel","is_closed_on_cancel","Localize","i18n_default_text","has_only_forward_starting_contracts","className","platform_name_trader","getPlatformSettings","name","platform_name_smarttrader","is_mobile_full_width","values","getTitle","type","toggleModal","is_appstore","is_logged_in","Modal","id","is_open","small","Button","has_effect","text","onClick","redirectToLogin","getLanguage","secondary","redirectToSignUp","primary","InsufficientBalanceModal","history","is_virtual","message","is_mobile","is_vertical_centered","push","routes","withRouter","components","StaticUrl","key","href","is_document","useHistory","width","height","services_error","code","client","common","useTraderStore","resetPreviousSymbol","clearPurchaseInfo","resetPurchase","requestProposal","is_services_error_visible","setHasOnlyForwardingContracts","toggleServicesErrorModal","toggleUnsupportedContractModal","resetToPreviousMarket","unsupportedContractOnConfirm","UnsupportedContractModal","portfoliows_url","urlFor","legacy","window","open","getUrlSmartTrader"],"sourceRoot":""}