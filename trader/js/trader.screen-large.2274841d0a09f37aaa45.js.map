{"version":3,"file":"trader/js/trader.screen-large.2274841d0a09f37aaa45.js","mappings":"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","sources":["webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/allow-equals.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Multiplier/multiplier.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/amount.tsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/tick-steps.jsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/range-slider.jsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/index.js","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration-toggle.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/DatePicker/trading-date-picker.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/DatePicker/index.js","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/dialog.jsx","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/time-picker.jsx","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/index.js","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/end-time.ts","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TimePicker/trading-time-picker.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TimePicker/index.js","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/expiry-text.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/advanced-duration.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/simple-duration.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration-wrapper.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/index.js","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Multiplier/cancel-deal.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Accumulator/accumulator.tsx","webpack://@deriv/trader/./src/Modules/Trading/Containers/trade-params.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/screen-large.tsx"],"sourcesContent":["import React from 'react';\nimport { Popover, Checkbox } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport {\n    hasCallPutEqual,\n    hasDurationForCallPutEqual,\n    isRiseFallEqual,\n} from 'Stores/Modules/Trading/Helpers/allow-equals';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\ntype TTradeStore = Pick<\n    ReturnType<typeof useTraderStore>,\n    | 'contract_start_type'\n    | 'contract_type'\n    | 'contract_types_list'\n    | 'duration_unit'\n    | 'expiry_type'\n    | 'has_equals_only'\n>;\n\ntype TAllowEquals = TTradeStore & {\n    onChange: (e: { target: { name: string; value: number } }) => Promise<void>;\n    value: number;\n};\n\nconst AllowEquals = ({\n    contract_start_type,\n    contract_type,\n    contract_types_list,\n    duration_unit,\n    expiry_type,\n    onChange,\n    value,\n    has_equals_only,\n}: TAllowEquals) => {\n    const has_callputequal_duration = hasDurationForCallPutEqual(\n        contract_types_list,\n        duration_unit,\n        contract_start_type\n    );\n    const has_callputequal = hasCallPutEqual(contract_types_list);\n\n    const has_allow_equals =\n        isRiseFallEqual(contract_type) && (has_callputequal_duration || expiry_type === 'endtime') && has_callputequal;\n\n    const changeValue: React.ComponentProps<typeof Checkbox>['onChange'] = e => {\n        e.persist();\n        if ('checked' in e.target) {\n            const { name, checked } = e.target;\n            onChange({ target: { name, value: Number(checked) } });\n        }\n    };\n\n    return (\n        has_allow_equals && (\n            <div className='allow-equals'>\n                <Checkbox\n                    className='allow-equals__input-field'\n                    id='dt_allow_equals_input'\n                    onChange={changeValue}\n                    defaultChecked={!!value}\n                    name='is_equal'\n                    label={localize('Allow equals')}\n                    classNameLabel='allow-equals__label'\n                    disabled={has_equals_only}\n                />\n                <Popover\n                    alignment='left'\n                    classNameTarget='allow-equals__tooltip'\n                    icon='info'\n                    id='dt_allow_equals_info'\n                    message={localize('Win payout if exit spot is also equal to entry spot.')}\n                    margin={130}\n                    relative_render\n                />\n            </div>\n        )\n    );\n};\n\nexport default AllowEquals;\n","import React from 'react';\nimport { Dropdown } from '@deriv/components';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer } from '@deriv/stores';\n\nconst Multiplier = observer(() => {\n    const { multiplier, multiplier_range_list, onChange } = useTraderStore();\n    return (\n        <Dropdown\n            id='multiplier'\n            className='trade-container__multiplier-dropdown'\n            is_alignment_left\n            is_nativepicker={false}\n            list={multiplier_range_list}\n            name='multiplier'\n            no_border={true}\n            value={multiplier}\n            onChange={onChange}\n        />\n    );\n});\n\nexport default Multiplier;\n","import { AMOUNT_MAX_LENGTH, addComma, getDecimalPlaces } from '@deriv/shared';\nimport { ButtonToggle, Dropdown, InputField } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport AllowEquals from './allow-equals';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport Multiplier from './Multiplier/multiplier.jsx';\nimport MultipliersInfo from './Multiplier/info.jsx';\nimport MinMaxStakeInfo from './min-max-stake-info';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TInput = {\n    amount: string | number;\n    currency: string;\n    current_focus: string | null;\n    error_messages?: string[];\n    is_disabled?: boolean;\n    is_single_currency: boolean;\n    onChange: (e: { target: { name: string; value: number | string } }) => void;\n    setCurrentFocus: (name: string | null) => void;\n};\n\nexport const Input = ({\n    amount,\n    currency,\n    current_focus,\n    error_messages,\n    is_single_currency,\n    is_disabled,\n    onChange,\n    setCurrentFocus,\n}: TInput) => (\n    <InputField\n        className='trade-container__amount'\n        classNameInlinePrefix='trade-container__currency'\n        classNameInput='trade-container__input'\n        currency={currency}\n        current_focus={current_focus}\n        error_messages={error_messages}\n        fractional_digits={getDecimalPlaces(currency)}\n        id='dt_amount_input'\n        inline_prefix={is_single_currency ? currency : undefined}\n        is_autocomplete_disabled\n        is_float\n        is_hj_whitelisted\n        is_incrementable\n        is_negative_disabled\n        is_disabled={is_disabled}\n        max_length={AMOUNT_MAX_LENGTH}\n        name='amount'\n        onChange={onChange}\n        type='tel'\n        value={amount}\n        ariaLabel={localize('Amount')}\n        setCurrentFocus={setCurrentFocus}\n    />\n);\n\nconst Amount = observer(({ is_minimized = false }: { is_minimized?: boolean }) => {\n    const { ui, client } = useStore();\n    const { currencies_list, is_single_currency } = client;\n    const { setCurrentFocus, current_focus } = ui;\n    const {\n        amount,\n        basis,\n        basis_list,\n        contract_start_type,\n        contract_type,\n        contract_types_list,\n        currency,\n        duration_unit,\n        expiry_type,\n        is_accumulator,\n        is_equal,\n        is_multiplier,\n        is_turbos,\n        is_vanilla,\n        has_equals_only,\n        has_open_accu_contract,\n        stake_boundary,\n        onChange,\n        validation_errors,\n    } = useTraderStore();\n\n    const { min_stake, max_stake } = stake_boundary[contract_type.toUpperCase()] || {};\n\n    if (is_minimized) {\n        return (\n            <div className='fieldset-minimized fieldset-minimized__amount'>\n                <span className='fieldset-minimized__basis'>{basis_list.find(o => o.value === basis)?.text}</span>\n                &nbsp;\n                <i>\n                    <span\n                        className={classNames('fieldset-minimized__currency', 'symbols', {\n                            [`symbols--${(currency || '').toLowerCase()}`]: currency,\n                        })}\n                    />\n                </i>\n                {addComma(amount, 2)}\n            </div>\n        );\n    }\n\n    const error_messages = validation_errors?.amount;\n\n    const getBasisList = () => basis_list.map(item => ({ text: item.text, value: item.value }));\n\n    const setTooltipContent = () => {\n        if (is_multiplier) {\n            return (\n                <Localize i18n_default_text='Your gross profit is the percentage change in market price times your stake and the multiplier chosen here.' />\n            );\n        }\n        return null;\n    };\n\n    return (\n        <Fieldset\n            className='trade-container__fieldset center-text'\n            header={\n                contract_type === 'high_low' || is_multiplier || is_accumulator || is_vanilla || is_turbos\n                    ? localize('Stake')\n                    : undefined\n            }\n            header_tooltip={setTooltipContent()}\n        >\n            {basis_list.length > 1 && (\n                <ButtonToggle\n                    id='dt_amount_toggle'\n                    buttons_arr={getBasisList()}\n                    className='dropdown--no-margin'\n                    is_animated\n                    name='basis'\n                    onChange={onChange}\n                    value={basis}\n                />\n            )}\n            {!is_single_currency ? (\n                <div className='trade-container__currency-options'>\n                    <Input\n                        amount={amount}\n                        currency={currency}\n                        current_focus={current_focus}\n                        error_messages={error_messages}\n                        is_single_currency={is_single_currency}\n                        onChange={onChange}\n                        setCurrentFocus={setCurrentFocus}\n                    />\n                    <Dropdown\n                        className={classNames({ 'dc-dropdown-container__currency': !is_single_currency })}\n                        is_alignment_left\n                        is_nativepicker={false}\n                        list={currencies_list}\n                        name='currency'\n                        initial_offset={256}\n                        no_border={true}\n                        value={currency}\n                        onChange={onChange}\n                    />\n                </div>\n            ) : (\n                <Input\n                    amount={amount}\n                    currency={currency}\n                    current_focus={current_focus}\n                    error_messages={error_messages}\n                    is_single_currency={is_single_currency}\n                    is_disabled={has_open_accu_contract}\n                    onChange={onChange}\n                    setCurrentFocus={setCurrentFocus}\n                />\n            )}\n            <AllowEquals\n                contract_start_type={contract_start_type}\n                contract_type={contract_type}\n                contract_types_list={contract_types_list}\n                duration_unit={duration_unit}\n                expiry_type={expiry_type}\n                onChange={onChange}\n                value={Number(is_equal)}\n                has_equals_only={has_equals_only}\n            />\n            {is_multiplier && (\n                <React.Fragment>\n                    <Multiplier />\n                    <MultipliersInfo\n                        /*// @ts-expect-error observer wrapped component props cant be detected until its ts-migrated */\n                        className='trade-container__multipliers-trade-info'\n                        should_show_tooltip\n                        is_tooltip_relative\n                    />\n                </React.Fragment>\n            )}\n            {(is_turbos || is_vanilla) && (\n                <MinMaxStakeInfo currency={currency} max_stake={max_stake} min_stake={min_stake} />\n            )}\n        </Fieldset>\n    );\n});\n\nexport default Amount;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TickSteps = ({ hover_value, max_value, min_value, onClick, onMouseEnter, onMouseLeave, value }) => {\n    if (!max_value || !min_value) return null;\n\n    const arr_ticks = [...Array(max_value - min_value + 1).keys()];\n\n    const isActive = idx => idx + min_value === value;\n    const isMarked = idx => idx + min_value < value;\n    const isMarkedOnHover = idx => (isMarked(idx) ? false : idx + min_value <= hover_value);\n\n    return (\n        <React.Fragment>\n            {arr_ticks.map(idx => (\n                <span\n                    data-testid={`tick_step_${idx + min_value}`}\n                    key={idx}\n                    data-value={idx + min_value}\n                    className={classNames('range-slider__ticks-step', {\n                        'range-slider__ticks-step--active': isActive(idx),\n                        'range-slider__ticks-step--marked': isMarked(idx),\n                        'range-slider__ticks-step--marked-hover': isMarkedOnHover(idx),\n                    })}\n                    onClick={() => onClick(idx + min_value)}\n                    onMouseEnter={() => onMouseEnter(idx + min_value)}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </React.Fragment>\n    );\n};\n\nTickSteps.propTypes = {\n    hover_value: PropTypes.number,\n    max_value: PropTypes.number,\n    min_value: PropTypes.number,\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    value: PropTypes.number,\n};\n\nexport default TickSteps;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport { Text } from '@deriv/components';\nimport TickSteps from './tick-steps.jsx';\n\nconst RangeSlider = ({ className, name, value, min_value, max_value, onChange }) => {\n    const [hover_value, setHoverValue] = React.useState(0);\n    const range_slider_ref = React.useRef();\n\n    const handleChange = e => {\n        const target_value = +e.target.value;\n        if (target_value !== value) {\n            resetOnHover();\n            onChange({ target: { name, value: target_value } });\n        }\n    };\n\n    const handleClick = index => {\n        if (index !== value) {\n            resetOnHover();\n            onChange({ target: { name, value: index } });\n        }\n    };\n\n    const onMouseEnter = index => {\n        if (index) {\n            setHoverValue(index);\n            range_slider_ref.current.style.width = getRangeSliderTrackWidth(index, true);\n        }\n    };\n\n    const onMouseLeave = e => {\n        const { offsetX, offsetY } = e.nativeEvent;\n        if (offsetY <= -3 || offsetY >= 3 || offsetX < -3 || offsetX > 3) {\n            resetOnHover();\n        }\n    };\n\n    const getRangeSliderTrackWidth = (slider_value, is_hover) => {\n        const width = (slider_value - min_value) * (10 / (max_value - min_value));\n        return `${width * 2 + (is_hover ? 0.8 : 1.4)}em`;\n    };\n\n    const resetOnHover = () => {\n        if (hover_value) {\n            setHoverValue(0);\n            range_slider_ref.current.style.width = 0;\n        }\n    };\n\n    const display_value = hover_value || value;\n    return (\n        <div\n            className={classNames('range-slider', className, {\n                'range-slider__error': value < min_value || value > max_value,\n            })}\n        >\n            <label className='range-slider__label' htmlFor='range'>\n                <input\n                    className='input trade-container__input range-slider__track'\n                    id='dt_duration_range_input'\n                    max={max_value}\n                    min={min_value}\n                    name={name}\n                    onChange={handleChange}\n                    tabIndex='0'\n                    type='range'\n                    value={value}\n                    aria-label='range-input'\n                />\n                {/* this element to be placed before <TickSteps /> to prevent overlapping colors */}\n                <span\n                    ref={range_slider_ref}\n                    className='range-slider__line range-slider__line--fill'\n                    onMouseLeave={onMouseLeave}\n                />\n                <div className='range-slider__ticks'>\n                    <TickSteps\n                        hover_value={hover_value}\n                        max_value={max_value}\n                        min_value={min_value}\n                        onClick={handleClick}\n                        onMouseLeave={onMouseLeave}\n                        onMouseEnter={onMouseEnter}\n                        value={value}\n                    />\n                </div>\n                {/* Calculate line width based on active value and size of range thumb */}\n                <div className='range-slider__line' style={{ width: `${getRangeSliderTrackWidth(value)}` }} />\n            </label>\n            <div className='range-slider__caption'>\n                {!!display_value && (\n                    <Text align='center' weight='bold' size='xs' color='prominent' id='dt_range_slider_label'>\n                        {display_value === 1 && localize('{{display_value}} Tick', { display_value })}\n                        {display_value > 1 && localize('{{display_value}} Ticks', { display_value })}\n                    </Text>\n                )}\n            </div>\n        </div>\n    );\n};\n// Keypress events do not trigger on Safari due to the way it handles input type='range' elements, using focus on the input element also doesn't work for Safari.\n\nRangeSlider.propTypes = {\n    className: PropTypes.string,\n    max_value: PropTypes.number,\n    min_value: PropTypes.number,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.number,\n};\n\nexport default RangeSlider;\n","import RangeSlider from './range-slider.jsx';\n\nexport default RangeSlider;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\nconst DurationToggle = ({ name, onChange, value }) => {\n    const toggle = () => {\n        onChange({ target: { value: !value, name } });\n    };\n    const icon_className = classNames('advanced-simple-toggle__icon', 'select-arrow', {\n        'advanced-simple-toggle__icon--active': value,\n    });\n    return (\n        <>\n            <button\n                id={value ? 'dt_advanced_toggle' : 'dt_simple_toggle'}\n                className='advanced-simple-toggle'\n                onClick={toggle}\n                aria-label={localize('Toggle between advanced and simple duration settings')}\n            >\n                <Icon\n                    icon='IcChevronDown'\n                    className={icon_className}\n                    classNamePath={'advanced-simple-toggle__icon-path'}\n                />\n            </button>\n        </>\n    );\n};\n\nDurationToggle.propTypes = {\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.bool,\n};\n\nexport default DurationToggle;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { DatePicker, Tooltip } from '@deriv/components';\nimport { isTimeValid, setTime, toMoment, useIsMounted, hasIntradayDurationUnit } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst TradingDatePicker = observer(({ id, is_24_hours_contract, mode, name }) => {\n    const { common } = useStore();\n    const { server_time } = common;\n    const {\n        duration: current_duration,\n        duration_min_max,\n        duration_units_list,\n        expiry_type,\n        onChange,\n        start_date,\n        start_time,\n        symbol,\n        validation_errors,\n    } = useTraderStore();\n\n    const isMounted = useIsMounted();\n\n    const [disabled_days, setDisabledDays] = React.useState([]);\n    const [market_events, setMarketEvents] = React.useState([]);\n    const [duration, setDuration] = React.useState(current_duration);\n    const [selected_date, setSelectedDate] = React.useState();\n\n    React.useEffect(() => {\n        onChangeCalendarMonth();\n    }, [onChangeCalendarMonth]);\n\n    React.useEffect(() => {\n        if (duration !== current_duration) {\n            setDuration(current_duration);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [current_duration]);\n\n    const getMinDuration = () => {\n        return hasIntradayDurationUnit(duration_units_list)\n            ? toMoment(server_time).clone()\n            : toMoment(server_time).clone().add(duration_min_max?.daily?.min, 'second');\n    };\n\n    const getMomentContractStartDateTime = () => {\n        return setTime(\n            toMoment(getMinDuration()),\n            isTimeValid(start_time) ? start_time : server_time.format('HH:mm:ss')\n        );\n    };\n\n    const getMaxDailyDuration = () => {\n        return duration_min_max.daily ? duration_min_max.daily.max : 365 * 24 * 3600;\n    };\n\n    const getMinDateExpiry = () => {\n        const is_duration_contract = expiry_type === 'duration';\n        const min_date = getMomentContractStartDateTime().clone().startOf('day');\n\n        return is_duration_contract && hasIntradayDurationUnit(duration_units_list) ? min_date.add(1, 'day') : min_date;\n    };\n\n    const getMaxDateDuration = () => {\n        return is_24_hours_contract\n            ? getMomentContractStartDateTime()\n                  .clone()\n                  .add(start_date ? 24 * 3600 : getMaxDailyDuration(), 'second')\n            : getMomentContractStartDateTime().clone().add(getMaxDailyDuration(), 'second');\n    };\n\n    const hasRangeSelection = () => mode === 'duration';\n\n    const getFooter = () => {\n        if (!hasRangeSelection()) return null;\n\n        if (!duration) return localize('Minimum duration is 1 day');\n        if (+duration === 1) return localize('Duration: {{duration}} day', { duration });\n        return localize('Duration: {{duration}} days', { duration });\n    };\n\n    const getDatepickerValue = () => {\n        return hasRangeSelection()\n            ? toMoment().add(duration, 'days').format('YYYY-MM-DD')\n            : selected_date || getMinDateExpiry();\n    };\n\n    const onChangeDate = e => {\n        if (isMounted()) {\n            if (hasRangeSelection()) {\n                setDuration(e.duration);\n            } else if (e.target.value) {\n                setSelectedDate(toMoment(e.target.value));\n            }\n        }\n\n        if (typeof onChange === 'function' && e.target) {\n            onChange({\n                target: {\n                    name: e.target.name,\n                    value: hasRangeSelection() ? e.target.value : toMoment(e.target.value).format('YYYY-MM-DD'),\n                },\n            });\n        }\n    };\n\n    const onChangeCalendarMonth = React.useCallback(\n        async (e = toMoment().format('YYYY-MM-DD')) => {\n            const new_market_events = [];\n            let new_disabled_days = [];\n\n            const events = await ContractType.getTradingEvents(e, symbol);\n            events.forEach(evt => {\n                const dates = evt.dates.split(', '); // convert dates str into array\n                const idx = dates.indexOf('Fridays');\n                if (idx !== -1) {\n                    new_disabled_days = [6, 0]; // Sat, Sun\n                }\n                new_market_events.push({\n                    dates,\n                    descrip: evt.descrip,\n                });\n            });\n\n            if (isMounted()) {\n                setDisabledDays(new_disabled_days);\n                setMarketEvents(new_market_events);\n            }\n        },\n        [isMounted, symbol]\n    );\n\n    const has_error = !!validation_errors?.[name]?.length;\n\n    return (\n        <div\n            className={classNames('dc-input-field', {\n                'dc-input-field--has-error': has_error,\n            })}\n        >\n            <Tooltip\n                className='trade-container__tooltip'\n                alignment='left'\n                message={has_error ? validation_errors[name][0] : undefined}\n                has_error={has_error}\n            >\n                <DatePicker\n                    id={id}\n                    alignment='left'\n                    display_format='DD MMM YYYY'\n                    show_leading_icon\n                    error={validation_errors?.[name]?.length ? '' : undefined}\n                    mode={mode}\n                    max_date={getMaxDateDuration()}\n                    min_date={getMinDateExpiry()}\n                    name={name}\n                    onChange={onChangeDate}\n                    onChangeCalendarMonth={onChangeCalendarMonth}\n                    has_range_selection={hasRangeSelection()}\n                    has_today_btn={!hasRangeSelection()}\n                    footer={getFooter()}\n                    events={market_events}\n                    disabled_days={disabled_days}\n                    keep_open\n                    readOnly={!hasRangeSelection()}\n                    value={getDatepickerValue()}\n                />\n            </Tooltip>\n        </div>\n    );\n});\n\nTradingDatePicker.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    is_24_hours_contract: PropTypes.bool,\n    mode: PropTypes.string,\n    name: PropTypes.string,\n};\n\nexport default TradingDatePicker;\n","import TradingDatePicker from './trading-date-picker.jsx';\n\nexport default TradingDatePicker;\n","import PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport { toMoment } from '@deriv/shared';\n\nfunction isBetween(to_compare_moment, start_times_moment, end_times_moment, duration) {\n    for (let i = 0; i < start_times_moment.length; i++) {\n        if (to_compare_moment.isBetween(start_times_moment[i], end_times_moment[i], duration)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst Dialog = ({ preClass, selected_time, end_times, start_times, onChange, className }) => {\n    const start_times_moment = start_times ? start_times.map(start_time => toMoment(start_time)) : [toMoment()];\n    const end_times_moment = end_times\n        ? end_times.map(end_time => toMoment(end_time))\n        : [toMoment().hour('23').minute('59').seconds('59').milliseconds('999')];\n    const to_compare_moment = toMoment();\n    const [hour, minute] = selected_time.split(':');\n    const hours = [...Array(24).keys()].map(a => `0${a}`.slice(-2));\n    const minutes = [...Array(12).keys()].map(a => `0${a * 5}`.slice(-2));\n\n    const selectOption = (type, current_value, prev_value, is_enabled = true) => {\n        if (is_enabled && prev_value) {\n            const [prev_hour, prev_minute] = prev_value.split(':');\n            if ((type === 'h' && current_value !== prev_hour) || (type === 'm' && current_value !== prev_minute)) {\n                onChange(`${type === 'h' ? current_value : prev_hour}:${type === 'm' ? current_value : prev_minute}`);\n            }\n        }\n    };\n\n    return (\n        <div className={classNames(`${preClass}__dialog`, `${className}`)}>\n            <div className={`${preClass}__selector`}>\n                <div className={`${preClass}__selector--hours`}>\n                    <div className={classNames(`${preClass}__selector-list-title`, 'center-text')}>\n                        <strong>{localize('Hour')}</strong>\n                    </div>\n                    <div>\n                        {hours.map((h, key) => {\n                            to_compare_moment.hour(h);\n                            const start_times_reset_minute = start_times_moment.map(start_time =>\n                                start_time.clone().minute(0)\n                            );\n                            const is_hour_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_reset_minute,\n                                end_times_moment\n                            );\n                            const is_minute_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_moment,\n                                end_times_moment,\n                                'minute'\n                            );\n                            // The minute number after which the last block/interval of `Minutes` selection will be disabled\n                            const last_interval_of_hour = 52;\n                            const is_enabled =\n                                to_compare_moment.minutes() > last_interval_of_hour\n                                    ? is_hour_enabled && is_minute_enabled\n                                    : is_hour_enabled;\n                            return (\n                                <div\n                                    className={classNames(\n                                        `${preClass}__selector-list-item`,\n                                        { [`${preClass}__selector-list-item--selected`]: hour === h },\n                                        { [`${preClass}__selector-list-item--disabled`]: !is_enabled }\n                                    )}\n                                    key={key}\n                                    onClick={() => {\n                                        selectOption('h', h, selected_time, is_enabled);\n                                    }}\n                                >\n                                    {h}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n                <div className={`${preClass}__selector--minutes`}>\n                    <div className={classNames(`${preClass}__selector-list-title`, 'center-text')}>\n                        <strong>{localize('Minute')}</strong>\n                    </div>\n                    <div>\n                        {minutes.map((mm, key) => {\n                            to_compare_moment.hour(hour).minute(mm);\n                            const is_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_moment,\n                                end_times_moment,\n                                'minute'\n                            );\n                            return (\n                                <div\n                                    className={classNames(\n                                        `${preClass}__selector-list-item`,\n                                        { [`${preClass}__selector-list-item--selected`]: minute === mm },\n                                        { [`${preClass}__selector-list-item--disabled`]: !is_enabled }\n                                    )}\n                                    key={key}\n                                    onClick={() => {\n                                        selectOption('m', mm, selected_time, is_enabled);\n                                    }}\n                                >\n                                    {mm}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nDialog.propTypes = {\n    className: PropTypes.string,\n    end_times: PropTypes.array,\n    onChange: PropTypes.func,\n    preClass: PropTypes.string,\n    selected_time: PropTypes.array,\n    start_times: PropTypes.array,\n};\n\nexport default Dialog;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon, InputField } from '@deriv/components';\nimport Dialog from './dialog.jsx';\nimport { observer, useStore } from '@deriv/stores';\n\nconst class_prefix = 'time-picker';\n\nconst TimePicker = observer(\n    ({\n        end_times,\n        is_nativepicker,\n        name,\n        onChange,\n        padding,\n        placeholder,\n        selected_time,\n        start_times,\n        validation_errors,\n    }) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus } = ui;\n        const [is_open, setIsOpen] = React.useState(false);\n        const [wrapper_ref, setWrapperRef] = React.useState(null);\n\n        React.useEffect(() => {\n            document.addEventListener('mousedown', handleClickOutside);\n            return () => document.removeEventListener('mousedown', handleClickOutside);\n        });\n\n        const toggleDropDown = () => {\n            setIsOpen(!is_open);\n        };\n\n        const handleChange = arg => {\n            // To handle nativepicker;\n            const value = typeof arg === 'object' ? arg.target.selected_time : arg;\n\n            if (value !== selected_time) {\n                onChange({ target: { name, value } });\n            }\n        };\n\n        const saveRef = node => {\n            if (!node) return;\n            setWrapperRef(node);\n        };\n\n        const handleClickOutside = event => {\n            if (!wrapper_ref?.contains(event.target) && is_open) {\n                setIsOpen(false);\n            }\n        };\n\n        return (\n            <div ref={saveRef} className={classNames(class_prefix, { [`${class_prefix}--padding`]: padding })}>\n                {is_nativepicker ? (\n                    <input\n                        type='time'\n                        id={`dt_${name}_input`}\n                        value={selected_time}\n                        onChange={handleChange}\n                        name={name}\n                        min={start_times[0]}\n                        max={end_times[end_times.length - 1]}\n                    />\n                ) : (\n                    <React.Fragment>\n                        <InputField\n                            error_messages={validation_errors}\n                            type='text'\n                            is_hj_whitelisted\n                            is_read_only\n                            id={`dt_${name}_input`}\n                            className={classNames(`${class_prefix}-input`)}\n                            current_focus={current_focus}\n                            value={`${selected_time} GMT`}\n                            onClick={toggleDropDown}\n                            name={name}\n                            placeholder={placeholder}\n                            setCurrentFocus={setCurrentFocus}\n                        />\n                        <Icon icon='IcClockOutline' className={`${class_prefix}__icon`} />\n                        <CSSTransition\n                            in={is_open}\n                            classNames={{\n                                enter: 'time-picker__dialog--enter',\n                                enterDone: 'time-picker__dialog--enter-done',\n                                exit: 'time-picker__dialog--exit',\n                            }}\n                            timeout={100}\n                            unmountOnExit\n                        >\n                            <Dialog\n                                end_times={end_times}\n                                start_times={start_times}\n                                className={'from-left'}\n                                onChange={handleChange}\n                                preClass={class_prefix}\n                                selected_time={selected_time}\n                            />\n                        </CSSTransition>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n);\n\nTimePicker.propTypes = {\n    end_times: PropTypes.array,\n    is_clearable: PropTypes.bool,\n    is_nativepicker: PropTypes.bool,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    padding: PropTypes.string,\n    placeholder: PropTypes.string,\n    selected_time: PropTypes.string,\n    start_times: PropTypes.array,\n    validation_errors: PropTypes.array,\n};\n\nexport default TimePicker;\n","import TimePicker from './time-picker.jsx';\n\nexport default TimePicker;\n","import { useStore } from '@deriv/stores';\nimport { TTradeStore } from 'Types';\nimport moment from 'moment';\n\ntype TTime = {\n    server_time: NonNullable<ReturnType<typeof useStore>['common']['server_time']>;\n    selected_time: moment.Moment;\n    market_open_times: TTradeStore['market_open_times'];\n    market_close_times: TTradeStore['market_close_times'];\n};\n\nconst getClosestTime = (time: moment.Moment | string, interval: number): moment.Moment => {\n    const moment_time = moment(time); // Convert time to a moment object if it's a string\n    return moment_time.minute(Math.ceil(moment_time.minute() / interval) * interval);\n};\n\nexport const getSelectedTime = (\n    server_time: TTime['server_time'],\n    selected_time: TTime['selected_time'],\n    market_open_times: TTime['market_open_times'],\n    market_close_times: TTime['market_close_times']\n) => {\n    for (let i = 0; i < market_open_times.length; i++) {\n        if (selected_time.isAfter(market_open_times[i]) && selected_time.isBefore(market_close_times[i])) {\n            return getClosestTime(selected_time, 5).format('HH:mm');\n        }\n    }\n\n    for (let i = 0; i < market_open_times.length; i++) {\n        const moment_market_open_time = moment(market_open_times[i]); // Convert market open time to a moment object\n        if (moment_market_open_time.isAfter(server_time)) {\n            return getClosestTime(moment_market_open_time, 5).format('HH:mm');\n        }\n    }\n\n    return getClosestTime(server_time, 5).format('HH:mm');\n};\n\nexport const getBoundaries = (\n    server_time: TTime['server_time'],\n    market_open_times: TTime['market_open_times'],\n    market_close_times: TTime['market_close_times']\n) => {\n    const boundaries = {\n        start: market_open_times.map(open_time =>\n            server_time.isBefore(open_time) ? moment(open_time).clone() : server_time\n        ),\n        end: market_close_times,\n    };\n\n    if (boundaries.start.length > 0) {\n        boundaries.start[0] = getClosestTime(boundaries.start[0], 5);\n    }\n\n    return boundaries;\n};\n","import React from 'react';\nimport { setTime, toMoment } from '@deriv/shared';\nimport TimePicker from 'App/Components/Form/TimePicker';\nimport { getSelectedTime, getBoundaries } from 'Stores/Modules/Trading/Helpers/end-time';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst TradingTimePicker = observer(() => {\n    const { common } = useStore();\n    const { server_time } = common;\n    const { expiry_date, expiry_time, market_open_times, market_close_times, onChange, is_market_closed } =\n        useTraderStore();\n    const moment_expiry_date = toMoment(expiry_date);\n    const market_open_datetimes = market_open_times.map(open_time => setTime(moment_expiry_date.clone(), open_time));\n    const market_close_datetimes = market_close_times.map(close_time =>\n        setTime(moment_expiry_date.clone(), close_time)\n    );\n    const expiry_datetime = setTime(moment_expiry_date.clone(), expiry_time);\n    const server_datetime = toMoment(server_time);\n\n    const boundaries = getBoundaries(server_datetime.clone(), market_open_datetimes, market_close_datetimes);\n    const selected_time = getSelectedTime(\n        server_datetime.clone(),\n        expiry_datetime,\n        market_open_datetimes,\n        market_close_datetimes\n    );\n\n    React.useEffect(() => {\n        if (expiry_time !== selected_time && !is_market_closed) {\n            onChange({\n                target: { name: 'expiry_time', value: selected_time },\n            });\n        }\n    }, [expiry_time, selected_time, onChange, is_market_closed]);\n\n    return (\n        <TimePicker\n            end_times={boundaries.end}\n            onChange={onChange}\n            name='expiry_time'\n            placeholder='12:00'\n            start_times={boundaries.start}\n            selected_time={selected_time}\n        />\n    );\n});\n\nexport default TradingTimePicker;\n","import TradingTimePicker from './trading-time-picker.jsx';\n\nexport default TradingTimePicker;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\nconst ExpiryText = ({ expiry_epoch, has_error }) => {\n    const formatted_date =\n        expiry_epoch && !has_error\n            ? new Date(expiry_epoch * 1000)\n                  .toUTCString()\n                  .replace('GMT', 'GMT +0')\n                  .substring(5)\n                  .replace(/(\\d{2}) (\\w{3} \\d{4})/, '$1 $2,')\n            : '';\n\n    return (\n        <Text as='div' size='xxxs' line_height='s' className='expiry-text-container'>\n            <Localize i18n_default_text='Expiry: {{date}}' values={{ date: formatted_date }} />\n        </Text>\n    );\n};\n\nexport default ExpiryText;\n","import classNames from 'classnames';\nimport { PropTypes as MobxPropTypes } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dropdown, ButtonToggle, InputField } from '@deriv/components';\nimport { toMoment, hasIntradayDurationUnit } from '@deriv/shared';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport TradingDatePicker from '../../DatePicker';\nimport TradingTimePicker from '../../TimePicker';\nimport ExpiryText from './expiry-text.jsx';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst AdvancedDuration = observer(\n    ({\n        advanced_duration_unit,\n        advanced_expiry_type,\n        changeDurationUnit,\n        duration_t,\n        duration_units_list,\n        expiry_date,\n        expiry_epoch,\n        expiry_list,\n        expiry_type,\n        getDurationFromUnit,\n        number_input_props,\n        onChange,\n        onChangeUiStore,\n        server_time,\n        shared_input_props,\n        start_date,\n    }) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus } = ui;\n        const { contract_expiry_type, validation_errors } = useTraderStore();\n\n        let is_24_hours_contract = false;\n\n        if (expiry_type === 'endtime') {\n            const has_intraday_duration_unit = hasIntradayDurationUnit(duration_units_list);\n            is_24_hours_contract =\n                (!!start_date || toMoment(expiry_date || server_time).isSame(toMoment(server_time), 'day')) &&\n                has_intraday_duration_unit;\n        }\n\n        const endtime_container_class = classNames('endtime-container', {\n            'has-time': is_24_hours_contract,\n        });\n\n        const changeExpiry = ({ target }) => {\n            const { name, value } = target;\n\n            onChange({ target: { name: 'expiry_type', value } });\n            onChangeUiStore({ name, value });\n        };\n\n        const has_error = !!validation_errors?.duration?.length;\n\n        return (\n            <>\n                {expiry_list.length > 1 && (\n                    <ButtonToggle\n                        id='dt_advanced_duration_toggle'\n                        buttons_arr={expiry_list}\n                        name='advanced_expiry_type'\n                        is_animated={true}\n                        onChange={changeExpiry}\n                        value={advanced_expiry_type}\n                    />\n                )}\n                {expiry_type === 'duration' ? (\n                    <>\n                        <div className='duration-container'>\n                            {duration_units_list.length >= 1 && (\n                                <Dropdown\n                                    classNameDisplay='dc-dropdown__display--duration'\n                                    disabled={false}\n                                    id='duration'\n                                    is_alignment_left\n                                    is_nativepicker={false}\n                                    list={duration_units_list}\n                                    name='advanced_duration_unit'\n                                    no_border={true}\n                                    onChange={changeDurationUnit}\n                                    value={advanced_duration_unit}\n                                />\n                            )}\n                            {advanced_duration_unit === 't' && contract_expiry_type === 'tick' && (\n                                <RangeSlider name='duration' ticks={10} value={duration_t} {...shared_input_props} />\n                            )}\n                            {advanced_duration_unit === 'd' && (\n                                <TradingDatePicker\n                                    id='dt_advanced_duration_datepicker'\n                                    mode='duration'\n                                    name='duration'\n                                    is_24_hours_contract={is_24_hours_contract}\n                                />\n                            )}\n                            {advanced_duration_unit === 'd' && (\n                                <ExpiryText expiry_epoch={expiry_epoch} has_error={has_error} />\n                            )}\n                            {advanced_duration_unit !== 't' && advanced_duration_unit !== 'd' && (\n                                <InputField\n                                    id='dt_advanced_duration_input'\n                                    classNameInput='trade-container__input'\n                                    current_focus={current_focus}\n                                    error_messages={validation_errors.duration}\n                                    label={duration_units_list.length === 1 ? duration_units_list[0].text : null}\n                                    name='duration'\n                                    setCurrentFocus={setCurrentFocus}\n                                    value={getDurationFromUnit(advanced_duration_unit)}\n                                    {...number_input_props}\n                                    {...shared_input_props}\n                                />\n                            )}\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <div className={endtime_container_class}>\n                            <TradingDatePicker\n                                id='dt_advanced_duration_datepicker'\n                                name='expiry_date'\n                                is_24_hours_contract={is_24_hours_contract}\n                                value={expiry_date}\n                            />\n                            {\n                                is_24_hours_contract && <TradingTimePicker />\n                                // validation_errors={validation_errors.end_time} TODO: add validation_errors for end time\n                            }\n                            {!is_24_hours_contract && <ExpiryText expiry_epoch={expiry_epoch} />}\n                        </div>\n                    </>\n                )}\n            </>\n        );\n    }\n);\n\nAdvancedDuration.propTypes = {\n    advanced_duration_unit: PropTypes.string,\n    advanced_expiry_type: PropTypes.string,\n    changeDurationUnit: PropTypes.func,\n    duration_t: PropTypes.number,\n    duration_units_list: MobxPropTypes.arrayOrObservableArray,\n    expiry_date: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    expiry_list: PropTypes.array,\n    expiry_type: PropTypes.string,\n    getDurationFromUnit: PropTypes.func,\n    number_input_props: PropTypes.object,\n    onChange: PropTypes.func,\n    onChangeUiStore: PropTypes.func,\n    server_time: PropTypes.object,\n    shared_input_props: PropTypes.object,\n    start_date: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n\nexport default AdvancedDuration;\n","import { PropTypes as MobxPropTypes } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { ButtonToggle, InputField } from '@deriv/components';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport TradingDatePicker from '../../DatePicker';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst SimpleDuration = observer(\n    ({\n        changeDurationUnit,\n        duration_t,\n        duration_units_list,\n        getDurationFromUnit,\n        number_input_props,\n        shared_input_props,\n    }) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus, simple_duration_unit } = ui;\n        const { contract_expiry_type, validation_errors } = useTraderStore();\n\n        const filterMinutesAndTicks = arr => {\n            const filtered_arr = arr.filter(du => du.value === 't' || du.value === 'm');\n            if (filtered_arr.length <= 1) return [];\n\n            return filtered_arr;\n        };\n        const has_label = !duration_units_list.some(du => du.value === 't');\n\n        return (\n            <>\n                {duration_units_list.length > 1 && (\n                    <ButtonToggle\n                        id='dt_simple_duration_toggle'\n                        buttons_arr={filterMinutesAndTicks(duration_units_list)}\n                        is_animated={true}\n                        name='simple_duration_unit'\n                        onChange={changeDurationUnit}\n                        value={simple_duration_unit}\n                    />\n                )}\n                {simple_duration_unit === 't' && contract_expiry_type === 'tick' && (\n                    <RangeSlider name='duration' value={duration_t} ticks={10} {...shared_input_props} />\n                )}\n                {simple_duration_unit === 'd' && (\n                    <TradingDatePicker id='dt_simple_duration_datepicker' mode='duration' name='duration' />\n                )}\n                {simple_duration_unit !== 't' && simple_duration_unit !== 'd' && (\n                    <InputField\n                        id='dt_simple_duration_input'\n                        classNameInput='trade-container__input'\n                        current_focus={current_focus}\n                        error_messages={validation_errors.duration}\n                        name='duration'\n                        label={has_label ? duration_units_list[0]?.text : null}\n                        setCurrentFocus={setCurrentFocus}\n                        value={getDurationFromUnit(simple_duration_unit)}\n                        {...number_input_props}\n                        {...shared_input_props}\n                    />\n                )}\n            </>\n        );\n    }\n);\n\nSimpleDuration.propTypes = {\n    changeDurationUnit: PropTypes.func,\n    duration_t: PropTypes.number,\n    duration_units_list: MobxPropTypes.arrayOrObservableArray,\n    getDurationFromUnit: PropTypes.func,\n    number_input_props: PropTypes.object,\n    shared_input_props: PropTypes.object,\n};\n\nexport default SimpleDuration;\n","import classNames from 'classnames';\nimport { PropTypes as MobxPropTypes } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport { Dropdown } from '@deriv/components';\nimport { toMoment, isVanillaContract } from '@deriv/shared';\nimport DurationToggle from './duration-toggle.jsx';\nimport AdvancedDuration from './advanced-duration.jsx';\nimport SimpleDuration from './simple-duration.jsx';\n\nconst Duration = ({\n    advanced_duration_unit,\n    advanced_expiry_type,\n    contract_type,\n    duration_t,\n    duration_unit,\n    duration_units_list,\n    duration,\n    expiry_date,\n    expiry_epoch,\n    expiry_time,\n    expiry_type,\n    getDurationFromUnit,\n    hasDurationUnit,\n    is_advanced_duration,\n    is_minimized,\n    market_open_times,\n    max_value,\n    min_value,\n    onChange,\n    onChangeMultiple,\n    onChangeUiStore,\n    server_time,\n    simple_duration_unit,\n    start_date,\n}) => {\n    React.useEffect(() => {\n        if (isVanillaContract(contract_type)) {\n            onToggleDurationType({ target: { value: true, name: 'is_advanced_duration' } });\n        }\n    }, [contract_type]);\n\n    const expiry_list = [{ text: localize('Duration'), value: 'duration' }];\n\n    const has_end_time = expiry_list.find(expiry => expiry.value === 'endtime');\n    if (duration_units_list.length === 1 && duration_unit === 't') {\n        if (has_end_time) {\n            expiry_list.pop(); // remove end time for contracts with only tick duration\n        }\n    } else if (!has_end_time) {\n        expiry_list.push({ text: localize('End time'), value: 'endtime' });\n    }\n\n    if (is_minimized) {\n        const moment_expiry = toMoment(expiry_date);\n        const duration_unit_text = (duration_units_list.find(o => o.value === duration_unit) || {}).text;\n        return (\n            <div className='fieldset-minimized fieldset-minimized__duration'>\n                {expiry_type === 'duration'\n                    ? `${duration} ${duration_unit_text}`\n                    : `${moment_expiry.format('ddd - DD MMM, YYYY')}\\n${expiry_time}`}\n            </div>\n        );\n    }\n\n    const changeDurationUnit = ({ target }) => {\n        const { name, value } = target;\n        const duration_value = getDurationFromUnit(value);\n\n        onChangeUiStore({ name, value });\n        onChangeMultiple({\n            duration_unit: value,\n            duration: duration_value,\n        });\n    };\n\n    const changeDurationValue = ({ target }) => {\n        const { name, value } = target;\n        const duration_name = `duration_${is_advanced_duration ? advanced_duration_unit : simple_duration_unit}`;\n\n        // e.target.value returns string, we need to convert them to number\n        onChangeUiStore({ name: duration_name, value: +value });\n        onChange({ target: { name, value: +value } });\n    };\n\n    const onToggleDurationType = ({ target }) => {\n        const { name, value: is_advanced } = target;\n        onChangeUiStore({ name, value: is_advanced });\n\n        // replace selected duration unit and duration if the contract doesn't have that duration unit\n        let current_duration_unit = is_advanced ? advanced_duration_unit : simple_duration_unit;\n        const duration_value = getDurationFromUnit(current_duration_unit);\n        if (!hasDurationUnit(current_duration_unit, is_advanced)) {\n            current_duration_unit = duration_units_list[0].value;\n            onChangeUiStore({\n                name: `${is_advanced ? 'advanced' : 'simple'}_duration_unit`,\n                value: current_duration_unit,\n            });\n        }\n\n        const new_trade_store_values = {};\n\n        // simple only has expiry type of duration\n        if (!is_advanced && expiry_type !== 'duration') {\n            new_trade_store_values.expiry_type = 'duration';\n        }\n        if (is_advanced && expiry_type !== advanced_expiry_type) {\n            new_trade_store_values.expiry_type = advanced_expiry_type;\n        }\n\n        const has_same_duration = current_duration_unit === duration_unit && duration_value === duration;\n        if (!has_same_duration) {\n            new_trade_store_values.duration_unit = current_duration_unit;\n            new_trade_store_values.duration = duration_value;\n        }\n\n        const should_update_trade_store = Object.keys(new_trade_store_values).length;\n        if (should_update_trade_store) {\n            onChangeMultiple({ ...new_trade_store_values });\n        }\n    };\n\n    const props = {\n        shared_input: {\n            is_hj_whitelisted: true,\n            onChange: changeDurationValue,\n            max_value,\n            min_value,\n        },\n        number_input: {\n            type: 'number',\n            is_incrementable: true,\n        },\n    };\n\n    // e.g. digit contracts only has range slider - does not have toggle between advanced / simple\n    const has_toggle = expiry_list.length > 1 || duration_units_list.length > 1;\n\n    return (\n        <Fieldset\n            className={classNames('trade-container__fieldset', {\n                'trade-container__fieldset--advanced': is_advanced_duration,\n            })}\n        >\n            {duration_units_list.length === 1 && !is_advanced_duration && (\n                <Dropdown\n                    classNameDisplay='dc-dropdown__display--duration'\n                    disabled={false}\n                    id='duration'\n                    is_alignment_left\n                    is_nativepicker={false}\n                    list={duration_units_list}\n                    name='simple_duration_unit'\n                    no_border={true}\n                    onChange={changeDurationUnit}\n                    value={simple_duration_unit}\n                />\n            )}\n            {!has_toggle && <RangeSlider name='duration' value={duration_t} {...props.shared_input} />}\n            {has_toggle && (\n                <>\n                    {is_advanced_duration && (\n                        <AdvancedDuration\n                            advanced_duration_unit={advanced_duration_unit}\n                            advanced_expiry_type={advanced_expiry_type}\n                            changeDurationUnit={changeDurationUnit}\n                            duration_t={duration_t}\n                            duration_units_list={duration_units_list}\n                            expiry_date={expiry_date}\n                            expiry_epoch={expiry_epoch}\n                            expiry_list={expiry_list}\n                            expiry_type={expiry_type}\n                            getDurationFromUnit={getDurationFromUnit}\n                            market_open_times={market_open_times}\n                            number_input_props={props.number_input}\n                            onChange={onChange}\n                            onChangeUiStore={onChangeUiStore}\n                            server_time={server_time}\n                            shared_input_props={props.shared_input}\n                            start_date={start_date}\n                        />\n                    )}\n                    {!is_advanced_duration && (\n                        <SimpleDuration\n                            getDurationFromUnit={getDurationFromUnit}\n                            changeDurationUnit={changeDurationUnit}\n                            duration_t={duration_t}\n                            duration_units_list={duration_units_list}\n                            number_input_props={props.number_input}\n                            shared_input_props={props.shared_input}\n                            simple_duration_unit={simple_duration_unit}\n                        />\n                    )}\n                    {!isVanillaContract(contract_type) && (\n                        <DurationToggle\n                            name={'is_advanced_duration'}\n                            onChange={onToggleDurationType}\n                            value={is_advanced_duration}\n                        />\n                    )}\n                </>\n            )}\n        </Fieldset>\n    );\n};\n\nDuration.propTypes = {\n    advanced_duration_unit: PropTypes.string,\n    advanced_expiry_type: PropTypes.string,\n    contract_type: PropTypes.string,\n    duration: PropTypes.number,\n    duration_t: PropTypes.number,\n    duration_unit: PropTypes.string,\n    duration_units_list: MobxPropTypes.arrayOrObservableArray,\n    expiry_date: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    expiry_time: PropTypes.string,\n    expiry_type: PropTypes.string,\n    getDurationFromUnit: PropTypes.func,\n    hasDurationUnit: PropTypes.func,\n    is_advanced_duration: PropTypes.bool,\n    is_minimized: PropTypes.bool,\n    market_open_times: PropTypes.array,\n    max_value: PropTypes.number,\n    min_value: PropTypes.number,\n    number_input: PropTypes.object,\n    onChange: PropTypes.func,\n    onChangeMultiple: PropTypes.func,\n    onChangeUiStore: PropTypes.func,\n    server_time: PropTypes.object,\n    shared_input: PropTypes.object,\n    simple_duration_unit: PropTypes.string,\n    start_date: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    validation_errors: PropTypes.object,\n};\n\nexport default Duration;\n","import React from 'react';\nimport { getDurationMinMaxValues } from '@deriv/shared';\nimport Duration from './duration.jsx';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst DurationWrapper = observer(() => {\n    const { ui } = useStore();\n    const {\n        advanced_expiry_type,\n        advanced_duration_unit,\n        getDurationFromUnit,\n        is_advanced_duration,\n        onChangeUiStore,\n        simple_duration_unit,\n        duration_t,\n    } = ui;\n    const {\n        contract_expiry_type,\n        contract_type,\n        duration,\n        duration_unit,\n        duration_units_list,\n        duration_min_max,\n        expiry_type,\n        expiry_date,\n        expiry_epoch,\n        expiry_time,\n        start_date,\n        market_open_times,\n        onChange,\n        onChangeMultiple,\n    } = useTraderStore();\n\n    const duration_props = {\n        advanced_duration_unit,\n        advanced_expiry_type,\n        contract_expiry_type,\n        contract_type,\n        duration_min_max,\n        duration_t,\n        duration_unit,\n        duration_units_list,\n        duration,\n        expiry_date,\n        expiry_epoch,\n        expiry_time,\n        expiry_type,\n        getDurationFromUnit,\n        is_advanced_duration,\n        market_open_times,\n        onChange,\n        onChangeMultiple,\n        onChangeUiStore,\n        simple_duration_unit,\n        start_date,\n    };\n\n    const hasDurationUnit = (duration_type, is_advanced) => {\n        let duration_list = [...duration_units_list];\n\n        if (duration_list.length > 1 && !is_advanced) {\n            duration_list = duration_list.filter(du => du.value === 'm' || du.value === 't');\n        }\n\n        return duration_list.some(du => du.value === duration_type);\n    };\n\n    const setDurationUnit = () => {\n        if (duration_units_list?.length > 0) {\n            const new_duration_unit = duration_units_list[0].value;\n            const new_duration_value = getDurationFromUnit(new_duration_unit);\n\n            onChangeUiStore({\n                name: `${is_advanced_duration ? 'advanced' : 'simple'}_duration_unit`,\n                value: new_duration_unit,\n            });\n            onChangeMultiple({\n                duration_unit: new_duration_unit,\n                duration: +new_duration_value,\n            });\n        }\n    };\n\n    const handleEndTime = () => {\n        const symbol_has_endtime = duration_units_list.length > 1 || is_advanced_duration;\n\n        if (symbol_has_endtime) {\n            // simple duration does not have endtime\n            if (!is_advanced_duration) onChangeUiStore({ name: 'is_advanced_duration', value: true });\n\n            onChangeUiStore({ name: 'advanced_expiry_type', value: 'endtime' });\n        } else {\n            // If query string contains endtime but contract type does not e.g. digits (only ticks contracts)\n            onChange({ target: { name: 'expiry_type', value: 'duration' } });\n        }\n    };\n\n    const assertDurationIsWithinBoundary = React.useCallback(\n        current_duration => {\n            const [min_value, max_value] = getDurationMinMaxValues(\n                duration_min_max,\n                contract_expiry_type,\n                duration_unit\n            );\n            if (contract_expiry_type === 'tick' && current_duration < min_value) {\n                onChangeUiStore({ name: `duration_${duration_unit}`, value: min_value });\n                onChange({ target: { name: 'duration', value: min_value } });\n            }\n\n            if (!(current_duration < min_value) && current_duration > max_value && duration_unit !== 'd') {\n                onChangeUiStore({ name: `duration_${duration_unit}`, value: max_value });\n                onChange({ target: { name: 'duration', value: max_value } });\n            }\n        },\n        [contract_expiry_type, duration_unit, duration_min_max, onChange, onChangeUiStore]\n    );\n\n    React.useEffect(() => {\n        if (duration_unit === 'd') {\n            onChangeUiStore({\n                name: 'is_advanced_duration',\n                value: true,\n            });\n        }\n    }, [duration_unit, onChangeUiStore]);\n\n    React.useEffect(() => {\n        const current_unit = is_advanced_duration ? advanced_duration_unit : simple_duration_unit;\n        const current_duration = getDurationFromUnit(current_unit);\n\n        if (duration_unit !== current_unit) {\n            onChangeUiStore({\n                name: `${is_advanced_duration ? 'advanced' : 'simple'}_duration_unit`,\n                value: duration_unit,\n            });\n        }\n\n        if (+duration !== +current_duration) {\n            onChangeUiStore({ name: `duration_${duration_unit}`, value: duration });\n        }\n\n        if (expiry_type === 'endtime') handleEndTime();\n\n        assertDurationIsWithinBoundary(current_duration);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        if (is_advanced_duration && expiry_type !== advanced_expiry_type) {\n            onChange({ target: { name: 'expiry_type', value: advanced_expiry_type } });\n        }\n    }, [is_advanced_duration, expiry_type, advanced_expiry_type, onChange]);\n\n    // intercept changes to contract duration and check that trade_store and ui_store are aligned.\n    React.useEffect(() => {\n        const current_duration = getDurationFromUnit(duration_unit);\n        const simple_is_not_type_duration = !is_advanced_duration && expiry_type !== 'duration';\n\n        // simple only has expiry type duration\n        if (simple_is_not_type_duration) {\n            onChange({ target: { name: 'expiry_type', value: 'duration' } });\n        }\n\n        if (duration !== current_duration) {\n            onChangeUiStore({ name: `duration_${duration_unit}`, value: duration });\n        }\n\n        assertDurationIsWithinBoundary(current_duration);\n    }, [\n        duration_unit,\n        is_advanced_duration,\n        expiry_type,\n        duration,\n        assertDurationIsWithinBoundary,\n        onChange,\n        onChangeUiStore,\n        getDurationFromUnit,\n    ]);\n\n    const current_duration_unit = is_advanced_duration ? advanced_duration_unit : simple_duration_unit;\n    const has_missing_duration_unit = !hasDurationUnit(current_duration_unit, is_advanced_duration);\n    const simple_is_missing_duration_unit =\n        !is_advanced_duration && simple_duration_unit === 'd' && duration_units_list.length === 4;\n    const [min_value, max_value] = getDurationMinMaxValues(duration_min_max, contract_expiry_type, duration_unit);\n\n    if (has_missing_duration_unit || simple_is_missing_duration_unit) {\n        setDurationUnit();\n    }\n\n    return (\n        <Duration hasDurationUnit={hasDurationUnit} max_value={max_value} min_value={min_value} {...duration_props} />\n    );\n});\n\nexport default DurationWrapper;\n","import DurationWrapper from './duration-wrapper.jsx';\n\nexport default DurationWrapper;\n","import React from 'react';\n\nimport { Checkbox, Dropdown, Popover, PopoverMessageCheckbox } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\n\nimport Fieldset from 'App/Components/Form/fieldset';\nimport { onChangeCancellationDuration, onToggleCancellation } from 'Stores/Modules/Trading/Helpers/multiplier';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst CancelDeal = observer(() => {\n    const { ui } = useStore();\n    const {\n        cancellation_range_list,\n        cancellation_duration,\n        has_cancellation,\n        has_stop_loss,\n        has_take_profit,\n        onChangeMultiple,\n    } = useTraderStore();\n\n    const { should_show_cancellation_warning, toggleCancellationWarning } = ui;\n\n    const should_show_popover = (has_take_profit || has_stop_loss) && should_show_cancellation_warning;\n    const [is_do_not_show_selected, setDoNotShowSelected] = React.useState(!should_show_cancellation_warning);\n\n    const onPopoverClose = () => {\n        if (is_do_not_show_selected) {\n            toggleCancellationWarning();\n        }\n    };\n\n    const onPopoverCheckboxChange = React.useCallback(() => {\n        setDoNotShowSelected(prev_state => !prev_state);\n    }, []);\n\n    const input = (\n        <Checkbox\n            id='dt_cancellation-checkbox_input'\n            onChange={() => onToggleCancellation({ has_cancellation, onChangeMultiple })}\n            name='has_cancellation'\n            label={localize('Deal cancellation')}\n            defaultChecked={has_cancellation}\n        />\n    );\n\n    return (\n        <React.Fragment>\n            {!!cancellation_range_list.length && (\n                <Fieldset className='trade-container__fieldset'>\n                    <div className='dc-input-wrapper--inline'>\n                        {should_show_popover ? (\n                            <Popover\n                                alignment='left'\n                                classNameBubble='trade-container__popover'\n                                is_bubble_hover_enabled\n                                margin={2}\n                                message={\n                                    <PopoverMessageCheckbox\n                                        defaultChecked={is_do_not_show_selected}\n                                        checkboxLabel={localize(\"Don't show this again\")}\n                                        message={localize(\n                                            'Take profit and/or stop loss are not available while deal cancellation is active.'\n                                        )}\n                                        name='should_show_cancellation_warning'\n                                        onChange={onPopoverCheckboxChange}\n                                    />\n                                }\n                                onBubbleClose={onPopoverClose}\n                                relative_render\n                            >\n                                {input}\n                            </Popover>\n                        ) : (\n                            <React.Fragment>{input}</React.Fragment>\n                        )}\n                        <Popover\n                            alignment='left'\n                            icon='info'\n                            id='dt_cancellation-checkbox__tooltip'\n                            is_bubble_hover_enabled\n                            message={localize(\n                                'Cancel your trade anytime within a chosen time-frame. Triggered automatically if your trade reaches the stop out level within the chosen time-frame.'\n                            )}\n                            classNameBubble='trade-container__deal-cancellation-popover'\n                            margin={216}\n                            relative_render\n                        />\n                    </div>\n                    {has_cancellation && (\n                        <Dropdown\n                            id='dt_cancellation_range'\n                            className='trade-container__multiplier-dropdown'\n                            is_alignment_left\n                            is_nativepicker={false}\n                            list={cancellation_range_list}\n                            name='cancellation_duration'\n                            no_border={true}\n                            value={cancellation_duration}\n                            onChange={event => onChangeCancellationDuration({ event, onChangeMultiple })}\n                        />\n                    )}\n                </Fieldset>\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default CancelDeal;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport NumberSelector from 'App/Components/Form/number-selector';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport { getGrowthRatePercentage, getTickSizeBarrierPercentage, isEmptyObject } from '@deriv/shared';\nimport classNames from 'classnames';\nimport { observer } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst Accumulator = observer(() => {\n    const {\n        accumulator_range_list,\n        growth_rate,\n        is_accumulator,\n        onChange,\n        tick_size_barrier,\n        proposal_info,\n        has_open_accu_contract,\n    } = useTraderStore();\n\n    // splitting accumulator_range_list into rows containing 5 values each:\n    const arr_arr_numbers: number[][] | undefined = accumulator_range_list?.reduce((acc: number[][], _el, index) => {\n        if (index % 5 === 0) {\n            acc.push(accumulator_range_list.slice(index, index + 5));\n        }\n        return acc;\n    }, []);\n    const has_error_or_not_loaded =\n        proposal_info?.ACCU?.has_error || !proposal_info?.ACCU?.id || isEmptyObject(proposal_info);\n    if (!accumulator_range_list?.length) return null;\n    return (\n        <Fieldset\n            className={classNames('trade-container__fieldset', 'accumulator')}\n            header={localize('Growth rate')}\n            is_center\n            is_tooltip_disabled={has_error_or_not_loaded && is_accumulator}\n            header_tooltip={localize(\n                'Your stake will grow at {{growth_rate}}% per tick as long as the current spot price remains within ±{{tick_size_barrier}} from the previous spot price.',\n                {\n                    growth_rate: getGrowthRatePercentage(growth_rate),\n                    tick_size_barrier: getTickSizeBarrierPercentage(tick_size_barrier),\n                }\n            )}\n        >\n            <NumberSelector\n                arr_arr_numbers={arr_arr_numbers}\n                name='growth_rate'\n                onChange={onChange}\n                selected_number={growth_rate}\n                should_show_in_percents\n                is_disabled={has_open_accu_contract}\n            />\n        </Fieldset>\n    );\n});\n\nexport default Accumulator;\n","import React from 'react';\nimport classNames from 'classnames';\nimport Amount from 'Modules/Trading/Components/Form/TradeParams/amount';\nimport Barrier from 'Modules/Trading/Components/Form/TradeParams/barrier';\nimport BarrierSelector from 'Modules/Trading/Components/Form/TradeParams/Turbos/barrier-selector';\nimport Duration from 'Modules/Trading/Components/Form/TradeParams/Duration';\nimport LastDigit from 'Modules/Trading/Components/Form/TradeParams/last-digit';\nimport CancelDeal from 'Modules/Trading/Components/Form/TradeParams/Multiplier/cancel-deal.jsx';\nimport Accumulator from 'Modules/Trading/Components/Form/TradeParams/Accumulator/accumulator';\nimport StopLoss from 'Modules/Trading/Components/Form/TradeParams/Multiplier/stop-loss.jsx';\nimport TakeProfit from 'Modules/Trading/Components/Form/TradeParams/Multiplier/take-profit.jsx';\nimport Expiration from 'Modules/Trading/Components/Form/TradeParams/Multiplier/expiration.jsx';\nimport AccumulatorsInfoDisplay from 'Modules/Trading/Components/Form/TradeParams/Accumulator/accumulators-info-display';\nimport Strike from 'Modules/Trading/Components/Form/TradeParams/strike.jsx';\nimport TradeTypeTabs from 'Modules/Trading/Components/Form/TradeParams/trade-type-tabs';\nimport { observer } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport Fieldset from 'App/Components/Form/fieldset';\n\ntype TTradeParams = {\n    is_minimized?: boolean;\n};\n\nconst TradeParams = observer(({ is_minimized = false }: TTradeParams) => {\n    const { form_components } = useTraderStore();\n    const isVisible = (component_key: string) => {\n        return form_components.includes(component_key);\n    };\n\n    return (\n        <React.Fragment>\n            {isVisible('duration') && (\n                // @ts-expect-error: TODO: check if TS error is gone after <Duration /> is migrated to TS\n                <Duration key={'duration'} is_minimized={is_minimized} />\n            )}\n            {isVisible('barrier') && <Barrier key={'barrier'} is_minimized={is_minimized} />}\n            {isVisible('last_digit') && <LastDigit key={'last_digit'} is_minimized={is_minimized} />}\n            {isVisible('accumulator') && <Accumulator key={'accumulator'} />}\n            {(isVisible('trade_type_tabs') || isVisible('strike') || isVisible('barrier_selector')) && (\n                <Fieldset className={classNames('trade-container__fieldset', 'trade-container__fieldset--no-padding')}>\n                    {isVisible('trade_type_tabs') && <TradeTypeTabs key={'trade_type_tabs'} />}\n                    {isVisible('strike') && <Strike key={'strike'} />}\n                    {isVisible('barrier_selector') && <BarrierSelector key={'barrier_selector'} />}\n                </Fieldset>\n            )}\n            {isVisible('amount') && <Amount key={'amount'} is_minimized={is_minimized} />}\n            {isVisible('take_profit') && <TakeProfit key={'take_profit'} />}\n            {isVisible('stop_loss') && <StopLoss key={'stop_loss'} />}\n            {isVisible('cancellation') && <CancelDeal key={'cancellation'} />}\n            {isVisible('expiration') && <Expiration key={'expiration'} />}\n            {isVisible('accu_info_display') && <AccumulatorsInfoDisplay key={'accu_info_display'} />}\n        </React.Fragment>\n    );\n});\n\nexport default TradeParams;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { TradeParamsLoader } from 'App/Components/Elements/ContentLoader';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport ContractType from '../../Containers/contract-type';\nimport Purchase from '../../Containers/purchase';\nimport TradeParams from '../../Containers/trade-params';\n\ntype TScreenLarge = {\n    is_market_closed?: boolean;\n    is_trade_enabled: boolean;\n};\nconst ScreenLarge = ({ is_market_closed = false, is_trade_enabled }: TScreenLarge) => (\n    <div\n        className={classNames('sidebar__items', {\n            'sidebar__items--market-closed': is_market_closed,\n        })}\n    >\n        {!is_trade_enabled ? (\n            <TradeParamsLoader speed={2} />\n        ) : (\n            <React.Fragment>\n                <Fieldset className='trade-container__fieldset trade-types'>\n                    <ContractType />\n                </Fieldset>\n                <TradeParams />\n                <div className='purchase-container'>\n                    <Purchase is_market_closed={is_market_closed} />\n                </div>\n            </React.Fragment>\n        )}\n    </div>\n);\n\nexport default ScreenLarge;\n"],"names":["contract_start_type","contract_type","contract_types_list","duration_unit","expiry_type","onChange","value","has_equals_only","has_callputequal_duration","hasDurationForCallPutEqual","has_callputequal","hasCallPutEqual","isRiseFallEqual","className","Checkbox","id","e","persist","target","name","checked","Number","defaultChecked","label","localize","classNameLabel","disabled","Popover","alignment","classNameTarget","icon","message","margin","relative_render","Multiplier","observer","useTraderStore","multiplier","multiplier_range_list","Dropdown","is_alignment_left","is_nativepicker","list","no_border","Input","amount","currency","current_focus","error_messages","is_single_currency","is_disabled","setCurrentFocus","InputField","classNameInlinePrefix","classNameInput","fractional_digits","getDecimalPlaces","inline_prefix","undefined","is_autocomplete_disabled","is_float","is_hj_whitelisted","is_incrementable","is_negative_disabled","max_length","AMOUNT_MAX_LENGTH","type","ariaLabel","Amount","is_minimized","useStore","ui","client","currencies_list","basis","basis_list","is_accumulator","is_equal","is_multiplier","is_turbos","is_vanilla","has_open_accu_contract","stake_boundary","validation_errors","toUpperCase","min_stake","max_stake","find","o","text","classNames","toLowerCase","addComma","header","header_tooltip","Localize","i18n_default_text","length","ButtonToggle","buttons_arr","map","item","is_animated","initial_offset","should_show_tooltip","is_tooltip_relative","TickSteps","hover_value","max_value","min_value","onClick","onMouseEnter","onMouseLeave","arr_ticks","Array","keys","isActive","idx","isMarked","isMarkedOnHover","key","propTypes","PropTypes","RangeSlider","React","setHoverValue","range_slider_ref","nativeEvent","offsetX","offsetY","resetOnHover","getRangeSliderTrackWidth","slider_value","is_hover","current","style","width","display_value","htmlFor","max","min","target_value","tabIndex","ref","index","Text","align","weight","size","color","DurationToggle","icon_className","Icon","classNamePath","i","TradingDatePicker","is_24_hours_contract","mode","server_time","common","current_duration","duration","duration_min_max","duration_units_list","start_date","start_time","symbol","isMounted","useIsMounted","disabled_days","setDisabledDays","market_events","setMarketEvents","setDuration","selected_date","setSelectedDate","onChangeCalendarMonth","getMomentContractStartDateTime","setTime","toMoment","hasIntradayDurationUnit","clone","add","daily","isTimeValid","format","getMaxDailyDuration","getMinDateExpiry","is_duration_contract","min_date","startOf","hasRangeSelection","new_market_events","new_disabled_days","ContractType","forEach","evt","dates","split","indexOf","push","descrip","has_error","Tooltip","DatePicker","display_format","show_leading_icon","error","max_date","has_range_selection","has_today_btn","footer","events","keep_open","readOnly","isBetween","to_compare_moment","start_times_moment","end_times_moment","Dialog","preClass","selected_time","end_times","start_times","end_time","hour","minute","seconds","milliseconds","hours","a","slice","minutes","selectOption","current_value","prev_value","prev_hour","prev_minute","h","start_times_reset_minute","is_hour_enabled","is_minute_enabled","is_enabled","mm","class_prefix","TimePicker","padding","placeholder","is_open","setIsOpen","wrapper_ref","setWrapperRef","document","addEventListener","handleClickOutside","removeEventListener","handleChange","arg","event","contains","node","is_read_only","CSSTransition","in","enter","enterDone","exit","timeout","unmountOnExit","is_clearable","getClosestTime","time","interval","moment_time","moment","Math","ceil","expiry_date","expiry_time","market_open_times","market_close_times","is_market_closed","moment_expiry_date","market_open_datetimes","open_time","market_close_datetimes","close_time","expiry_datetime","server_datetime","boundaries","start","isBefore","end","getBoundaries","isAfter","moment_market_open_time","getSelectedTime","expiry_epoch","formatted_date","Date","toUTCString","replace","substring","as","line_height","values","date","AdvancedDuration","advanced_duration_unit","advanced_expiry_type","changeDurationUnit","duration_t","expiry_list","getDurationFromUnit","number_input_props","onChangeUiStore","shared_input_props","contract_expiry_type","has_intraday_duration_unit","isSame","endtime_container_class","classNameDisplay","ticks","MobxPropTypes","SimpleDuration","arr","filtered_arr","simple_duration_unit","has_label","some","du","filter","Duration","hasDurationUnit","is_advanced_duration","onChangeMultiple","isVanillaContract","onToggleDurationType","has_end_time","expiry","pop","moment_expiry","duration_unit_text","duration_value","is_advanced","current_duration_unit","new_trade_store_values","Object","props","shared_input","duration_name","number_input","has_toggle","DurationWrapper","duration_props","duration_type","duration_list","assertDurationIsWithinBoundary","getDurationMinMaxValues","current_unit","has_missing_duration_unit","simple_is_missing_duration_unit","new_duration_unit","new_duration_value","setDurationUnit","cancellation_range_list","cancellation_duration","has_cancellation","has_stop_loss","has_take_profit","should_show_cancellation_warning","toggleCancellationWarning","should_show_popover","is_do_not_show_selected","setDoNotShowSelected","onPopoverCheckboxChange","prev_state","input","onToggleCancellation","classNameBubble","is_bubble_hover_enabled","PopoverMessageCheckbox","checkboxLabel","onBubbleClose","onChangeCancellationDuration","accumulator_range_list","growth_rate","tick_size_barrier","proposal_info","arr_arr_numbers","reduce","acc","_el","has_error_or_not_loaded","ACCU","isEmptyObject","is_center","is_tooltip_disabled","getGrowthRatePercentage","getTickSizeBarrierPercentage","selected_number","should_show_in_percents","form_components","isVisible","component_key","includes","is_trade_enabled","speed"],"sourceRoot":""}