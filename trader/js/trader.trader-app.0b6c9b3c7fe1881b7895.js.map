{"version":3,"file":"trader/js/trader.trader-app.0b6c9b3c7fe1881b7895.js","mappings":"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","sources":["webpack://@deriv/trader/../stores/src/storeContext.ts","webpack://@deriv/trader/../api/src/APIContext.ts","webpack://@deriv/trader/../api/src/useAPI.ts","webpack://@deriv/trader/../api/src/APIProvider.tsx","webpack://@deriv/trader/../api/src/useSubscription.ts","webpack://@deriv/trader/../stores/src/useStore.ts","webpack://@deriv/trader/../stores/src/providers/ExchangeRatesProvider.tsx","webpack://@deriv/trader/../stores/src/stores/BaseStore.ts","webpack://@deriv/trader/../stores/src/stores/ExchangeRatesStore.ts","webpack://@deriv/trader/../stores/src/stores/FeatureFlagsStore.ts","webpack://@deriv/trader/../stores/src/storeProvider.tsx","webpack://@deriv/trader/./src/App/Components/Animations/bounce.jsx","webpack://@deriv/trader/./src/App/Components/Animations/slide-in.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContentLoader/positions-card.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContentLoader/trade-params.jsx","webpack://@deriv/trader/./src/App/Components/Elements/PositionsDrawer/helpers/positions-helper.js","webpack://@deriv/trader/./src/_common/components/loading.tsx","webpack://@deriv/trader/./src/App/Components/Elements/chart-loader.tsx","webpack://@deriv/trader/./src/App/Components/Routes/helpers.js","webpack://@deriv/trader/./src/App/Components/Elements/EmptyPortfolioMessage/empty-portfolio-message.tsx","webpack://@deriv/trader/./src/App/Components/Elements/EmptyPortfolioMessage/index.ts","webpack://@deriv/trader/./src/App/Components/Elements/PositionsDrawer/positions-drawer.jsx","webpack://@deriv/trader/./src/App/Components/Elements/PositionsDrawer/index.js","webpack://@deriv/trader/./src/App/Components/Elements/market-countdown-timer.tsx","webpack://@deriv/trader/./src/App/Components/Elements/market-is-closed-overlay.tsx","webpack://@deriv/trader/./src/Modules/Trading/Containers/test.jsx","webpack://@deriv/trader/./src/Modules/SmartChart/Helpers/symbol.js","webpack://@deriv/trader/./src/Modules/Trading/Containers/chart-widgets.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/form-layout.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/Markers/accumulators-profit-loss-text.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/Markers/accumulators-profit-loss-tooltip.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/Markers/accumulators-chart-elements.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/toolbar-widgets.jsx","webpack://@deriv/trader/./src/Modules/Trading/Containers/trade.jsx","webpack://@deriv/trader/./src/Modules/Trading/index.js","webpack://@deriv/trader/./src/App/Constants/routes-config.js","webpack://@deriv/trader/./src/App/Components/Routes/binary-link.jsx","webpack://@deriv/trader/./src/App/Components/Routes/route-with-sub-routes.jsx","webpack://@deriv/trader/./src/App/Components/Routes/binary-routes.jsx","webpack://@deriv/trader/./src/App/Components/Routes/index.js","webpack://@deriv/trader/./src/App/Containers/Routes/routes.jsx","webpack://@deriv/trader/./src/App/Components/Elements/PositionsDrawer/result-mobile.jsx","webpack://@deriv/trader/./src/App/Components/Elements/PositionsDrawer/positions-modal-card.jsx","webpack://@deriv/trader/./src/App/Components/Elements/TogglePositions/toggle-positions.tsx","webpack://@deriv/trader/./src/App/Components/Elements/TogglePositions/toggle-positions-mobile.tsx","webpack://@deriv/trader/./src/App/Containers/populate-header.jsx","webpack://@deriv/trader/./src/trader-providers.tsx","webpack://@deriv/trader/./src/App/Containers/trade-header-extensions.tsx","webpack://@deriv/trader/./src/App/Containers/trade-footer-extensions.tsx","webpack://@deriv/trader/./src/App/Containers/trade-settings-extensions.tsx","webpack://@deriv/trader/./src/Stores/Modules/Trading/Actions/symbol.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Constants/validation-rules.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Actions/purchase.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/accumulator.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Actions/contract-type.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Actions/duration.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Actions/start-date.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/process.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/barrier-utils.ts","webpack://@deriv/trader/./src/Utils/Validator/validator.ts","webpack://@deriv/trader/./src/Utils/Validator/index.ts","webpack://@deriv/trader/./src/Stores/base-store.ts","webpack://@deriv/trader/./src/Stores/Modules/SmartChart/Helpers/barriers.ts","webpack://@deriv/trader/./src/Stores/Modules/SmartChart/chart-barrier-store.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/limit-orders.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/chart.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/trade-store.ts","webpack://@deriv/trader/./src/Stores/Modules/index.js","webpack://@deriv/trader/./src/Stores/index.ts","webpack://@deriv/trader/./src/App/init-store.js","webpack://@deriv/trader/./src/App/app.tsx","webpack://@deriv/trader/./src/App/index.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/AccumulatorsStats/ticks-history-counter.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/AccumulatorsStats/expanded-ticks-history.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/AccumulatorsStats/accumulators-stats-manual-modal.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/AccumulatorsStats/accumulators-stats.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/AccumulatorsStats/index.js","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/digit.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/digit-spot.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/last-digit-stat.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/digit-display.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/last-digit-pointer.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/last-digit-prediction.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/Digits/digits.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/Digits/index.js","webpack://@deriv/trader/./src/Modules/Page404/Components/Page404.tsx","webpack://@deriv/trader/./src/Modules/Page404/index.ts","webpack://@deriv/trader/./src/Modules/SmartChart/Components/Markers/marker.jsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/bottom-widgets.jsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/buy-toast-notification.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/top-widgets.jsx","webpack://@deriv/trader/./src/Modules/SmartChart/index.js","webpack://@deriv/trader/./src/Modules/Trading/Containers/toast-popup.tsx","webpack://@deriv/trader/./src/Modules/Trading/Helpers/contract-type.tsx","webpack://@deriv/trader/./src/Modules/Trading/Helpers/digits.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/contract-type.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/proposal.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/start-date.ts","webpack://@deriv/trader/./src/Stores/useTraderStores.tsx","webpack://@deriv/trader/./src/Utils/Helpers/market-underlying.ts","webpack://@deriv/trader/./src/_common/base/server_time.js","webpack://@deriv/trader/./src/_common/utility.js"],"sourcesContent":["import { createContext } from 'react';\nimport type { TStores } from '../types';\n\nconst StoreContext = createContext<TStores | null>(null);\n\nexport default StoreContext;\n","import { createContext } from 'react';\n\n// Don't need to type `deriv_api` here, We will be using these methods inside\n// the `useQuery`, `useMutation` and `useSubscription` hook to make it type-safe.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst APIContext = createContext<Record<string, any> | null>(null);\n\nexport default APIContext;\n","import { useCallback, useContext } from 'react';\n\nimport type {\n    TSocketEndpointNames,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nimport APIContext from './APIContext';\n\nconst useAPI = () => {\n    const api = useContext(APIContext);\n\n    const send = useCallback(\n        async <T extends TSocketEndpointNames | TSocketPaginateableEndpointNames = TSocketEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): Promise<TSocketResponseData<T>> => {\n            const response = await api?.send({ [name]: 1, ...(payload || {}) });\n\n            if (response.error) {\n                throw response.error;\n            }\n\n            return response;\n        },\n        [api]\n    );\n\n    const subscribe = useCallback(\n        <T extends TSocketSubscribableEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): {\n            subscribe: (\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onData: (response: any) => void,\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onError: (response: any) => void\n            ) => { unsubscribe?: VoidFunction };\n        } => api?.subscribe({ [name]: 1, subscribe: 1, ...(payload || {}) }),\n        [api]\n    );\n\n    return {\n        send,\n        subscribe,\n    };\n};\n\nexport default useAPI;\n","import React, { PropsWithChildren } from 'react';\n// @ts-expect-error `@deriv/deriv-api` is not in TypeScript, Hence we ignore the TS error.\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic';\nimport { getAppId, getSocketURL, useWS } from '@deriv/shared';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n// import { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport APIContext from './APIContext';\n\ndeclare global {\n    interface Window {\n        ReactQueryClient?: QueryClient;\n        DerivAPI?: Record<string, DerivAPIBasic>;\n    }\n}\n\n// This is a temporary workaround to share a single `QueryClient` instance between all the packages.\n// Later once we have each package separated we won't need this anymore and can remove this.\nconst getSharedQueryClientContext = (): QueryClient => {\n    if (!window.ReactQueryClient) {\n        window.ReactQueryClient = new QueryClient();\n    }\n\n    return window.ReactQueryClient;\n};\n\n// This is a temporary workaround to share a single `DerivAPIBasic` instance for every unique URL.\n// Later once we have each package separated we won't need this anymore and can remove this.\nconst getDerivAPIInstance = (): DerivAPIBasic => {\n    const endpoint = getSocketURL();\n    const app_id = getAppId();\n    const language = 'EN'; // Need to use the language from the app context.\n    const brand = 'deriv';\n    const wss = `wss://${endpoint}/websockets/v3?app_id=${app_id}&l=${language}&brand=${brand}`;\n\n    if (!window.DerivAPI) {\n        window.DerivAPI = {};\n    }\n\n    if (!window.DerivAPI?.[wss]) {\n        window.DerivAPI[wss] = new DerivAPIBasic({ connection: new WebSocket(wss) });\n    }\n\n    return window.DerivAPI?.[wss];\n};\n\nconst queryClient = getSharedQueryClientContext();\n\ntype TProps = {\n    /** If set to true, the APIProvider will instantiate it's own socket connection. */\n    standalone?: boolean;\n};\n\nconst APIProvider = ({ children, standalone = false }: PropsWithChildren<TProps>) => {\n    const WS = useWS();\n    // Use the new API instance if the `standalone` prop is set to true,\n    // else use the legacy socket connection.\n    const active_connection = standalone ? getDerivAPIInstance() : WS;\n\n    return (\n        <APIContext.Provider value={active_connection}>\n            <QueryClientProvider client={queryClient}>\n                {children}\n                {/* <ReactQueryDevtools /> */}\n            </QueryClientProvider>\n        </APIContext.Provider>\n    );\n};\n\nexport default APIProvider;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport useAPI from './useAPI';\nimport type {\n    TSocketAcceptableProps,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nconst useSubscription = <T extends TSocketSubscribableEndpointNames>(name: T) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isSubscribed, setSubscribed] = useState(false);\n    const [error, setError] = useState<unknown>();\n    const [data, setData] = useState<TSocketResponseData<T>>();\n    const subscriber = useRef<{ unsubscribe?: VoidFunction }>();\n    const { subscribe: _subscribe } = useAPI();\n\n    const subscribe = useCallback(\n        (...props: TSocketAcceptableProps<T>) => {\n            const prop = props?.[0];\n            const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n            setIsLoading(true);\n            setSubscribed(true);\n\n            try {\n                subscriber.current = _subscribe(name, payload).subscribe(\n                    response => {\n                        setData(response);\n                        setIsLoading(false);\n                    },\n                    response => {\n                        setError(response.error);\n                        setIsLoading(false);\n                    }\n                );\n            } catch (e) {\n                setError(e);\n            }\n        },\n        [_subscribe, name]\n    );\n\n    const unsubscribe = useCallback(() => {\n        subscriber.current?.unsubscribe?.();\n        setSubscribed(false);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            unsubscribe();\n        };\n    }, [unsubscribe]);\n\n    return {\n        subscribe,\n        unsubscribe,\n        isLoading,\n        isSubscribed,\n        error,\n        data,\n    };\n};\n\nexport default useSubscription;\n","import { useContext } from 'react';\nimport StoreContext from './storeContext';\n\nconst useStore = () => {\n    const store = useContext(StoreContext);\n\n    if (!store) {\n        throw new Error('useStore must be used within StoreProvider');\n    }\n\n    return store;\n};\n\nexport default useStore;\n","import React, { useEffect } from 'react';\nimport { useSubscription } from '@deriv/api';\nimport merge from 'lodash.merge';\nimport { observer } from 'mobx-react-lite';\nimport useStore from '../useStore';\n\nconst ExchangeRatesProvider = observer(({ children }: React.PropsWithChildren<unknown>) => {\n    const { data, subscribe } = useSubscription('exchange_rates');\n    const {\n        exchange_rates: { update },\n    } = useStore();\n\n    useEffect(() => {\n        subscribe({ payload: { base_currency: 'USD' } });\n    }, [subscribe]);\n\n    useEffect(() => {\n        if (data) {\n            const { exchange_rates } = data;\n\n            if (exchange_rates) update(prev => merge(prev, exchange_rates));\n        }\n    }, [update, data]);\n\n    return <>{children}</>;\n});\n\nexport default ExchangeRatesProvider;\n","import { action, makeObservable, observable } from 'mobx';\nimport { makePersistable, stopPersisting } from 'mobx-persist-store';\n\nexport default class BaseStore<T> {\n    data: T | undefined = undefined;\n\n    constructor(name: string, onHydrationDone?: VoidFunction) {\n        makeObservable(this, {\n            data: observable,\n            update: action.bound,\n            unmount: action.bound,\n        });\n\n        makePersistable(this, { name, properties: ['data'], storage: window.localStorage }).then(() =>\n            onHydrationDone?.()\n        );\n    }\n\n    update(data: NonNullable<T> | ((previous?: T) => NonNullable<T>)) {\n        this.data = data instanceof Function ? data(this.data) : data;\n    }\n\n    unmount() {\n        stopPersisting(this);\n    }\n}\n","import BaseStore from './BaseStore';\nimport type { ExchangeRatesResponse } from '@deriv/api-types';\n\nexport default class ExchangeRatesStore extends BaseStore<ExchangeRatesResponse['exchange_rates']> {\n    constructor() {\n        super('ExchangeRatesStore');\n    }\n}\n","import BaseStore from './BaseStore';\n\nconst FLAGS = {\n    wallet: false,\n    next_wallet: false,\n} satisfies Record<string, boolean>;\n\nexport default class FeatureFlagsStore extends BaseStore<{ [k in keyof typeof FLAGS]: boolean }> {\n    constructor() {\n        super('FeatureFlagsStore', () => {\n            // Set the default values for the first time.\n            if (!this.data) this.update(FLAGS);\n\n            // Update the store data if a new flag was added or removed.\n            if (this.data && Object.keys(this.data).length !== Object.keys(FLAGS).length) {\n                this.update(old => {\n                    const data = FLAGS;\n\n                    Object.keys(FLAGS).forEach(flag => {\n                        // @ts-expect-error flag key is always present in the object, Hence can ignore the TS error.\n                        if (old[flag] !== undefined) data[flag] = old[flag];\n                    });\n\n                    return data;\n                });\n            }\n        });\n\n        this.data = FLAGS;\n    }\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { APIProvider } from '@deriv/api';\nimport { ExchangeRatesProvider } from './providers';\nimport StoreContext from './storeContext';\nimport { ExchangeRatesStore, FeatureFlagsStore } from './stores';\nimport type { TCoreStores, TStores } from '../types';\n\nconst StoreProvider = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    const memoizedValue: TStores = useMemo(() => {\n        // If the store is mocked for testing purposes, then return the mocked value.\n        if ('is_mock' in store && store.is_mock) return store as unknown as TStores;\n\n        // Otherwise, instantiate store and return it.\n        return {\n            ...store,\n            exchange_rates: new ExchangeRatesStore(),\n            feature_flags: new FeatureFlagsStore(),\n        };\n    }, [store]);\n\n    useEffect(() => {\n        return () => {\n            Object.values(memoizedValue).forEach(value => {\n                if (typeof value === 'object' && 'unmount' in value) value.unmount();\n            });\n        };\n    }, [memoizedValue]);\n\n    return (\n        <APIProvider>\n            <StoreContext.Provider value={memoizedValue}>\n                <ExchangeRatesProvider>{children}</ExchangeRatesProvider>\n            </StoreContext.Provider>\n        </APIProvider>\n    );\n};\n\nexport default StoreProvider;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { motion } from 'framer-motion';\n\nconst BounceUp = {\n    animate: {\n        y: 0,\n        opacity: 1,\n    },\n    initial: {\n        y: 35,\n        opacity: 0,\n    },\n    transition: {\n        type: 'spring',\n        stiffness: 500,\n        damping: 15,\n        duration: 0.3,\n    },\n};\n\nconst Bounce = ({ children, className, is_visible, keyname }) =>\n    is_visible ? (\n        <motion.div\n            initial={BounceUp.initial}\n            animate={BounceUp.animate}\n            transition={BounceUp.transition}\n            className={className}\n            key={keyname}\n        >\n            {children}\n        </motion.div>\n    ) : null;\n\nBounce.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    is_visible: PropTypes.bool,\n    keyname: PropTypes.string,\n};\n\nexport { Bounce };\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { motion } from 'framer-motion';\n\nconst SlideInFromTop = {\n    initial: {\n        y: -20,\n        opacity: 0,\n    },\n    animate: {\n        y: 0,\n        opacity: 1,\n    },\n    transition: {\n        duration: 0.2,\n    },\n};\n\nconst SlideInFromBottom = {\n    initial: {\n        y: 20,\n        opacity: 0,\n    },\n    animate: {\n        y: 0,\n        opacity: 1,\n    },\n    transition: {\n        duration: 0.2,\n    },\n};\n\nconst SlideIn = ({ children, className, keyname, is_visible, type }) => {\n    if (type === 'bottom') {\n        return (\n            <>\n                {is_visible && (\n                    <motion.div\n                        initial={SlideInFromBottom.initial}\n                        animate={SlideInFromBottom.animate}\n                        transition={SlideInFromBottom.transition}\n                        className={className}\n                        key={keyname}\n                    >\n                        {children}\n                    </motion.div>\n                )}\n            </>\n        );\n    }\n    return (\n        <>\n            {is_visible && (\n                <motion.div\n                    initial={SlideInFromTop.initial}\n                    animate={SlideInFromTop.animate}\n                    transition={SlideInFromTop.transition}\n                    className={className}\n                    key={keyname}\n                >\n                    {children}\n                </motion.div>\n            )}\n        </>\n    );\n};\n\nSlideIn.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    is_visible: PropTypes.bool,\n    keyname: PropTypes.string,\n    type: PropTypes.string,\n};\n\nexport { SlideIn };\n","import ContentLoader from 'react-content-loader';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PositionsCardLoader = ({ speed }) => (\n    <ContentLoader\n        height={173}\n        width={218}\n        speed={speed}\n        backgroundColor={'var(--general-section-1)'}\n        foregroundColor={'var(--general-hover)'}\n    >\n        <rect x='43' y='19' rx='0' ry='0' width='56' height='8' />\n        <rect x='147' y='19' rx='0' ry='0' width='56' height='8' />\n        <rect x='12' y='50' rx='0' ry='0' width='44' height='8' />\n        <rect x='13' y='68' rx='0' ry='0' width='192' height='8' />\n        <rect x='5' y='89' rx='0' ry='0' width='208' height='1' />\n        <rect x='12' y='104' rx='0' ry='0' width='44' height='8' />\n        <rect x='12' y='9' rx='0' ry='0' width='24' height='24' />\n        <rect x='116' y='11' rx='0' ry='0' width='24' height='24' />\n        <rect x='12' y='118' rx='0' ry='0' width='88' height='8' />\n        <rect x='116' y='104' rx='0' ry='0' width='44' height='8' />\n        <rect x='116' y='118' rx='0' ry='0' width='88' height='8' />\n        <rect x='12' y='139' rx='0' ry='0' width='44' height='8' />\n        <rect x='12' y='153' rx='0' ry='0' width='88' height='8' />\n        <rect x='116' y='139' rx='0' ry='0' width='44' height='8' />\n        <rect x='116' y='153' rx='0' ry='0' width='88' height='8' />\n    </ContentLoader>\n);\n\nPositionsCardLoader.propTypes = {\n    speed: PropTypes.number,\n};\n\nexport { PositionsCardLoader };\n","import ContentLoader from 'react-content-loader';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DesktopWrapper, MobileWrapper } from '@deriv/components';\n\nconst TradeParamsLoader = ({ speed }) => (\n    <>\n        <MobileWrapper>\n            <ContentLoader\n                height={214}\n                width={344}\n                speed={speed}\n                backgroundColor={'var(--general-section-1)'}\n                foregroundColor={'var(--general-hover)'}\n                viewBox='0 0 344 176'\n            >\n                <rect x='148' y='24' rx='3' ry='3' width='40' height='4' />\n                <rect x='8' y='40' rx='4' ry='4' width='328' height='40' />\n                <rect x='8' y='88' rx='4' ry='4' width='328' height='40' />\n                <rect x='8' y='136' rx='4' ry='4' width='160' height='70' />\n                <rect x='176' y='136' rx='4' ry='4' width='160' height='70' />\n            </ContentLoader>\n        </MobileWrapper>\n        <DesktopWrapper>\n            <ContentLoader\n                height={548}\n                width={240}\n                speed={speed}\n                backgroundColor={'var(--general-section-1)'}\n                foregroundColor={'var(--general-hover)'}\n            >\n                <rect x='0' y='0' rx='4' ry='4' width='240' height='76' />\n                <rect x='0' y='84' rx='4' ry='4' width='240' height='132' />\n                <rect x='0' y='224' rx='4' ry='4' width='240' height='120' />\n                <rect x='0' y='352' rx='4' ry='4' width='240' height='194' />\n            </ContentLoader>\n        </DesktopWrapper>\n    </>\n);\n\nTradeParamsLoader.propTypes = {\n    speed: PropTypes.number,\n};\n\nexport { TradeParamsLoader };\n","import { localize } from '@deriv/translations';\nimport { isHighLow, getContractTypesConfig, isCallPut, isVanillaContract } from '@deriv/shared';\n\nexport const addCommaToNumber = (num, decimal_places) => {\n    if (!num || isNaN(num)) {\n        return num;\n    }\n    const n = String(decimal_places ? (+num).toFixed(decimal_places) : num);\n    const p = n.indexOf('.');\n    return n.replace(/\\d(?=(?:\\d{3})+(?:\\.|$))/g, (m, i) => (p <= 0 || i < p ? `${m},` : m));\n};\n\nexport const getBarrierLabel = contract_info => {\n    if (isDigitType(contract_info.contract_type)) {\n        return localize('Target');\n    }\n    if (isVanillaContract(contract_info.contract_type)) {\n        return localize('Strike');\n    }\n    return localize('Barrier');\n};\n\nexport const getBarrierValue = contract_info => {\n    if (isDigitType(contract_info.contract_type)) {\n        return digitTypeMap(contract_info)[contract_info.contract_type];\n    }\n    return addCommaToNumber(contract_info.barrier);\n};\n\nexport const isDigitType = contract_type => /digit/.test(contract_type.toLowerCase());\n\nconst digitTypeMap = contract_info => ({\n    DIGITDIFF: localize('Not {{barrier}}', { barrier: contract_info.barrier }),\n    DIGITEVEN: localize('Even'),\n    DIGITMATCH: localize('Equals {{barrier}}', { barrier: contract_info.barrier }),\n    DIGITODD: localize('Odd'),\n    DIGITOVER: localize('Over {{barrier}}', { barrier: contract_info.barrier }),\n    DIGITUNDER: localize('Under {{barrier}}', { barrier: contract_info.barrier }),\n});\n\nexport const filterByContractType = ({ contract_type, shortcode }, trade_contract_type) => {\n    const is_call_put = isCallPut(trade_contract_type);\n    const is_high_low = isHighLow({ shortcode });\n    const is_vanilla = isVanillaContract(contract_type);\n    const trade_types = is_call_put\n        ? ['CALL', 'CALLE', 'PUT', 'PUTE']\n        : getContractTypesConfig()[trade_contract_type]?.trade_types;\n    const match = trade_types?.includes(contract_type);\n    if (trade_contract_type === 'high_low') return is_high_low;\n    return match && (is_vanilla || !is_high_low);\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype LoadingProps = {\n    className?: string;\n    data_testid?: string;\n    is_invisible?: boolean;\n    theme?: string;\n    id?: string;\n};\n\nconst Loading = ({ className, data_testid, is_invisible, theme, id }: LoadingProps) => (\n    <div\n        id={id}\n        data-testid={data_testid}\n        className={classNames('barspinner', `barspinner--${theme || 'dark'}`, { invisible: is_invisible }, className)}\n    >\n        {Array.from(new Array(5)).map((_x, inx) => (\n            <div key={inx} className={`barspinner__rect barspinner__rect--${inx + 1} rect${inx + 1}`} />\n        ))}\n    </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport Loading from '_common/components/loading';\n\ntype TChartLoader = {\n    is_dark: boolean;\n    is_visible: boolean;\n};\n\nconst ChartLoader = ({ is_dark, is_visible }: TChartLoader) =>\n    is_visible ? (\n        <div className='chart-container__loader'>\n            <Loading theme={is_dark ? 'dark' : 'light'} data_testid='dt_barspinner' />\n        </div>\n    ) : null;\n\nexport default ChartLoader;\n","import { matchPath } from 'react-router';\nimport { routes } from '@deriv/shared';\n\nexport const normalizePath = path => (/^\\//.test(path) ? path : `/${path || ''}`); // Default to '/'\n\nexport const findRouteByPath = (path, routes_config) => {\n    let result;\n\n    routes_config.some(route_info => {\n        let match_path;\n        try {\n            match_path = matchPath(path, route_info);\n        } catch (e) {\n            if (/undefined/.test(e.message)) {\n                return undefined;\n            }\n        }\n\n        if (match_path) {\n            result = route_info;\n            return true;\n        } else if (route_info.routes) {\n            result = findRouteByPath(path, route_info.routes);\n            return result;\n        }\n        return false;\n    });\n\n    return result;\n};\n\nexport const isRouteVisible = (route, is_logged_in) => !(route && route.is_authenticated && !is_logged_in);\n\nexport const getPath = (route_path, params = {}) =>\n    Object.keys(params).reduce((p, name) => p.replace(`:${name}`, params[name]), route_path);\n\nexport const getContractPath = contract_id => getPath(routes.contract, { contract_id });\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\ntype TEmptyPortfolioMessage = {\n    error?: string;\n};\n\nconst EmptyPortfolioMessage = ({ error }: TEmptyPortfolioMessage) => (\n    <div className='portfolio-empty'>\n        <div className='portfolio-empty__wrapper'>\n            {error ? (\n                <Text color='disabled' size='xs'>\n                    {error}\n                </Text>\n            ) : (\n                <React.Fragment>\n                    <Icon icon='IcPortfolio' className='portfolio-empty__icon' size={96} color='disabled' />\n                    <Text align='center' className='portfolio-empty__text' color='disabled' size='xs'>\n                        {localize(\n                            'You have no open positions for this asset. To view other open positions, click Go to Reports'\n                        )}\n                    </Text>\n                </React.Fragment>\n            )}\n        </div>\n    </div>\n);\n\nexport default EmptyPortfolioMessage;\n","import EmptyPortfolioMessage from './empty-portfolio-message';\n\nexport default EmptyPortfolioMessage;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon, DataList, Text, PositionsDrawerCard } from '@deriv/components';\nimport { routes, useNewRowTransition, TURBOS, VANILLALONG, isTurbosContract, isVanillaContract } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport EmptyPortfolioMessage from '../EmptyPortfolioMessage';\nimport { filterByContractType } from './helpers';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\nconst PositionsDrawerCardItem = ({\n    row: portfolio_position,\n    measure,\n    onHoverPosition,\n    symbol,\n    is_new_row,\n    ...props\n}) => {\n    const { in_prop } = useNewRowTransition(is_new_row);\n\n    React.useEffect(() => {\n        measure();\n    }, [portfolio_position.contract_info.is_sold, measure]);\n\n    return (\n        <CSSTransition\n            in={in_prop}\n            timeout={150}\n            classNames={{\n                appear: 'dc-contract-card__wrapper--enter',\n                enter: 'dc-contract-card__wrapper--enter',\n                enterDone: 'dc-contract-card__wrapper--enter-done',\n                exit: 'dc-contract-card__wrapper--exit',\n            }}\n            onEntered={measure}\n            unmountOnExit\n        >\n            <div className='dc-contract-card__wrapper'>\n                <PositionsDrawerCard\n                    {...portfolio_position}\n                    {...props}\n                    onMouseEnter={() => {\n                        onHoverPosition(true, portfolio_position, symbol);\n                    }}\n                    onMouseLeave={() => {\n                        onHoverPosition(false, portfolio_position, symbol);\n                    }}\n                    onFooterEntered={measure}\n                    should_show_transition={is_new_row}\n                />\n            </div>\n        </CSSTransition>\n    );\n};\n\nconst PositionsDrawer = observer(({ ...props }) => {\n    const { symbol, contract_type: trade_contract_type } = useTraderStore();\n    const { client, common, contract_trade, portfolio, ui } = useStore();\n    const { currency } = client;\n    const { server_time } = common;\n    const { getContractById } = contract_trade;\n    const {\n        all_positions,\n        error,\n        onHoverPosition,\n        onMount,\n        onClickCancel,\n        onClickSell,\n        removePositionById: onClickRemove,\n    } = portfolio;\n    const {\n        is_mobile,\n        is_positions_drawer_on,\n        togglePositionsDrawer: toggleDrawer,\n        addToast,\n        current_focus,\n        removeToast,\n        setCurrentFocus,\n        should_show_cancellation_warning,\n        toggleCancellationWarning,\n        toggleUnsupportedContractModal,\n    } = ui;\n    const drawer_ref = React.useRef(null);\n    const list_ref = React.useRef(null);\n    const scrollbar_ref = React.useRef(null);\n\n    React.useEffect(() => {\n        onMount();\n    }, [onMount]);\n\n    React.useEffect(() => {\n        list_ref?.current?.scrollTo(0);\n        scrollbar_ref?.current?.scrollToTop();\n    }, [symbol, trade_contract_type]);\n\n    const positions = all_positions.filter(\n        p =>\n            p.contract_info &&\n            symbol === p.contract_info.underlying &&\n            (isTurbosContract(trade_contract_type) || isVanillaContract(trade_contract_type)\n                ? filterByContractType(\n                      p.contract_info,\n                      isTurbosContract(trade_contract_type) ? TURBOS.SHORT : VANILLALONG.CALL\n                  ) ||\n                  filterByContractType(\n                      p.contract_info,\n                      isTurbosContract(trade_contract_type) ? TURBOS.LONG : VANILLALONG.PUT\n                  )\n                : filterByContractType(p.contract_info, trade_contract_type))\n    );\n    const body_content = (\n        <DataList\n            data_source={positions}\n            rowRenderer={args => (\n                <PositionsDrawerCardItem\n                    onHoverPosition={onHoverPosition}\n                    symbol={symbol}\n                    currency={currency}\n                    addToast={addToast}\n                    onClickCancel={onClickCancel}\n                    onClickSell={onClickSell}\n                    onClickRemove={onClickRemove}\n                    server_time={server_time}\n                    getContractById={getContractById}\n                    is_mobile={is_mobile}\n                    current_focus={current_focus}\n                    removeToast={removeToast}\n                    setCurrentFocus={setCurrentFocus}\n                    should_show_cancellation_warning={should_show_cancellation_warning}\n                    toggleCancellationWarning={toggleCancellationWarning}\n                    toggleUnsupportedContractModal={toggleUnsupportedContractModal}\n                    {...args}\n                    {...props}\n                />\n            )}\n            keyMapper={row => row.id}\n            row_gap={8}\n        />\n    );\n\n    return (\n        <React.Fragment>\n            <div\n                className={classNames('positions-drawer__bg', {\n                    'positions-drawer__bg--open': is_positions_drawer_on,\n                })}\n            />\n            <div\n                id='dt_positions_drawer'\n                className={classNames('positions-drawer', {\n                    'positions-drawer--open': is_positions_drawer_on,\n                })}\n            >\n                <div className='positions-drawer__header'>\n                    <Text color='prominent' weight='bold' size='xs'>\n                        {localize('Recent positions')}\n                    </Text>\n                    <div\n                        id='dt_positions_drawer_close_icon'\n                        className='positions-drawer__icon-close'\n                        onClick={toggleDrawer}\n                    >\n                        <Icon icon='IcMinusBold' />\n                    </div>\n                </div>\n                <div className='positions-drawer__body' ref={drawer_ref}>\n                    {positions.length === 0 || error ? <EmptyPortfolioMessage error={error} /> : body_content}\n                </div>\n                <div className='positions-drawer__footer'>\n                    <NavLink\n                        id='dt_positions_drawer_report_button'\n                        className='dc-btn dc-btn--secondary dc-btn__large'\n                        to={routes.reports}\n                    >\n                        <Text size='xs' weight='bold'>\n                            {localize('Go to Reports')}\n                        </Text>\n                    </NavLink>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n});\n\nPositionsDrawer.propTypes = {\n    children: PropTypes.node,\n    onChangeContractUpdate: PropTypes.func,\n    onClickContractUpdate: PropTypes.func,\n};\n\nexport default PositionsDrawer;\n","import PositionsDrawer from './positions-drawer.jsx';\n\nexport default PositionsDrawer;\n","import classNames from 'classnames';\nimport React from 'react';\nimport moment from 'moment';\nimport { Text } from '@deriv/components';\nimport { useIsMounted, WS, convertTimeFormat, isMarketClosed } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { observer } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { TradingTimesRequest, TradingTimesResponse } from '@deriv/api-types';\n\ntype TMarketCountDownTimer = {\n    is_main_page: boolean;\n    setIsTimerLoading: React.Dispatch<React.SetStateAction<boolean>>;\n    onMarketOpen: ReturnType<typeof useTraderStore>['prepareTradeStore'];\n    symbol: ReturnType<typeof useTraderStore>['symbol'];\n};\n\ntype TWhenMarketOpens = {\n    days_offset: number;\n    opening_time: string;\n    remaining_time_to_open: number;\n};\n\n// check market in coming 7 days\nconst days_to_check_before_exit = 7;\n\nconst getTradingTimes = async (target_time: TradingTimesRequest['trading_times']) => {\n    const data = await WS.tradingTimes(target_time);\n    if (data.error) {\n        return { api_initial_load_error: data.error.message };\n    }\n    return data;\n};\n// eslint-disable-next-line consistent-return\nconst getSymbol = (\n    target_symbol: string,\n    trading_times: NonNullable<DeepRequired<TradingTimesResponse['trading_times']>>\n) => {\n    let symbol;\n    const { markets } = trading_times;\n    for (let i = 0; i < markets.length; i++) {\n        const { submarkets } = markets[i];\n        if (submarkets) {\n            for (let j = 0; j < submarkets.length; j++) {\n                const { symbols } = submarkets[j];\n                symbol = symbols?.find(item => item.symbol === target_symbol);\n                if (symbol !== undefined) return symbol;\n            }\n        }\n    }\n};\n\nconst calculateTimeLeft = (remaining_time_to_open: number) => {\n    const difference = remaining_time_to_open - Date.now();\n    return difference > 0\n        ? {\n              days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n              hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n              minutes: Math.floor((difference / 1000 / 60) % 60),\n              seconds: Math.floor((difference / 1000) % 60),\n          }\n        : {};\n};\n\nconst MarketCountdownTimer = observer(\n    ({ is_main_page, setIsTimerLoading, onMarketOpen, symbol }: TMarketCountDownTimer) => {\n        const { active_symbols } = useTraderStore();\n        const isMounted = useIsMounted();\n        const [when_market_opens, setWhenMarketOpens] = React.useState<TWhenMarketOpens>({} as TWhenMarketOpens);\n        const [time_left, setTimeLeft] = React.useState(calculateTimeLeft(when_market_opens?.remaining_time_to_open));\n        const [is_loading, setLoading] = React.useState(true);\n\n        React.useEffect(() => {\n            if (!is_main_page || (is_main_page && isMarketClosed(active_symbols, symbol))) {\n                setLoading(true);\n                // eslint-disable-next-line consistent-return\n                // @ts-expect-error there is no explict return type because of if statements\n                const whenMarketOpens = async (days_offset: number, target_symbol: string) => {\n                    // days_offset is 0 for today, 1 for tomorrow, etc.\n                    if (days_offset > days_to_check_before_exit) return {};\n                    let remaining_time_to_open;\n                    const target_date = moment(new Date()).add(days_offset, 'days');\n                    const api_response = await getTradingTimes(target_date.format('YYYY-MM-DD'));\n                    if (!api_response.api_initial_load_error) {\n                        const returned_symbol = getSymbol(target_symbol, api_response.trading_times);\n                        const open = returned_symbol?.times.open as string[];\n                        const close = returned_symbol?.times.close as string[];\n                        const is_closed_all_day = open?.length === 1 && open[0] === '--' && close[0] === '--';\n                        if (is_closed_all_day) {\n                            // check tomorrow trading times\n                            return whenMarketOpens(days_offset + 1, target_symbol);\n                        }\n                        const date_str = target_date.toISOString().substring(0, 11);\n                        const getUTCDate = (hour: string) => new Date(`${date_str}${hour}Z`);\n                        for (let i = 0; i < open?.length; i++) {\n                            const diff = +getUTCDate(open[i]) - Date.now();\n                            if (diff > 0) {\n                                remaining_time_to_open = +getUTCDate(open[i]);\n                                if (isMounted() && target_symbol === symbol) {\n                                    return setWhenMarketOpens({\n                                        days_offset,\n                                        opening_time: open[i],\n                                        remaining_time_to_open,\n                                    });\n                                }\n                            }\n                        }\n                        whenMarketOpens(days_offset + 1, target_symbol);\n                    }\n                };\n\n                whenMarketOpens(0, symbol);\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [symbol]);\n\n        React.useEffect(() => {\n            let timer: ReturnType<typeof setTimeout>;\n            if (when_market_opens?.remaining_time_to_open) {\n                timer = setTimeout(() => {\n                    setTimeLeft(calculateTimeLeft(when_market_opens.remaining_time_to_open));\n                    if (+new Date(when_market_opens.remaining_time_to_open) - +new Date() < 1000) {\n                        setLoading(true);\n                        if (is_main_page) onMarketOpen(false);\n                    }\n                }, 1000);\n            }\n            return () => {\n                if (timer) {\n                    clearTimeout(timer);\n                }\n            };\n        }, [time_left, when_market_opens, onMarketOpen, is_main_page]);\n\n        React.useEffect(() => {\n            if (!is_loading) setIsTimerLoading(false);\n        }, [is_loading, setIsTimerLoading]);\n\n        let timer_components = '';\n\n        if (Object.keys(time_left).length) {\n            const hours = (Number(time_left.days) * 24 + Number(time_left.hours)).toString().padStart(2, '0');\n            const minutes = Number(time_left.minutes).toString().padStart(2, '0');\n            const seconds = Number(time_left.seconds).toString().padStart(2, '0');\n            timer_components = `${hours}:${minutes}:${seconds}`;\n        }\n\n        if (!(when_market_opens && timer_components)) return null;\n\n        const { opening_time, days_offset } = when_market_opens;\n        let opening_time_banner = null;\n        if (opening_time) {\n            const formatted_opening_time = convertTimeFormat(opening_time);\n            const target_date = moment(new Date()).add(days_offset, 'days');\n            const opening_date = target_date.format('DD MMM YYYY');\n            const opening_day = target_date.format('dddd');\n            opening_time_banner = (\n                <Text\n                    align='center'\n                    as='p'\n                    className='market-is-closed-overlay__open-date'\n                    line_height='m'\n                    color='prominent'\n                    size={is_main_page ? 's' : 'xs'}\n                    weight='bold'\n                >\n                    <Localize\n                        i18n_default_text='{{formatted_opening_time}} (GMT) on {{opening_day}},<0></0> {{opening_date}}.'\n                        components={[<div key={0} />]}\n                        values={{\n                            formatted_opening_time,\n                            opening_day,\n                            opening_date,\n                        }}\n                    />\n                </Text>\n            );\n        }\n\n        if (is_loading) setLoading(false);\n\n        return (\n            <React.Fragment>\n                <Text\n                    as='p'\n                    className={classNames('market-is-closed-overlay__open-at', {\n                        'market-is-closed-overlay__open-at--main-page': is_main_page,\n                    })}\n                    line_height='x'\n                    size={is_main_page ? 'xs' : 'xxs'}\n                >\n                    <Localize i18n_default_text='It will reopen at' />\n                </Text>\n                {opening_time_banner}\n                <Text\n                    align='center'\n                    as='p'\n                    className={classNames('market-is-closed-overlay__come-back', {\n                        'market-is-closed-overlay__come-back--main-page': is_main_page,\n                    })}\n                    line_height='x'\n                    size={is_main_page ? 'xs' : 'xxs'}\n                >\n                    <Localize i18n_default_text='Please come back in' />\n                </Text>\n                <Text\n                    as='p'\n                    className={classNames('market-is-closed-overlay__timer', {\n                        'market-is-closed-overlay__timer--main-page': is_main_page,\n                    })}\n                    line_height='m'\n                    color='prominent'\n                    size={is_main_page ? 's' : 'xs'}\n                    weight='bold'\n                >\n                    {timer_components}\n                </Text>\n                <div className='market-is-closed-overlay__separator' />\n            </React.Fragment>\n        );\n    }\n);\n\nexport default MarketCountdownTimer;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Button, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport MarketCountdownTimer from './market-countdown-timer';\nimport { useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores.js';\n\ntype TMarketIsClosedOverlay = {\n    is_eu: ReturnType<typeof useStore>['client']['is_eu'];\n    is_synthetics_trading_market_available: ReturnType<typeof useTraderStore>['is_synthetics_trading_market_available'];\n    onClick: () => void;\n    onMarketOpen: React.ComponentProps<typeof MarketCountdownTimer>['onMarketOpen'];\n    symbol: ReturnType<typeof useTraderStore>['symbol'];\n};\n\nconst MarketIsClosedOverlay = ({\n    is_eu,\n    is_synthetics_trading_market_available,\n    onClick,\n    onMarketOpen,\n    symbol,\n}: TMarketIsClosedOverlay) => {\n    const [is_timer_loading, setIsTimerLoading] = React.useState(true);\n\n    let message: JSX.Element | null = (\n        <Localize i18n_default_text='In the meantime, try our synthetic indices. They simulate real-market volatility and are open 24/7.' />\n    );\n    let btn_lbl = localize('Try Synthetic Indices');\n\n    if (!is_synthetics_trading_market_available) {\n        message = null;\n        btn_lbl = localize('See open markets');\n    }\n\n    return (\n        <div\n            className={classNames('market-is-closed-overlay', {\n                'market-is-closed-overlay--loading': is_timer_loading,\n            })}\n        >\n            <Text as='p' className='market-is-closed-overlay__main-heading' color='prominent' weight='bold'>\n                <Localize i18n_default_text='This market is closed' />\n            </Text>\n            <MarketCountdownTimer\n                is_main_page\n                setIsTimerLoading={setIsTimerLoading}\n                onMarketOpen={onMarketOpen}\n                symbol={symbol}\n            />\n            {message && (\n                <Text align='center' as='p' className='market-is-closed-overlay__main-message' size='xs'>\n                    {message}\n                </Text>\n            )}\n            {(!is_eu || (is_eu && is_synthetics_trading_market_available)) && (\n                <Button className='market-is-closed-overlay__button' onClick={onClick} text={btn_lbl} primary />\n            )}\n        </div>\n    );\n};\n\nexport default MarketIsClosedOverlay;\n","import { toJS } from 'mobx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\nconst styles = {\n    container: {\n        fontSize: '10px',\n        lineHeight: '15px',\n        position: 'absolute',\n        zIndex: 1,\n        background: 'rgba(0, 0, 0, 0.8)',\n        color: '#ccc',\n        padding: '10px',\n        marginTop: '-10px',\n        display: 'none',\n        overflowY: 'auto',\n        height: '100%',\n        width: '100%',\n    },\n    prop_name: {\n        color: 'yellowgreen',\n    },\n    tabs: { display: 'flex', textAlign: 'center', marginBottom: '10px' },\n    tab: {\n        fontSize: '18px',\n        border: '1px solid grey',\n        width: '100%',\n        padding: '10px',\n    },\n};\n\nconst Test = observer(() => {\n    const stores = useStore();\n    const trade_store = useTraderStore();\n    const test_stores = {\n        trade: Object.entries(trade_store),\n        client: Object.entries(stores.client),\n        ui: Object.entries(stores.ui),\n        portfolio: Object.entries(stores.portfolio),\n    };\n\n    const [is_visible, setIsVisible] = React.useState(false);\n    const [store, setStore] = React.useState('trade');\n\n    React.useEffect(() => {\n        document.addEventListener('keyup', stateVisibility, false);\n        return () => {\n            document.removeEventListener('keyup', stateVisibility);\n        };\n    });\n\n    const stateVisibility = e => {\n        // Ctrl + s\n        if (e.ctrlKey && e.keyCode === 83) setIsVisible(!is_visible);\n    };\n\n    const renderStoreContent = ([k, v]) => {\n        return (\n            k !== 'root_store' &&\n            typeof v !== 'function' && (\n                <div key={k}>\n                    <span style={styles.prop_name}>{k}:</span>{' '}\n                    {v && typeof v === 'object' ? JSON.stringify(toJS(v), null, 1) : v}\n                </div>\n            )\n        );\n    };\n\n    const { container, tab, tabs } = styles;\n\n    return (\n        <code id='state_info' style={{ ...container, display: is_visible ? 'block' : 'none' }}>\n            <div style={tabs}>\n                {Object.keys(test_stores).map(storage => (\n                    <p\n                        key={storage}\n                        onClick={() => setStore(storage)}\n                        style={{ ...tab, fontWeight: storage === store && 'bold' }}\n                    >\n                        {storage}\n                    </p>\n                ))}\n            </div>\n            {test_stores[store].sort().map(renderStoreContent)}\n        </code>\n    );\n});\n\nTest.propTypes = {\n    entries: PropTypes.array,\n};\n\nexport default Test;\n","export const symbolChange = onSymbolChange =>\n    onSymbolChange &&\n    (symbol => {\n        onSymbolChange({\n            target: {\n                name: 'symbol',\n                value: symbol,\n            },\n        });\n    });\n","import React from 'react';\nimport { isMobile } from '@deriv/shared';\nimport Digits from 'Modules/Contract/Components/Digits';\nimport AccumulatorsStats from 'Modules/Contract/Components/AccumulatorsStats';\nimport BottomWidgets from '../../SmartChart/Components/bottom-widgets.jsx';\nimport TopWidgets from '../../SmartChart/Components/top-widgets.jsx';\nimport { symbolChange } from '../../SmartChart/Helpers/symbol';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\nexport const DigitsWidget = observer(({ digits, tick }) => {\n    const { contract_trade } = useStore();\n    const {\n        onChange: onDigitChange,\n        symbol: underlying,\n        contract_type: trade_type,\n        last_digit: selected_digit,\n    } = useTraderStore();\n    const { last_contract } = contract_trade;\n    const { contract_info = {}, digits_info = {}, display_status, is_digit_contract, is_ended } = last_contract;\n    return (\n        <Digits\n            contract_info={contract_info}\n            digits_array={digits}\n            digits_info={digits_info}\n            display_status={display_status}\n            is_digit_contract={is_digit_contract}\n            is_ended={is_ended}\n            onDigitChange={onDigitChange}\n            is_trade_page\n            tick={tick}\n            trade_type={trade_type}\n            selected_digit={selected_digit}\n            underlying={underlying}\n        />\n    );\n});\n\n// Chart widgets passed into SmartCharts\nexport const ChartTopWidgets = observer(({ charts_ref, open_market, open }) => {\n    const { ui } = useStore();\n    const { is_digits_widget_active, onChange: onSymbolChange } = useTraderStore();\n    const { is_dark_mode_on } = ui;\n    const theme = is_dark_mode_on ? 'dark' : 'light';\n    let yAxiswidth;\n    if (charts_ref && charts_ref.chart) {\n        yAxiswidth = charts_ref.chart.yAxiswidth;\n    }\n    return (\n        <TopWidgets\n            open_market={open_market}\n            open={open}\n            is_mobile={isMobile()}\n            is_digits_widget_active={is_digits_widget_active}\n            onSymbolChange={symbolChange(onSymbolChange)}\n            theme={theme}\n            y_axis_width={yAxiswidth}\n        />\n    );\n});\n\nexport const ChartBottomWidgets = ({ digits, tick, show_accumulators_stats }) => (\n    <BottomWidgets\n        Widget={show_accumulators_stats ? <AccumulatorsStats /> : <DigitsWidget digits={digits} tick={tick} />}\n    />\n);\n","import React from 'react';\nimport Loadable from 'react-loadable';\nimport { isMobile } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores.js';\n\ntype TFormLayout = {\n    is_market_closed: ReturnType<typeof useTraderStore>['is_market_closed'];\n    is_trade_enabled: boolean;\n};\n\nconst Screen = Loadable({\n    loader: () =>\n        isMobile()\n            ? import(/* webpackChunkName: \"screen-small\" */ './screen-small')\n            : import(/* webpackChunkName: \"screen-large\" */ './screen-large'),\n    loading: () => null,\n    render(loaded, props) {\n        const Component = loaded.default;\n        return <Component {...props} />;\n    },\n});\n\nconst FormLayout = observer(({ is_market_closed, is_trade_enabled }: TFormLayout) => {\n    const { common } = useStore();\n    const { current_language } = common;\n    return (\n        <React.Fragment key={current_language}>\n            <Screen is_trade_enabled={is_trade_enabled} is_market_closed={isMobile() ? undefined : is_market_closed} />\n        </React.Fragment>\n    );\n});\n\nexport default React.memo(FormLayout);\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { formatMoney, getCurrencyDisplayCode, isMobile } from '@deriv/shared';\nimport { FastMarker } from 'Modules/SmartChart';\nimport classNames from 'classnames';\nimport { TRef } from './accumulators-profit-loss-tooltip';\nimport { ProposalOpenContract } from '@deriv/api-types';\n\ntype TProposalOpenContractProfit = Required<Pick<ProposalOpenContract, 'profit'>>;\n\ntype TAccumulatorsProfitLossText = Pick<ProposalOpenContract, 'current_spot' | 'current_spot_time' | 'currency'> &\n    TProposalOpenContractProfit & {\n        className?: string;\n    };\n\nconst ACTIONS = {\n    INC: 'increment',\n    DEC: 'decrement',\n    ADD10: 'add10',\n} as const;\n\nconst AccumulatorsProfitLossText = ({\n    current_spot,\n    current_spot_time,\n    currency,\n    className = 'sc-accumulators-profit-loss-text',\n    profit,\n}: TAccumulatorsProfitLossText) => {\n    const [is_fading_in, setIsFadingIn] = React.useState(false);\n    const [is_sliding, setIsSliding] = React.useState(false);\n    const formatted_profit = formatMoney(currency ?? '', profit, true, 0, 0);\n    const prev_profit = React.useRef(formatted_profit);\n    const prev_profit_tenth = +prev_profit.current?.split('.')[1][0];\n    const [current_profit_tenth, setCurrentProfitTenth] = React.useState(prev_profit_tenth);\n    const profit_tenth_ref = React.useRef(0);\n    const interval_id_ref = React.useRef<ReturnType<typeof setInterval>>();\n    const fading_in_timeout_id = React.useRef<ReturnType<typeof setTimeout>>();\n    const sliding_timeout_id = React.useRef<ReturnType<typeof setTimeout>>();\n    const profit_portions_array = formatted_profit.split('.');\n    const profit_whole_number = profit_portions_array[0];\n    const profit_tenth = +profit_portions_array[1][0];\n    const profit_hundredths = +profit_portions_array[1].slice(1);\n    const won = profit >= 0;\n    const sign = profit > 0 ? '+' : '';\n\n    const runThroughTenthDigit = (\n        action: typeof ACTIONS[keyof typeof ACTIONS],\n        interval_ms: number,\n        start: number,\n        end: number\n    ) => {\n        clearInterval(interval_id_ref.current);\n        const interval_id = setInterval(() => {\n            if (action === ACTIONS.INC && profit_tenth_ref.current < end) {\n                profit_tenth_ref.current = (profit_tenth_ref.current + 1) % 10;\n            } else if (action === ACTIONS.DEC && profit_tenth_ref.current > end) {\n                profit_tenth_ref.current = Math.abs(profit_tenth_ref.current - 1) % 10;\n            } else if (action === ACTIONS.ADD10 && profit_tenth_ref.current < start + 10) {\n                profit_tenth_ref.current += 1;\n            } else if (\n                action === ACTIONS.ADD10 ? profit_tenth_ref.current === start + 10 : profit_tenth_ref.current === end\n            ) {\n                clearInterval(interval_id);\n            }\n            setCurrentProfitTenth(profit_tenth_ref.current % 10);\n        }, interval_ms);\n        interval_id_ref.current = interval_id;\n    };\n\n    React.useEffect(() => {\n        if (profit) {\n            setIsFadingIn(true);\n            setIsSliding(true);\n            fading_in_timeout_id.current = setTimeout(() => {\n                setIsFadingIn(false);\n            }, 600);\n            sliding_timeout_id.current = setTimeout(() => {\n                setIsSliding(false);\n            }, 300);\n        }\n        if (profit !== 0) {\n            const updateTenth = (start: number, end: number) => {\n                const delta = Math.abs(end - start);\n                profit_tenth_ref.current = start;\n                if (start < end) {\n                    runThroughTenthDigit(ACTIONS.INC, 300 / delta, start, end);\n                } else if (start > end) {\n                    runThroughTenthDigit(ACTIONS.DEC, 300 / delta, start, end);\n                } else {\n                    runThroughTenthDigit(ACTIONS.ADD10, 30, start, end);\n                }\n            };\n            updateTenth(prev_profit_tenth, profit_tenth);\n        }\n        return () => {\n            clearTimeout(fading_in_timeout_id.current);\n            clearTimeout(sliding_timeout_id.current);\n            clearInterval(interval_id_ref.current);\n        };\n    }, [profit, prev_profit_tenth, profit_tenth]);\n\n    const onRef = (ref: TRef | null): void => {\n        if (ref) {\n            if (!current_spot) {\n                // this call will hide the marker:\n                ref.setPosition({ epoch: null, price: null });\n            }\n            if (current_spot && current_spot_time) {\n                ref.setPosition({\n                    epoch: +current_spot_time,\n                    price: +current_spot,\n                });\n            }\n        }\n    };\n\n    return (\n        <FastMarker markerRef={onRef} className={classNames(className, won ? 'won' : 'lost')} overlap_y_axis={false}>\n            <Text\n                weight='bold'\n                size={isMobile() ? 's' : 'sm'}\n                color={won ? 'profit-success' : 'loss-danger'}\n                className={classNames(`${className}__profit`, {\n                    [`${className}__profit--fading-in`]: is_fading_in,\n                })}\n                data-testid='dt_accumulator_profit_text'\n            >\n                {`${sign}${profit_whole_number}.`}\n                <div className={is_sliding ? `${className}__sliding-tenth` : ''}>{current_profit_tenth}</div>\n                {`${profit_hundredths}`}\n            </Text>\n            <Text size={isMobile() ? 'xxxs' : 'xxs'} as='div' className={`${className}__currency`}>\n                {getCurrencyDisplayCode(currency)}\n            </Text>\n        </FastMarker>\n    );\n};\n\nexport default React.memo(AccumulatorsProfitLossText);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { CSSTransition } from 'react-transition-group';\nimport { Money, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { FastMarker } from 'Modules/SmartChart';\nimport AccumulatorsProfitLossText from './accumulators-profit-loss-text';\nimport { ProposalOpenContract } from '@deriv/api-types';\nimport { isMobile } from '@deriv/shared';\n\ntype TPickProposalOpenContract = Pick<\n    ProposalOpenContract,\n    'current_spot' | 'current_spot_time' | 'currency' | 'exit_tick' | 'exit_tick_time' | 'high_barrier' | 'is_sold'\n>;\n\ntype TAccumulatorsProfitLossText = React.ComponentProps<typeof AccumulatorsProfitLossText>;\n\ntype TAccumulatorsProfitLossTooltip = {\n    alignment?: string;\n    should_show_profit_text?: boolean;\n} & TPickProposalOpenContract &\n    TAccumulatorsProfitLossText;\n\nexport type TRef = {\n    setPosition: (position: { epoch: number | null; price: number | null }) => void;\n};\n\nconst AccumulatorsProfitLossTooltip = ({\n    alignment = 'right',\n    className = 'sc-accumulators-profit-loss-tooltip',\n    current_spot,\n    current_spot_time,\n    currency,\n    exit_tick,\n    exit_tick_time,\n    high_barrier,\n    is_sold,\n    profit,\n    should_show_profit_text,\n}: TAccumulatorsProfitLossTooltip) => {\n    const [is_tooltip_open, setIsTooltipOpen] = React.useState(false);\n    const won = profit >= 0;\n    const tooltip_timeout = React.useRef<ReturnType<typeof setTimeout>>();\n\n    React.useEffect(() => {\n        return () => {\n            clearTimeout(tooltip_timeout.current);\n        };\n    }, []);\n\n    React.useEffect(() => {\n        if (is_sold) {\n            setIsTooltipOpen(true);\n            tooltip_timeout.current = onCloseDelayed(3000);\n        }\n    }, [is_sold]);\n\n    const onCloseDelayed = (duration: number) =>\n        setTimeout(() => {\n            setIsTooltipOpen(false);\n        }, duration);\n\n    const onHoverOrTapHandler = () => {\n        clearTimeout(tooltip_timeout.current);\n        tooltip_timeout.current = onCloseDelayed(1500);\n    };\n\n    const opposite_arrow_position = React.useMemo(() => {\n        const horizontal = ['left', 'right'];\n        return horizontal.includes(alignment)\n            ? horizontal.find(el => el !== alignment)\n            : ['top', 'bottom'].find(el => el !== alignment);\n    }, [alignment]);\n\n    const onRef = (ref: TRef | null): void => {\n        if (ref) {\n            if (!exit_tick) {\n                // this call will hide the marker:\n                ref.setPosition({ epoch: null, price: null });\n            }\n            if (exit_tick_time && exit_tick) {\n                ref.setPosition({\n                    epoch: +exit_tick_time,\n                    price: +exit_tick,\n                });\n            }\n        }\n    };\n\n    if (typeof profit !== 'number') return null;\n    if (!is_sold && current_spot_time && high_barrier && should_show_profit_text)\n        return (\n            <AccumulatorsProfitLossText\n                currency={currency}\n                current_spot={current_spot}\n                current_spot_time={current_spot_time}\n                profit={profit}\n            />\n        );\n    return is_sold && exit_tick_time ? (\n        <FastMarker markerRef={onRef} className={classNames(className, won ? 'won' : 'lost')}>\n            <span\n                className={`${className}__spot-circle`}\n                onMouseEnter={() => setIsTooltipOpen(true)}\n                onMouseLeave={onHoverOrTapHandler}\n                onTouchStart={() => setIsTooltipOpen(true)}\n                onTouchEnd={onHoverOrTapHandler}\n                data-testid='dt_accumulator_tooltip_spot'\n            />\n            <CSSTransition\n                in={is_tooltip_open}\n                timeout={{\n                    exit: 500,\n                }}\n                unmountOnExit\n                classNames={`${className}__content`}\n            >\n                <div className={classNames(`${className}__content`, `arrow-${opposite_arrow_position}`)}>\n                    <Text size={isMobile() ? 'xxxxs' : 'xxs'} className={`${className}__text`}>\n                        {localize('Total profit/loss:')}\n                    </Text>\n                    <Text size={isMobile() ? 'xxxs' : 'xs'} className={`${className}__text`} weight='bold'>\n                        <Money amount={profit} currency={currency} has_sign show_currency />\n                    </Text>\n                </div>\n            </CSSTransition>\n        </FastMarker>\n    ) : null;\n};\n\nexport default React.memo(AccumulatorsProfitLossTooltip);\n","import { filterByContractType } from 'App/Components/Elements/PositionsDrawer/helpers/positions-helper.js';\nimport React from 'react';\nimport AccumulatorsProfitLossTooltip from './accumulators-profit-loss-tooltip';\nimport { ProposalOpenContract } from '@deriv/api-types';\nimport ChartMarker from './marker.jsx';\n\ntype TPositions = {\n    contract_info: Omit<\n        React.ComponentProps<typeof AccumulatorsProfitLossTooltip>,\n        'className' | 'alignment' | 'should_show_profit_text'\n    > &\n        Required<Pick<ProposalOpenContract, 'underlying' | 'shortcode' | 'contract_id' | 'contract_type'>>;\n};\n\ntype TAccumulatorsChartElements = {\n    all_positions: TPositions[];\n    current_spot?: number | null;\n    current_spot_time: number;\n    has_crossed_accu_barriers: boolean;\n    should_show_profit_text: React.ComponentProps<typeof AccumulatorsProfitLossTooltip>['should_show_profit_text'];\n    symbol: string;\n};\n\nconst AccumulatorsChartElements = ({\n    all_positions,\n    current_spot,\n    current_spot_time,\n    has_crossed_accu_barriers,\n    should_show_profit_text,\n    symbol,\n}: TAccumulatorsChartElements) => {\n    const accumulators_positions = all_positions.filter(\n        ({ contract_info }) =>\n            contract_info && symbol === contract_info.underlying && filterByContractType(contract_info, 'accumulator')\n    );\n\n    return (\n        <React.Fragment>\n            {!!accumulators_positions.length &&\n                accumulators_positions.map(({ contract_info }) => (\n                    <AccumulatorsProfitLossTooltip\n                        key={contract_info.contract_id}\n                        {...contract_info}\n                        should_show_profit_text={should_show_profit_text}\n                    />\n                ))}\n            {has_crossed_accu_barriers && !!current_spot_time && (\n                <ChartMarker\n                    marker_config={{\n                        ContentComponent: 'div',\n                        x: current_spot_time,\n                        y: current_spot,\n                    }}\n                    marker_content_props={{ className: 'sc-current-spot-emphasizer' }}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default React.memo(AccumulatorsChartElements);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { isDesktop, isMobile } from '@deriv/shared';\nimport { ChartMode, DrawTools, Share, StudyLegend, Views, ToolbarWidget } from 'Modules/SmartChart';\n\nconst ToolbarWidgets = ({ position, updateChartType, updateGranularity }) => {\n    return (\n        <ToolbarWidget position={position || isMobile() ? 'bottom' : null}>\n            <ChartMode portalNodeId='modal_root' onChartType={updateChartType} onGranularity={updateGranularity} />\n            {isDesktop() && <StudyLegend portalNodeId='modal_root' searchInputClassName='data-hj-whitelist' />}\n            {isDesktop() && <Views portalNodeId='modal_root' searchInputClassName='data-hj-whitelist' />}\n            {isDesktop() && <DrawTools portalNodeId='modal_root' />}\n            {isDesktop() && <Share portalNodeId='modal_root' />}\n        </ToolbarWidget>\n    );\n};\n\nToolbarWidgets.propTypes = {\n    position: PropTypes.string,\n    updateChartType: PropTypes.func,\n    updateGranularity: PropTypes.func,\n};\n\nexport default React.memo(ToolbarWidgets);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { DesktopWrapper, Div100vhContainer, MobileWrapper, SwipeableWrapper } from '@deriv/components';\nimport { getDecimalPlaces, isDesktop, isMobile } from '@deriv/shared';\nimport ChartLoader from 'App/Components/Elements/chart-loader';\nimport PositionsDrawer from 'App/Components/Elements/PositionsDrawer';\nimport MarketIsClosedOverlay from 'App/Components/Elements/market-is-closed-overlay';\nimport Test from './test.jsx';\nimport { ChartBottomWidgets, ChartTopWidgets, DigitsWidget } from './chart-widgets.jsx';\nimport FormLayout from '../Components/Form/form-layout';\nimport AccumulatorsChartElements from '../../SmartChart/Components/Markers/accumulators-chart-elements';\nimport ToolbarWidgets from '../../SmartChart/Components/toolbar-widgets.jsx';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\nconst BottomWidgetsMobile = ({ tick, digits, setTick, setDigits }) => {\n    React.useEffect(() => {\n        setTick(tick);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [tick]);\n\n    React.useEffect(() => {\n        setDigits(digits);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [digits]);\n\n    // render nothing for bottom widgets on chart in mobile\n    return null;\n};\n\nconst Trade = observer(() => {\n    const { client, common, ui } = useStore();\n    const {\n        form_components,\n        getFirstOpenMarket,\n        should_show_active_symbols_loading,\n        is_chart_loading,\n        is_market_closed,\n        is_trade_enabled,\n        onChange,\n        onMount,\n        onUnmount,\n        prepareTradeStore,\n        setContractTypes,\n        setMobileDigitView,\n        setIsDigitsWidgetActive,\n        show_digits_stats,\n        is_accumulator,\n        symbol,\n        is_synthetics_available,\n        is_synthetics_trading_market_available,\n        is_turbos,\n        is_vanilla,\n    } = useTraderStore();\n    const {\n        notification_messages_ui: NotificationMessages,\n        has_only_forward_starting_contracts: is_market_unavailable_visible,\n        should_show_multipliers_onboarding,\n        is_dark_mode_on: is_dark_theme,\n    } = ui;\n    const { is_eu } = client;\n    const { network_status } = common;\n\n    const [digits, setDigits] = React.useState([]);\n    const [tick, setTick] = React.useState({});\n    const [try_synthetic_indices, setTrySyntheticIndices] = React.useState(false);\n    const [try_open_markets, setTryOpenMarkets] = React.useState(false);\n    const [category, setCategory] = React.useState(null);\n    const [subcategory, setSubcategory] = React.useState(null);\n    const [swipe_index, setSwipeIndex] = React.useState(0);\n    const charts_ref = React.useRef();\n\n    const open_market = React.useMemo(() => {\n        if (try_synthetic_indices) {\n            return { category: 'synthetics' };\n        } else if (try_open_markets && category) {\n            return { category, subcategory };\n        }\n        return null;\n    }, [try_synthetic_indices, try_open_markets, category, subcategory]);\n\n    React.useEffect(() => {\n        onMount();\n        if (!is_synthetics_available) {\n            const setMarket = async () => {\n                const markets_to_search = ['forex', 'indices', 'commodities']; // none-synthetic\n                const { category: market_cat, subcategory: market_subcat } =\n                    (await getFirstOpenMarket(markets_to_search)) ?? {};\n                if (market_cat) {\n                    setCategory(market_cat);\n                    setSubcategory(market_subcat);\n                }\n            };\n\n            setMarket();\n        }\n        return () => onUnmount();\n    }, [onMount, onUnmount, getFirstOpenMarket, is_synthetics_available]);\n\n    React.useEffect(() => {\n        if (isMobile()) {\n            setDigits([]);\n        }\n        setTrySyntheticIndices(false);\n        setTryOpenMarkets(false);\n    }, [symbol, setDigits, setTrySyntheticIndices, is_synthetics_available]);\n\n    React.useEffect(() => {\n        const selectMultipliers = async () => {\n            await setContractTypes();\n\n            onChange({ target: { name: 'contract_type', value: 'multiplier' } });\n        };\n        if (should_show_multipliers_onboarding && !is_chart_loading && (is_synthetics_available || !is_market_closed)) {\n            selectMultipliers();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [should_show_multipliers_onboarding, is_chart_loading]);\n\n    const bottomWidgets = React.useCallback(({ digits: d, tick: t }) => {\n        return <BottomWidgetsMobile digits={d} tick={t} setTick={setTick} setDigits={setDigits} />;\n    }, []);\n\n    const onChangeSwipeableIndex = index => {\n        setMobileDigitView(index === 0);\n        setIsDigitsWidgetActive(index === 0);\n        setSwipeIndex(index);\n    };\n\n    const onTryOtherMarkets = async () => {\n        if (!is_synthetics_available) {\n            setTryOpenMarkets(true);\n            setTimeout(() => setTryOpenMarkets(false));\n        } else {\n            setTrySyntheticIndices(true);\n            setTimeout(() => setTrySyntheticIndices(false));\n        }\n    };\n\n    const topWidgets = React.useCallback(\n        ({ ...params }) => (\n            <ChartTopWidgets\n                open_market={open_market}\n                open={try_synthetic_indices || try_open_markets}\n                charts_ref={charts_ref}\n                {...params}\n            />\n        ),\n        [open_market, try_synthetic_indices, try_open_markets]\n    );\n\n    const form_wrapper_class = isMobile() ? 'mobile-wrapper' : 'sidebar__container desktop-only';\n    const chart_height_offset = React.useMemo(() => {\n        if (is_accumulator) return '295px';\n        if (is_turbos) return '300px';\n        return '259px';\n    }, [is_turbos, is_accumulator]);\n\n    return (\n        <div\n            id='trade_container'\n            className={classNames('trade-container', {\n                [`trade-container--${is_accumulator ? 'accumulators' : 'turbos'}`]: is_accumulator || is_turbos,\n            })}\n        >\n            <DesktopWrapper>\n                <PositionsDrawer />\n            </DesktopWrapper>\n            {/* Div100vhContainer is workaround for browsers on devices\n                    with toolbars covering screen height,\n                    using css vh is not returning correct screen height */}\n            <Div100vhContainer\n                id='chart_container'\n                className='chart-container'\n                is_disabled={isDesktop()}\n                height_offset={chart_height_offset}\n            >\n                <NotificationMessages />\n                <React.Suspense\n                    fallback={<ChartLoader is_dark={is_dark_theme} is_visible={!symbol || is_chart_loading} />}\n                >\n                    <DesktopWrapper>\n                        <div className={classNames('chart-container__wrapper', { 'vanilla-trade-chart': is_vanilla })}>\n                            <ChartLoader is_visible={is_chart_loading || should_show_active_symbols_loading} />\n                            <ChartTrade\n                                topWidgets={topWidgets}\n                                charts_ref={charts_ref}\n                                is_accumulator={is_accumulator}\n                            />\n                        </div>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <ChartLoader is_visible={is_chart_loading || should_show_active_symbols_loading} />\n                        <SwipeableWrapper\n                            onChange={onChangeSwipeableIndex}\n                            is_disabled={\n                                !show_digits_stats ||\n                                !is_trade_enabled ||\n                                form_components.length === 0 ||\n                                is_chart_loading ||\n                                should_show_active_symbols_loading\n                            }\n                            is_swipe_disabled={swipe_index === 1}\n                            className={classNames({ 'vanilla-trade-chart': is_vanilla })}\n                        >\n                            {show_digits_stats && <DigitsWidget digits={digits} tick={tick} />}\n                            <ChartTrade\n                                topWidgets={topWidgets}\n                                charts_ref={charts_ref}\n                                bottomWidgets={show_digits_stats ? bottomWidgets : undefined}\n                                is_accumulator={is_accumulator}\n                            />\n                        </SwipeableWrapper>\n                    </MobileWrapper>\n                </React.Suspense>\n\n                {/* Remove Test component for debugging below for production release */}\n                <Test />\n            </Div100vhContainer>\n            <div className={form_wrapper_class}>\n                {is_market_closed && !is_market_unavailable_visible && (\n                    <MarketIsClosedOverlay\n                        is_eu={is_eu}\n                        is_synthetics_trading_market_available={is_synthetics_trading_market_available}\n                        {...(is_eu && category)}\n                        onClick={onTryOtherMarkets}\n                        onMarketOpen={prepareTradeStore}\n                        symbol={symbol}\n                    />\n                )}\n                <FormLayout\n                    is_market_closed={is_market_closed}\n                    is_trade_enabled={\n                        is_trade_enabled && form_components.length > 0 && network_status.class === 'online'\n                    }\n                />\n            </div>\n        </div>\n    );\n});\n\nexport default Trade;\n\n// CHART (ChartTrade)--------------------------------------------------------\n\n/* eslint-disable */\nimport { SmartChart } from 'Modules/SmartChart';\n\nconst SmartChartWithRef = React.forwardRef((props, ref) => <SmartChart innerRef={ref} {...props} />);\n\nconst ChartTrade = observer(props => {\n    const { is_accumulator, end_epoch, topWidgets, charts_ref } = props;\n    const { client, ui, common, contract_trade, portfolio } = useStore();\n    const {\n        accumulator_barriers_data,\n        accumulator_contract_barriers_data,\n        chart_type,\n        granularity,\n        markers_array,\n        has_crossed_accu_barriers,\n        updateGranularity,\n        updateChartType,\n    } = contract_trade;\n    const { all_positions } = portfolio;\n    const { is_chart_layout_default, is_chart_countdown_visible, is_dark_mode_on, is_positions_drawer_on } = ui;\n    const { is_socket_opened, current_language } = common;\n    const { currency, should_show_eu_content } = client;\n    const {\n        chartStateChange,\n        is_trade_enabled,\n        main_barrier_flattened: main_barrier,\n        barriers_flattened: extra_barriers,\n        show_digits_stats,\n        symbol,\n        exportLayout,\n        setChartStatus,\n        chart_layout,\n        wsForget,\n        wsForgetStream,\n        wsSendRequest,\n        wsSubscribe,\n        active_symbols,\n        has_alternative_source,\n    } = useTraderStore();\n\n    const settings = {\n        assetInformation: false, // ui.is_chart_asset_info_visible,\n        countdown: is_chart_countdown_visible,\n        isHighestLowestMarkerEnabled: false, // TODO: Pending UI,\n        language: current_language.toLowerCase(),\n        position: is_chart_layout_default ? 'bottom' : 'left',\n        theme: is_dark_mode_on ? 'dark' : 'light',\n        ...(is_accumulator ? { whitespace: 190, minimumLeftBars: isMobile() ? 3 : undefined } : {}),\n    };\n\n    const { current_spot, current_spot_time } = accumulator_barriers_data || {};\n\n    const bottomWidgets = React.useCallback(\n        ({ digits, tick }) => (\n            <ChartBottomWidgets digits={digits} tick={tick} show_accumulators_stats={is_accumulator} is_trade_page />\n        ),\n        [is_accumulator]\n    );\n\n    const getMarketsOrder = active_symbols => {\n        const synthetic_index = 'synthetic_index';\n\n        const has_synthetic_index = !!active_symbols.find(s => s.market === synthetic_index);\n        return active_symbols\n            .slice()\n            .sort((a, b) => (a.display_name < b.display_name ? -1 : 1))\n            .map(s => s.market)\n            .reduce(\n                (arr, market) => {\n                    if (arr.indexOf(market) === -1) arr.push(market);\n                    return arr;\n                },\n                has_synthetic_index ? [synthetic_index] : []\n            );\n    };\n\n    const barriers = main_barrier ? [main_barrier, ...extra_barriers] : extra_barriers;\n\n    // max ticks to display for mobile view for tick chart\n    const max_ticks = granularity === 0 ? 8 : 24;\n\n    if (!symbol || active_symbols.length === 0) return null;\n\n    return (\n        <SmartChartWithRef\n            ref={charts_ref}\n            barriers={barriers}\n            markers_array={markers_array}\n            bottomWidgets={(is_accumulator || show_digits_stats) && isDesktop() ? bottomWidgets : props.bottomWidgets}\n            crosshair={isMobile() ? 0 : undefined}\n            crosshairTooltipLeftAllow={560}\n            showLastDigitStats={isDesktop() ? show_digits_stats : false}\n            chartControlsWidgets={null}\n            chartStatusListener={v => setChartStatus(!v)}\n            chartType={chart_type}\n            initialData={{\n                activeSymbols: JSON.parse(JSON.stringify(active_symbols)),\n            }}\n            chartData={{\n                activeSymbols: JSON.parse(JSON.stringify(active_symbols)),\n            }}\n            feedCall={{\n                activeSymbols: false,\n            }}\n            enabledNavigationWidget={isDesktop()}\n            enabledChartFooter={false}\n            id='trade'\n            isMobile={isMobile()}\n            maxTick={isMobile() ? max_ticks : undefined}\n            granularity={show_digits_stats || is_accumulator ? 0 : granularity}\n            requestAPI={wsSendRequest}\n            requestForget={wsForget}\n            requestForgetStream={wsForgetStream}\n            requestSubscribe={wsSubscribe}\n            settings={settings}\n            should_show_eu_content={should_show_eu_content}\n            allowTickChartTypeOnly={show_digits_stats || is_accumulator}\n            stateChangeListener={chartStateChange}\n            symbol={symbol}\n            topWidgets={is_trade_enabled ? topWidgets : null}\n            isConnectionOpened={is_socket_opened}\n            clearChart={false}\n            toolbarWidget={() => (\n                <ToolbarWidgets updateChartType={updateChartType} updateGranularity={updateGranularity} />\n            )}\n            importedLayout={chart_layout}\n            onExportLayout={exportLayout}\n            shouldFetchTradingTimes={!end_epoch}\n            hasAlternativeSource={has_alternative_source}\n            getMarketsOrder={getMarketsOrder}\n            should_zoom_out_on_yaxis={is_accumulator}\n            yAxisMargin={{\n                top: isMobile() ? 76 : 106,\n            }}\n            isLive={true}\n            leftMargin={isDesktop() && is_positions_drawer_on ? 328 : 80}\n        >\n            {is_accumulator && (\n                <AccumulatorsChartElements\n                    all_positions={all_positions}\n                    current_spot={current_spot}\n                    current_spot_time={current_spot_time}\n                    has_crossed_accu_barriers={has_crossed_accu_barriers}\n                    should_show_profit_text={\n                        !!accumulator_contract_barriers_data.accumulators_high_barrier &&\n                        getDecimalPlaces(currency) <= 2\n                    }\n                    symbol={symbol}\n                />\n            )}\n        </SmartChartWithRef>\n    );\n});\n","import Trade from './Containers/trade.jsx';\n\nexport default Trade;\n","import React from 'react';\nimport { routes, moduleLoader } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport Trade from 'Modules/Trading';\n\nconst ContractDetails = React.lazy(() =>\n    moduleLoader(() => import(/* webpackChunkName: \"contract\" */ 'Modules/Contract'))\n);\n\n// Error Routes\nconst Page404 = React.lazy(() => moduleLoader(() => import(/* webpackChunkName: \"404\" */ 'Modules/Page404')));\n\n// Order matters\nconst initRoutesConfig = () => {\n    return [\n        {\n            path: routes.contract,\n            component: ContractDetails,\n            // Don't use `Localize` component since native html tag like `option` cannot render them\n            getTitle: () => localize('Contract Details'),\n            is_authenticated: true,\n        },\n        { path: routes.trade, component: Trade, getTitle: () => localize('Trader'), exact: true },\n    ];\n};\n\nlet routesConfig;\n\n// For default page route if page/path is not found, must be kept at the end of routes_config array\nconst route_default = { component: Page404, getTitle: () => localize('Error 404') };\n\nconst getRoutesConfig = () => {\n    if (!routesConfig) {\n        routesConfig = initRoutesConfig();\n        routesConfig.push(route_default);\n    }\n    return routesConfig;\n};\n\nexport default getRoutesConfig;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { findRouteByPath, normalizePath } from './helpers';\nimport getRoutesConfig from '../../Constants/routes-config';\n\n// TODO: solve circular dependency problem\n// when binary link is imported into components present in routes config\n// or into their descendants\nconst BinaryLink = ({ active_class, to, children, ...props }) => {\n    const path = normalizePath(to);\n    const route = findRouteByPath(path, getRoutesConfig());\n\n    if (!route) {\n        throw new Error(`Route not found: ${to}`);\n    }\n\n    return to ? (\n        <NavLink\n            data-testid='dt_binary_link'\n            to={path}\n            activeClassName={active_class || 'active'}\n            exact={route.exact}\n            {...props}\n        >\n            {children}\n        </NavLink>\n    ) : (\n        <a data-testid='dt_binary_link' {...props}>\n            {children}\n        </a>\n    );\n};\n\nBinaryLink.propTypes = {\n    active_class: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),\n    to: PropTypes.string,\n};\n\nexport default BinaryLink;\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport {\n    alternateLinkTagChange,\n    canonicalLinkTagChange,\n    redirectToLogin,\n    removeBranchName,\n    routes,\n    isEmptyObject,\n    default_title,\n} from '@deriv/shared';\nimport { getLanguage } from '@deriv/translations';\nimport Page404 from 'Modules/Page404';\n\nconst RouteWithSubRoutes = route => {\n    const validateRoute = pathname => {\n        if (pathname === '') return true;\n        if (route.path?.includes(':')) {\n            const static_pathname = pathname.substring(0, pathname.lastIndexOf('/') + 1);\n            return static_pathname === route.path.substring(0, route.path.indexOf(':'));\n        }\n        return route.path === pathname || !!(route.routes && route.routes.find(r => pathname === r.path));\n    };\n\n    const renderFactory = props => {\n        let result = null;\n\n        const pathname = removeBranchName(location.pathname).replace(/\\/$/, '');\n        const is_valid_route = validateRoute(pathname);\n\n        if (route.component === Redirect) {\n            let to = route.to;\n\n            // This if clause has been added just to remove '/index' from url in localhost env.\n            if (route.path === routes.index) {\n                const { location } = props;\n                to = location.pathname.toLowerCase().replace(route.path, '');\n            }\n            result = <Redirect to={to} />;\n        } else if (is_valid_route && route.is_authenticated && !route.is_logging_in && !route.is_logged_in) {\n            redirectToLogin(route.is_logged_in, getLanguage());\n        } else {\n            const default_subroute = route.routes ? route.routes.find(r => r.default) : {};\n            const has_default_subroute = !isEmptyObject(default_subroute);\n\n            result = (\n                <React.Fragment>\n                    {has_default_subroute && pathname === route.path && <Redirect to={default_subroute.path} />}\n                    {is_valid_route ? <route.component {...props} routes={route.routes} /> : <Page404 />}\n                </React.Fragment>\n            );\n        }\n\n        // eslint-disable-next-line no-nested-ternary\n        const title = route.getTitle?.() || '';\n        document.title = `${title} | ${default_title}`;\n\n        alternateLinkTagChange();\n        canonicalLinkTagChange();\n\n        return result;\n    };\n\n    return <Route exact={route.exact} path={route.path} render={renderFactory} />;\n};\n\nexport default RouteWithSubRoutes;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\nimport getRoutesConfig from 'App/Constants/routes-config';\nimport RouteWithSubRoutes from './route-with-sub-routes.jsx';\n\nconst BinaryRoutes = props => (\n    <React.Suspense fallback={<div />}>\n        <Switch>\n            {getRoutesConfig().map((route, idx) => (\n                <RouteWithSubRoutes key={idx} {...route} {...props} />\n            ))}\n        </Switch>\n    </React.Suspense>\n);\n\nexport default BinaryRoutes;\n","import BinaryLink from './binary-link.jsx';\nimport RouteWithSubRoutes from './route-with-sub-routes.jsx';\nimport BinaryRoutes from './binary-routes.jsx';\n\nexport * from './helpers';\nexport { BinaryLink, RouteWithSubRoutes };\nexport default BinaryRoutes;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter, matchPath } from 'react-router';\nimport Loadable from 'react-loadable';\nimport { UILoader } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport BinaryRoutes from 'App/Components/Routes';\nimport getRoutesConfig from 'App/Constants/routes-config';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst checkRoutingMatch = (route_list, path) => {\n    return route_list.some(route => !!matchPath(path, { path: route, exact: true }));\n};\n\nconst tradePageMountingMiddleware = ({ path_from, path_to, action, match_patterns, callback }) => {\n    if (action === 'PUSH' || action === 'POP') {\n        // We use matchPath here because on route, there will be extra\n        // parameters which matchPath takes into account.\n        const has_match = match_patterns.some(\n            pattern => checkRoutingMatch(pattern.from, path_from) && checkRoutingMatch(pattern.to, path_to)\n        );\n\n        callback(has_match);\n    }\n\n    return true;\n};\n\nconst Error = Loadable({\n    loader: () => import(/* webpackChunkName: \"error-component\" */ 'App/Components/Elements/Errors'),\n    loading: UILoader,\n    render(loaded, props) {\n        const Component = loaded.default;\n        return <Component {...props} />;\n    },\n});\n\nconst Routes = observer(({ history, passthrough }) => {\n    const { client, common, ui, portfolio } = useStore();\n    const { setSkipPrePostLifecycle: setTradeMountingPolicy } = useTraderStore();\n    const { error, has_error } = common;\n    const { onUnmount: onUnmountPortfolio } = portfolio;\n    const { is_logged_in, is_logging_in } = client;\n    const { setPromptHandler } = ui;\n\n    React.useEffect(() => {\n        if (setPromptHandler) {\n            setPromptHandler(true, (route_to, action) => {\n                // clears portfolio when we navigate to mt5 dashboard\n                tradePageMountingMiddleware({\n                    path_from: history.location.pathname,\n                    path_to: route_to.pathname,\n                    match_patterns: [\n                        {\n                            from: getRoutesConfig()\n                                .flatMap(route => {\n                                    if (route.routes) {\n                                        return route.routes.map(subroute => subroute.path);\n                                    }\n                                    return [route.path];\n                                })\n                                .filter(path => path && path !== routes.mt5 && path !== routes.dxtrade),\n                            to: [routes.mt5, routes.dxtrade],\n                        },\n                    ],\n                    action,\n                    callback: has_match => {\n                        if (has_match) {\n                            onUnmountPortfolio();\n                        }\n                    },\n                });\n\n                return tradePageMountingMiddleware({\n                    path_from: history.location.pathname,\n                    path_to: route_to.pathname,\n                    match_patterns: [\n                        { from: [routes.contract], to: [routes.trade] },\n                        { from: [routes.trade], to: [routes.contract] },\n                    ],\n                    action,\n                    callback: setTradeMountingPolicy,\n                });\n            });\n        }\n\n        return () => {\n            setPromptHandler?.(false);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        return () => onUnmountPortfolio();\n    }, [onUnmountPortfolio]);\n\n    if (has_error) return <Error {...error} />;\n\n    return <BinaryRoutes is_logged_in={is_logged_in} is_logging_in={is_logging_in} passthrough={passthrough} />;\n});\n\nRoutes.propTypes = {\n    history: PropTypes.object,\n    passthrough: PropTypes.object,\n};\n\nexport default withRouter(Routes);\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\nconst ResultMobile = ({ is_visible, result }) => {\n    const is_contract_won = result === 'won';\n    return (\n        <React.Fragment>\n            <CSSTransition\n                in={is_visible}\n                timeout={250}\n                classNames={{\n                    enter: 'positions-modal-card__result--enter',\n                    enterDone: 'positions-modal-card__result--enter-done',\n                    exit: 'positions-modal-card__result--exit',\n                }}\n                unmountOnExit\n            >\n                <div className='positions-modal-card__caption-wrapper' data-testid='result_mobile'>\n                    <span\n                        className={classNames('positions-modal-card__caption', {\n                            'positions-modal-card__caption--won': is_contract_won,\n                            'positions-modal-card__caption--lost': !is_contract_won,\n                        })}\n                    >\n                        {is_contract_won ? (\n                            <React.Fragment>\n                                {localize('Won')}\n                                <Icon icon='IcCheckmarkCircle' className='positions-modal-card__icon' color='green' />\n                            </React.Fragment>\n                        ) : (\n                            <React.Fragment>\n                                {localize('Lost')}\n                                <Icon icon='IcCrossCircle' className='positions-modal-card__icon' color='red' />\n                            </React.Fragment>\n                        )}\n                    </span>\n                </div>\n            </CSSTransition>\n        </React.Fragment>\n    );\n};\n\nResultMobile.propTypes = {\n    is_visible: PropTypes.bool,\n    result: PropTypes.string,\n};\n\nexport default ResultMobile;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { CSSTransition } from 'react-transition-group';\nimport { ContractCard, CurrencyBadge, Icon, Money, ProgressSliderMobile, Text } from '@deriv/components';\nimport {\n    getContractPath,\n    getContractTypeDisplay,\n    getCardLabels,\n    getSymbolDisplayName,\n    getEndTime,\n    getTotalProfit,\n    hasContractEntered,\n    isAccumulatorContract,\n    isCryptoContract,\n    isMultiplierContract,\n    isTurbosContract,\n    isHighLow,\n    isCryptocurrency,\n    isOpen,\n    isVanillaContract,\n} from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { BinaryLink } from 'App/Components/Routes';\nimport { PositionsCardLoader } from 'App/Components/Elements/ContentLoader';\nimport { getMarketInformation } from 'Utils/Helpers/market-underlying';\nimport ResultMobile from './result-mobile.jsx';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst PositionsModalCard = observer(\n    ({\n        className,\n        contract_info,\n        contract_update,\n        currency,\n        current_tick,\n        id,\n        indicative,\n        is_loading,\n        is_sell_requested,\n        is_unsupported,\n        onClickSell,\n        profit_loss,\n        onClickCancel,\n        result,\n        sell_price,\n        status,\n        togglePositions,\n        toggleUnsupportedContractModal,\n        type,\n    }) => {\n        const { ui, common, contract_trade } = useStore();\n        const { active_symbols } = useTraderStore();\n        const { server_time } = common;\n        const { getContractById } = contract_trade;\n        const {\n            addToast,\n            current_focus,\n            is_mobile,\n            removeToast,\n            setCurrentFocus,\n            should_show_cancellation_warning,\n            toggleCancellationWarning,\n        } = ui;\n        const loader_el = (\n            <div className='positions-modal-card__content-loader'>\n                <PositionsCardLoader speed={2} />\n            </div>\n        );\n        const is_multiplier = isMultiplierContract(contract_info.contract_type);\n        const is_accumulator = isAccumulatorContract(contract_info.contract_type);\n        const is_turbos = isTurbosContract(contract_info.contract_type);\n        const is_vanilla = isVanillaContract(contract_info.contract_type);\n        const is_crypto = isCryptoContract(contract_info.underlying);\n        const has_progress_slider = !is_multiplier || (is_crypto && is_multiplier);\n        const has_ended = !!getEndTime(contract_info);\n        const fallback_result = profit_loss >= 0 ? 'won' : 'lost';\n        const total_profit = getTotalProfit(contract_info);\n\n        const should_show_sell = hasContractEntered(contract_info) && isOpen(contract_info);\n        const display_name = getSymbolDisplayName(\n            active_symbols,\n            getMarketInformation(contract_info.shortcode).underlying\n        );\n\n        const contract_options_el = (\n            <React.Fragment>\n                <div className={classNames('positions-modal-card__grid', 'positions-modal-card__grid-header')}>\n                    <div className='positions-modal-card__underlying-name'>\n                        <Icon\n                            icon={contract_info.underlying ? `IcUnderlying${contract_info.underlying}` : 'IcUnknown'}\n                            size={34}\n                        />\n                        <Text size='xxs' className='positions-modal-card__symbol' weight='bold'>\n                            {contract_info.display_name}\n                        </Text>\n                    </div>\n                    <div className='positions-modal-card__type'>\n                        <ContractCard.ContractTypeCell\n                            getContractTypeDisplay={getContractTypeDisplay}\n                            is_high_low={isHighLow({ shortcode: contract_info.shortcode })}\n                            multiplier={contract_info.multiplier}\n                            type={type}\n                        />\n                    </div>\n                    <CSSTransition\n                        in={should_show_sell}\n                        timeout={250}\n                        classNames={{\n                            enter: 'positions-modal-card__sell-button--enter',\n                            enterDone: 'positions-modal-card__sell-button--enter-done',\n                            exit: 'positions-modal-card__sell-button--exit',\n                        }}\n                        unmountOnExit\n                    >\n                        <div className='positions-modal-card__sell-button'>\n                            <ContractCard.Sell\n                                contract_info={contract_info}\n                                is_sell_requested={is_sell_requested}\n                                getCardLabels={getCardLabels}\n                                onClickSell={onClickSell}\n                            />\n                        </div>\n                    </CSSTransition>\n                </div>\n                <CurrencyBadge currency={contract_info?.currency ?? ''} />\n                <div className={classNames('positions-modal-card__grid', 'positions-modal-card__grid-body')}>\n                    <div className={classNames('positions-modal-card__grid-profit-payout')}>\n                        <div\n                            className={classNames(\n                                'positions-modal-card__profit-loss',\n                                'positions-modal-card__profit-loss-label'\n                            )}\n                        >\n                            {result ? localize('Profit/Loss:') : localize('Potential profit/loss:')}\n                        </div>\n                        <div\n                            className={classNames(\n                                'positions-modal-card__indicative',\n                                'positions-modal-card__indicative-label'\n                            )}\n                        >\n                            {!result ? localize('Indicative price:') : localize('Payout:')}\n                        </div>\n                        <div\n                            className={classNames('positions-modal-card__profit-loss', {\n                                'positions-modal-card__profit-loss--is-crypto': isCryptocurrency(currency),\n                                'positions-modal-card__profit-loss--negative': profit_loss < 0,\n                                'positions-modal-card__profit-loss--positive': profit_loss > 0,\n                            })}\n                        >\n                            <Money amount={Math.abs(profit_loss)} currency={currency} />\n                            <div\n                                className={classNames('positions-modal-card__indicative--movement', {\n                                    'positions-modal-card__indicative--movement-complete': !!result,\n                                })}\n                            >\n                                {status === 'profit' && <Icon icon='IcProfit' />}\n                                {status === 'loss' && <Icon icon='IcLoss' />}\n                            </div>\n                        </div>\n                        <div className='positions-modal-card__indicative'>\n                            <Money amount={sell_price || indicative} currency={currency} />\n                            <div\n                                className={classNames('positions-modal-card__indicative--movement', {\n                                    'positions-modal-card__indicative--movement-complete': !!result,\n                                })}\n                            >\n                                {status === 'profit' && <Icon icon='IcProfit' />}\n                                {status === 'loss' && <Icon icon='IcLoss' />}\n                            </div>\n                        </div>\n                    </div>\n                    <div className={classNames('positions-modal-card__grid-price-payout')}>\n                        <div className='positions-modal-card__purchase-price'>\n                            <Text size='xxxs' className='positions-modal-card__purchase-label'>\n                                {localize('Purchase price:')}\n                            </Text>\n                            <Text weight='bold' size='xxs' className='positions-modal-card__purchase-value'>\n                                <Money amount={contract_info.buy_price} currency={currency} />\n                            </Text>\n                        </div>\n                        <div className='positions-modal-card__payout-price'>\n                            <Text size='xxxs' className='positions-modal-card__payout-label'>\n                                {localize('Potential payout:')}\n                            </Text>\n                            <Text weight='bold' size='xxs' className='positions-modal-card__payout-value'>\n                                {contract_info.payout ? (\n                                    <Money amount={contract_info.payout} currency={currency} />\n                                ) : (\n                                    <strong>-i</strong>\n                                )}\n                            </Text>\n                        </div>\n                    </div>\n\n                    {result || !!contract_info.is_sold ? (\n                        <ResultMobile\n                            contract_id={id}\n                            is_visible={!!contract_info.is_sold}\n                            result={result || fallback_result}\n                        />\n                    ) : (\n                        <ProgressSliderMobile\n                            className='positions-modal-card__progress'\n                            current_tick={current_tick}\n                            getCardLabels={getCardLabels}\n                            is_loading={is_loading}\n                            start_time={contract_info.date_start}\n                            expiry_time={contract_info.date_expiry}\n                            server_time={server_time}\n                            ticks_count={contract_info.tick_count}\n                        />\n                    )}\n                </div>\n            </React.Fragment>\n        );\n\n        const contract_vanilla_el = (\n            <React.Fragment>\n                <NavLink\n                    className={classNames('dc-contract-card', {\n                        'dc-contract-card--green': profit_loss > 0 && !result,\n                        'dc-contract-card--red': profit_loss < 0 && !result,\n                    })}\n                    to={{\n                        pathname: `/contract/${contract_info.contract_id}`,\n                    }}\n                >\n                    <ContractCard.Header\n                        contract_info={contract_info}\n                        display_name={display_name}\n                        getCardLabels={getCardLabels}\n                        getContractTypeDisplay={getContractTypeDisplay}\n                        has_progress_slider={!is_mobile && has_progress_slider}\n                        is_mobile={is_mobile}\n                        is_sell_requested={is_sell_requested}\n                        onClickSell={onClickSell}\n                        server_time={server_time}\n                    />\n                </NavLink>\n                <CurrencyBadge currency={contract_info?.currency ?? ''} />\n                <div className={classNames('positions-modal-card__grid', 'positions-modal-card__grid-body')}>\n                    <div className={classNames('positions-modal-card__grid-profit-payout')}>\n                        <div className='positions-modal-card__purchase-price'>\n                            <Text size='xxxs' className='positions-modal-card__purchase-label'>\n                                {localize('Buy price:')}\n                            </Text>\n                            <Text weight='bold' size='xxs' className='positions-modal-card__purchase-value'>\n                                <Money amount={contract_info.buy_price} currency={currency} />\n                            </Text>\n                        </div>\n                        <div className='positions-modal-card__payout-price'>\n                            <Text size='xxxs' className='positions-modal-card__payout-label'>\n                                {localize('Contract value:')}\n                            </Text>\n                            <Text weight='bold' size='xxs' className='positions-modal-card__payout-value'>\n                                <Money amount={contract_info.bid_price} currency={currency} />\n                            </Text>\n                        </div>\n                    </div>\n\n                    <div className={classNames('positions-modal-card__grid-price-payout')}>\n                        <div className='positions-modal-card__purchase-price'>\n                            <Text size='xxxs' className='positions-modal-card__purchase-label'>\n                                {localize('Entry spot:')}\n                            </Text>\n                            <Text weight='bold' size='xxs' className='positions-modal-card__purchase-value'>\n                                <Money amount={contract_info.entry_spot} currency={currency} />\n                            </Text>\n                        </div>\n                        <div className='positions-modal-card__payout-price'>\n                            <Text size='xxxs' className='positions-modal-card__payout-label'>\n                                {localize('Strike:')}\n                            </Text>\n                            <Text weight='bold' size='xxs' className='positions-modal-card__payout-value'>\n                                <Money amount={contract_info.barrier} currency={currency} />\n                            </Text>\n                        </div>\n                    </div>\n\n                    {result || !!contract_info.is_sold ? (\n                        <ResultMobile\n                            contract_id={id}\n                            is_visible={!!contract_info.is_sold}\n                            result={result || fallback_result}\n                        />\n                    ) : (\n                        <ProgressSliderMobile\n                            className='positions-modal-card__progress'\n                            current_tick={current_tick}\n                            getCardLabels={getCardLabels}\n                            is_loading={is_loading}\n                            start_time={contract_info.date_start}\n                            expiry_time={contract_info.date_expiry}\n                            server_time={server_time}\n                            ticks_count={contract_info.tick_count}\n                        />\n                    )}\n                </div>\n                <div className={classNames('positions-modal-card__item', className)}>\n                    <div className='dc-contract-card-item__header'>{getCardLabels().TOTAL_PROFIT_LOSS}</div>\n                    <div\n                        className={classNames('dc-contract-card-item__body', {\n                            'dc-contract-card-item__body--crypto': isCryptocurrency(currency),\n                            'dc-contract-card-item__body--loss': +total_profit < 0,\n                            'dc-contract-card-item__body--profit': +total_profit > 0,\n                        })}\n                    >\n                        <Money amount={total_profit} currency={currency} />\n                        <div\n                            className={classNames('dc-contract-card__indicative--movement', {\n                                'dc-contract-card__indicative--movement-complete': !!contract_info.is_sold,\n                            })}\n                        >\n                            {status === 'profit' && <Icon icon='IcProfit' />}\n                            {status === 'loss' && <Icon icon='IcLoss' />}\n                        </div>\n                    </div>\n                </div>\n                <ContractCard.Footer\n                    contract_info={contract_info}\n                    getCardLabels={getCardLabels}\n                    is_multiplier={is_multiplier}\n                    is_sell_requested={is_sell_requested}\n                    onClickCancel={onClickCancel}\n                    onClickSell={onClickSell}\n                    server_time={server_time}\n                    status={status}\n                />\n            </React.Fragment>\n        );\n\n        const custom_card_header = (\n            <ContractCard.Header\n                contract_info={contract_info}\n                display_name={display_name}\n                getCardLabels={getCardLabels}\n                getContractTypeDisplay={getContractTypeDisplay}\n                has_progress_slider={(!is_mobile && has_progress_slider) || is_accumulator}\n                is_mobile={is_mobile}\n                is_sell_requested={is_sell_requested}\n                onClickSell={onClickSell}\n                server_time={server_time}\n            />\n        );\n\n        const custom_card_body = (\n            <ContractCard.Body\n                addToast={addToast}\n                contract_info={contract_info}\n                contract_update={contract_update}\n                currency={currency}\n                current_focus={current_focus}\n                getCardLabels={getCardLabels}\n                getContractById={getContractById}\n                is_accumulator={is_accumulator}\n                is_mobile={is_mobile}\n                is_multiplier={is_multiplier}\n                is_positions\n                is_sold={!!contract_info.is_sold}\n                is_turbos={is_turbos}\n                has_progress_slider={is_mobile && has_progress_slider && !has_ended}\n                removeToast={removeToast}\n                server_time={server_time}\n                setCurrentFocus={setCurrentFocus}\n                should_show_cancellation_warning={should_show_cancellation_warning}\n                status={status}\n                toggleCancellationWarning={toggleCancellationWarning}\n            />\n        );\n\n        const custom_card_footer = (\n            <ContractCard.Footer\n                contract_info={contract_info}\n                getCardLabels={getCardLabels}\n                is_multiplier={is_multiplier}\n                is_sell_requested={is_sell_requested}\n                onClickCancel={onClickCancel}\n                onClickSell={onClickSell}\n                server_time={server_time}\n                status={status}\n            />\n        );\n\n        const custom_contract_el = (\n            <React.Fragment>\n                <ContractCard\n                    contract_info={contract_info}\n                    getCardLabels={getCardLabels}\n                    is_multiplier={is_multiplier}\n                    profit_loss={profit_loss}\n                    should_show_result_overlay={false}\n                >\n                    {custom_card_header}\n                    {custom_card_body}\n                    {custom_card_footer}\n                </ContractCard>\n            </React.Fragment>\n        );\n\n        const options_el = is_vanilla ? contract_vanilla_el : contract_options_el;\n        const contract_el = is_multiplier || is_accumulator || is_turbos ? custom_contract_el : options_el;\n\n        return (\n            <div id={`dt_drawer_card_${id}`} className={classNames('positions-modal-card__wrapper', className)}>\n                {is_unsupported ? (\n                    <div\n                        className={classNames('positions-modal-card')}\n                        onClick={() => toggleUnsupportedContractModal(true)}\n                    >\n                        {contract_info.underlying ? contract_el : loader_el}\n                    </div>\n                ) : (\n                    <React.Fragment>\n                        <BinaryLink\n                            onClick={togglePositions}\n                            className={classNames('positions-modal-card', {\n                                'positions-modal-card--multiplier': is_multiplier,\n                            })}\n                            to={getContractPath(id)}\n                        >\n                            {contract_info.underlying ? contract_el : loader_el}\n                        </BinaryLink>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n);\n\nPositionsModalCard.propTypes = {\n    className: PropTypes.string,\n    contract_info: PropTypes.object,\n    contract_update: PropTypes.object,\n    currency: PropTypes.string,\n    current_tick: PropTypes.number,\n    duration: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    duration_unit: PropTypes.string,\n    exit_spot: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    id: PropTypes.number,\n    indicative: PropTypes.number,\n    is_loading: PropTypes.bool,\n    is_sell_requested: PropTypes.bool,\n    is_unsupported: PropTypes.bool,\n    is_valid_to_sell: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),\n    onClickSell: PropTypes.func,\n    onClickCancel: PropTypes.func,\n    profit_loss: PropTypes.number,\n    result: PropTypes.string,\n    sell_price: PropTypes.number,\n    sell_time: PropTypes.number,\n    status: PropTypes.string,\n    togglePositions: PropTypes.func,\n    toggleUnsupportedContractModal: PropTypes.func,\n    type: PropTypes.string,\n};\n\nexport default PositionsModalCard;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon } from '@deriv/components';\nimport 'Sass/app/_common/components/positions-toggle.scss';\n\ntype TTogglePositions = {\n    positions_count: number;\n    is_open: boolean;\n    togglePositions: () => void;\n};\n\nconst TogglePositions = ({ positions_count, is_open, togglePositions }: TTogglePositions) => {\n    const positions_toggle_class = classNames('positions-toggle', {\n        'positions-toggle--active': is_open,\n        'positions-toggle--has-count': positions_count > 0,\n    });\n    return (\n        <a\n            id='dt_positions_toggle'\n            data-testid='dt_positions_toggle'\n            className={positions_toggle_class}\n            onClick={togglePositions}\n            data-count={positions_count}\n        >\n            <Icon data_testid='dt_icon' icon='IcPortfolio' className='positions-toggle__icon' />\n        </a>\n    );\n};\n\nexport default TogglePositions;\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { Icon, Div100vhContainer, Modal, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { NavLink } from 'react-router-dom';\nimport EmptyPortfolioMessage from '../EmptyPortfolioMessage';\nimport PositionsModalCard from 'App/Components/Elements/PositionsDrawer/positions-modal-card.jsx';\nimport TogglePositions from './toggle-positions';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TTogglePositionsMobile = Pick<\n    ReturnType<typeof useStore>['portfolio'],\n    'active_positions_count' | 'error' | 'onClickSell' | 'onClickCancel'\n> & {\n    currency: ReturnType<typeof useStore>['client']['currency'];\n    filtered_positions: ReturnType<typeof useStore>['portfolio']['all_positions'];\n    is_empty: boolean;\n};\n\ntype THiddenPositionsId = TTogglePositionsMobile['filtered_positions'][0]['id'];\n\nconst TogglePositionsMobile = observer(\n    ({\n        active_positions_count,\n        currency,\n        error,\n        filtered_positions,\n        is_empty,\n        onClickSell,\n        onClickCancel,\n    }: TTogglePositionsMobile) => {\n        const { togglePositionsDrawer, toggleUnsupportedContractModal, is_positions_drawer_on } = useStore().ui;\n        const [hidden_positions_ids, setHiddenPositionsIds] = React.useState<THiddenPositionsId[]>([]);\n        const displayed_positions = filtered_positions\n            .filter(p =>\n                hidden_positions_ids.every(hidden_position_id => hidden_position_id !== p.contract_info.contract_id)\n            )\n            .slice(0, 5);\n        const closed_positions_ids = displayed_positions\n            .filter(position => position.contract_info?.is_sold)\n            .map(p => p.contract_info.contract_id);\n\n        const closeModal = () => {\n            setHiddenPositionsIds([...new Set([...hidden_positions_ids, ...closed_positions_ids])]);\n            togglePositionsDrawer();\n        };\n\n        // Show only 5 most recent open contracts\n        const body_content = (\n            <React.Fragment>\n                <TransitionGroup component='div'>\n                    {displayed_positions.map(portfolio_position => (\n                        <CSSTransition\n                            appear\n                            key={portfolio_position.id}\n                            in={true}\n                            timeout={150}\n                            classNames={{\n                                appear: 'dc-contract-card__wrapper--enter',\n                                enter: 'dc-contract-card__wrapper--enter',\n                                enterDone: 'dc-contract-card__wrapper--enter-done',\n                                exit: 'dc-contract-card__wrapper--exit',\n                            }}\n                            unmountOnExit\n                        >\n                            <PositionsModalCard\n                                //@ts-expect-error observer wrapped component needs to be ts migrated first\n                                onClickSell={onClickSell}\n                                onClickCancel={onClickCancel}\n                                key={portfolio_position.id}\n                                currency={currency}\n                                toggleUnsupportedContractModal={toggleUnsupportedContractModal}\n                                togglePositions={togglePositionsDrawer}\n                                {...portfolio_position}\n                            />\n                        </CSSTransition>\n                    ))}\n                </TransitionGroup>\n            </React.Fragment>\n        );\n\n        return (\n            <React.Fragment>\n                <TogglePositions\n                    is_open={is_positions_drawer_on}\n                    togglePositions={togglePositionsDrawer}\n                    positions_count={active_positions_count}\n                />\n                <Modal\n                    is_open={is_positions_drawer_on}\n                    toggleModal={closeModal}\n                    id='dt_mobile_positions'\n                    is_vertical_top\n                    has_close_icon\n                    width='calc(100vw - 32px)'\n                >\n                    <Div100vhContainer className='positions-modal' height_offset='48px'>\n                        <div className='positions-modal__header'>\n                            <Text size='xxxs' className='positions-modal__title'>\n                                <Icon icon='IcPortfolio' className='positions-modal__title-icon' />\n                                {localize('Recent positions')}\n                            </Text>\n                            <div className='positions-modal__close-btn' onClick={closeModal}>\n                                <Icon data_testid='dt_modal_header_close' icon='IcMinusBold' />\n                            </div>\n                        </div>\n                        <div className='positions-modal__body'>\n                            {is_empty || !displayed_positions.length || error ? (\n                                <EmptyPortfolioMessage error={error} />\n                            ) : (\n                                body_content\n                            )}\n                        </div>\n                        <div className='positions-modal__footer'>\n                            <NavLink\n                                onClick={closeModal}\n                                className='dc-btn dc-btn--secondary dc-btn__large positions-modal__footer-btn'\n                                to={routes.positions}\n                            >\n                                <Text size='xs' weight='bold'>\n                                    {localize('Go to Reports')}\n                                </Text>\n                            </NavLink>\n                        </div>\n                    </Div100vhContainer>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n);\n\nexport default TogglePositionsMobile;\n","import React from 'react';\nimport TogglePositionsMobile from 'App/Components/Elements/TogglePositions/toggle-positions-mobile';\nimport { filterByContractType } from 'App/Components/Elements/PositionsDrawer/helpers';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\nimport { TURBOS, VANILLALONG, isTurbosContract, isVanillaContract } from '@deriv/shared';\n\nconst PopulateHeader = observer(() => {\n    const { portfolio, client } = useStore();\n    const { symbol, contract_type: trade_contract_type } = useTraderStore();\n    const { currency: positions_currency } = client;\n    const {\n        active_positions_count,\n        all_positions: positions,\n        error: positions_error,\n        onClickSell: onPositionsSell,\n        onClickCancel: onPositionsCancel,\n    } = portfolio;\n\n    const filtered_positions = positions.filter(\n        p =>\n            p.contract_info &&\n            symbol === p.contract_info.underlying &&\n            (isTurbosContract(trade_contract_type) || isVanillaContract(trade_contract_type)\n                ? filterByContractType(\n                      p.contract_info,\n                      isTurbosContract(trade_contract_type) ? TURBOS.SHORT : VANILLALONG.CALL\n                  ) ||\n                  filterByContractType(\n                      p.contract_info,\n                      isTurbosContract(trade_contract_type) ? TURBOS.LONG : VANILLALONG.PUT\n                  )\n                : filterByContractType(p.contract_info, trade_contract_type))\n    );\n\n    return (\n        <TogglePositionsMobile\n            active_positions_count={active_positions_count}\n            currency={positions_currency}\n            error={positions_error}\n            filtered_positions={filtered_positions}\n            is_empty={!filtered_positions.length}\n            onClickSell={onPositionsSell}\n            onClickCancel={onPositionsCancel}\n        />\n    );\n});\n\nexport default PopulateHeader;\n","import React from 'react';\nimport { StoreProvider } from '@deriv/stores';\nimport { TraderStoreProvider } from 'Stores/useTraderStores';\nimport type { TCoreStores } from '@deriv/stores/types';\n\nexport const TraderProviders = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    return (\n        <StoreProvider store={store}>\n            <TraderStoreProvider>{children}</TraderStoreProvider>\n        </StoreProvider>\n    );\n};\n\nexport default TraderProviders;\n","import React from 'react';\nimport { when } from 'mobx';\nimport { MobileWrapper } from '@deriv/components';\nimport { isMobile, routes, WS } from '@deriv/shared';\nimport PopulateHeader from './populate-header';\nimport { observer, useStore } from '@deriv/stores';\nimport TraderProviders from '../../trader-providers';\nimport { TCoreStores } from '@deriv/stores/types';\n\ntype TradeHeaderExtensionsProps = {\n    store: TCoreStores;\n};\n\nconst TradeHeaderExtensions = observer(({ store }: TradeHeaderExtensionsProps) => {\n    const { client, modules, ui, portfolio } = useStore();\n    const { populateHeaderExtensions } = ui;\n    const { onMount: onMountPositions } = portfolio;\n    const { is_logged_in, is_populating_account_list } = client;\n    const { onMountCommon: onMountCashier, setAccountSwitchListener } = modules.cashier.general_store;\n\n    const show_positions_toggle = location.pathname !== routes.mt5;\n    const show_component = is_logged_in && show_positions_toggle;\n\n    const populateHeaderfunction = React.useCallback(() => {\n        const header_items = show_component ? (\n            <MobileWrapper>\n                <TraderProviders store={store}>\n                    <PopulateHeader />\n                </TraderProviders>\n            </MobileWrapper>\n        ) : null;\n\n        populateHeaderExtensions(header_items);\n    }, [populateHeaderExtensions, store, show_positions_toggle, is_populating_account_list]);\n\n    React.useEffect(() => {\n        const waitForLogin = async () => {\n            if (isMobile() && show_positions_toggle) {\n                await when(() => !is_populating_account_list); // Waits for login to complete\n                if (is_logged_in) {\n                    await WS.wait('authorize');\n                    onMountPositions();\n                    onMountCashier(true);\n                    setAccountSwitchListener();\n                }\n            }\n\n            populateHeaderfunction();\n        };\n\n        waitForLogin().catch(() => {\n            // Do nothing: This is to remove the bug reported by SonarCloud about not having a catch statement here.\n        });\n\n        return () => populateHeaderExtensions(null);\n    }, [\n        onMountCashier,\n        onMountPositions,\n        populateHeaderfunction,\n        populateHeaderExtensions,\n        setAccountSwitchListener,\n        store,\n        show_positions_toggle,\n    ]);\n\n    React.useEffect(() => {\n        populateHeaderfunction();\n    });\n\n    return null;\n});\n\nexport default TradeHeaderExtensions;\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { routes } from '@deriv/shared';\nimport TogglePositions from '../Components/Elements/TogglePositions/toggle-positions';\nimport { observer, useStore } from '@deriv/stores';\n\nconst TradeFooterExtensions = observer((props: RouteComponentProps) => {\n    const { location } = props;\n    const { client, portfolio, ui } = useStore();\n    const { is_logged_in } = client;\n    const { active_positions_count } = portfolio;\n    const { is_positions_drawer_on, populateFooterExtensions, togglePositionsDrawer } = ui;\n    React.useEffect(() => populateFooter());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    React.useEffect(() => () => populateFooterExtensions([]), []);\n\n    const TogglePositionsIcon = () => (\n        <TogglePositions\n            is_open={is_positions_drawer_on}\n            togglePositions={togglePositionsDrawer}\n            positions_count={active_positions_count}\n        />\n    );\n\n    const populateFooter = () => {\n        const show_positions_toggle = location.pathname === routes.trade;\n\n        if (is_logged_in && show_positions_toggle) {\n            populateFooterExtensions([\n                {\n                    position: 'left',\n                    Component: TogglePositionsIcon,\n                },\n            ]);\n        } else {\n            populateFooterExtensions([]);\n        }\n    };\n\n    return null;\n});\n\nexport default withRouter(TradeFooterExtensions);\n","import React from 'react';\nimport Loadable from 'react-loadable';\nimport { UILoader } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport TraderProviders from '../../trader-providers';\nimport type { TCoreStores } from '@deriv/stores/types';\n\ntype TTradeSettingsExtensionsProps = {\n    store: TCoreStores;\n};\n\nconst ChartSettingContainer = Loadable({\n    loader: () =>\n        import(\n            /* webpackChunkName: \"settings-chart\", webpackPrefetch: true */ 'App/Containers/SettingsModal/settings-chart.jsx'\n        ),\n    loading: () => <UILoader />,\n});\n\n// const PurchaseSettings = Loadable({\n//     loader: () =>\n//     import(/* webpackChunkName: \"settings-chart\", webpackPrefetch: true */'App/Containers/SettingsModal/settings-purchase.jsx'),\n//     loading: UILoader,\n// });\n\nconst renderItemValue = <T extends object>(props: T, store: TCoreStores) => (\n    <TraderProviders store={store}>\n        <ChartSettingContainer {...props} />\n    </TraderProviders>\n);\n\nconst TradeSettingsExtensions = observer(({ store }: TTradeSettingsExtensionsProps) => {\n    const { ui } = useStore();\n    const { populateSettingsExtensions } = ui;\n    const populateSettings = () => {\n        const menu_items: Parameters<typeof populateSettingsExtensions>[0] = [\n            {\n                icon: 'IcChart',\n                label: localize('Charts'),\n                value: props => renderItemValue(props, store),\n                // uncomment below lines to bring back purchase lock and purchase confirmation}\n                // }, {\n                //     icon : IconPurchase,\n                //     label: localize('Purchase'),\n                //     value: PurchaseSettings,\n            },\n        ];\n        populateSettingsExtensions(menu_items);\n    };\n\n    React.useEffect(() => {\n        return () => populateSettingsExtensions(null);\n    }, [populateSettingsExtensions]);\n\n    React.useEffect(() => populateSettings());\n\n    return null;\n});\n\nexport default TradeSettingsExtensions;\n","import { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\n\nexport const onChangeSymbolAsync = async (symbol: string): Promise<void> => {\n    await ContractType.buildContractTypesConfig(symbol);\n};\n","import { localize } from '@deriv/translations';\nimport { isHourValid, isMinuteValid, isTimeValid, toMoment } from '@deriv/shared';\nimport { isSessionAvailable } from '../Helpers/start-date';\nimport { TTradeStore } from 'Types';\nimport type { TRuleOptions } from 'Utils/Validator/validator';\n\ntype TValidationRules = {\n    [key: string]: {\n        rules?: Array<string | TRuleOptions>[];\n        trigger?: string;\n    };\n};\n\nconst tradeSpecificBarrierCheck = (is_vanilla: boolean, input: number) => is_vanilla || input !== 0;\n\nexport const getValidationRules = (): TValidationRules => ({\n    amount: {\n        rules: [\n            ['req', { message: localize('Amount is a required field.') }],\n            ['number', { min: 0, type: 'float' }],\n        ],\n    },\n    barrier_1: {\n        rules: [\n            [\n                'req',\n                {\n                    condition: store => !!store.barrier_count && store.form_components.indexOf('barrier') > -1,\n                    message: localize('Barrier is a required field.'),\n                },\n            ],\n            ['barrier', { condition: (store: TTradeStore) => !!store.barrier_count }],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['barrier_1'], options, store, inputs) =>\n                        Number(store?.barrier_count) > 1 ? +value > Number(inputs?.barrier_2) : true,\n                    message: localize('Higher barrier must be higher than lower barrier.'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['barrier_1'], options, store, inputs) =>\n                        /^[+-]/.test(inputs?.barrier_1 ?? '')\n                            ? tradeSpecificBarrierCheck(!!store?.is_vanilla, Number(inputs?.barrier_1))\n                            : true,\n                    message: localize('Barrier cannot be zero.'),\n                },\n            ],\n        ],\n        trigger: 'barrier_2',\n    },\n    barrier_2: {\n        rules: [\n            [\n                'req',\n                {\n                    condition: store => store.barrier_count > 1 && store.form_components.indexOf('barrier') > -1,\n                    message: localize('Barrier is a required field.'),\n                },\n            ],\n            ['barrier', { condition: (store: TTradeStore) => !!store.barrier_count }],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['barrier_2'], options, store, inputs) =>\n                        (/^[+-]/g.test(inputs?.barrier_1 ?? '') && /^[+-]/g.test(value)) ||\n                        (/^(?![+-])/g.test(inputs?.barrier_1 ?? '') && /^(?![+-])/g.test(value)),\n                    message: localize('Both barriers should be relative or absolute'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['barrier_2'], options, store, inputs) =>\n                        Number(inputs?.barrier_1) > +value,\n                    message: localize('Lower barrier must be lower than higher barrier.'),\n                },\n            ],\n        ],\n        trigger: 'barrier_1',\n    },\n    duration: {\n        rules: [['req', { message: localize('Duration is a required field.') }]],\n    },\n    start_date: {\n        trigger: 'start_time',\n    },\n    expiry_date: {\n        trigger: 'expiry_time',\n    },\n    start_time: {\n        rules: [\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['start_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isTimeValid(value ?? ''),\n                    message: localize('Please enter the start time in the format \"HH:MM\".'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['start_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isHourValid(value ?? ''),\n                    message: localize('Hour must be between 0 and 23.'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['start_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isMinuteValid(value ?? ''),\n                    message: localize('Minute must be between 0 and 59.'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['start_time'], options, store) => {\n                        if (store?.contract_start_type === 'spot') return true;\n                        if (!isTimeValid(value ?? '')) return false;\n                        const start_moment = toMoment(store?.start_date);\n                        const start_moment_clone = start_moment.clone();\n                        const [h, m] = value?.split(':') ?? [];\n                        return isSessionAvailable(\n                            store?.sessions,\n                            start_moment_clone.hour(+h).minute(+m),\n                            start_moment\n                        );\n                    },\n                    message: localize('Start time cannot be in the past.'),\n                },\n            ],\n        ],\n    },\n    expiry_time: {\n        rules: [\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['expiry_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isTimeValid(value ?? ''),\n                    message: localize('Please enter the start time in the format \"HH:MM\".'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['expiry_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isHourValid(value ?? ''),\n                    message: localize('Hour must be between 0 and 23.'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['expiry_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isMinuteValid(value ?? ''),\n                    message: localize('Minute must be between 0 and 59.'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['expiry_time'], options, store) => {\n                        if (store?.contract_start_type === 'spot') return true;\n                        if (!isTimeValid(value ?? '')) return false;\n                        const start_moment = toMoment(store?.start_date);\n                        const start_moment_clone = start_moment.clone();\n                        const [h, m] = value?.split(':') ?? [];\n                        return isSessionAvailable(\n                            store?.sessions,\n                            start_moment_clone.hour(+h).minute(+m),\n                            start_moment\n                        );\n                    },\n                    message: localize('Expiry time cannot be in the past.'),\n                },\n            ],\n        ],\n    },\n    ...getMultiplierValidationRules(),\n});\n\nexport const getMultiplierValidationRules = () => ({\n    stop_loss: {\n        rules: [\n            [\n                'req',\n                {\n                    condition: (store: TTradeStore) => store.has_stop_loss && !store.stop_loss,\n                    message: localize('Please enter a stop loss amount.'),\n                },\n            ],\n        ],\n    },\n    take_profit: {\n        rules: [\n            [\n                'req',\n                {\n                    condition: (store: TTradeStore) => store.has_take_profit && !store.take_profit,\n                    message: localize('Please enter a take profit amount.'),\n                },\n            ],\n        ],\n    },\n});\n","import { Buy, BuyContractResponse, BuyContractRequest } from '@deriv/api-types';\nimport { WS } from '@deriv/shared';\n\ntype TResponse = BuyContractResponse & {\n    echo_req: Buy;\n    error?: {\n        code: string;\n        message: string;\n        details?: BuyContractResponse['buy'] & { field: string };\n    };\n};\n\nexport const processPurchase = async (\n    proposal_id: string,\n    price: string | number,\n    passthrough?: BuyContractRequest['passthrough']\n): Promise<TResponse> =>\n    WS.buy({\n        proposal_id,\n        price,\n        ...(passthrough && { passthrough }),\n    });\n","/**\n * @param {Object} previous_ticks_history_stats - an object of type: { ticks_stayed_in: number[], last_tick_epoch: number }\n *                                                with ticks_stayed_in starting with the latest counter value;\n * @param {number[]} new_ticks_history_stats - an array of ticks counters containing 100 last values at first, and then only 1 latest updated counter value;\n * @param {number} last_tick_epoch - an epoch of the latest tick counted by the latest (last) ticks counter in new_ticks_stayed_in array;\n * @returns an object of the same type as previous_ticks_history_stats.\n */\n\nimport { TTradeStore } from 'Types';\n\ntype TGetUpdatedTicksHistoryStats = {\n    previous_ticks_history_stats: TTradeStore['ticks_history_stats'];\n    new_ticks_history_stats?: TTradeStore['ticks_history_stats']['ticks_stayed_in'];\n    last_tick_epoch: TTradeStore['ticks_history_stats']['last_tick_epoch'];\n};\n\nexport const getUpdatedTicksHistoryStats = ({\n    previous_ticks_history_stats = {},\n    new_ticks_history_stats = [],\n    last_tick_epoch,\n}: TGetUpdatedTicksHistoryStats) => {\n    // we anticipate that the latest counter value will be the last one in the received new_ticks_stayed_in array:\n    let ticks_stayed_in = [];\n    const previous_history = previous_ticks_history_stats.ticks_stayed_in || [];\n    const previous_epoch = previous_ticks_history_stats.last_tick_epoch ?? 0;\n    if (!new_ticks_history_stats.length || !last_tick_epoch) return previous_ticks_history_stats;\n    if (new_ticks_history_stats.length > 1) {\n        ticks_stayed_in = [...new_ticks_history_stats].reverse();\n    } else if (new_ticks_history_stats[0] <= previous_history[0] && last_tick_epoch > previous_epoch) {\n        ticks_stayed_in = [new_ticks_history_stats[0], ...previous_history.slice(0, previous_history.length - 1)];\n    } else if (last_tick_epoch === previous_epoch) {\n        ticks_stayed_in = previous_history;\n    } else {\n        ticks_stayed_in = [new_ticks_history_stats[0], ...previous_history.slice(1)];\n    }\n    return { ticks_stayed_in, last_tick_epoch };\n};\n","import { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { TTradeStore } from 'Types';\n\nexport const onChangeContractTypeList = ({ contract_types_list, contract_type }: TTradeStore) => {\n    return ContractType.getContractType(contract_types_list, contract_type);\n};\n\nexport const onChangeContractType = (store: TTradeStore) => {\n    return ContractType.getContractValues(store);\n};\n","import { getExpiryType, getDurationMinMaxValues } from '@deriv/shared';\nimport { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { TTradeStore } from 'Types';\n\ntype TOnChangeExpiry = (store: TTradeStore) => {\n    contract_expiry_type: string;\n    barrier_count?: number;\n    barrier_1?: string;\n    barrier_2?: string;\n};\ntype TAssertDurationParams = Partial<\n    Pick<TTradeStore, 'contract_expiry_type' | 'duration' | 'duration_min_max' | 'duration_unit'>\n>;\n\nexport const onChangeExpiry: TOnChangeExpiry = store => {\n    const contract_expiry_type = getExpiryType(store);\n\n    // TODO: there will be no barrier available if contract is only daily but client chooses intraday endtime. we should find a way to handle this.\n    const obj_barriers =\n        store.contract_expiry_type !== contract_expiry_type && // barrier value changes for tick/intraday/daily\n        ContractType.getBarriers(store.contract_type, contract_expiry_type);\n\n    return {\n        contract_expiry_type,\n        ...obj_barriers,\n    };\n};\n\nexport const onChangeContractType = (store: TTradeStore) => {\n    const contract_expiry_type = getExpiryType(store);\n\n    const { duration, duration_min_max, duration_unit } = store;\n\n    const obj_duration = assertDuration({ contract_expiry_type, duration, duration_min_max, duration_unit });\n\n    return {\n        ...obj_duration,\n    };\n};\n\nconst assertDuration = ({\n    contract_expiry_type,\n    duration,\n    duration_min_max,\n    duration_unit,\n}: TAssertDurationParams = {}) => {\n    const [min, max] = getDurationMinMaxValues(duration_min_max ?? {}, contract_expiry_type ?? '', duration_unit ?? '');\n\n    if (duration && min && duration < min) {\n        return { duration: min };\n    }\n    if (duration && max && duration > max) {\n        return { duration: max };\n    }\n    return {};\n};\n","import { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { TTradeStore } from 'Types';\n\nexport const onChangeStartDate = async (store: TTradeStore) => {\n    const { contract_type, duration_unit, start_date } = store;\n    const server_time = store.root_store?.common.server_time;\n    let { start_time, expiry_type } = store;\n\n    start_time = start_time || server_time?.clone().add(6, 'minute').format('HH:mm'); // when there is not a default value for start_time, it should be set more than 5 min after server_time\n\n    const obj_contract_start_type = ContractType.getStartType(start_date);\n    const contract_start_type = obj_contract_start_type.contract_start_type;\n    const obj_sessions = ContractType.getSessions(contract_type, start_date);\n    const sessions = obj_sessions.sessions;\n    const obj_start_time = ContractType.getStartTime(sessions, start_date, start_time);\n\n    const obj_duration_units_list = ContractType.getDurationUnitsList(contract_type, contract_start_type);\n    const duration_units_list = obj_duration_units_list.duration_units_list;\n    const obj_duration_unit = ContractType.getDurationUnit(duration_unit, contract_type, contract_start_type);\n\n    const obj_expiry_type = ContractType.getExpiryType(duration_units_list, expiry_type);\n    expiry_type = obj_expiry_type.expiry_type;\n    const obj_expiry_date = ContractType.getExpiryDate(duration_units_list, store.expiry_date, expiry_type, start_date);\n\n    const obj_duration_min_max = ContractType.getDurationMinMax(contract_type, contract_start_type);\n\n    return {\n        ...obj_contract_start_type,\n        ...obj_duration_units_list,\n        ...obj_duration_min_max,\n        ...obj_duration_unit,\n        ...obj_sessions,\n        ...obj_start_time,\n        ...obj_expiry_date,\n        ...obj_expiry_type,\n    };\n};\n\nexport const onChangeExpiry = async (store: TTradeStore) => {\n    const { start_time, expiry_date, expiry_type, expiry_time, start_date, symbol, sessions } = store;\n    const trading_times = await ContractType.getTradingTimes(expiry_date, symbol);\n    const obj_market_open_times = { market_open_times: trading_times.open };\n    const obj_market_close_times = { market_close_times: trading_times.close };\n\n    const market_close_times = obj_market_close_times.market_close_times;\n    const obj_expiry_time = ContractType.getExpiryTime(\n        expiry_date,\n        expiry_time,\n        expiry_type,\n        market_close_times,\n        sessions,\n        start_date,\n        start_time\n    );\n\n    return {\n        ...obj_expiry_time,\n        ...obj_market_open_times,\n        ...obj_market_close_times,\n    };\n};\n","import { ContractType as ContractTypeHelper } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport * as ContractType from '../Actions/contract-type';\nimport * as Duration from '../Actions/duration';\nimport * as StartDate from '../Actions/start-date';\nimport { TTradeStore } from 'Types';\n\n// remove local TGetSnapshot type and assertion after TS migration for trader package is complete\ntype TGetSnapshot = (properties?: string[]) => TTradeStore;\n\nconst processInSequence = async (\n    store: TTradeStore,\n    functions: ReturnType<typeof getMethodsList> | ReturnType<typeof getExpiryMethodsList>\n) => {\n    const snapshot = (store.getSnapshot as TGetSnapshot)();\n    // To make sure that every function is invoked and affects the snapshot respectively, we have to use for instead of forEach\n    for (let i = 0; i < functions.length; i++) {\n        // Shallow copy with Object.assign is good enough to extend the snapshot with new state\n        // we don't need deep extension here, since each function in functions array composes a property of the store completely\n        Object.assign(snapshot, await functions[i](snapshot)); // eslint-disable-line no-await-in-loop\n    }\n    store.updateStore({\n        ...snapshot,\n    });\n};\n\nexport const processTradeParams = async (store: TTradeStore, new_state: Partial<TTradeStore>) => {\n    const functions = getMethodsList(store, new_state);\n    await processInSequence(store, functions);\n\n    const duration_functions = getExpiryMethodsList();\n    await processInSequence(store, duration_functions);\n\n    store.updateStore({\n        is_trade_enabled: true,\n    });\n};\n\nconst getMethodsList = (\n    store: Parameters<typeof processTradeParams>[0],\n    new_state: Parameters<typeof processTradeParams>[1]\n) => {\n    const filtered_keys = Object.keys(new_state).filter(key => /\\b(symbol|contract_type|is_equal)\\b/.test(key));\n    return [\n        ContractTypeHelper.getContractCategories,\n        ContractType.onChangeContractTypeList,\n        ...(filtered_keys.length > 0 || !store.contract_type // symbol/contract_type changed or contract_type not set yet\n            ? [ContractType.onChangeContractType]\n            : []),\n        StartDate.onChangeStartDate,\n        Duration.onChangeExpiry, // it should be always after StartDate.onChangeStartDate\n        ...(filtered_keys.length || !store.contract_type // symbol/contract_type changed or contract_type not set yet\n            ? [Duration.onChangeContractType]\n            : []),\n    ];\n};\n\nconst getExpiryMethodsList = () => [StartDate.onChangeExpiry];\n","import { BARRIER_COLORS } from '@deriv/shared';\n\nexport const getHoveredColor = (type: string): string => {\n    switch (type) {\n        case 'TURBOSSHORT':\n            return BARRIER_COLORS.RED;\n        case 'TURBOSLONG':\n            return BARRIER_COLORS.GREEN;\n        default:\n            return BARRIER_COLORS.GRAY;\n    }\n};\n","import { Errors, getPreBuildDVRs, template } from '@deriv/shared';\n\nimport { getValidationRules } from 'Stores/Modules/Trading/Constants/validation-rules';\nimport { TTradeStore } from 'Types';\n\ntype TOptions = {\n    [key: string]: unknown;\n    decimals?: string | number;\n    is_required?: boolean;\n    max?: number | string | null;\n    min?: number | string | null;\n    name1?: string;\n    name2?: string;\n    regex?: RegExp;\n    type?: string;\n};\n\ntype TInitPreBuildDVRs = ReturnType<typeof getValidationRules>;\n\nexport type TRuleOptions = {\n    func?: <T extends string>(\n        value: T,\n        options?: TOptions,\n        store?: TTradeStore,\n        inputs?: Pick<TTradeStore, keyof TTradeStore>\n    ) => boolean | { is_ok: boolean; message: string };\n    condition?: (store: TTradeStore) => boolean;\n    message?: string;\n} & TOptions;\n\ntype TRule = string | Array<string | TRuleOptions>;\n\ntype TValidationResult = {\n    is_ok: boolean;\n    message: string;\n};\n\nclass Validator {\n    input: Pick<TTradeStore, keyof TTradeStore>;\n    rules: Partial<TInitPreBuildDVRs>;\n    store: TTradeStore;\n    errors: Errors;\n    error_count: number;\n\n    constructor(input: Pick<TTradeStore, keyof TTradeStore>, rules: Partial<TInitPreBuildDVRs>, store: TTradeStore) {\n        this.input = input;\n        this.rules = rules;\n        this.store = store;\n        this.errors = new Errors();\n\n        this.error_count = 0;\n    }\n\n    /**\n     * Add failure and error message for given rule\n     *\n     * @param {string} attribute\n     * @param {object} rule\n     */\n    addFailure(attribute: string, rule: { name: string; options: TRuleOptions }, error_message?: string) {\n        let message =\n            error_message ||\n            rule.options.message ||\n            (getPreBuildDVRs() as unknown as { [key: string]: { message: () => string } })[rule.name].message();\n        if (rule.name === 'length') {\n            message = template(message, [\n                rule.options.min === rule.options.max\n                    ? rule.options.min?.toString() || ''\n                    : `${rule.options.min}-${rule.options.max}`,\n            ]);\n        } else if (rule.name === 'min') {\n            message = template(message, [rule.options.min?.toString() || '']);\n        } else if (rule.name === 'not_equal') {\n            message = template(message, [rule.options.name1 || '', rule.options.name2 || '']);\n        }\n        this.errors.add(attribute, message);\n        this.error_count++;\n    }\n\n    /**\n     * Runs validator\n     *\n     * @return {boolean} Whether it passes; true = passes, false = fails\n     */\n    check() {\n        Object.keys(this.input).forEach(attribute => {\n            if (!Object.prototype.hasOwnProperty.call(this.rules, attribute)) {\n                return;\n            }\n\n            (this.rules as unknown as { [key: string]: Array<TRule> })[attribute].forEach((rule: TRule) => {\n                const ruleObject = Validator.getRuleObject(rule);\n\n                if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\n                    return;\n                }\n\n                if (ruleObject.options.condition && !ruleObject.options.condition(this.store)) {\n                    return;\n                }\n\n                if (this.input[attribute as keyof TTradeStore] === '' && ruleObject.name !== 'req') {\n                    return;\n                }\n\n                let is_valid, error_message;\n                if (ruleObject.name === 'number') {\n                    const { is_ok, message } = ruleObject.validator(\n                        this.input[attribute as keyof TTradeStore] as string,\n                        ruleObject.options,\n                        this.store,\n                        this.input\n                    ) as TValidationResult;\n                    is_valid = is_ok;\n                    error_message = message;\n                } else {\n                    is_valid = ruleObject.validator(\n                        this.input[attribute as keyof TTradeStore] as string,\n                        ruleObject.options,\n                        this.store,\n                        this.input\n                    );\n                }\n\n                if (!is_valid) {\n                    this.addFailure(attribute, ruleObject, error_message);\n                }\n            });\n        });\n        return !this.error_count;\n    }\n\n    /**\n     * Determine if validation passes\n     *\n     * @return {boolean}\n     */\n    isPassed() {\n        return this.check();\n    }\n\n    /**\n     * Converts the rule array to an object\n     *\n     * @param {array} rule\n     * @return {object}\n     */\n    static getRuleObject(rule: TRule) {\n        const is_rule_string = typeof rule === 'string';\n        const rule_object_name = (is_rule_string ? rule : rule[0]) as string;\n        const rule_object_options = (is_rule_string ? {} : rule[1] || {}) as TRuleOptions;\n        return {\n            name: rule_object_name,\n            options: rule_object_options,\n            validator:\n                rule_object_name === 'custom'\n                    ? rule_object_options.func\n                    : (\n                          getPreBuildDVRs() as unknown as {\n                              [key: string]: {\n                                  func: TRuleOptions['func'];\n                              };\n                          }\n                      )[rule_object_name].func,\n        };\n    }\n}\n\nexport default Validator;\n","import Validator from './validator';\n\nexport default Validator;\n","import { action, intercept, observable, reaction, toJS, when, makeObservable } from 'mobx';\nimport { isProduction, isEmptyObject } from '@deriv/shared';\nimport { TCoreStores } from '@deriv/stores/types';\nimport Validator from 'Utils/Validator';\nimport { getValidationRules } from './Modules/Trading/Constants/validation-rules';\n\ntype TValidationRules = ReturnType<typeof getValidationRules> | Record<string, never>;\n\ntype TBaseStoreOptions = {\n    root_store: TCoreStores;\n    local_storage_properties?: string[];\n    session_storage_properties?: string[];\n    validation_rules?: TValidationRules;\n    store_name?: string;\n};\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n    clientInitDisposer: null | (() => void) = null;\n    client_init_listener: null | (() => Promise<void>) = null;\n    logoutDisposer: null | (() => void) = null;\n    logout_listener: null | (() => Promise<void>) = null;\n    local_storage_properties: string[];\n    networkStatusChangeDisposer: null | (() => void) = null;\n    network_status_change_listener: null | ((is_online: boolean) => void) = null;\n    partial_fetch_time = 0;\n    preSwitchAccountDisposer: null | (() => void) = null;\n    pre_switch_account_listener: null | (() => Promise<void>) = null;\n    realAccountSignupEndedDisposer: null | (() => void) = null;\n    real_account_signup_ended_listener: null | (() => Promise<void>) = null;\n    root_store: TCoreStores;\n    session_storage_properties: string[];\n    store_name = '';\n    switchAccountDisposer: null | (() => void) = null;\n    switch_account_listener: null | (() => Promise<void>) = null;\n    themeChangeDisposer: null | (() => void) = null;\n    theme_change_listener: null | ((is_dark_mode_on: boolean) => void) = null;\n    validation_errors: { [key: string]: string[] } = {};\n    validation_rules: TValidationRules | Record<string, never> = {};\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {} as TBaseStoreOptions) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage = local_storage_properties?.length || session_storage_properties?.length;\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties: string[]): object {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties?.length) {\n            snapshot = properties.reduce(\n                (result, p) => Object.assign(result, { [p]: snapshot[p as keyof this] }),\n                {} as this\n            );\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i as keyof this]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i as keyof this]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties: string[] = [], storage = Symbol('')) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(String(localStorage.getItem(this.store_name)));\n        const session_storage_snapshot = JSON.parse(String(sessionStorage.getItem(this.store_name)));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k as keyof this] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName: string, messages: string[]) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules: TValidationRules = {}): void {\n        Object.keys(rules).forEach(key => {\n            this.addRule<keyof TValidationRules>(key as keyof TValidationRules, rules[key as keyof TValidationRules]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule<T extends keyof TValidationRules>(property: T, rules: TValidationRules[T]) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property as unknown as keyof this, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty<T extends BaseStore>(property: string, value: T[keyof T]) {\n        const validation_rules_for_property = this.validation_rules[property] ?? {};\n        const trigger = 'trigger' in validation_rules_for_property ? validation_rules_for_property.trigger : undefined;\n        const inputs = { [property]: value ?? this[property as keyof this] };\n        const validation_rules = {\n            [property]: 'rules' in validation_rules_for_property ? validation_rules_for_property.rules : [],\n        };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            const validation_rules_for_trigger = this.validation_rules[trigger as keyof TValidationRules];\n            inputs[trigger] = this[trigger as keyof this];\n            validation_rules[trigger] =\n                'rules' in validation_rules_for_trigger ? validation_rules_for_trigger.rules : [];\n        }\n        // @ts-expect-error TODO: remove this comment when Validator migrated to TS is merged to master\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p as keyof this]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener: null | (() => Promise<void>)): void {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => !!this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener?.();\n                        if (result?.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener: null | (() => Promise<void>)): void {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => !!this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result?.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener: null | (() => Promise<void>)): void {\n        this.logoutDisposer = when(\n            () => !!this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener?.();\n                    if (result?.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener: null | (() => Promise<void>)): void {\n        this.clientInitDisposer = when(\n            () => !!this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener?.();\n                    if (result?.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener: null | ((is_online: boolean) => void)): void {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener?.(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener: null | ((is_dark_mode_on: boolean) => void)): void {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener?.(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener: null | (() => Promise<void>)): void {\n        this.realAccountSignupEndedDisposer = when(\n            () => !!this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener?.();\n                    if (result?.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid: string, ...reactions: VoidFunction[]): void {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = 0;\n        }\n    }\n}\n","import type { ChartBarrierStore } from '../chart-barrier-store';\n\nexport type TBarrier = ChartBarrierStore & { key?: string };\n\nexport const barriersToString = (\n    is_relative: boolean,\n    ...barriers_list: Array<string | number | undefined>\n): Array<string | undefined> =>\n    barriers_list\n        .filter(barrier => barrier !== undefined && barrier !== null)\n        .map(barrier => `${is_relative && !/^[+-]/.test(barrier?.toString() ?? '') ? '+' : ''}${barrier}`);\n\nexport const removeBarrier = (barriers: TBarrier[], key: string) => {\n    const index = barriers.findIndex(b => b.key === key);\n    if (index > -1) {\n        barriers.splice(index, 1);\n    }\n};\n","import { action, computed, observable, makeObservable } from 'mobx';\nimport { BARRIER_COLORS, BARRIER_LINE_STYLES, CONTRACT_SHADES, DEFAULT_SHADES } from '@deriv/shared';\nimport { barriersToString } from './Helpers/barriers';\n\ntype TOnChartBarrierChange = null | ((barrier_1: string, barrier_2?: string) => void);\ntype TOnChangeParams = { high: string | number; low?: string | number };\ntype TChartBarrierStoreOptions =\n    | {\n          color: string;\n          line_style?: string;\n          not_draggable?: boolean;\n      }\n    | Record<string, never>;\n\nexport class ChartBarrierStore {\n    color: string;\n    lineStyle: string;\n    shade?: string;\n    shadeColor?: string;\n    high?: string | number;\n    low?: string | number;\n    onChange: (barriers: TOnChangeParams) => void;\n    relative: boolean;\n    draggable: boolean;\n    hidePriceLines: boolean;\n    hideBarrierLine?: boolean;\n    hideOffscreenLine?: boolean;\n    title?: string;\n    onChartBarrierChange: TOnChartBarrierChange | null;\n\n    constructor(\n        high_barrier?: string | number,\n        low_barrier?: string | number,\n        onChartBarrierChange: TOnChartBarrierChange = null,\n        { color, line_style, not_draggable }: TChartBarrierStoreOptions = {}\n    ) {\n        makeObservable(this, {\n            color: observable,\n            lineStyle: observable,\n            shade: observable,\n            shadeColor: observable,\n            high: observable,\n            low: observable,\n            relative: observable,\n            draggable: observable,\n            hidePriceLines: observable,\n            hideBarrierLine: observable,\n            hideOffscreenLine: observable,\n            title: observable,\n            updateBarriers: action.bound,\n            updateBarrierShade: action.bound,\n            onBarrierChange: action.bound,\n            updateBarrierColor: action.bound,\n            barrier_count: computed,\n            default_shade: computed,\n        });\n\n        this.color = color;\n        this.lineStyle = line_style || BARRIER_LINE_STYLES.SOLID;\n        this.onChange = this.onBarrierChange;\n\n        // trade_store's action to process new barriers on dragged\n        this.onChartBarrierChange =\n            typeof onChartBarrierChange === 'function' ? onChartBarrierChange.bind(this) : () => undefined;\n\n        this.high = high_barrier || 0; // 0 to follow the price\n        if (low_barrier) {\n            this.low = low_barrier;\n        }\n\n        this.shade = this.default_shade;\n\n        const has_barrier = !!high_barrier;\n        this.relative = !has_barrier || /^[+-]/.test(high_barrier.toString());\n        this.draggable = !not_draggable && has_barrier;\n        this.hidePriceLines = !has_barrier;\n    }\n\n    updateBarriers(high: string | number, low?: string | number, isFromChart = false) {\n        if (!isFromChart) {\n            this.relative = /^[+-]/.test(high.toString());\n        }\n        this.high = high || undefined;\n        this.low = low || undefined;\n    }\n\n    updateBarrierShade(should_display: boolean, contract_type: string) {\n        this.shade =\n            (should_display && CONTRACT_SHADES[contract_type as keyof typeof CONTRACT_SHADES]) || this.default_shade;\n    }\n\n    onBarrierChange({ high, low }: TOnChangeParams) {\n        this.updateBarriers(high, low, true);\n        this.onChartBarrierChange?.(...(barriersToString(this.relative, high, low) as [string, string | undefined]));\n    }\n\n    updateBarrierColor(is_dark_mode: boolean) {\n        this.color = is_dark_mode ? BARRIER_COLORS.DARK_GRAY : BARRIER_COLORS.GRAY;\n    }\n\n    get barrier_count(): number {\n        return +(typeof this.high !== 'undefined') + +(typeof this.low !== 'undefined');\n    }\n\n    get default_shade() {\n        return DEFAULT_SHADES[this.barrier_count as keyof typeof DEFAULT_SHADES];\n    }\n}\n","import { isMultiplierContract, BARRIER_COLORS, BARRIER_LINE_STYLES } from '@deriv/shared';\nimport { ChartBarrierStore } from '../../SmartChart/chart-barrier-store';\nimport { removeBarrier } from '../../SmartChart/Helpers/barriers';\nimport { useStore } from '@deriv/stores';\nimport { getProposalInfo } from './proposal';\n\nconst isLimitOrderBarrierSupported = (contract_type: string, contract_info: ReturnType<typeof getProposalInfo>) =>\n    isMultiplierContract(contract_type) && contract_info.limit_order;\n\nexport const LIMIT_ORDER_TYPES = {\n    STOP_OUT: 'stop_out',\n    TAKE_PROFIT: 'take_profit',\n    STOP_LOSS: 'stop_loss',\n} as const;\n\ntype TBarrier = ChartBarrierStore & { key?: string };\n\ntype TSetLimitOrderBarriers = {\n    barriers: TBarrier[];\n    contract_type?: string;\n    contract_info?: ReturnType<typeof getProposalInfo>;\n    is_over: boolean;\n};\nexport const setLimitOrderBarriers = ({\n    barriers,\n    contract_type = '',\n    contract_info = {} as ReturnType<typeof getProposalInfo>,\n    is_over,\n}: TSetLimitOrderBarriers) => {\n    if (is_over && isLimitOrderBarrierSupported(contract_type, contract_info)) {\n        const limit_orders = Object.values(LIMIT_ORDER_TYPES);\n        const has_stop_loss =\n            contract_info.limit_order !== undefined &&\n            Object.keys(contract_info.limit_order).some(\n                k => k === LIMIT_ORDER_TYPES.STOP_LOSS && contract_info?.limit_order?.[k]?.value\n            );\n\n        limit_orders.forEach(key => {\n            const obj_limit_order = contract_info.limit_order?.[key];\n\n            if (!obj_limit_order || !obj_limit_order.value) {\n                removeBarrier(barriers, key);\n                return;\n            }\n\n            let barrier = barriers.find(b => b.key === key);\n\n            if (barrier) {\n                if (barrier.high === +obj_limit_order.value) {\n                    return;\n                }\n\n                barrier.onChange({\n                    high: obj_limit_order.value,\n                });\n            } else {\n                const obj_barrier = {\n                    key,\n                    title: `${obj_limit_order.display_name}`,\n                    color: key === LIMIT_ORDER_TYPES.TAKE_PROFIT ? BARRIER_COLORS.GREEN : BARRIER_COLORS.ORANGE,\n                    draggable: false,\n                    lineStyle:\n                        key === LIMIT_ORDER_TYPES.STOP_OUT ? BARRIER_LINE_STYLES.DOTTED : BARRIER_LINE_STYLES.SOLID,\n                    hidePriceLines: has_stop_loss && key === LIMIT_ORDER_TYPES.STOP_OUT,\n                    hideOffscreenLine: true,\n                    showOffscreenArrows: true,\n                    isSingleBarrier: true,\n                    opacityOnOverlap: key === LIMIT_ORDER_TYPES.STOP_OUT && 0.15,\n                };\n                barrier = new ChartBarrierStore(obj_limit_order.value);\n\n                Object.assign(barrier, obj_barrier);\n                barriers.push(barrier);\n            }\n        });\n    } else {\n        const limit_orders = Object.values(LIMIT_ORDER_TYPES);\n        limit_orders.forEach(l => removeBarrier(barriers, l));\n    }\n};\n\n/**\n * Get limit_order for contract_update API\n * @param {object} contract_update - contract_update input & checkbox values\n */\nexport const getLimitOrder = (\n    contract_update: Pick<\n        ReturnType<typeof useStore>['contract_trade']['contracts'][number],\n        | 'has_contract_update_stop_loss'\n        | 'has_contract_update_take_profit'\n        | 'contract_update_stop_loss'\n        | 'contract_update_take_profit'\n        | 'contract_info'\n    >\n) => {\n    const {\n        has_contract_update_stop_loss,\n        has_contract_update_take_profit,\n        contract_update_stop_loss,\n        contract_update_take_profit,\n        contract_info,\n    } = contract_update;\n\n    const limit_order: { take_profit?: number | null; stop_loss?: number | null } = {};\n\n    const new_take_profit = has_contract_update_take_profit ? +contract_update_take_profit : null;\n    const has_take_profit_changed =\n        Math.abs(contract_info.limit_order?.take_profit?.order_amount ?? 0) !== Math.abs(new_take_profit ?? 0);\n\n    if (has_take_profit_changed) {\n        // send positive take_profit to update or null cancel\n        limit_order.take_profit = new_take_profit;\n    }\n\n    const new_stop_loss = has_contract_update_stop_loss ? +contract_update_stop_loss : null;\n    const has_stop_loss_changed =\n        Math.abs(contract_info?.limit_order?.stop_loss?.order_amount ?? 0) !== Math.abs(new_stop_loss ?? 0);\n\n    if (has_stop_loss_changed) {\n        // send positive stop_loss to update or null to cancel\n        limit_order.stop_loss = new_stop_loss;\n    }\n\n    return limit_order;\n};\n","import type { TEvents } from '@deriv/analytics';\n\nexport type TPayload = {\n    data: Omit<\n        Partial<TEvents['ce_chart_types_form'] & TEvents['ce_market_types_form'] & TEvents['ce_indicators_types_form']>,\n        'action'\n    > & { action: string };\n    event_type: 'ce_chart_types_form' | 'ce_market_types_form' | 'ce_indicators_types_form';\n};\n\ntype TStateChangeOption = {\n    indicator_type_name?: string;\n    indicators_category_name?: string;\n    isClosed?: boolean;\n    is_favorite?: boolean;\n    is_info_open?: boolean;\n    is_open?: boolean;\n    chart_type_name?: string;\n    search_string?: string;\n    symbol?: string;\n    symbol_category?: string;\n    time_interval_name?: string;\n};\n\nexport const ACTION = {\n    ADD_ACTIVE: 'add_active',\n    ADD_TO_FAVORITES: 'add_to_favorites',\n    CHOOSE_CHART_TYPE: 'choose_chart_type',\n    CHOOSE_MARKET_TYPE: 'choose_market_type',\n    CHOOSE_TIME_INTERVAL: 'choose_time_interval',\n    CLEAN_ALL_ACTIVE: 'clean_all_active',\n    CLOSE: 'close',\n    DELETE_ACTIVE: 'delete_active',\n    DELETE_FROM_FAVORITES: 'delete_from_favorites',\n    EDIT_ACTIVE: 'edit_active',\n    INFO_OPEN: 'info_open',\n    INFO_CLOSE: 'info_close',\n    INFO_REDIRECT: 'info_redirect',\n    OPEN: 'open',\n    SEARCH: 'search',\n} as const;\n\nexport const STATE_TYPES = {\n    CHART_INTERVAL_CHANGE: 'CHART_INTERVAL_CHANGE',\n    CHART_MODE_TOGGLE: 'CHART_MODE_TOGGLE',\n    CHART_TYPE_CHANGE: 'CHART_TYPE_CHANGE',\n    FAVORITE_MARKETS_TOGGLE: 'FAVORITE_MARKETS_TOGGLE',\n    INDICATOR_ADDED: 'INDICATOR_ADDED',\n    INDICATOR_DELETED: 'INDICATOR_DELETED',\n    INDICATOR_INFO_TOGGLE: 'INDICATOR_INFO_TOGGLE',\n    INDICATOR_SEARCH: 'INDICATOR_SEARCH',\n    INDICATOR_SETTINGS_OPEN: 'INDICATOR_SETTINGS_OPEN',\n    INDICATORS_CLEAR_ALL: 'INDICATORS_CLEAR_ALL',\n    INDICATORS_MODAL_TOGGLE: 'INDICATORS_MODAL_TOGGLE',\n    INITIAL: 'INITIAL',\n    MARKET_INFO_REDIRECT: 'MARKET_INFO_REDIRECT',\n    MARKET_SEARCH: 'MARKET_SEARCH',\n    MARKET_STATE_CHANGE: 'MARKET_STATE_CHANGE',\n    MARKETS_LIST_TOGGLE: 'MARKETS_LIST_TOGGLE',\n    READY: 'READY',\n    SCROLL_TO_LEFT: 'SCROLL_TO_LEFT',\n    SYMBOL_CHANGE: 'SYMBOL_CHANGE',\n} as const;\n\nexport const SUBFORM_NAME = {\n    INDICATORS_INFO: 'indicators_info',\n    INDICATORS_TYPE: 'indicators_type',\n} as const;\n\nconst getChartTypeFormAnalyticsData = (state: keyof typeof STATE_TYPES, option: TStateChangeOption = {}) => {\n    const { chart_type_name = '', is_open, time_interval_name } = option;\n    const chart_event_type = 'ce_chart_types_form';\n    const payload: TPayload = {\n        data: {\n            action: '',\n            chart_type_name,\n            time_interval_name,\n        },\n        event_type: chart_event_type,\n    };\n    const open_close_action = is_open ? ACTION.OPEN : ACTION.CLOSE;\n    if (!chart_type_name) return {};\n    switch (state) {\n        case STATE_TYPES.CHART_INTERVAL_CHANGE:\n            payload.data.action = ACTION.CHOOSE_TIME_INTERVAL;\n            break;\n        case STATE_TYPES.CHART_MODE_TOGGLE:\n            payload.data.action = open_close_action;\n            break;\n        case STATE_TYPES.CHART_TYPE_CHANGE:\n            payload.data.action = ACTION.CHOOSE_CHART_TYPE;\n            break;\n        default:\n            return {};\n    }\n    return payload;\n};\n\nconst getIndicatorTypeFormAnalyticsData = (state: keyof typeof STATE_TYPES, option: TStateChangeOption = {}) => {\n    const { indicator_type_name = '', indicators_category_name = '', is_info_open, is_open, search_string } = option;\n    const indicators_event_type = 'ce_indicators_types_form';\n    const indicators_subform = is_info_open ? SUBFORM_NAME.INDICATORS_INFO : SUBFORM_NAME.INDICATORS_TYPE;\n    const info_open_close_action = is_info_open ? ACTION.INFO_OPEN : ACTION.INFO_CLOSE;\n    const open_close_action = is_open ? ACTION.OPEN : ACTION.CLOSE;\n    const payload = {\n        event_type: indicators_event_type,\n    } as TPayload;\n    if (\n        (state === STATE_TYPES.INDICATOR_SEARCH && !option.search_string) ||\n        ((state === STATE_TYPES.INDICATOR_ADDED ||\n            state === STATE_TYPES.INDICATOR_DELETED ||\n            state === STATE_TYPES.INDICATOR_INFO_TOGGLE ||\n            state === STATE_TYPES.INDICATOR_SETTINGS_OPEN) &&\n            !indicator_type_name)\n    ) {\n        return {};\n    }\n    switch (state) {\n        case STATE_TYPES.INDICATOR_ADDED:\n            payload.data = {\n                action: ACTION.ADD_ACTIVE,\n                indicator_type_name,\n                indicators_category_name,\n                subform_name: indicators_subform,\n            };\n            break;\n        case STATE_TYPES.INDICATOR_DELETED:\n            payload.data = {\n                action: ACTION.DELETE_ACTIVE,\n                indicator_type_name,\n                indicators_category_name,\n            };\n            break;\n        case STATE_TYPES.INDICATOR_INFO_TOGGLE:\n            payload.data = {\n                action: info_open_close_action,\n                indicator_type_name,\n                indicators_category_name,\n            };\n            break;\n        case STATE_TYPES.INDICATOR_SEARCH:\n            payload.data = {\n                action: ACTION.SEARCH,\n                search_string,\n            };\n            break;\n        case STATE_TYPES.INDICATOR_SETTINGS_OPEN:\n            payload.data = {\n                action: ACTION.EDIT_ACTIVE,\n                indicator_type_name,\n                indicators_category_name,\n            };\n            break;\n        case STATE_TYPES.INDICATORS_MODAL_TOGGLE:\n            payload.data = {\n                action: open_close_action,\n            };\n            break;\n        case STATE_TYPES.INDICATORS_CLEAR_ALL:\n            payload.data = {\n                action: ACTION.CLEAN_ALL_ACTIVE,\n            };\n            break;\n        default:\n            return {};\n    }\n    return payload;\n};\n\nconst getMarketTypeFormAnalyticsData = (state: keyof typeof STATE_TYPES, option: TStateChangeOption = {}) => {\n    const {\n        is_favorite,\n        is_open,\n        symbol_category: tab_market_name = '',\n        search_string,\n        symbol: market_type_name = '',\n    } = option;\n    const market_event_type = 'ce_market_types_form';\n    const favorites_action = is_favorite ? ACTION.ADD_TO_FAVORITES : ACTION.DELETE_FROM_FAVORITES;\n    const open_close_action = is_open ? ACTION.OPEN : ACTION.CLOSE;\n    const payload = {\n        event_type: market_event_type,\n    } as TPayload;\n    if (\n        (state === STATE_TYPES.MARKET_SEARCH && !option.search_string) ||\n        (state === STATE_TYPES.FAVORITE_MARKETS_TOGGLE && !market_type_name)\n    ) {\n        return {};\n    }\n    switch (state) {\n        case STATE_TYPES.FAVORITE_MARKETS_TOGGLE:\n            payload.data = {\n                action: favorites_action,\n                market_type_name,\n            };\n            break;\n        case STATE_TYPES.MARKET_INFO_REDIRECT:\n            payload.data = {\n                action: ACTION.INFO_REDIRECT,\n                tab_market_name,\n            };\n            break;\n        case STATE_TYPES.MARKET_SEARCH:\n            payload.data = {\n                action: ACTION.SEARCH,\n                search_string,\n            };\n            break;\n        case STATE_TYPES.MARKETS_LIST_TOGGLE:\n            payload.data = {\n                action: open_close_action,\n                market_type_name,\n            };\n            break;\n        case STATE_TYPES.SYMBOL_CHANGE:\n            payload.data = {\n                action: ACTION.CHOOSE_MARKET_TYPE,\n                market_type_name,\n                tab_market_name,\n            };\n            break;\n        default:\n            return {};\n    }\n    return payload;\n};\n\nexport const getChartAnalyticsData = (state: keyof typeof STATE_TYPES, option: TStateChangeOption = {}) => {\n    const chart_type_form_events: string[] = [\n        STATE_TYPES.CHART_INTERVAL_CHANGE,\n        STATE_TYPES.CHART_MODE_TOGGLE,\n        STATE_TYPES.CHART_TYPE_CHANGE,\n    ];\n    const indicator_type_form_events: string[] = [\n        STATE_TYPES.INDICATOR_ADDED,\n        STATE_TYPES.INDICATOR_DELETED,\n        STATE_TYPES.INDICATOR_INFO_TOGGLE,\n        STATE_TYPES.INDICATOR_SEARCH,\n        STATE_TYPES.INDICATOR_SETTINGS_OPEN,\n        STATE_TYPES.INDICATORS_CLEAR_ALL,\n        STATE_TYPES.INDICATORS_MODAL_TOGGLE,\n    ];\n    const market_type_form_events: string[] = [\n        STATE_TYPES.FAVORITE_MARKETS_TOGGLE,\n        STATE_TYPES.MARKET_INFO_REDIRECT,\n        STATE_TYPES.MARKETS_LIST_TOGGLE,\n        STATE_TYPES.MARKET_SEARCH,\n        STATE_TYPES.SYMBOL_CHANGE,\n    ];\n    if (chart_type_form_events.includes(state)) return getChartTypeFormAnalyticsData(state, option);\n    if (indicator_type_form_events.includes(state)) return getIndicatorTypeFormAnalyticsData(state, option);\n    if (market_type_form_events.includes(state)) return getMarketTypeFormAnalyticsData(state, option);\n    return {};\n};\n","import * as Symbol from './Actions/symbol';\nimport {\n    WS,\n    cloneObject,\n    convertDurationLimit,\n    extractInfoFromShortcode,\n    findFirstOpenMarket,\n    getBarrierPipSize,\n    getMinPayout,\n    getPlatformSettings,\n    getPropertyValue,\n    getContractSubtype,\n    isBarrierSupported,\n    isAccumulatorContract,\n    isCryptocurrency,\n    isDesktop,\n    isEmptyObject,\n    isMarketClosed,\n    isMobile,\n    isTurbosContract,\n    isVanillaContract,\n    pickDefaultSymbol,\n    resetEndTimeOnVolatilityIndices,\n    showDigitalOptionsUnavailableError,\n    showUnavailableLocationError,\n    formatMoney,\n    getCurrencyDisplayCode,\n    unsupported_contract_types_list,\n    BARRIER_COLORS,\n    BARRIER_LINE_STYLES,\n} from '@deriv/shared';\nimport { RudderStack } from '@deriv/analytics';\nimport type { TEvents } from '@deriv/analytics';\nimport { localize } from '@deriv/translations';\nimport { getValidationRules, getMultiplierValidationRules } from 'Stores/Modules/Trading/Constants/validation-rules';\nimport { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { isDigitContractType, isDigitTradeType } from 'Modules/Trading/Helpers/digits';\nimport ServerTime from '_common/base/server_time';\nimport { processPurchase } from './Actions/purchase';\nimport { getAvailableContractTypes } from 'Modules/Trading/Helpers/contract-type';\nimport { getUpdatedTicksHistoryStats } from './Helpers/accumulator';\nimport { processTradeParams } from './Helpers/process';\nimport { action, computed, makeObservable, observable, override, reaction, runInAction, toJS, when } from 'mobx';\nimport { createProposalRequests, getProposalErrorField, getProposalInfo } from './Helpers/proposal';\nimport { getHoveredColor } from './Helpers/barrier-utils';\nimport BaseStore from '../../base-store';\nimport { TTextValueNumber, TTextValueStrings } from 'Types';\nimport { ChartBarrierStore } from '../SmartChart/chart-barrier-store';\nimport debounce from 'lodash.debounce';\nimport { setLimitOrderBarriers } from './Helpers/limit-orders';\nimport type { TCoreStores } from '@deriv/stores/types';\nimport {\n    ActiveSymbols,\n    ActiveSymbolsRequest,\n    Buy,\n    BuyContractResponse,\n    History,\n    PriceProposalRequest,\n    PriceProposalResponse,\n    ServerTimeRequest,\n    TickSpotData,\n    TicksHistoryRequest,\n    TicksHistoryResponse,\n    TicksStreamResponse,\n    TradingTimesRequest,\n} from '@deriv/api-types';\nimport { STATE_TYPES, TPayload, getChartAnalyticsData } from './Helpers/chart';\n\ntype TBarriers = Array<\n    ChartBarrierStore & {\n        hideOffscreenBarrier?: boolean;\n        isSingleBarrier?: boolean;\n    }\n>;\ntype TChartLayout = {\n    adj: boolean;\n    aggregationType: string;\n    animation?: boolean;\n    candleWidth: number;\n    chartScale: string;\n    chartType: string;\n    crosshair: number;\n    extended: boolean;\n    flipped: boolean;\n    interval: number;\n    marketSessions: Partial<Record<string, boolean>>;\n    outliers: boolean;\n    panels: {\n        chart: {\n            chartName: string;\n            display: string;\n            index: number;\n            percent: number;\n            yAxis: {\n                name: string;\n                position: null;\n            };\n            yaxisLHS: string[];\n            yaxisRHS: string[];\n        };\n    };\n    periodicity: number;\n    previousMaxTicks?: number;\n    range: Partial<Record<string, unknown>>;\n    setSpan: Partial<Record<string, unknown>>;\n    studies?: Partial<Record<string, unknown>>;\n    symbols: [\n        {\n            interval: number;\n            periodicity: number;\n            setSpan: Partial<Record<string, unknown>>;\n            symbol: string;\n            symbolObject: ActiveSymbols[number];\n            timeUnit: string;\n        }\n    ];\n    timeUnit: string;\n    volumeUnderlay: boolean;\n};\ntype TChartStateChangeOption = { symbol: string | undefined; isClosed: boolean };\ntype TContractDataForGTM = Omit<Partial<PriceProposalRequest>, 'cancellation' | 'limit_order'> &\n    ReturnType<typeof getProposalInfo> & {\n        buy_price: number;\n    };\ntype TPrevChartLayout =\n    | (TChartLayout & {\n          isDone?: VoidFunction;\n          is_used?: boolean;\n      })\n    | null;\ntype TContractTypesList = {\n    [key: string]: {\n        name: string;\n        categories: TTextValueStrings[];\n    };\n};\ntype TDurationMinMax = {\n    [key: string]: { min: number; max: number };\n};\ntype TResponse<Req, Res extends { [key: string]: unknown }, K extends string> = Res & {\n    echo_req: Req;\n    error?: {\n        code: string;\n        message: string;\n        details?: Res[K] & { field: string };\n    };\n};\ntype TProposalInfo = {\n    [key: string]: ReturnType<typeof getProposalInfo>;\n};\ntype TStakeBoundary = Record<\n    string,\n    {\n        min_stake?: number;\n        max_stake?: number;\n    }\n>;\ntype TTicksHistoryResponse = TicksHistoryResponse | TicksStreamResponse;\ntype TToastBoxListItem = {\n    component: JSX.Element | null;\n    contract_types: TTextValueStrings[];\n    icon: string;\n    key: string;\n    label: string;\n};\ntype TToastBoxObject = {\n    key?: boolean;\n    buy_price?: string;\n    currency?: string;\n    contract_type?: string;\n    list?: Array<TToastBoxListItem | undefined>;\n};\ntype TBarriersData = Record<string, never> | { barrier: string; barrier_choices: string[] };\n\nconst store_name = 'trade_store';\nconst g_subscribers_map: Partial<Record<string, ReturnType<typeof WS.subscribeTicksHistory>>> = {}; // blame amin.m\n\nexport default class TradeStore extends BaseStore {\n    // Control values\n    is_trade_component_mounted = false;\n    is_purchase_enabled = false;\n    is_trade_enabled = false;\n    is_equal = 0;\n    has_equals_only = false;\n\n    // Underlying\n    symbol = '';\n    is_market_closed = false;\n    previous_symbol = '';\n    active_symbols: ActiveSymbols = [];\n\n    form_components: string[] = [];\n\n    // Contract Type\n    contract_expiry_type = '';\n    contract_start_type = '';\n    contract_type = '';\n    contract_types_list: TContractTypesList = {};\n    trade_types: { [key: string]: string } = {};\n\n    // Amount\n    amount = 10;\n    basis = '';\n    basis_list: Array<TTextValueStrings> = [];\n    currency = '';\n    stake_boundary: Partial<TStakeBoundary> = {};\n\n    // Duration\n    duration = 5;\n    duration_min_max: TDurationMinMax = {};\n    duration_unit = '';\n    duration_units_list: Array<TTextValueStrings> = [];\n    expiry_date: string | null = '';\n    expiry_epoch: number | string = '';\n    expiry_time: string | null = '';\n    expiry_type: string | null = 'duration';\n\n    // Barrier\n    barrier_1 = '';\n    barrier_2 = '';\n    barrier_count = 0;\n    main_barrier: ChartBarrierStore | null = null;\n    barriers: TBarriers = [];\n    hovered_barrier = '';\n    barrier_choices: string[] = [];\n\n    // Start Time\n    start_date = 0; // 0 refers to 'now'\n    start_dates_list: Array<{ text: string; value: number }> = [];\n    start_time: string | null = null;\n    sessions: Array<{ open: moment.Moment; close: moment.Moment }> = [];\n\n    market_open_times: string[] = [];\n    // End Date Time\n    /**\n     * An array that contains market closing time.\n     *\n     * e.g. [\"04:00:00\", \"08:00:00\"]\n     *\n     */\n    market_close_times: string[] = [];\n\n    // Last Digit\n    last_digit = 5;\n    is_mobile_digit_view_selected = false;\n\n    // Purchase\n    proposal_info: TProposalInfo = {};\n    purchase_info: Partial<BuyContractResponse> = {};\n\n    // Chart loader observables\n    is_chart_loading?: boolean;\n    should_show_active_symbols_loading = false;\n\n    // Accumulator trade params\n    accumulator_range_list: number[] = [];\n    growth_rate = 0.03;\n    maximum_payout = 0;\n    maximum_ticks = 0;\n    ticks_history_stats: {\n        ticks_stayed_in?: number[];\n        last_tick_epoch?: number;\n    } = {};\n    tick_size_barrier = 0;\n\n    // Multiplier trade params\n    multiplier = 0;\n    multiplier_range_list: TTextValueNumber[] = [];\n    stop_loss?: string;\n    take_profit?: string;\n    has_stop_loss = false;\n    has_take_profit = false;\n    has_cancellation = false;\n    commission?: string | number;\n    cancellation_price?: number;\n    stop_out?: number;\n    expiration?: number;\n    hovered_contract_type?: string | null;\n    cancellation_duration = '60m';\n    cancellation_range_list: Array<TTextValueStrings> = [];\n\n    // Turbos trade params\n    long_barriers: TBarriersData = {};\n    short_barriers: TBarriersData = {};\n\n    // Vanilla trade params\n    strike_price_choices: TBarriersData = {};\n\n    // Mobile\n    is_trade_params_expanded = true;\n\n    //Toastbox\n    contract_purchase_toast_box?: TToastBoxObject;\n\n    debouncedProposal = debounce(this.requestProposal, 500);\n    proposal_requests: Record<string, Partial<PriceProposalRequest>> = {};\n    is_purchasing_contract = false;\n\n    initial_barriers?: { barrier_1: string; barrier_2: string };\n    is_initial_barrier_applied = false;\n    is_digits_widget_active = false;\n\n    should_skip_prepost_lifecycle = false;\n\n    constructor({ root_store }: { root_store: TCoreStores }) {\n        const local_storage_properties = [\n            'amount',\n            'currency',\n            'barrier_1',\n            'barrier_2',\n            'basis',\n            'contract_start_type',\n            'duration',\n            'duration_unit',\n            'expiry_date',\n            'expiry_type',\n            'growth_rate',\n            'has_take_profit',\n            'has_stop_loss',\n            'has_cancellation',\n            'hovered_barrier',\n            'short_barriers',\n            'long_barriers',\n            'strike_price_choices',\n            'is_equal',\n            'last_digit',\n            'multiplier',\n            'start_date',\n            'start_time',\n            'stop_loss',\n            'take_profit',\n            'is_trade_params_expanded',\n        ];\n        const session_storage_properties = ['contract_type', 'symbol'];\n        super({\n            root_store,\n            local_storage_properties,\n            session_storage_properties,\n            store_name,\n            validation_rules: getValidationRules(),\n        });\n\n        makeObservable(this, {\n            accumulator_range_list: observable,\n            active_symbols: observable,\n            amount: observable,\n            barrier_1: observable,\n            barrier_2: observable,\n            barrier_count: observable,\n            barrier_choices: observable,\n            barriers: observable,\n            basis_list: observable,\n            basis: observable,\n            cancellation_duration: observable,\n            cancellation_price: observable,\n            cancellation_range_list: observable,\n            commission: observable,\n            contract_expiry_type: observable,\n            contract_start_type: observable,\n            contract_type: observable,\n            contract_types_list: observable,\n            currency: observable,\n            duration_min_max: observable,\n            duration_unit: observable,\n            duration_units_list: observable,\n            duration: observable,\n            expiration: observable,\n            expiry_date: observable,\n            expiry_epoch: observable,\n            expiry_time: observable,\n            expiry_type: observable,\n            form_components: observable,\n            growth_rate: observable,\n            has_cancellation: observable,\n            has_equals_only: observable,\n            has_open_accu_contract: computed,\n            has_stop_loss: observable,\n            has_take_profit: observable,\n            hovered_barrier: observable,\n            hovered_contract_type: observable,\n            is_accumulator: computed,\n            is_chart_loading: observable,\n            is_digits_widget_active: observable,\n            is_equal: observable,\n            is_market_closed: observable,\n            is_mobile_digit_view_selected: observable,\n            is_purchase_enabled: observable,\n            is_trade_component_mounted: observable,\n            is_trade_enabled: observable,\n            is_trade_params_expanded: observable,\n            is_turbos: computed,\n            last_digit: observable,\n            long_barriers: observable,\n            main_barrier: observable,\n            market_close_times: observable,\n            market_open_times: observable,\n            maximum_payout: observable,\n            maximum_ticks: observable,\n            multiplier_range_list: observable,\n            multiplier: observable,\n            previous_symbol: observable,\n            proposal_info: observable.ref,\n            purchase_info: observable.ref,\n            setHoveredBarrier: action.bound,\n            sessions: observable,\n            setDefaultGrowthRate: action.bound,\n            short_barriers: observable,\n            should_show_active_symbols_loading: observable,\n            should_skip_prepost_lifecycle: observable,\n            stake_boundary: observable,\n            start_date: observable,\n            start_dates_list: observable,\n            start_time: observable,\n            strike_price_choices: observable,\n            stop_loss: observable,\n            stop_out: observable,\n            symbol: observable,\n            take_profit: observable,\n            tick_size_barrier: observable,\n            ticks_history_stats: observable,\n            trade_types: observable,\n            accountSwitcherListener: action.bound,\n            barrier_pipsize: computed,\n            barriers_flattened: computed,\n            changeDurationValidationRules: action.bound,\n            chartStateChange: action.bound,\n            clearContractPurchaseToastBox: action.bound,\n            clearContracts: action.bound,\n            clearLimitOrderBarriers: action.bound,\n            clearPurchaseInfo: action.bound,\n            clientInitListener: action.bound,\n            contract_purchase_toast_box: observable,\n            enablePurchase: action.bound,\n            exportLayout: action.bound,\n            forgetAllProposal: action.bound,\n            getFirstOpenMarket: action.bound,\n            has_alternative_source: computed,\n            initAccountCurrency: action.bound,\n            is_multiplier: computed,\n            is_symbol_in_active_symbols: computed,\n            is_synthetics_available: computed,\n            is_vanilla: computed,\n            loadActiveSymbols: action.bound,\n            logoutListener: action.bound,\n            main_barrier_flattened: computed,\n            networkStatusChangeListener: action.bound,\n            onAllowEqualsChange: action.bound,\n            onChange: action.bound,\n            onChangeMultiple: action.bound,\n            onChartBarrierChange: action.bound,\n            onHoverPurchase: action.bound,\n            onMount: action.bound,\n            onProposalResponse: action.bound,\n            onPurchase: action.bound,\n            onUnmount: override,\n            prepareTradeStore: action.bound,\n            preSwitchAccountListener: action.bound,\n            processPurchase: action.bound,\n            pushPurchaseDataToGtm: action.bound,\n            refresh: action.bound,\n            requestProposal: action.bound,\n            resetAccumulatorData: action.bound,\n            resetErrorServices: action.bound,\n            resetPreviousSymbol: action.bound,\n            setActiveSymbols: action.bound,\n            setBarrierChoices: action.bound,\n            setChartStatus: action.bound,\n            setContractPurchaseToastbox: action.bound,\n            setContractTypes: action.bound,\n            setDefaultSymbol: action.bound,\n            setIsTradeParamsExpanded: action.bound,\n            setIsDigitsWidgetActive: action.bound,\n            setMarketStatus: action.bound,\n            setMobileDigitView: action.bound,\n            setPreviousSymbol: action.bound,\n            setSkipPrePostLifecycle: action.bound,\n            setStakeBoundary: action.bound,\n            setTradeStatus: action.bound,\n            show_digits_stats: computed,\n            themeChangeListener: action.bound,\n            updateBarrierColor: action.bound,\n            updateStore: action.bound,\n            updateSymbol: action.bound,\n        });\n\n        // Adds intercept to change min_max value of duration validation\n        reaction(\n            () => [this.contract_expiry_type, this.duration_min_max, this.duration_unit, this.expiry_type],\n            () => {\n                this.changeDurationValidationRules();\n            }\n        );\n        reaction(\n            () => this.is_equal,\n            () => {\n                this.onAllowEqualsChange();\n            }\n        );\n        reaction(\n            () => this.symbol,\n            () => {\n                const date = resetEndTimeOnVolatilityIndices(this.symbol, this.expiry_type);\n                if (date) {\n                    this.expiry_date = date;\n                }\n                this.setDefaultGrowthRate();\n                this.resetAccumulatorData();\n            }\n        );\n        reaction(\n            () => this.duration_unit,\n            () => {\n                this.contract_expiry_type = this.duration_unit === 't' ? 'tick' : 'intraday';\n            }\n        );\n        reaction(\n            () => [this.has_stop_loss, this.has_take_profit],\n            () => {\n                if (!this.has_stop_loss) {\n                    this.validation_errors.stop_loss = [];\n                }\n                if (!this.has_take_profit) {\n                    this.validation_errors.take_profit = [];\n                }\n            }\n        );\n        reaction(\n            () => [this.contract_type],\n            () => {\n                this.root_store.portfolio.setContractType(this.contract_type);\n                if (this.is_accumulator || this.is_multiplier || this.is_turbos) {\n                    // when switching back to Multiplier contract, re-apply Stop loss / Take profit validation rules\n                    Object.assign(this.validation_rules, getMultiplierValidationRules());\n                } else {\n                    // we need to remove these two validation rules on contract_type change\n                    // to be able to remove any existing Stop loss / Take profit validation errors\n                    delete this.validation_rules.stop_loss;\n                    delete this.validation_rules.take_profit;\n                }\n                this.resetAccumulatorData();\n            }\n        );\n        reaction(\n            () => this.root_store.common.current_language,\n            () => {\n                this.setValidationRules(getValidationRules());\n                this.changeDurationValidationRules();\n                if (!this.amount) {\n                    this.validateAllProperties();\n                }\n            }\n        );\n        when(\n            () => !!this.accumulator_range_list.length,\n            () => this.setDefaultGrowthRate()\n        );\n    }\n\n    get is_symbol_in_active_symbols() {\n        return this.active_symbols.some(\n            symbol_info => symbol_info.symbol === this.symbol && symbol_info.exchange_is_open === 1\n        );\n    }\n\n    get has_open_accu_contract() {\n        return (\n            this.is_accumulator &&\n            !!this.root_store.portfolio.open_accu_contract &&\n            !!this.root_store.portfolio.active_positions.find(\n                ({ contract_info, type }) => isAccumulatorContract(type) && contract_info.underlying === this.symbol\n            )\n        );\n    }\n\n    resetAccumulatorData() {\n        if (!isEmptyObject(this.root_store.contract_trade.accumulator_barriers_data)) {\n            this.root_store.contract_trade.clearAccumulatorBarriersData();\n        }\n    }\n\n    setDefaultGrowthRate() {\n        if (\n            this.is_accumulator &&\n            !this.accumulator_range_list.includes(this.growth_rate) &&\n            this.accumulator_range_list.length\n        ) {\n            this.growth_rate = this.accumulator_range_list[0];\n        }\n    }\n\n    setSkipPrePostLifecycle(should_skip: boolean) {\n        if (!!should_skip !== !!this.should_skip_prepost_lifecycle) {\n            // to skip assignment if no change is made\n            this.should_skip_prepost_lifecycle = should_skip;\n        }\n    }\n\n    setTradeStatus(status: boolean) {\n        this.is_trade_enabled = status;\n    }\n\n    refresh() {\n        this.forgetAllProposal();\n        this.proposal_info = {};\n        this.purchase_info = {};\n        this.proposal_requests = {};\n    }\n\n    clearContracts = () => {\n        this.root_store.contract_trade.contracts = [];\n    };\n\n    async loadActiveSymbols(should_set_default_symbol = true, should_show_loading = true) {\n        this.should_show_active_symbols_loading = should_show_loading;\n\n        await this.setActiveSymbols();\n        await this.root_store.active_symbols.setActiveSymbols();\n        if (should_set_default_symbol) await this.setDefaultSymbol();\n\n        const r = await WS.storage.contractsFor(this.symbol);\n        if (['InvalidSymbol', 'InputValidationFailed'].includes(r.error?.code)) {\n            const symbol_to_update = await pickDefaultSymbol(this.active_symbols);\n            await this.processNewValuesAsync({ symbol: symbol_to_update });\n        }\n\n        runInAction(() => {\n            this.should_show_active_symbols_loading = false;\n        });\n    }\n\n    async setDefaultSymbol() {\n        if (!this.is_symbol_in_active_symbols) {\n            this.is_trade_enabled = false;\n\n            const symbol = await pickDefaultSymbol(this.active_symbols);\n            await this.processNewValuesAsync({ symbol });\n        }\n    }\n\n    async setActiveSymbols() {\n        const is_on_mf_account = this.root_store.client.landing_company_shortcode === 'maltainvest';\n        const is_logged_in = this.root_store.client.is_logged_in;\n        const clients_country = this.root_store.client.clients_country;\n        const showError = this.root_store.common.showError;\n\n        // To resolve infinite load for Belgium and Isle of man logout IPs\n        if (['be', 'im'].includes(clients_country) && !is_logged_in) {\n            showUnavailableLocationError(showError, is_logged_in);\n        }\n\n        const { active_symbols, error } = await WS.authorized.activeSymbols();\n\n        if (error) {\n            showError({ message: localize('Trading is unavailable at this time.') });\n            return;\n        }\n\n        if (!active_symbols?.length) {\n            await WS.wait('get_settings');\n            /*\n             * This logic is related to EU country checks\n             * Avoid moving this upward in the scope since mobx will lose reactivity\n             */\n            if (is_on_mf_account) {\n                showDigitalOptionsUnavailableError(showError, {\n                    text: localize(\n                        'We’re working to have this available for you soon. If you have another account, switch to that account to continue trading. You may add a Deriv MT5 Financial.'\n                    ),\n                    title: localize('{{platform_name_trader}} is not available for this account', {\n                        platform_name_trader: getPlatformSettings('trader').name,\n                    }),\n                    link: localize('Go to {{platform_name_mt5}} dashboard', {\n                        platform_name_mt5: getPlatformSettings('mt5').name,\n                    }),\n                });\n                return;\n            } else if (!is_on_mf_account) {\n                showUnavailableLocationError(showError, is_logged_in);\n            }\n            showUnavailableLocationError(showError, is_logged_in);\n        }\n        await this.processNewValuesAsync({ active_symbols });\n    }\n\n    async setContractTypes() {\n        if (this.symbol && this.is_symbol_in_active_symbols) {\n            await Symbol.onChangeSymbolAsync(this.symbol);\n            runInAction(() => {\n                const contract_categories = ContractType.getContractCategories();\n                this.processNewValuesAsync({\n                    ...(contract_categories as Pick<TradeStore, 'contract_types_list'> & {\n                        has_only_forward_starting_contracts: boolean;\n                    }),\n                    ...ContractType.getContractType(contract_categories.contract_types_list, this.contract_type),\n                });\n                this.processNewValuesAsync(ContractType.getContractValues(this));\n            });\n        }\n        this.root_store.common.setSelectedContractType(this.contract_type);\n        this.root_store.portfolio.setContractType(this.contract_type);\n    }\n\n    async prepareTradeStore(should_set_default_symbol = true) {\n        this.initial_barriers = { barrier_1: this.barrier_1, barrier_2: this.barrier_2 };\n        await when(() => !this.root_store.client.is_populating_account_list);\n\n        // waits for `website_status` in order to set `stake_default` for the selected currency\n        await WS.wait('website_status');\n        await runInAction(async () => {\n            await this.processNewValuesAsync(\n                {\n                    // fallback to default currency if current logged-in client hasn't selected a currency yet\n                    currency: this.root_store.client.currency || this.root_store.client.default_currency,\n                },\n                true,\n                null,\n                false\n            );\n        });\n        await this.loadActiveSymbols(should_set_default_symbol);\n        await this.setContractTypes();\n        await this.processNewValuesAsync(\n            {\n                is_market_closed: isMarketClosed(this.active_symbols, this.symbol),\n            },\n            true,\n            null,\n            false\n        );\n    }\n\n    async onChangeMultiple(values: Partial<TradeStore>) {\n        Object.keys(values).forEach(name => {\n            if (!(name in this)) {\n                throw new Error(`Invalid Argument: ${name}`);\n            }\n        });\n\n        await this.processNewValuesAsync({ ...values }, true); // wait for store to be updated\n        this.validateAllProperties(); // then run validation before sending proposal\n    }\n\n    async onChange(e: { target: { name: string; value: unknown } }) {\n        const { name, value } = e.target;\n        if (name === 'symbol' && value) {\n            // set trade params skeleton and chart loader to true until processNewValuesAsync resolves\n            this.setChartStatus(true);\n            // reset market close status\n            this.setMarketStatus(false);\n            this.is_trade_enabled = false;\n            // this.root_store.modules.contract_trade.contracts = [];\n            // TODO: Clear the contracts in contract-trade-store\n        } else if (name === 'currency') {\n            // Only allow the currency dropdown change if client is not logged in\n            if (!this.root_store.client.is_logged_in) {\n                this.root_store.client.selectCurrency(value as string);\n            }\n        } else if (name === 'expiry_date') {\n            this.expiry_time = null;\n        } else if (!(name in this)) {\n            throw new Error(`Invalid Argument: ${name}`);\n        }\n\n        await this.processNewValuesAsync(\n            { [name]: value },\n            true,\n            name === 'contract_type' ? { contract_type: this.contract_type } : {}, // refer to [Multiplier validation rules] below\n            true\n        ); // wait for store to be updated\n        this.validateAllProperties(); // then run validation before sending proposal\n        this.root_store.common.setSelectedContractType(this.contract_type);\n    }\n\n    setHoveredBarrier(hovered_value: string) {\n        this.hovered_barrier = hovered_value;\n    }\n\n    setPreviousSymbol(symbol: string) {\n        if (this.previous_symbol !== symbol) this.previous_symbol = symbol;\n    }\n\n    setIsTradeParamsExpanded(value: boolean) {\n        this.is_trade_params_expanded = value;\n    }\n\n    async resetPreviousSymbol() {\n        this.setMarketStatus(isMarketClosed(this.active_symbols, this.previous_symbol));\n\n        await Symbol.onChangeSymbolAsync(this.previous_symbol);\n        this.updateSymbol(this.symbol);\n\n        this.setChartStatus(false);\n        runInAction(() => {\n            this.previous_symbol = ''; // reset the symbol to default\n        });\n    }\n\n    updateBarrierColor(is_dark_mode: boolean) {\n        if (this.main_barrier) {\n            this.main_barrier.updateBarrierColor(is_dark_mode);\n        }\n    }\n\n    onHoverPurchase(is_over: boolean, contract_type?: string) {\n        if (this.is_accumulator) return;\n        if (this.is_purchase_enabled && this.main_barrier && !this.is_multiplier) {\n            this.main_barrier.updateBarrierShade(is_over, contract_type ?? '');\n        } else if (!is_over && this.main_barrier && !this.is_multiplier) {\n            this.main_barrier.updateBarrierShade(false, contract_type ?? '');\n        }\n\n        this.hovered_contract_type = is_over ? contract_type : null;\n        setLimitOrderBarriers({\n            barriers: this.root_store.portfolio.barriers,\n            is_over,\n            contract_type,\n            contract_info: this.proposal_info[contract_type ?? ''],\n        });\n    }\n\n    clearLimitOrderBarriers() {\n        this.hovered_contract_type = null;\n        const { barriers } = this;\n        setLimitOrderBarriers({\n            barriers,\n            is_over: false,\n        });\n    }\n\n    get barrier_pipsize() {\n        return getBarrierPipSize(this.barrier_1);\n    }\n\n    get main_barrier_flattened() {\n        const is_digit_trade_type = isDigitTradeType(this.contract_type);\n        return is_digit_trade_type ? null : toJS(this.main_barrier);\n    }\n\n    get barriers_flattened() {\n        return this.root_store.portfolio.barriers && toJS(this.root_store.portfolio.barriers);\n    }\n\n    setMainBarrier = (proposal_info: PriceProposalRequest) => {\n        if (!proposal_info) {\n            return;\n        }\n        const { contract_type, barrier, barrier2 } = proposal_info;\n        if (isBarrierSupported(contract_type)) {\n            const color = this.root_store.ui.is_dark_mode_on ? BARRIER_COLORS.DARK_GRAY : BARRIER_COLORS.GRAY;\n\n            // create barrier only when it's available in response\n            this.main_barrier = new ChartBarrierStore(\n                this.hovered_barrier || barrier,\n                barrier2,\n                this.onChartBarrierChange,\n                {\n                    color: this.hovered_barrier ? getHoveredColor(contract_type) : color,\n                    line_style: this.hovered_barrier && BARRIER_LINE_STYLES.DASHED,\n                    not_draggable: this.is_turbos || this.is_vanilla,\n                }\n            );\n            // this.main_barrier.updateBarrierShade(true, contract_type);\n        } else {\n            this.main_barrier = null;\n        }\n    };\n\n    onPurchase = debounce(this.processPurchase, 300);\n\n    processPurchase(proposal_id: string, price: string | number, type: string) {\n        if (!this.is_purchase_enabled) return;\n        if (proposal_id) {\n            this.is_purchase_enabled = false;\n            this.is_purchasing_contract = true;\n            const is_tick_contract = this.duration_unit === 't';\n            processPurchase(proposal_id, price).then(\n                action((response: TResponse<Buy, BuyContractResponse, 'buy'>) => {\n                    if (!this.is_trade_component_mounted) {\n                        this.enablePurchase();\n                        this.is_purchasing_contract = false;\n                        return;\n                    }\n\n                    const last_digit = +this.last_digit;\n                    if (response.error) {\n                        // using javascript to disable purchase-buttons manually to compensate for mobx lag\n                        this.disablePurchaseButtons();\n                        // invalidToken error will handle in socket-general.js\n                        if (response.error.code !== 'InvalidToken') {\n                            this.root_store.common.setServicesError({\n                                type: response.msg_type,\n                                ...response.error,\n                            });\n\n                            // Clear purchase info on mobile after toast box error disappears (mobile_toast_timeout = 3500)\n                            if (isMobile() && this.root_store.common?.services_error?.type === 'buy') {\n                                setTimeout(() => {\n                                    this.clearPurchaseInfo();\n                                    this.requestProposal();\n                                }, 3500);\n                            }\n                        }\n                    } else if (response.buy) {\n                        if (this.proposal_info[type] && this.proposal_info[type].id !== proposal_id) {\n                            throw new Error('Proposal ID does not match.');\n                        }\n                        const contract_data: TContractDataForGTM = {\n                            ...this.proposal_requests[type],\n                            ...this.proposal_info[type],\n                            buy_price: response.buy.buy_price,\n                        };\n                        const { contract_id, longcode, start_time } = response.buy;\n\n                        // toggle smartcharts to contract mode\n                        if (contract_id) {\n                            const shortcode = response.buy.shortcode;\n                            const { category, underlying } = extractInfoFromShortcode(shortcode);\n                            const is_digit_contract = isDigitContractType(category?.toUpperCase() ?? '');\n                            const contract_type = category?.toUpperCase();\n                            this.root_store.contract_trade.addContract({\n                                contract_id,\n                                start_time,\n                                longcode,\n                                underlying,\n                                barrier: is_digit_contract ? last_digit : null,\n                                contract_type,\n                                is_tick_contract,\n                            });\n                            this.root_store.portfolio.onBuyResponse({\n                                contract_id,\n                                longcode,\n                                contract_type,\n                            });\n                            // NOTE: changing chart granularity and chart_type has to be done in a different render cycle\n                            // so we have to set chart granularity to zero, and change the chart_type to 'mountain' first,\n                            // and then set the chart view to the start_time\n                            // draw the start time line and show longcode then mount contract\n                            // this.root_store.modules.contract_trade.drawContractStartTime(start_time, longcode, contract_id);\n                            if (isDesktop()) {\n                                this.root_store.ui.openPositionsDrawer();\n                            }\n                            this.proposal_info = {};\n                            this.forgetAllProposal();\n                            this.purchase_info = response;\n                            this.proposal_requests = {};\n                            this.debouncedProposal();\n                            this.clearLimitOrderBarriers();\n                            this.pushPurchaseDataToGtm(contract_data);\n                            this.setContractPurchaseToastbox(response.buy);\n                            this.is_purchasing_contract = false;\n                            return;\n                        }\n                    }\n                    this.forgetAllProposal();\n                    this.purchase_info = response;\n                    this.enablePurchase();\n                    this.is_purchasing_contract = false;\n                })\n            );\n        }\n    }\n\n    enablePurchase() {\n        if (!this.root_store.client.is_unwelcome) {\n            this.is_purchase_enabled = true;\n        }\n    }\n\n    disablePurchaseButtons = () => {\n        const el_purchase_value = document.getElementsByClassName('trade-container__price-info');\n        const el_purchase_buttons = document.getElementsByClassName('btn-purchase');\n        [].forEach.bind(el_purchase_buttons, el => {\n            (el as HTMLButtonElement).classList.add('btn-purchase--disabled');\n        })();\n        [].forEach.bind(el_purchase_value, el => {\n            (el as HTMLDivElement).classList.add('trade-container__price-info--fade');\n        })();\n    };\n\n    /**\n     * Updates the store with new values\n     * @param  {Object} new_state - new values to update the store with\n     * @return {Object} returns the object having only those values that are updated\n     */\n    updateStore(new_state: Partial<TradeStore>) {\n        Object.keys(cloneObject(new_state) || {}).forEach(key => {\n            if (key === 'root_store' || ['validation_rules', 'validation_errors', 'currency'].indexOf(key) > -1) return;\n            if (JSON.stringify(this[key as keyof this]) === JSON.stringify(new_state[key as keyof TradeStore])) {\n                delete new_state[key as keyof TradeStore];\n            } else {\n                if (key === 'symbol') {\n                    this.is_purchase_enabled = false;\n                    this.is_trade_enabled = false;\n                }\n\n                if (new_state.start_date && typeof new_state.start_date === 'string') {\n                    new_state.start_date = parseInt(new_state.start_date);\n                }\n\n                this[key as 'currency'] = new_state[key as keyof TradeStore] as TradeStore['currency'];\n\n                // validation is done in mobx intercept (base_store.js)\n                // when barrier_1 is set, it is compared with store.barrier_2 (which is not updated yet)\n                if (key === 'barrier_2' && new_state.barrier_1) {\n                    this.barrier_1 = new_state.barrier_1; // set it again, after barrier_2 is updated in store\n                }\n            }\n        });\n        return new_state;\n    }\n\n    async processNewValuesAsync(\n        obj_new_values: Partial<TradeStore> = {},\n        is_changed_by_user = false,\n        obj_old_values: Partial<TradeStore> | null = {},\n        should_forget_first = true\n    ) {\n        // To switch to rise_fall_equal contract type when allow equal is checked on first page refresh or\n        // when switch back to Rise/Fall from another contract type i.e.\n        if (obj_new_values.contract_type && obj_new_values.contract_type === 'rise_fall' && !!this.is_equal) {\n            obj_new_values.contract_type = 'rise_fall_equal';\n        }\n        // when accumulator is selected, we need to change chart type to mountain and granularity to 0\n        // and we need to restore previous chart type and granularity when accumulator is unselected\n        const {\n            prev_chart_type,\n            prev_granularity,\n            chart_type,\n            granularity,\n            savePreviousChartMode,\n            updateChartType,\n            updateGranularity,\n        } = this.root_store.contract_trade || {};\n        if (obj_new_values.contract_type === 'accumulator') {\n            savePreviousChartMode(chart_type, granularity);\n            updateGranularity(0);\n            updateChartType('line');\n        } else if (\n            (obj_new_values.contract_type || obj_new_values.symbol) &&\n            prev_chart_type &&\n            prev_granularity &&\n            (prev_chart_type !== chart_type || prev_granularity !== granularity)\n        ) {\n            updateGranularity(prev_granularity);\n            updateChartType(prev_chart_type);\n            savePreviousChartMode('', null);\n        }\n\n        if (/\\bduration\\b/.test(Object.keys(obj_new_values) as unknown as string)) {\n            // TODO: fix this in input-field.jsx\n            if (typeof obj_new_values.duration === 'string') {\n                obj_new_values.duration = +obj_new_values.duration;\n            }\n        }\n        // Sets the default value to Amount when Currency has changed from Fiat to Crypto and vice versa.\n        // The source of default values is the website_status response.\n        if (should_forget_first) {\n            this.forgetAllProposal();\n            this.proposal_requests = {};\n        }\n        if (is_changed_by_user && /\\bcurrency\\b/.test(Object.keys(obj_new_values) as unknown as string)) {\n            const prev_currency = obj_old_values?.currency || this.currency;\n            const has_currency_changed = obj_new_values.currency !== prev_currency;\n\n            const should_reset_stake =\n                isCryptocurrency(obj_new_values.currency ?? '') ||\n                // For switch between fiat and crypto and vice versa\n                isCryptocurrency(obj_new_values.currency ?? '') !== isCryptocurrency(prev_currency);\n\n            if (has_currency_changed && should_reset_stake) {\n                obj_new_values.amount = obj_new_values.amount || getMinPayout(obj_new_values.currency ?? '');\n            }\n            this.currency = obj_new_values.currency ?? '';\n        }\n\n        let has_only_forward_starting_contracts;\n\n        if (Object.keys(obj_new_values).includes('symbol')) {\n            this.setPreviousSymbol(this.symbol);\n            await Symbol.onChangeSymbolAsync(obj_new_values.symbol ?? '');\n            this.setMarketStatus(isMarketClosed(this.active_symbols, obj_new_values.symbol ?? ''));\n            has_only_forward_starting_contracts =\n                ContractType.getContractCategories().has_only_forward_starting_contracts;\n        }\n        // TODO: remove all traces of setHasOnlyForwardingContracts and has_only_forward_starting_contracts in app\n        //  once future contracts are implemented\n        this.root_store.ui.setHasOnlyForwardingContracts(has_only_forward_starting_contracts);\n        if (has_only_forward_starting_contracts) return;\n\n        const new_state = this.updateStore(cloneObject(obj_new_values));\n\n        if (\n            is_changed_by_user ||\n            /\\b(symbol|contract_types_list)\\b/.test(Object.keys(new_state) as unknown as string)\n        ) {\n            this.updateStore({\n                // disable purchase button(s), clear contract info\n                is_purchase_enabled: false,\n                proposal_info: {},\n            });\n\n            // To prevent infinite loop when changing from advanced end_time to digit type contract\n            if (obj_new_values.contract_type && this.root_store.ui.is_advanced_duration) {\n                if (isDigitTradeType(obj_new_values.contract_type)) {\n                    this.barrier_1 = '';\n                    this.barrier_2 = '';\n                    this.expiry_type = 'duration';\n                    this.root_store.ui.is_advanced_duration = false;\n                }\n            }\n\n            // TODO: handle barrier updates on proposal api\n            // const is_barrier_changed = 'barrier_1' in new_state || 'barrier_2' in new_state;\n            await processTradeParams(this, new_state);\n\n            this.updateStore({\n                ...(!this.is_initial_barrier_applied ? this.initial_barriers : {}),\n            });\n            this.is_initial_barrier_applied = true;\n            if (/\\b(contract_type|currency)\\b/.test(Object.keys(new_state) as unknown as string)) {\n                this.validateAllProperties();\n            }\n            this.debouncedProposal();\n        }\n    }\n\n    get is_synthetics_available() {\n        return !!this.active_symbols?.find(item => item.market === 'synthetic_index');\n    }\n\n    get is_synthetics_trading_market_available() {\n        return !!this.active_symbols?.find(\n            item => item.market === 'synthetic_index' && !isMarketClosed(this.active_symbols, item.symbol)\n        );\n    }\n\n    get show_digits_stats() {\n        return isDigitTradeType(this.contract_type);\n    }\n\n    setMobileDigitView(bool: boolean) {\n        this.is_mobile_digit_view_selected = bool;\n    }\n\n    pushPurchaseDataToGtm(contract_data: TContractDataForGTM) {\n        const data = {\n            event: 'buy_contract',\n            bom_ui: 'new',\n            contract: {\n                amount: contract_data.amount,\n                barrier1: contract_data.barrier,\n                barrier2: contract_data.barrier2,\n                basis: contract_data.basis,\n                buy_price: contract_data.buy_price,\n                contract_type: contract_data.contract_type,\n                currency: contract_data.currency,\n                date_expiry: contract_data.date_expiry,\n                date_start: contract_data.date_start,\n                duration: contract_data.duration,\n                duration_unit: contract_data.duration_unit,\n                payout: contract_data.payout,\n                symbol: contract_data.symbol,\n            },\n            settings: {\n                theme: this.root_store.ui.is_dark_mode_on ? 'dark' : 'light',\n                positions_drawer: this.root_store.ui.is_positions_drawer_on ? 'open' : 'closed',\n                chart: {\n                    toolbar_position: this.root_store.ui.is_chart_layout_default ? 'bottom' : 'left',\n                    chart_asset_info: this.root_store.ui.is_chart_asset_info_visible ? 'visible' : 'hidden',\n                    chart_type: this.root_store.contract_trade.chart_type,\n                    granularity: this.root_store.contract_trade.granularity,\n                },\n            },\n        };\n        this.root_store.gtm.pushDataLayer(data);\n    }\n\n    clearPurchaseInfo() {\n        this.purchase_info = {};\n        this.proposal_requests = {};\n        this.proposal_info = {};\n    }\n\n    requestProposal() {\n        const requests = createProposalRequests(this);\n        if (Object.values(this.validation_errors).some(e => e.length)) {\n            this.proposal_info = {};\n            this.purchase_info = {};\n            this.forgetAllProposal();\n            if (this.is_accumulator) this.resetAccumulatorData();\n            return;\n        }\n\n        if (!isEmptyObject(requests)) {\n            this.proposal_requests = requests as Record<string, Partial<PriceProposalRequest>>;\n            this.purchase_info = {};\n            Object.keys(this.proposal_requests).forEach(type => {\n                WS.subscribeProposal(this.proposal_requests[type], this.onProposalResponse);\n            });\n        }\n        this.root_store.ui.resetPurchaseStates();\n    }\n\n    forgetAllProposal() {\n        const length = Object.keys(this.proposal_requests).length;\n        if (length > 0) WS.forgetAll('proposal');\n    }\n\n    setMarketStatus(status: boolean) {\n        this.is_market_closed = status;\n    }\n\n    onProposalResponse(response: TResponse<PriceProposalRequest, PriceProposalResponse, 'proposal'>) {\n        const { contract_type } = response.echo_req;\n        const prev_proposal_info = getPropertyValue(this.proposal_info, contract_type) || {};\n        const obj_prev_contract_basis = getPropertyValue(prev_proposal_info, 'obj_contract_basis') || {};\n\n        // add/update expiration or date_expiry for crypto indices from proposal\n        const date_expiry = response.proposal?.date_expiry;\n        this.expiry_epoch = date_expiry || this.expiry_epoch;\n\n        if (!response.error && !!date_expiry && this.is_crypto_multiplier) {\n            this.expiration = date_expiry;\n        }\n\n        this.proposal_info = {\n            ...this.proposal_info,\n            [contract_type]: getProposalInfo(this, response, obj_prev_contract_basis),\n        };\n\n        if (this.is_multiplier && this.proposal_info && this.proposal_info.MULTUP) {\n            const { commission, cancellation, limit_order } = this.proposal_info.MULTUP;\n            // commission and cancellation.ask_price is the same for MULTUP/MULTDOWN\n            if (commission) {\n                this.commission = commission;\n            }\n            if (cancellation) {\n                this.cancellation_price = cancellation.ask_price;\n            }\n            this.stop_out = limit_order?.stop_out?.order_amount;\n        }\n        if (this.is_accumulator && this.proposal_info?.ACCU) {\n            const {\n                barrier_spot_distance,\n                maximum_ticks = 0,\n                ticks_stayed_in,\n                tick_size_barrier = 0,\n                last_tick_epoch,\n                maximum_payout = 0,\n                high_barrier,\n                low_barrier,\n                spot_time,\n            } = this.proposal_info.ACCU;\n            this.ticks_history_stats = getUpdatedTicksHistoryStats({\n                previous_ticks_history_stats: this.ticks_history_stats,\n                new_ticks_history_stats: ticks_stayed_in,\n                last_tick_epoch,\n            });\n            this.maximum_ticks = maximum_ticks;\n            this.maximum_payout = maximum_payout;\n            this.tick_size_barrier = tick_size_barrier;\n            const { updateAccumulatorBarriersData } = this.root_store.contract_trade || {};\n            if (updateAccumulatorBarriersData) {\n                updateAccumulatorBarriersData({\n                    accumulators_high_barrier: high_barrier,\n                    accumulators_low_barrier: low_barrier,\n                    barrier_spot_distance,\n                    current_spot_time: spot_time,\n                    underlying: this.symbol,\n                });\n            }\n        }\n\n        if (!this.main_barrier || this.main_barrier?.shade) {\n            this.setMainBarrier(response.echo_req);\n        }\n\n        if (this.hovered_contract_type === contract_type) {\n            setLimitOrderBarriers({\n                barriers: this.root_store.portfolio.barriers,\n                contract_info: this.proposal_info[this.hovered_contract_type ?? ''],\n                contract_type,\n                is_over: true,\n            });\n        }\n\n        if (response.error) {\n            const error_id = getProposalErrorField(response);\n            if (error_id) {\n                this.setValidationErrorMessages(error_id, [response.error.message]);\n            }\n            // Commission for multipliers is normally set from proposal response.\n            // But when we change the multiplier and if it is invalid, we don't get the proposal response to set the commission. We only get error message.\n            // This is a work around to set the commission from error message.\n            if (this.is_multiplier) {\n                const { message, details } = response.error;\n                const commission_match = (message || '').match(/\\((\\d+\\.*\\d*)\\)/);\n                if (details?.field === 'stop_loss' && commission_match?.[1]) {\n                    this.commission = commission_match[1];\n                }\n            }\n            if (this.is_accumulator) this.resetAccumulatorData();\n\n            // Sometimes when we navigate fast, `forget_all` proposal is called immediately after proposal subscription calls.\n            // But, in the BE, `forget_all` proposal call is processed before the proposal subscriptions are registered. In this case, `forget_all` proposal doesn't forget the new subscriptions.\n            // So when we send new proposal subscription requests, we get `AlreadySubscribed` error.\n            // If we get an error message with code `AlreadySubscribed`, `forget_all` proposal will be called and all the existing subscriptions will be marked as complete in `deriv-api` and will subscribe to new proposals\n            if (response.error.code === 'AlreadySubscribed') {\n                this.refresh();\n\n                if (this.is_trade_component_mounted) {\n                    this.debouncedProposal();\n                }\n                return;\n            }\n\n            // Sometimes the initial barrier doesn't match with current barrier choices received from API.\n            // When this happens we want to populate the list of barrier choices to choose from since the value cannot be specified manually\n            if ((this.is_turbos || this.is_vanilla) && response.error.details?.barrier_choices) {\n                const { barrier_choices, max_stake, min_stake } = response.error.details;\n                this.setStakeBoundary(contract_type, min_stake, max_stake);\n                this.setBarrierChoices(barrier_choices as string[]);\n                if (!this.barrier_choices.includes(this.barrier_1)) {\n                    // Since on change of duration `proposal` API call is made which returns a new set of barrier values.\n                    // The new list is set and the mid value is assigned\n                    const index = Math.floor(this.barrier_choices.length / 2);\n                    this.barrier_1 = this.is_vanilla ? this.barrier_choices[index] : this.barrier_choices[0];\n                    this.onChange({\n                        target: {\n                            name: 'barrier_1',\n                            value: this.barrier_1,\n                        },\n                    });\n                }\n            }\n        } else {\n            this.validateAllProperties();\n            if (this.is_turbos || this.is_vanilla) {\n                const { max_stake, min_stake, barrier_choices } = response.proposal ?? {};\n                this.setBarrierChoices(barrier_choices as string[]);\n                this.setStakeBoundary(contract_type, min_stake, max_stake);\n            }\n        }\n\n        if (!this.is_purchasing_contract) {\n            this.enablePurchase();\n        }\n    }\n\n    onChartBarrierChange(barrier_1: string, barrier_2?: string) {\n        this.processNewValuesAsync({ barrier_1, barrier_2 }, true);\n    }\n\n    onAllowEqualsChange() {\n        this.processNewValuesAsync({ contract_type: this.is_equal ? 'rise_fall_equal' : 'rise_fall' }, true);\n    }\n\n    updateSymbol(underlying: string) {\n        if (!underlying) return;\n        this.onChange({\n            target: {\n                name: 'symbol',\n                value: underlying,\n            },\n        });\n    }\n\n    changeDurationValidationRules() {\n        if (this.expiry_type === 'endtime') {\n            this.validation_errors.duration = [];\n            return;\n        }\n\n        if (!this.validation_rules.duration) return;\n\n        const index = this.validation_rules.duration.rules?.findIndex(item => item[0] === 'number');\n        const limits = this.duration_min_max[this.contract_expiry_type] || false;\n\n        if (limits) {\n            const duration_options = {\n                min: convertDurationLimit(+limits.min, this.duration_unit),\n                max: convertDurationLimit(+limits.max, this.duration_unit),\n            };\n\n            if (Number(index) > -1 && this.validation_rules.duration.rules) {\n                this.validation_rules.duration.rules[Number(index)][1] = duration_options;\n            } else {\n                this.validation_rules.duration.rules?.push(['number', duration_options]);\n            }\n            this.validateProperty('duration', this.duration);\n        }\n    }\n\n    async accountSwitcherListener() {\n        if (this.root_store.common.is_language_changing) {\n            await this.loadActiveSymbols(false, false);\n            this.root_store.common.is_language_changing = false;\n        } else {\n            await this.loadActiveSymbols(true, false);\n        }\n\n        this.resetErrorServices();\n        await this.setContractTypes();\n        runInAction(async () => {\n            this.processNewValuesAsync(\n                { currency: this.root_store.client.currency || this.root_store.client.default_currency },\n                true,\n                { currency: this.currency },\n                false\n            );\n        });\n        return Promise.resolve();\n    }\n\n    preSwitchAccountListener() {\n        this.clearContracts();\n        this.is_trade_enabled = false;\n        return Promise.resolve();\n    }\n\n    async logoutListener() {\n        this.clearContracts();\n        this.refresh();\n        this.resetErrorServices();\n        if (this.root_store.common.is_language_changing) {\n            await this.loadActiveSymbols(false);\n            this.root_store.common.is_language_changing = false;\n        } else {\n            await this.loadActiveSymbols();\n        }\n        await this.setContractTypes();\n        this.is_trade_enabled = true;\n        this.debouncedProposal();\n    }\n\n    clientInitListener() {\n        this.initAccountCurrency(this.root_store.client.currency || this.root_store.client.default_currency);\n        return Promise.resolve();\n    }\n\n    networkStatusChangeListener(is_online: boolean) {\n        this.setTradeStatus(is_online);\n    }\n\n    themeChangeListener(is_dark_mode_on: boolean) {\n        this.updateBarrierColor(is_dark_mode_on);\n    }\n\n    resetErrorServices() {\n        this.root_store.ui.toggleServicesErrorModal(false);\n    }\n\n    onMount() {\n        if (this.is_trade_component_mounted && this.should_skip_prepost_lifecycle) {\n            return;\n        }\n        this.root_store.notifications.setShouldShowPopups(false);\n        this.onPreSwitchAccount(this.preSwitchAccountListener);\n        this.onSwitchAccount(this.accountSwitcherListener);\n        this.onLogout(this.logoutListener);\n        this.onClientInit(this.clientInitListener);\n        this.onNetworkStatusChange(this.networkStatusChangeListener);\n        this.onThemeChange(this.themeChangeListener);\n        this.setChartStatus(true);\n        runInAction(async () => {\n            this.is_trade_component_mounted = true;\n            await this.prepareTradeStore();\n            this.root_store.notifications.setShouldShowPopups(true);\n        });\n    }\n\n    setChartStatus(status: boolean) {\n        this.is_chart_loading = status;\n    }\n\n    async initAccountCurrency(new_currency: string) {\n        if (this.currency === new_currency) return;\n\n        await this.processNewValuesAsync({ currency: new_currency }, true, { currency: this.currency }, false);\n        this.refresh();\n        this.debouncedProposal();\n    }\n\n    onUnmount() {\n        if (this.should_skip_prepost_lifecycle) {\n            return;\n        }\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.is_trade_component_mounted = false;\n        // TODO: Find a more elegant solution to unmount contract-trade-store\n        this.root_store.contract_trade.onUnmount();\n        this.refresh();\n        this.resetErrorServices();\n        if (this.root_store.notifications.is_notifications_visible) {\n            this.root_store.notifications.toggleNotificationsModal();\n        }\n        if (this.prev_chart_layout) {\n            this.prev_chart_layout.is_used = false;\n        }\n        this.resetAccumulatorData();\n        if (this.is_vanilla) {\n            this.setBarrierChoices([]);\n        }\n    }\n\n    prev_chart_layout: TPrevChartLayout = null;\n\n    get chart_layout() {\n        let layout = null;\n        if (this.prev_chart_layout && this.prev_chart_layout.is_used === false) {\n            layout = this.prev_chart_layout;\n        }\n        return layout;\n    }\n\n    get is_crypto_multiplier() {\n        return this.contract_type === 'multiplier' && this.symbol.startsWith('cry');\n    }\n\n    exportLayout(layout: TChartLayout) {\n        delete layout.previousMaxTicks; // TODO: fix it in smartcharts\n        this.prev_chart_layout = layout;\n        if (this.prev_chart_layout) {\n            this.prev_chart_layout.isDone = () => {\n                if (this.prev_chart_layout) this.prev_chart_layout.is_used = true;\n                this.setChartStatus(false);\n            };\n        }\n    }\n\n    // ---------- WS ----------\n    wsSubscribe = (req: TicksHistoryRequest, callback: (response: TTicksHistoryResponse) => void) => {\n        const passthrough_callback = (...args: [TTicksHistoryResponse]) => {\n            callback(...args);\n            if (this.is_accumulator) {\n                let current_spot_data = {};\n                if ('tick' in args[0]) {\n                    const { epoch, quote, symbol } = args[0].tick as TickSpotData;\n                    if (this.symbol !== symbol) return;\n                    current_spot_data = {\n                        current_spot: quote,\n                        current_spot_time: epoch,\n                    };\n                } else if ('history' in args[0]) {\n                    const { prices, times } = args[0].history as History;\n                    const symbol = args[0].echo_req.ticks_history;\n                    if (this.symbol !== symbol) return;\n                    current_spot_data = {\n                        current_spot: prices?.[prices?.length - 1],\n                        current_spot_time: times?.[times?.length - 1],\n                    };\n                } else {\n                    return;\n                }\n                this.root_store.contract_trade.updateAccumulatorBarriersData(current_spot_data);\n            }\n        };\n        if (req.subscribe === 1) {\n            const key = JSON.stringify(req);\n            const subscriber = WS.subscribeTicksHistory(req, passthrough_callback);\n            g_subscribers_map[key] = subscriber;\n        }\n    };\n\n    wsForget = (req: TicksHistoryRequest) => {\n        const key = JSON.stringify(req);\n        if (g_subscribers_map[key]) {\n            g_subscribers_map[key]?.unsubscribe();\n            delete g_subscribers_map[key];\n        }\n        // WS.forget('ticks_history', callback, match);\n    };\n\n    wsForgetStream = (stream_id: string) => {\n        WS.forgetStream(stream_id);\n    };\n\n    wsSendRequest = (req: TradingTimesRequest | ActiveSymbolsRequest | ServerTimeRequest) => {\n        if ('time' in req) {\n            return ServerTime.timePromise().then(server_time => {\n                if (server_time) {\n                    return {\n                        msg_type: 'time',\n                        time: server_time.unix(),\n                    };\n                }\n                return WS.time();\n            });\n        }\n        if ('active_symbols' in req) {\n            return WS.activeSymbols('brief');\n        }\n        if ('trading_times' in req) {\n            return WS.tradingTimes(req.trading_times);\n        }\n        return WS.storage.send(req);\n    };\n\n    chartStateChange(state: string, option?: TChartStateChangeOption) {\n        if (\n            state === STATE_TYPES.MARKET_STATE_CHANGE &&\n            this.is_trade_component_mounted &&\n            option?.isClosed &&\n            option.isClosed !== this.is_market_closed\n        ) {\n            this.prepareTradeStore(false);\n        }\n        const { data, event_type } = getChartAnalyticsData(state as keyof typeof STATE_TYPES, option) as TPayload;\n        if (data) {\n            RudderStack.track(event_type, {\n                ...data,\n                device_type: isMobile() ? 'mobile' : 'desktop',\n                form_name: 'default',\n            } as TEvents['ce_chart_types_form']);\n        }\n    }\n\n    get has_alternative_source() {\n        return this.is_multiplier && !!this.hovered_contract_type;\n    }\n\n    get is_accumulator() {\n        return this.contract_type === 'accumulator';\n    }\n\n    get is_multiplier() {\n        return this.contract_type === 'multiplier';\n    }\n\n    get is_turbos() {\n        return isTurbosContract(this.contract_type);\n    }\n\n    get is_vanilla() {\n        return isVanillaContract(this.contract_type);\n    }\n\n    setContractPurchaseToastbox(response: Buy) {\n        const list = getAvailableContractTypes(\n            this.contract_types_list,\n            unsupported_contract_types_list\n        ) as Array<TToastBoxListItem>;\n\n        this.contract_purchase_toast_box = {\n            key: true,\n            buy_price: formatMoney(this.root_store.client.currency, response.buy_price, true, 0, 0),\n            contract_type: this.contract_type,\n            currency: getCurrencyDisplayCode(this.root_store.client.currency),\n            list,\n        };\n    }\n\n    clearContractPurchaseToastBox() {\n        this.contract_purchase_toast_box = undefined;\n    }\n\n    async getFirstOpenMarket(markets_to_search: string[]) {\n        if (this.active_symbols?.length) {\n            return findFirstOpenMarket(this.active_symbols, markets_to_search);\n        }\n        const { active_symbols, error } = await WS.authorized.activeSymbols();\n        if (error) {\n            this.root_store.common.showError({ message: localize('Trading is unavailable at this time.') });\n            return undefined;\n        }\n        return findFirstOpenMarket(active_symbols, markets_to_search);\n    }\n\n    setStakeBoundary(type: string, min_stake?: number, max_stake?: number) {\n        if (min_stake && max_stake) this.stake_boundary[type] = { min_stake, max_stake };\n    }\n\n    setBarrierChoices(barrier_choices: string[]) {\n        this.barrier_choices = barrier_choices ?? [];\n        if (this.is_turbos) {\n            const stored_barriers_data = { barrier: this.barrier_1, barrier_choices };\n            if (getContractSubtype(this.contract_type) === 'Long') {\n                this.long_barriers = stored_barriers_data;\n            } else {\n                this.short_barriers = stored_barriers_data;\n            }\n        }\n        if (this.is_vanilla) {\n            this.strike_price_choices = { barrier: this.barrier_1, barrier_choices };\n        }\n    }\n\n    setIsDigitsWidgetActive(is_active: boolean) {\n        this.is_digits_widget_active = is_active;\n    }\n}\n","import TradeStore from './Trading/trade-store';\n\nexport default class ModulesStore {\n    constructor(root_store, core_store) {\n        this.cashier = core_store.modules.cashier;\n        this.trade = new TradeStore({ root_store });\n    }\n}\n","import { TCoreStores } from '@deriv/stores/types';\nimport ModulesStore from './Modules';\n\nexport default class RootStore {\n    client: TCoreStores['client'];\n    common: TCoreStores['common'];\n    modules: ModulesStore;\n    ui: TCoreStores['ui'];\n    gtm: TCoreStores['gtm'];\n    pushwoosh: TCoreStores['pushwoosh'];\n    notifications: TCoreStores['notifications'];\n    contract_replay: TCoreStores['contract_replay'];\n    contract_trade: TCoreStores['contract_trade'];\n    portfolio: TCoreStores['portfolio'];\n    chart_barrier_store: TCoreStores['chart_barrier_store'];\n    active_symbols: TCoreStores['active_symbols'];\n\n    constructor(core_store: TCoreStores) {\n        this.client = core_store.client;\n        this.common = core_store.common;\n        this.modules = new ModulesStore(this, core_store);\n        this.ui = core_store.ui;\n        this.gtm = core_store.gtm;\n        this.pushwoosh = core_store.pushwoosh;\n        this.notifications = core_store.notifications;\n        this.contract_replay = core_store.contract_replay;\n        this.contract_trade = core_store.contract_trade;\n        this.portfolio = core_store.portfolio;\n        this.chart_barrier_store = core_store.chart_barrier_store;\n        this.active_symbols = core_store.active_symbols;\n    }\n}\n","import { configure } from 'mobx';\nimport RootStore from 'Stores';\nimport { setWebsocket } from '@deriv/shared';\nimport ServerTime from '_common/base/server_time';\n\nconfigure({ enforceActions: 'observed' });\n\nlet root_store;\n\nconst initStore = (core_store, websocket) => {\n    if (root_store) return root_store;\n\n    ServerTime.init(core_store.common);\n    setWebsocket(websocket);\n    root_store = new RootStore(core_store);\n\n    return root_store;\n};\n\nexport default initStore;\n","import React from 'react';\nimport Loadable from 'react-loadable';\nimport Routes from 'App/Containers/Routes/routes.jsx';\nimport TradeHeaderExtensions from 'App/Containers/trade-header-extensions';\nimport TradeFooterExtensions from 'App/Containers/trade-footer-extensions';\nimport TradeSettingsExtensions from 'App/Containers/trade-settings-extensions';\nimport { NetworkStatusToastErrorPopup } from 'Modules/Trading/Containers/toast-popup';\nimport initStore from './init-store';\nimport 'Sass/app.scss';\nimport type { TCoreStores } from '@deriv/stores/types';\nimport TraderProviders from '../trader-providers';\n\ntype Apptypes = {\n    passthrough: {\n        root_store: TCoreStores;\n        WS: unknown;\n    };\n};\n\nconst TradeModals = Loadable({\n    loader: () => import(/* webpackChunkName: \"trade-modals\", webpackPrefetch: true */ './Containers/Modals'),\n    loading: () => null,\n});\n\nconst App = ({ passthrough }: Apptypes) => {\n    const root_store = initStore(passthrough.root_store, passthrough.WS);\n    React.useEffect(() => {\n        return () => root_store.ui.setPromptHandler(false);\n    }, [root_store]);\n\n    return (\n        <TraderProviders store={root_store}>\n            <Routes />\n            <TradeModals />\n            <NetworkStatusToastErrorPopup />\n            <TradeHeaderExtensions store={root_store} />\n            <TradeFooterExtensions />\n            <TradeSettingsExtensions store={root_store} />\n        </TraderProviders>\n    );\n};\n\nexport default App;\n","import App from './app';\n\nexport default App;\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype TTicksHistoryCounter = {\n    has_progress_dots: boolean;\n    progress_dots_testid?: string;\n    should_emphasize_last_counter?: boolean;\n    ticks_history_counter_testid?: string;\n    value: number;\n};\n\nconst TicksHistoryCounter = ({\n    has_progress_dots,\n    progress_dots_testid,\n    should_emphasize_last_counter,\n    ticks_history_counter_testid,\n    value,\n}: TTicksHistoryCounter) => {\n    const should_highlight_last_counter = should_emphasize_last_counter && has_progress_dots && value === 0;\n    return (\n        <div\n            data-testid={ticks_history_counter_testid}\n            className={classNames('accumulators-stats__history-counter', {\n                'accumulators-stats__history-counter--emphasized': should_highlight_last_counter,\n            })}\n        >\n            {value}\n            {has_progress_dots && (\n                <div className='accumulators-stats__progress-dots' data-testid={progress_dots_testid}>\n                    {[1, 2, 3].map(dot => {\n                        return <span key={`ticks-dot-counter${dot}`} className={`dot-${dot}`} />;\n                    })}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default React.memo(TicksHistoryCounter);\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport TicksHistoryCounter from './ticks-history-counter';\n\ntype TExpandedTicksHistoryProps = {\n    history_text_size: string;\n    rows: number[][];\n};\n\nconst ExpandedTicksHistory = ({ history_text_size, rows }: TExpandedTicksHistoryProps) => (\n    <Text size={history_text_size} className='accumulators-stats__history--expanded'>\n        {rows.map((row, i) => (\n            <div\n                key={i.toString() + row[0]}\n                data-testid='dt_accu_stats_history_row'\n                className='accumulators-stats__row'\n            >\n                {row.map((counter, idx) => (\n                    <TicksHistoryCounter\n                        ticks_history_counter_testid='dt_accu_stats_history_counter'\n                        key={idx.toString() + counter}\n                        value={counter}\n                        has_progress_dots={i === 0 && idx === 0}\n                    />\n                ))}\n            </div>\n        ))}\n    </Text>\n);\n\nexport default React.memo(ExpandedTicksHistory);\n","import React from 'react';\nimport { Icon, Loading, Modal, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getUrlBase, isMobile } from '@deriv/shared';\nimport 'Sass/app/modules/contract/accumulators-stats.scss';\n\ntype TAccumulatorsStatsManualModal = {\n    icon_classname: string;\n    is_dark_theme?: boolean;\n    is_manual_open: boolean;\n    title: string;\n    toggleManual: () => void;\n};\n\nconst AccumulatorsStatsManualModal = ({\n    icon_classname,\n    is_dark_theme,\n    is_manual_open,\n    title,\n    toggleManual,\n}: TAccumulatorsStatsManualModal) => {\n    const [is_loading, setIsLoading] = React.useState(true);\n    const is_mobile = isMobile();\n    // memoize file paths for videos and open the modal only after we get them\n    const getVideoSource = React.useCallback(\n        (extension: string) => {\n            return getUrlBase(\n                `/public/videos/accumulators_manual_${is_mobile ? 'mobile' : 'desktop'}${\n                    is_dark_theme ? '_dark' : ''\n                }.${extension}`\n            );\n        },\n        [is_mobile, is_dark_theme]\n    );\n    const mp4_src = React.useMemo(() => getVideoSource('mp4'), [getVideoSource]);\n    const webm_src = React.useMemo(() => getVideoSource('webm'), [getVideoSource]);\n\n    return (\n        <React.Fragment>\n            <Icon\n                icon='IcInfoOutline'\n                onClick={toggleManual}\n                size={16}\n                className={icon_classname}\n                data_testid='dt_ic_info_icon'\n            />\n            <Modal\n                is_open={is_manual_open && !!mp4_src && !!webm_src}\n                should_header_stick_body={false}\n                title={title}\n                toggleModal={toggleManual}\n                width={is_mobile ? '328px' : '596px'}\n                className='accumulators-stats-manual-modal'\n            >\n                <Modal.Body className='accumulators-stats-modal-body'>\n                    <div className='accumulators-stats-modal-body__video'>\n                        {is_loading && <Loading is_fullscreen={false} />}\n                        <video\n                            autoPlay\n                            data-testid='dt_accumulators_stats_manual_video'\n                            loop\n                            onLoadedData={() => setIsLoading(false)}\n                            playsInline\n                            preload='auto'\n                            width={is_mobile ? 296 : 563}\n                        >\n                            {/* a browser will select a source with extension it recognizes */}\n                            <source src={mp4_src} type='video/mp4' />\n                            <source src={webm_src} type='video/webm' />\n                            {localize('Unfortunately, your browser does not support the video.')}\n                        </video>\n                    </div>\n                    <Text\n                        as='p'\n                        size={is_mobile ? 'xs' : 's'}\n                        color='prominent'\n                        className='accumulators-stats-modal-body__text'\n                    >\n                        {localize(\n                            'Stats show the history of consecutive tick counts, i.e. the number of ticks the price remained within range continuously.'\n                        )}\n                    </Text>\n                </Modal.Body>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport { AccumulatorsStatsManualModal };\n","import React from 'react';\nimport classNames from 'classnames';\nimport { DesktopWrapper, Icon, MobileDialog, MobileWrapper, Text } from '@deriv/components';\nimport { isDesktop, isMobile } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport ExpandedTicksHistory from './expanded-ticks-history';\nimport TicksHistoryCounter from './ticks-history-counter';\nimport { AccumulatorsStatsManualModal } from './accumulators-stats-manual-modal';\nimport 'Sass/app/modules/contract/accumulators-stats.scss';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TAccumulatorStats = {\n    is_expandable?: boolean;\n};\nexport const ROW_SIZES = {\n    DESKTOP_COLLAPSED: 10,\n    DESKTOP_EXPANDED: 10,\n    MOBILE_COLLAPSED: 15,\n    MOBILE_EXPANDED: 5,\n};\n\nconst AccumulatorsStats = observer(({ is_expandable = true }: TAccumulatorStats) => {\n    const { ui } = useStore();\n    const { ticks_history_stats = {} } = useTraderStore();\n    const { is_dark_mode_on: is_dark_theme } = ui;\n\n    const [is_collapsed, setIsCollapsed] = React.useState(true);\n    const [is_manual_open, setIsManualOpen] = React.useState(false);\n    const widget_title = localize('Stats');\n    const ticks_history = ticks_history_stats?.ticks_stayed_in ?? [];\n    const history_text_size = isDesktop() || !is_collapsed ? 'xxs' : 'xxxs';\n\n    const rows = ticks_history.reduce((acc: number[][], _el, index) => {\n        const desktop_row_size = is_collapsed ? ROW_SIZES.DESKTOP_COLLAPSED : ROW_SIZES.DESKTOP_EXPANDED;\n        const mobile_row_size = is_collapsed ? ROW_SIZES.MOBILE_COLLAPSED : ROW_SIZES.MOBILE_EXPANDED;\n        const row_size = isDesktop() ? desktop_row_size : mobile_row_size;\n        if (index % row_size === 0) {\n            acc.push(ticks_history.slice(index, index + row_size));\n        }\n        return acc;\n    }, []);\n\n    if (!ticks_history.length) return null;\n\n    return (\n        <div className='accumulators-stats'>\n            <div className={classNames('accumulators-stats__container--collapsed')}>\n                <div className='accumulators-stats__title'>\n                    <AccumulatorsStatsManualModal\n                        is_dark_theme={is_dark_theme}\n                        icon_classname='info'\n                        is_manual_open={is_manual_open}\n                        title={widget_title}\n                        toggleManual={() => setIsManualOpen(!is_manual_open)}\n                    />\n                    <Text weight='bold' size={isMobile() ? 'xxxs' : 'xxs'} className='accumulators-stats__title-text'>\n                        {widget_title}\n                    </Text>\n                </div>\n                <Text size={history_text_size} className='accumulators-stats__history'>\n                    {!is_collapsed ? (\n                        <div className='accumulators-stats__history-heading'>{localize('Number of ticks')}</div>\n                    ) : (\n                        rows[0]?.map((el, i) => (\n                            <TicksHistoryCounter\n                                ticks_history_counter_testid='dt_accu_stats_history_counter'\n                                key={i}\n                                value={el}\n                                has_progress_dots={i === 0}\n                            />\n                        ))\n                    )}\n                </Text>\n            </div>\n            {is_expandable && !is_collapsed && (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <ExpandedTicksHistory history_text_size={history_text_size} rows={rows} />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <MobileDialog\n                            onClose={() => setIsCollapsed(!is_collapsed)}\n                            portal_element_id='modal_root'\n                            title={widget_title}\n                            visible={!is_collapsed}\n                            wrapper_classname='accumulators-stats'\n                        >\n                            <ExpandedTicksHistory history_text_size={history_text_size} rows={rows} />\n                        </MobileDialog>\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n            {is_expandable && (\n                <Icon\n                    icon={is_collapsed ? 'IcArrowUp' : 'IcArrowDown'}\n                    onClick={() => setIsCollapsed(!is_collapsed)}\n                    className='accordion-toggle-arrow'\n                    data_testid='dt_accordion-toggle-arrow'\n                />\n            )}\n        </div>\n    );\n});\n\nexport default AccumulatorsStats;\n","import AccumulatorsStats from './accumulators-stats';\n\nexport default AccumulatorsStats;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype TDigit = {\n    is_latest?: boolean;\n    is_lost?: boolean;\n    is_selected?: boolean;\n    is_won?: boolean;\n    percentage: number | null;\n    value: number;\n};\n\nconst Digit = ({ is_latest, is_lost, is_selected, is_won, percentage, value }: TDigit) => {\n    const display_percentage = percentage && !isNaN(percentage) ? parseFloat(percentage.toFixed(1)) : null;\n    return (\n        <React.Fragment>\n            <span\n                className={classNames('digits__digit-value', {\n                    'digits__digit-value--latest': is_latest,\n                    'digits__digit-value--selected': is_selected,\n                    'digits__digit-value--win': is_won && is_latest,\n                    'digits__digit-value--loss': is_lost && is_latest,\n                })}\n            >\n                <i\n                    className={classNames('digits__digit-display-value', {\n                        'digits__digit-display-value--no-stats': !display_percentage,\n                    })}\n                >\n                    {value}\n                </i>\n                {!!display_percentage && <i className='digits__digit-display-percentage'>{display_percentage}%</i>}\n            </span>\n        </React.Fragment>\n    );\n};\n\nexport default Digit;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Text } from '@deriv/components';\n\ntype TDigitSpot = {\n    current_spot?: string | null;\n    is_selected_winning?: boolean;\n    is_lost?: boolean;\n    is_won?: boolean;\n};\n\nconst DigitSpot = ({ current_spot, is_selected_winning, is_lost, is_won }: TDigitSpot) => (\n    <React.Fragment>\n        <Text\n            size='xs'\n            align='center'\n            weight='bold'\n            className='digits__digit-spot-value'\n            data-testid='dt_digits_digit_spot_value'\n        >\n            {current_spot?.slice(0, -1)}\n        </Text>\n        <span\n            className={classNames('digits__digit-spot-last', {\n                'digits__digit-spot-last--selected-win': is_selected_winning,\n                'digits__digit-spot-last--win': is_won,\n                'digits__digit-spot-last--loss': is_lost,\n            })}\n            data-testid='dt_digits_digit_spot_last'\n        >\n            {current_spot?.slice(-1)}\n        </span>\n    </React.Fragment>\n);\n\nexport default DigitSpot;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype TLastDigitStat = {\n    is_max: boolean | null;\n    is_min: boolean | null;\n    is_selected?: boolean;\n    percentage: number | null;\n};\n\nconst LastDigitStat = ({ is_max, is_min, is_selected, percentage }: TLastDigitStat) => {\n    // interpolate color opacity within 7.5 to 12.5 range\n    let opacity = ((percentage ?? 0) - 10) / 4;\n    opacity = Math.min(Math.max(opacity, -1), +1);\n    opacity = ((opacity + 1) / 2) * 0.85 + 0.15;\n    const w = 339.292;\n    let p = (20 * (percentage ?? 0) - 102) / 3 / 100;\n    p = Math.max(Math.min(p, 0.66), 0.06);\n\n    return (\n        <div\n            className={classNames('digits__pie-container', {\n                'digits__pie-container--selected': is_selected,\n            })}\n        >\n            <svg className='digits__pie-progress' width='120' height='120' viewBox='0 0 120 120'>\n                <circle\n                    className='progress__bg'\n                    cx='60'\n                    cy='60'\n                    r='54'\n                    fill='none'\n                    stroke='#E8EEFC'\n                    strokeWidth='12'\n                    data-testid='dt_progress_bg'\n                />\n                {percentage && (\n                    <circle\n                        className={classNames('progress__value', {\n                            'progress__value--is-max': is_max,\n                            'progress__value--is-min': is_min,\n                        })}\n                        cx='60'\n                        cy='60'\n                        r='54'\n                        fill='none'\n                        strokeOpacity={is_max || is_min ? 1 : opacity}\n                        strokeWidth='12'\n                        strokeDasharray={[w * p, w * (1 - p)].join(' ')}\n                        // strokeDashoffset={(w * (1 - (0 * 3.5 * percentage / 100)))}\n                        strokeDashoffset={w * ((p + 1) / 2)}\n                        data-testid='dt_progress_value'\n                    />\n                )}\n            </svg>\n        </div>\n    );\n};\n\nexport default LastDigitStat;\n","import classNames from 'classnames';\nimport { observer } from 'mobx-react';\nimport React from 'react';\nimport { DesktopWrapper } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\nimport { Bounce } from 'App/Components/Animations';\nimport Digit from './digit';\nimport DigitSpot from './digit-spot';\nimport LastDigitStat from './last-digit-stat';\nimport { ProposalOpenContract } from '@deriv/api-types';\n\ntype TDigitDisplay = Pick<React.ComponentProps<typeof DigitSpot>, 'is_lost' | 'is_won'> &\n    Pick<React.ComponentProps<typeof Digit>, 'is_lost' | 'is_won'> &\n    Pick<React.ComponentProps<typeof LastDigitStat>, 'is_max' | 'is_min'> & {\n        barrier: number | null;\n        is_digit_contract?: boolean;\n        has_entry_spot: boolean;\n        onSelect: ((digit_value: number) => void) | null;\n        latest_digit: {\n            digit: number | null;\n            spot: string | null;\n        };\n        selected_digit?: number;\n        status: ProposalOpenContract['status'];\n        stats?: number | null;\n        value: number;\n        onLastDigitSpot?: (value: {\n            spot: TDigitDisplay['latest_digit']['spot'];\n            is_lost: TDigitDisplay['is_lost'];\n            is_selected_winning: boolean;\n            is_latest: boolean;\n            is_won: TDigitDisplay['is_won'];\n        }) => void;\n    };\nconst DigitDisplay = ({\n    barrier,\n    is_digit_contract,\n    has_entry_spot,\n    is_lost,\n    is_max,\n    is_min,\n    is_won,\n    onSelect,\n    latest_digit,\n    selected_digit,\n    status,\n    stats,\n    value,\n    onLastDigitSpot,\n}: TDigitDisplay) => {\n    const { digit, spot } = latest_digit;\n    const is_latest = value === digit;\n    const is_selected = value === barrier;\n    const is_selected_winning = digit === barrier;\n    const percentage = stats ? (stats * 100) / 1000 : null;\n\n    React.useEffect(() => {\n        if (onLastDigitSpot) {\n            onLastDigitSpot({ spot, is_lost, is_selected_winning, is_latest, is_won });\n        }\n    }, [latest_digit, spot, barrier, value, is_lost, is_selected_winning, is_latest, is_won, onLastDigitSpot]);\n\n    const is_digit_selectable = isMobile() && typeof onSelect === 'function' && !status;\n    const is_digit_selected = isMobile() && value === selected_digit && !status;\n    return (\n        <div\n            className={classNames('digits__digit', {\n                'digits__digit--latest': is_latest,\n                'digits__digit--win': is_won && is_latest,\n                'digits__digit--loss': is_lost && is_latest,\n                'digits__digit--is-selectable': is_digit_selectable,\n                'digits__digit--is-selected': is_digit_selected,\n            })}\n            onClick={() => {\n                if (!is_digit_selectable) return;\n                onSelect(value);\n            }}\n        >\n            <LastDigitStat is_min={is_min} is_max={is_max} is_selected={is_selected} percentage={percentage} />\n            <DesktopWrapper>\n                <Bounce\n                    is_visible={!!(is_digit_contract && is_latest && spot && status && has_entry_spot)}\n                    className='digits__digit-spot'\n                    keyname='digits__digit-spot'\n                >\n                    <DigitSpot\n                        current_spot={spot}\n                        is_lost={is_lost}\n                        is_selected_winning={is_selected_winning}\n                        is_won={is_won}\n                    />\n                </Bounce>\n            </DesktopWrapper>\n            <Digit\n                is_latest={is_latest}\n                is_lost={is_lost}\n                is_selected={is_selected}\n                is_won={is_won}\n                percentage={percentage}\n                value={value}\n            />\n        </div>\n    );\n};\n\nexport default observer(DigitDisplay);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon } from '@deriv/components';\n\ntype TLastDigitPointer = {\n    is_lost?: boolean;\n    is_trade_page?: boolean;\n    is_won?: boolean;\n    position: {\n        left: number;\n        top: number;\n    };\n};\n\nconst LastDigitPointer = ({ is_lost, is_trade_page, is_won, position }: TLastDigitPointer) => (\n    <React.Fragment>\n        {!!position && (\n            <span\n                className='digits__pointer'\n                style={{ transform: `translate3d(calc(${position.left}px), ${position.top}px, 0px)` }}\n            >\n                <Icon\n                    icon='IcProfit'\n                    className={classNames('digits__icon', {\n                        'digits__icon--win': is_won && !is_trade_page,\n                        'digits__icon--loss': is_lost && !is_trade_page,\n                    })}\n                    color={is_won ? 'green' : 'red'}\n                    custom_color={!(is_won || is_lost) ? 'var(--brand-orange)' : undefined}\n                />\n            </span>\n        )}\n    </React.Fragment>\n);\n\nexport default LastDigitPointer;\n","import classNames from 'classnames';\nimport { observer } from 'mobx-react';\nimport React from 'react';\nimport { isMobile } from '@deriv/shared';\nimport DigitDisplay from './digit-display';\nimport LastDigitPointer from './last-digit-pointer';\nimport { ProposalOpenContract, TicksStreamResponse } from '@deriv/api-types';\n\ntype TLastDigitPrediction = Pick<\n    React.ComponentProps<typeof DigitDisplay>,\n    'barrier' | 'is_digit_contract' | 'has_entry_spot' | 'onLastDigitSpot'\n> & {\n    contract_type?: string;\n    digits?: number[];\n    digits_info: { [key: string]: { digit: number; spot: string } };\n    dimension: number;\n    is_ended?: boolean;\n    is_trade_page?: boolean;\n    onDigitChange?: (event: { target: { name: string; value: number } }) => void;\n    selected_digit?: number;\n    status?: ProposalOpenContract['status'];\n    tick?: TicksStreamResponse['tick'];\n    trade_type?: string;\n};\nconst display_array = Array.from(Array(10).keys()); // digits array [0 - 9]\n\nconst LastDigitPrediction = ({\n    barrier,\n    contract_type,\n    digits,\n    digits_info,\n    dimension,\n    is_digit_contract,\n    has_entry_spot,\n    is_ended,\n    is_trade_page,\n    onDigitChange,\n    onLastDigitSpot,\n    selected_digit,\n    status,\n    tick,\n    trade_type,\n}: TLastDigitPrediction) => {\n    const [digit_offset] = React.useState<Record<number, Record<'left' | 'top', number>>>({\n        0: { left: 6, top: 0 },\n        1: { left: 6 + dimension * 1, top: 0 },\n        2: { left: 6 + dimension * 2, top: 0 },\n        3: { left: 6 + dimension * 3, top: 0 },\n        4: { left: 6 + dimension * 4, top: 0 },\n        5: { left: 6 + dimension * 5, top: 0 },\n        6: { left: 6 + dimension * 6, top: 0 },\n        7: { left: 6 + dimension * 7, top: 0 },\n        8: { left: 6 + dimension * 8, top: 0 },\n        9: { left: 6 + dimension * 9, top: 0 },\n    });\n\n    const [digit_offset_mobile] = React.useState<Record<number, Record<'left' | 'top', number>>>({\n        0: { left: 6, top: -60 },\n        1: { left: 6 + dimension * 1, top: -60 },\n        2: { left: 6 + dimension * 2, top: -60 },\n        3: { left: 6 + dimension * 3, top: -60 },\n        4: { left: 6 + dimension * 4, top: -60 },\n        5: { left: 6 + dimension * 0, top: 8 },\n        6: { left: 6 + dimension * 1, top: 8 },\n        7: { left: 6 + dimension * 2, top: 8 },\n        8: { left: 6 + dimension * 3, top: 8 },\n        9: { left: 6 + dimension * 4, top: 8 },\n    });\n\n    const handleSelect = (digit_value: number) => {\n        if (!isSelectableDigitType()) return;\n        if (digit_value !== selected_digit && typeof onDigitChange === 'function') {\n            onDigitChange({ target: { name: 'last_digit', value: digit_value } });\n        }\n    };\n\n    const getBarrier = (num: number | null): number | null => {\n        const barrier_map: {\n            [key: string]: (val: number | null) => boolean;\n        } = {\n            DIGITMATCH: (val: number | null) => val === barrier,\n            DIGITDIFF: (val: number | null) => val !== barrier && !!barrier && !isNaN(barrier),\n            DIGITOVER: (val: number | null) => !!(val && barrier) && val > barrier,\n            DIGITUNDER: (val: number | null) => !!(val && barrier) && val < barrier,\n            DIGITODD: (val: number | null) => !!val && Boolean(val % 2),\n            DIGITEVEN: (val: number | null) => !!val && !(val % 2),\n        };\n        if (!contract_type || !barrier_map[contract_type]) return null;\n        return barrier_map[contract_type](num) ? num : null;\n    };\n\n    const getOffset = () => (isMobile() ? digit_offset_mobile : digit_offset);\n\n    const isSelectableDigitType = () => (isMobile() ? trade_type !== 'even_odd' : false);\n    const digits_array = Object.keys(digits_info)\n        .sort((a, b) => +a - +b)\n        .map(spot_time => digits_info[+spot_time]);\n    const last_contract_digit = digits_array.slice(-1)[0] || {};\n\n    // 'won' or 'lost' status exists after contract expiry\n    const is_won = is_ended && status === 'won' && is_digit_contract;\n    // need to explicitly have is_lost condition here\n    // because negating is_won would always be true,\n    // but we only need is_lost condition only once we have the 'won' or 'lost' status\n    const is_lost = is_ended && status === 'lost' && is_digit_contract;\n\n    const min = digits ? Math.min(...digits) : null;\n    const max = digits ? Math.max(...digits) : null;\n\n    // latest last digit refers to digit and spot values from latest price\n    // latest contract digit refers to digit and spot values from last digit contract in contracts array\n    const latest_tick_pip_size = tick ? +tick.pip_size : null;\n    const latest_tick_ask_price = tick?.ask && latest_tick_pip_size ? tick.ask.toFixed(latest_tick_pip_size) : null;\n    const latest_tick_digit = latest_tick_ask_price ? +(latest_tick_ask_price.split('').pop() || '') : null;\n    const position = tick ? getOffset()[latest_tick_digit ?? -1] : getOffset()[last_contract_digit.digit];\n    const latest_digit = !(is_won || is_lost)\n        ? { digit: latest_tick_digit, spot: latest_tick_ask_price }\n        : last_contract_digit;\n    return (\n        <div\n            className={classNames('digits', {\n                'digits--trade': is_trade_page,\n            })}\n        >\n            {display_array.map(idx => (\n                <DigitDisplay\n                    barrier={getBarrier(idx)}\n                    has_entry_spot={has_entry_spot}\n                    is_digit_contract={is_digit_contract}\n                    is_lost={is_lost}\n                    is_won={is_won}\n                    key={idx}\n                    is_max={digits ? digits[idx] === max : null}\n                    is_min={digits ? digits[idx] === min : null}\n                    stats={digits ? digits[idx] : null}\n                    status={status}\n                    latest_digit={is_trade_page ? latest_digit : last_contract_digit}\n                    value={idx}\n                    onLastDigitSpot={onLastDigitSpot}\n                    onSelect={isSelectableDigitType() ? handleSelect : null}\n                    selected_digit={isSelectableDigitType() ? selected_digit : undefined}\n                />\n            ))}\n            <LastDigitPointer is_lost={is_lost} is_trade_page={is_trade_page} is_won={is_won} position={position} />\n        </div>\n    );\n};\n\nexport default observer(LastDigitPrediction);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { toJS } from 'mobx';\nimport { DesktopWrapper, MobileWrapper, Popover, Text } from '@deriv/components';\nimport {\n    getMarketNamesMap,\n    isMobile,\n    useIsMounted,\n    isContractElapsed,\n    TContractStore,\n    TTickSpotData,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { Bounce, SlideIn } from 'App/Components/Animations';\nimport { DigitSpot, LastDigitPrediction } from '../LastDigitPrediction';\nimport 'Sass/app/modules/contract/digits.scss';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\ntype TTraderStore = ReturnType<typeof useTraderStore>;\ntype TOnChangeStatus = { status: string | null | undefined; current_tick: number | null };\ntype TOnLastDigitSpot = {\n    spot: string | null;\n    is_lost?: boolean;\n    is_selected_winning: boolean;\n    is_latest: boolean;\n    is_won?: boolean;\n};\n\ntype TDigitsWrapper = TDigits & {\n    onChangeStatus?: (params: TOnChangeStatus) => void;\n    onLastDigitSpot?: (params: TOnLastDigitSpot) => void;\n};\ntype TDigits = Pick<TContractStore, 'contract_info' | 'digits_info'> & {\n    digits_array?: number[];\n    display_status?: TContractStore['display_status'];\n    is_digit_contract?: TContractStore['is_digit_contract'];\n    is_ended?: TContractStore['is_ended'];\n    is_trade_page?: boolean;\n    onDigitChange?: TTraderStore['onChange'];\n    selected_digit?: TTraderStore['last_digit'];\n    trade_type?: TTraderStore['contract_type'];\n    tick?: TTickSpotData;\n    underlying: TTraderStore['symbol'];\n};\ntype TTickStream = NonNullable<TContractStore['contract_info']['tick_stream']>[number];\ntype TTickData =\n    | TTickSpotData\n    | null\n    | undefined\n    | {\n          ask: TTickStream['tick'];\n          bid: TTickStream['tick'];\n          current_tick: number;\n          epoch: TTickStream['epoch'];\n          pip_size?: number;\n      };\n\nconst DigitsWrapper = ({\n    contract_info,\n    digits_array,\n    digits_info,\n    display_status,\n    is_digit_contract,\n    is_ended,\n    is_trade_page,\n    onDigitChange,\n    selected_digit,\n    trade_type,\n    onChangeStatus,\n    ...props\n}: TDigitsWrapper) => {\n    const has_contract = contract_info.date_start;\n    let tick: TTickData = props.tick;\n\n    const is_tick_ready = is_trade_page ? !!tick : true;\n    const is_contract_elapsed = is_trade_page ? isContractElapsed(contract_info, tick) : false;\n    const status = !is_contract_elapsed && is_tick_ready ? display_status : null;\n\n    // tick from contract_info.tick_stream has totally different\n    // format from the tick from tick_history api call.\n    if (has_contract && !is_contract_elapsed) {\n        tick = null;\n        const tick_stream = contract_info.tick_stream;\n        if (tick_stream?.length) {\n            const t = toJS(tick_stream.slice(-1)[0]);\n            tick = {\n                ask: t.tick,\n                bid: t.tick,\n                epoch: t.epoch,\n                pip_size: t.tick_display_value?.split('.')[1].length,\n                current_tick: tick_stream.length,\n            };\n        }\n    }\n\n    React.useEffect(() => {\n        if (onChangeStatus) {\n            onChangeStatus({ status, current_tick: tick && 'current_tick' in tick ? tick.current_tick : null });\n        }\n    }, [tick, is_trade_page, display_status, onChangeStatus, status]);\n\n    return (\n        <LastDigitPrediction\n            // dimension of a single digit widget including margin/padding (number)\n            // i.e - 40px + 6px left and 6px right padding/margin = 52\n            dimension={isMobile() ? 64 : 52}\n            has_entry_spot={!!contract_info.entry_tick}\n            barrier={!is_contract_elapsed && is_tick_ready ? Number(contract_info.barrier) : null}\n            contract_type={!is_contract_elapsed && is_tick_ready ? contract_info.contract_type : ''}\n            digits={digits_array}\n            digits_info={!is_contract_elapsed && is_tick_ready ? digits_info : {}}\n            is_digit_contract={is_digit_contract}\n            is_ended={is_ended}\n            is_trade_page={is_trade_page}\n            status={status as React.ComponentProps<typeof LastDigitPrediction>['status']}\n            tick={tick as React.ComponentProps<typeof LastDigitPrediction>['tick']}\n            trade_type={trade_type}\n            onDigitChange={onDigitChange}\n            selected_digit={selected_digit}\n            onLastDigitSpot={props.onLastDigitSpot}\n        />\n    );\n};\n\nconst Digits = React.memo((props: TDigits) => {\n    const [status, setStatus] = React.useState<string | null>();\n    const [current_tick, setCurrentTick] = React.useState<number | null>();\n    const [spot, setSpot] = React.useState<string | null>();\n    const [is_selected_winning, setIsSelectedWinning] = React.useState<boolean>();\n    const [is_won, setIsWon] = React.useState<boolean>();\n    const [is_lost, setIsLost] = React.useState<boolean>();\n    const isMounted = useIsMounted();\n\n    const { contract_info, digits_array, is_digit_contract, is_trade_page, underlying } = props;\n\n    const onChangeStatus = (params: TOnChangeStatus) => {\n        setStatus(params.status);\n        setCurrentTick(params.current_tick);\n    };\n\n    const onLastDigitSpot = (params: TOnLastDigitSpot) => {\n        setSpot(params.spot);\n        setIsLost(params.is_lost);\n        setIsSelectedWinning(params.is_selected_winning);\n        setIsWon(params.is_won);\n    };\n\n    const getPopoverMessage = () => {\n        const underlying_name = is_trade_page ? underlying : contract_info.underlying;\n\n        return localize('Last digit stats for latest 1000 ticks for {{underlying_name}}', {\n            underlying_name:\n                getMarketNamesMap()[underlying_name?.toUpperCase() as keyof ReturnType<typeof getMarketNamesMap>],\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <DesktopWrapper>\n                <SlideIn\n                    is_visible={(digits_array || is_digit_contract) && isMounted()}\n                    className='digits__container'\n                    keyname='digits'\n                    type='bottom'\n                >\n                    {is_trade_page && (\n                        <div className='digits__tooltip-container'>\n                            <Popover\n                                alignment='top'\n                                classNameBubble='digits__tooltip-bubble'\n                                icon='info'\n                                id='dt_last_digits_info_tooltip'\n                                margin={4}\n                                message={getPopoverMessage()}\n                            />\n                        </div>\n                    )}\n                    <DigitsWrapper {...props} />\n                </SlideIn>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <div className='digits__container'>\n                    <Bounce\n                        is_visible={!!(is_digit_contract && status && spot && !!contract_info.entry_tick)}\n                        className={classNames('digits__digit-spot', {\n                            'digits__digit-spot--is-trading': is_trade_page,\n                        })}\n                        keyname='digits__digit-spot'\n                    >\n                        {is_trade_page && (\n                            <Text size='xs' align='center' className='digits__digit-spot-value'>\n                                <Localize i18n_default_text='Tick {{current_tick}} - ' values={{ current_tick }} />\n                            </Text>\n                        )}\n                        <DigitSpot\n                            current_spot={spot}\n                            is_lost={is_lost}\n                            is_selected_winning={is_selected_winning}\n                            is_won={is_won}\n                        />\n                    </Bounce>\n                    <DigitsWrapper {...props} onChangeStatus={onChangeStatus} onLastDigitSpot={onLastDigitSpot} />\n                </div>\n            </MobileWrapper>\n        </React.Fragment>\n    );\n});\n\nDigits.displayName = 'Digits';\n\nexport default Digits;\n","import Digits from './digits';\n\nexport default Digits;\n","import React from 'react';\nimport { PageError } from '@deriv/components';\nimport { routes, getUrlBase } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst Page404 = () => (\n    <PageError\n        header={localize('We couldn’t find that page')}\n        messages={[\n            localize('You may have followed a broken link, or the page has moved to a new address.'),\n            localize('Error code: {{error_code}} page not found', { error_code: 404 }),\n        ]}\n        redirect_urls={[routes.trade]}\n        redirect_labels={[localize('Return to trade')]}\n        classNameImage='page-404__image'\n        image_url={getUrlBase('/public/images/common/404.png')}\n    />\n);\n\nexport default Page404;\n","import Page404 from './Components/Page404';\n\nexport default Page404;\n","import { toJS } from 'mobx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { FastMarker } from 'Modules/SmartChart';\n\nconst ChartMarker = ({ marker_config, marker_content_props }) => {\n    const { ContentComponent, ...marker_props } = marker_config;\n\n    // TODO:\n    //  - rename x to epoch\n    //  - rename y to price\n    const onRef = ref => {\n        if (ref) {\n            // NOTE: null price means vertical line.\n            if (!marker_props.y) {\n                const margin = 24; // height of line marker icon\n\n                ref.div.style.height = `calc(100% - ${margin}px)`;\n            } else {\n                ref.div.style.zIndex = '1';\n            }\n            ref.setPosition({\n                epoch: +marker_props.x,\n                price: +marker_props.y,\n            });\n        }\n    };\n\n    return (\n        <FastMarker markerRef={onRef}>\n            <ContentComponent {...toJS(marker_content_props)} />\n        </FastMarker>\n    );\n};\n\nChartMarker.propTypes = {\n    marker_config: PropTypes.object,\n    marker_content_props: PropTypes.object,\n};\n\nexport default ChartMarker;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst BottomWidgets = ({ Widget }) => <div className='bottom-widgets'>{Widget}</div>;\n\nBottomWidgets.propTypes = {\n    Widget: PropTypes.node,\n};\n\nexport default BottomWidgets;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MobileWrapper, Toast, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { findContractCategory } from 'Modules/Trading/Helpers/contract-type';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TContractType = {\n    text?: string;\n    value: string;\n};\n\nconst BuyToastNotification = observer(() => {\n    const portal = document.getElementById('popup_root');\n    const { modules } = useStore();\n    const { trade } = modules;\n    const { contract_purchase_toast_box, clearContractPurchaseToastBox } = trade;\n\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            clearContractPurchaseToastBox();\n        }, 4000);\n\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [clearContractPurchaseToastBox, contract_purchase_toast_box]);\n\n    if (!portal || !contract_purchase_toast_box) return <React.Fragment />;\n\n    const { buy_price, currency, contract_type, list } = contract_purchase_toast_box;\n    const active_trade_type = { value: contract_type };\n\n    const trade_type_name = findContractCategory(list, active_trade_type)?.contract_types?.find(\n        (item: TContractType) => item.value === contract_type\n    )?.text;\n\n    return ReactDOM.createPortal(\n        <MobileWrapper>\n            <Toast\n                className='dc-toast-popup-mobile'\n                is_open={!!contract_purchase_toast_box.key}\n                timeout={0}\n                type='notification'\n            >\n                <Text as='p' size='xxs' className='dc-toast__notification'>\n                    <Localize\n                        i18n_default_text='The purchase of <0>{{trade_type_name}} contract</0> has been completed successfully for the amount of <0> {{buy_price}} {{currency}}</0>'\n                        components={[<strong key={0} />]}\n                        values={{ trade_type_name, buy_price, currency }}\n                        shouldUnescape\n                    />\n                </Text>\n            </Toast>\n        </MobileWrapper>,\n        portal\n    );\n});\n\nexport default BuyToastNotification;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DesktopWrapper, MobileWrapper, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isEnded, isAccumulatorContract, isDigitContract } from '@deriv/shared';\nimport { ChartTitle } from 'Modules/SmartChart';\nimport BuyToastNotification from './buy-toast-notification';\nimport { observer, useStore } from '@deriv/stores';\n\nconst RecentTradeInfo = observer(() => {\n    const { contract_trade } = useStore();\n    const { granularity, filtered_contracts } = contract_trade;\n\n    const latest_tick_contract = filtered_contracts[filtered_contracts.length - 1];\n    if (\n        !latest_tick_contract ||\n        !latest_tick_contract.contract_info.tick_stream ||\n        isAccumulatorContract(latest_tick_contract.contract_info.contract_type)\n    )\n        return null;\n\n    const is_ended = isEnded(latest_tick_contract.contract_info);\n    if (is_ended || granularity !== 0) return null;\n\n    const { contract_type, tick_stream, tick_count } = latest_tick_contract.contract_info;\n    const current_tick = isDigitContract(contract_type) ? tick_stream.length : Math.max(tick_stream.length - 1, 0);\n    return (\n        <Text weight='bold' className='recent-trade-info'>\n            {localize('Tick')} {current_tick}/{tick_count}\n        </Text>\n    );\n});\n\nconst TopWidgets = ({\n    InfoBox,\n    is_mobile,\n    is_title_enabled = true,\n    onSymbolChange,\n    y_axis_width,\n    theme,\n    open_market,\n    open,\n    is_digits_widget_active,\n}) => {\n    const ChartTitleLocal = (\n        <ChartTitle\n            open_market={open_market}\n            open={open}\n            enabled={is_title_enabled}\n            onChange={onSymbolChange}\n            searchInputClassName='data-hj-whitelist'\n            isNestedList={is_mobile}\n            portalNodeId={is_mobile ? 'deriv_app' : undefined}\n        />\n    );\n\n    const portal = ReactDOM.createPortal(\n        <div className={`smartcharts-${theme}`}>\n            <div\n                className='top-widgets-portal'\n                style={{\n                    width: `calc(100% - ${y_axis_width ? y_axis_width + 5 : 0}px)`,\n                }}\n            >\n                {is_mobile && <BuyToastNotification />}\n                {ChartTitleLocal}\n                {!is_digits_widget_active && <RecentTradeInfo />}\n            </div>\n        </div>,\n        document.getElementById('app_contents')\n    );\n\n    return (\n        <React.Fragment>\n            {InfoBox}\n            <MobileWrapper>{portal}</MobileWrapper>\n            <DesktopWrapper>{ChartTitleLocal}</DesktopWrapper>\n        </React.Fragment>\n    );\n};\n\nTopWidgets.propTypes = {\n    InfoBox: PropTypes.node,\n    is_digits_widget_active: PropTypes.bool,\n    is_mobile: PropTypes.bool,\n    is_title_enabled: PropTypes.bool,\n    onSymbolChange: PropTypes.func,\n    open: PropTypes.bool,\n    open_market: PropTypes.object,\n    theme: PropTypes.string,\n    y_axis_width: PropTypes.number,\n};\n\nexport default TopWidgets;\n","import React from 'react';\nimport { getUrlBase, moduleLoader } from '@deriv/shared';\n\nconst Module = moduleLoader(() =>\n    import(/* webpackChunkName: \"smart_chart\", webpackPreload: true */ '@deriv/deriv-charts')\n);\n\nModule.then(({ setSmartChartsPublicPath }) => {\n    setSmartChartsPublicPath(getUrlBase('/js/smartcharts/'));\n});\n\n// React.Lazy expects a default export for the component\n// SmartChart library exports many components\nconst load = component_name => () =>\n    Module.then(module => {\n        return { default: module[component_name] };\n    });\n\nexport const SmartChart = React.lazy(load('SmartChart'));\nexport const ChartTitle = React.lazy(load('ChartTitle'));\n\nexport const ChartSize = React.lazy(load('ChartSize'));\nexport const ChartMode = React.lazy(load('ChartMode'));\nexport const DrawTools = React.lazy(load('DrawTools'));\nexport const Share = React.lazy(load('Share'));\nexport const StudyLegend = React.lazy(load('StudyLegend'));\nexport const Views = React.lazy(load('Views'));\nexport const ToolbarWidget = React.lazy(load('ToolbarWidget'));\n\nexport const FastMarker = React.lazy(load('FastMarker'));\nexport const RawMarker = React.lazy(load('RawMarker'));\n","import classNames from 'classnames';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MobileWrapper, Toast } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TToastPopUp = {\n    portal_id?: string;\n    className: string;\n} & React.ComponentProps<typeof Toast>;\n\ntype TNetworkStatusToastError = {\n    status: string;\n    portal_id: string;\n    message: string;\n};\n\nexport const ToastPopup = ({\n    portal_id = 'popup_root',\n    children,\n    className,\n    ...props\n}: React.PropsWithChildren<TToastPopUp>) => {\n    const new_portal_id = document.getElementById(portal_id);\n    if (!new_portal_id) return null;\n    return ReactDOM.createPortal(\n        <Toast className={classNames('dc-toast-popup', className)} {...props}>\n            {children}\n        </Toast>,\n        new_portal_id\n    );\n};\n\n/**\n * Network status Toast components\n */\nconst NetworkStatusToastError = ({ status, portal_id, message }: TNetworkStatusToastError) => {\n    const [is_open, setIsOpen] = React.useState(false);\n    const new_portal_id = document.getElementById(portal_id);\n\n    if (!new_portal_id || !message) return null;\n\n    if (!is_open && status !== 'online') {\n        setIsOpen(true); // open if status === 'blinker' or 'offline'\n    } else if (is_open && status === 'online') {\n        setTimeout(() => {\n            setIsOpen(false);\n        }, 1500);\n    }\n\n    return ReactDOM.createPortal(\n        <MobileWrapper>\n            <Toast\n                className={classNames({\n                    'dc-toast--blinker': status === 'blinker',\n                })}\n                is_open={is_open}\n                timeout={0}\n                type='error'\n            >\n                {message}\n            </Toast>\n        </MobileWrapper>,\n        new_portal_id\n    );\n};\n\nexport const NetworkStatusToastErrorPopup = observer(() => {\n    const {\n        common: { network_status },\n    } = useStore();\n    return (\n        <NetworkStatusToastError\n            portal_id='popup_root'\n            message={network_status.tooltip}\n            status={network_status.class}\n        />\n    );\n});\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport { TContractType, TContractCategory, TList } from '../Components/Form/ContractType/types';\n\ntype TContractTypesList = {\n    [key: string]: {\n        name: string;\n        categories: DeepRequired<TContractType[]>;\n    };\n};\n\ntype TItem = {\n    value: string;\n};\n\nexport const contract_category_icon = {\n    [localize('Ups & Downs')]: 'IcUpsDowns',\n    [localize('Highs & Lows')]: 'IcHighsLows',\n    [localize('Ins & Outs')]: 'IcInsOuts',\n    [localize('Look Backs')]: 'IcLookbacks',\n    [localize('Digits')]: 'IcDigits',\n    [localize('Multipliers')]: 'IcMultiplier',\n    [localize('Accumulators')]: 'IcCatAccumulator',\n} as const;\n\nexport const getContractTypeCategoryIcons = () =>\n    ({\n        All: 'IcCatAll',\n        Accumulators: 'IcCatAccumulator',\n        Options: 'IcCatOptions',\n        Multipliers: 'IcCatMultiplier',\n        Turbos: 'IcCatTurbos',\n    } as const);\n\n/**\n * Returns a list of contracts in the following format:\n * {\n *      label: '', // contract category label\n *      contract_types: [], // list of contract types\n *      icon: '', // contract categoty icon\n * }\n * @param {object} contract_types_list  - list of all contracts\n * @param {array}  unsupported_list - list of unsupported contract types\n */\n\nexport const getAvailableContractTypes = (contract_types_list: TContractTypesList, unsupported_list: string[]) => {\n    return Object.keys(contract_types_list)\n        .map(key => {\n            const contract_types = contract_types_list[key].categories;\n            const contract_name = contract_types_list[key].name;\n            const available_contract_types = contract_types.filter(type =>\n                type.value &&\n                // TODO: remove this check once all contract types are supported\n                !unsupported_list.includes(type.value)\n                    ? type\n                    : undefined\n            );\n\n            if (available_contract_types.length) {\n                return {\n                    key,\n                    label: contract_name,\n                    contract_types: available_contract_types,\n                    icon: contract_category_icon[contract_name],\n                    component:\n                        contract_name === localize('Accumulators') ? (\n                            <span className='dc-vertical-tab__header--new'>{localize('NEW!')}</span>\n                        ) : null,\n                };\n            }\n            return undefined;\n        })\n        .filter(Boolean) as {\n        key: string;\n        label: string;\n        contract_types: TContractType[];\n        icon:\n            | 'IcUpsDowns'\n            | 'IcHighsLows'\n            | 'IcInsOuts'\n            | 'IcLookbacks'\n            | 'IcDigits'\n            | 'IcMultiplier'\n            | 'IcCatAccumulator';\n        component: JSX.Element | null;\n    }[];\n};\n\n/**\n * Returns a filtered list\n * @param {object} contract_types_list  - list of all contracts\n * @param {array}  filtered_items_array - list of filtered contract category names and/or contract types names\n */\n/*export const getFilteredList = (contract_types_list, filtered_items_array: Array<string>) => {\n    return Object.keys(contract_types_list)\n        .map(key => {\n            const { label, contract_types, icon } = contract_types_list[key];\n\n            const filtered_by_contract_types = contract_types.filter(c =>\n                filtered_items_array.includes(c.text.toLowerCase())\n            );\n\n            const filtered_by_contract_category = filtered_items_array.includes(label.toLowerCase());\n\n            if (filtered_by_contract_types.length) {\n                return {\n                    label,\n                    contract_types: filtered_by_contract_types,\n                    icon,\n                };\n            } else if (filtered_by_contract_category) {\n                return {\n                    label,\n                    contract_types,\n                    icon,\n                };\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n};*/\n\n// const flatten = (arr: any) => [].concat(...arr);\n\n/**\n * Flatten list object into an array of contract category label and contract types names\n * @param {object} list\n */\n// export const getContractsList = (list: any) =>\n//     flatten(\n//         Object.keys(list).map(\n//             k => [\n//                 list[k].label.toLowerCase(), // contract category names\n//                 ...list[k].contract_types.map((c: any) => c.text.toLowerCase()),\n//             ] // contract types names\n//         )\n//     );\n\nexport const findContractCategory = (list: Partial<TList[]>, item: TItem) =>\n    list?.find(list_item => list_item?.contract_types?.some(i => i.value === item.value)) || ({} as TContractCategory);\n\nexport const getContractCategoryKey = (list: TList[], item: TItem) => findContractCategory(list, item)?.key;\n\nexport const getContractTypes = (list: TList[], item: TItem) => findContractCategory(list, item)?.contract_types;\n","const digitCategoriesMap = ['even_odd', 'match_diff', 'over_under'] as const;\nconst digitTypesMap = ['DIGITDIFF', 'DIGITMATCH', 'DIGITOVER', 'DIGITUNDER', 'DIGITEVEN', 'DIGITODD'] as const;\n\nexport const isDigitTradeType = (trade_type: string) => digitCategoriesMap.some(item => item === trade_type);\nexport const isDigitContractType = (contract_type: string) => digitTypesMap.some(item => item === contract_type);\n","import {\n    WS,\n    getPropertyValue,\n    cloneObject,\n    isTimeValid,\n    minDate,\n    toMoment,\n    shouldShowCancellation,\n    getUnitMap,\n    buildBarriersConfig,\n    buildDurationConfig,\n    hasIntradayDurationUnit,\n    buildForwardStartingConfig,\n    unsupported_contract_types_list,\n    getContractCategoriesConfig,\n    getContractTypesConfig,\n    getContractSubtype,\n    getLocalizedBasis,\n} from '@deriv/shared';\nimport ServerTime from '_common/base/server_time';\nimport { localize } from '@deriv/translations';\nimport { isSessionAvailable } from './start-date';\nimport { ContractsFor, ContractsForSymbolResponse, TradingTimes, TradingTimesResponse } from '@deriv/api-types';\nimport { TTradeStore } from '../../../../Types/common-prop.type';\n\ntype TAvailableCategories = {\n    [key: string]: {\n        name: string;\n        categories: Array<string | TTextValueStrings>;\n    };\n};\ntype TBarriers = Record<\n    keyof TTradeStore['duration_min_max'],\n    {\n        barrier?: string;\n        high_barrier?: string;\n        low_barrier?: string;\n    }\n> & {\n    count: number;\n};\ntype TConfig = ReturnType<typeof getContractTypesConfig>[string]['config'] & {\n    has_spot?: boolean;\n    durations?: ReturnType<typeof buildDurationConfig>;\n    trade_types?: { [key: string]: string };\n    barriers?: ReturnType<typeof buildBarriersConfig>;\n    forward_starting_dates?: ReturnType<typeof buildForwardStartingConfig>;\n    growth_rate_range?: number[];\n    multiplier_range?: number[];\n    cancellation_range?: string[];\n    barrier_choices?: string[];\n};\ntype TTextValueStrings = {\n    text: string;\n    value: string;\n};\ntype TTimes = {\n    open: string[];\n    close: string[];\n};\ntype TEvents =\n    | {\n          dates: string;\n          descrip: string;\n      }[]\n    | [];\n\nexport const ContractType = (() => {\n    type TContractValues = ReturnType<typeof getComponents> &\n        ReturnType<typeof getBasis> &\n        ReturnType<typeof getTradeTypes> &\n        ReturnType<typeof getStartDates> &\n        ReturnType<typeof getStartType> &\n        ReturnType<typeof getBarriers> &\n        ReturnType<typeof getDurationUnit> &\n        ReturnType<typeof getDurationUnitsList> &\n        ReturnType<typeof getDurationMinMax> &\n        ReturnType<typeof getAccumulatorRange> &\n        ReturnType<typeof getMultiplierRange> &\n        ReturnType<typeof getCancellation> &\n        ReturnType<typeof getExpiryType> &\n        ReturnType<typeof getEqualProps>;\n\n    let available_contract_types: ReturnType<typeof getContractTypesConfig> = {};\n    let available_categories: TAvailableCategories = {};\n    let contract_types: ReturnType<typeof getContractTypesConfig>;\n    const trading_events: { [key: string]: Record<string, TEvents | undefined> } = {};\n    const trading_times: { [key: string]: Record<string, TTimes> } = {};\n    let has_only_forward_starting_contracts = false;\n\n    const buildContractTypesConfig = (symbol: string): Promise<void> =>\n        WS.storage.contractsFor(symbol).then((r: Required<ContractsForSymbolResponse>) => {\n            const has_contracts = getPropertyValue(r, ['contracts_for']);\n            has_only_forward_starting_contracts =\n                has_contracts && !r.contracts_for.available.find(contract => contract.start_type !== 'forward');\n            if (!has_contracts || has_only_forward_starting_contracts) return;\n            const contract_categories = getContractCategoriesConfig();\n            contract_types = getContractTypesConfig(symbol);\n            available_contract_types = {};\n            available_categories = cloneObject(contract_categories); // To preserve the order (will clean the extra items later in this function)\n            r.contracts_for.available.forEach(contract => {\n                const type = Object.keys(contract_types).find(\n                    key =>\n                        contract_types[key].trade_types.indexOf(contract.contract_type) !== -1 &&\n                        (typeof contract_types[key].barrier_count === 'undefined' ||\n                            Number(contract_types[key].barrier_count) === contract.barriers) // To distinguish betweeen Rise/Fall & Higher/Lower\n                );\n\n                if (!type) return; // ignore unsupported contract types\n\n                if (!available_contract_types[type]) {\n                    // extend contract_categories to include what is needed to create the contract list\n                    const sub_cats =\n                        available_categories[\n                            Object.keys(available_categories).find(\n                                key => available_categories[key].categories.indexOf(type) !== -1\n                            ) ?? ''\n                        ].categories;\n\n                    if (!sub_cats) return;\n\n                    sub_cats[(sub_cats as string[]).indexOf(type)] = { value: type, text: contract_types[type].title };\n\n                    // populate available contract types\n                    available_contract_types[type] = cloneObject(contract_types[type]);\n                }\n                const config: TConfig = available_contract_types[type].config || {};\n\n                // set config values\n                config.has_spot = config.has_spot || contract.start_type === 'spot';\n                config.durations = config.hide_duration ? undefined : buildDurationConfig(contract, config.durations);\n                config.trade_types = buildTradeTypesConfig(contract, config.trade_types);\n                config.barriers = buildBarriersConfig(contract, config.barriers);\n                config.barrier_choices = contract.barrier_choices as TConfig['barrier_choices'];\n                config.forward_starting_dates = buildForwardStartingConfig(contract, config.forward_starting_dates);\n                config.growth_rate_range = contract.growth_rate_range as TConfig['growth_rate_range'];\n                config.multiplier_range = contract.multiplier_range as TConfig['multiplier_range'];\n                config.cancellation_range = contract.cancellation_range as TConfig['cancellation_range'];\n\n                available_contract_types[type].config = config;\n            });\n\n            // cleanup categories\n            Object.keys(available_categories).forEach(key => {\n                available_categories[key].categories = available_categories[key].categories?.filter(\n                    item => typeof item === 'object'\n                );\n                if (available_categories[key].categories?.length === 0) {\n                    delete available_categories[key];\n                }\n            });\n        });\n\n    const buildTradeTypesConfig = (\n        contract: ContractsFor['available'][number],\n        trade_types: { [key: string]: string } = {}\n    ) => {\n        trade_types[contract.contract_type] = contract.contract_display ?? '';\n        return trade_types;\n    };\n\n    const getArrayDefaultValue = <T>(arr_new_values: Array<T>, value: T): T =>\n        arr_new_values.indexOf(value) !== -1 ? value : arr_new_values[0];\n\n    const getContractValues = (store: TTradeStore): TContractValues | Record<string, never> => {\n        const {\n            contract_expiry_type,\n            contract_type,\n            basis,\n            duration_unit,\n            expiry_type,\n            multiplier,\n            start_date,\n            cancellation_duration,\n            symbol,\n            short_barriers,\n            long_barriers,\n            strike_price_choices,\n        } = store;\n\n        if (!contract_type) return {};\n\n        let stored_barriers_data: TTradeStore['short_barriers' | 'long_barriers' | 'strike_price_choices'];\n        switch (getContractSubtype(contract_type)) {\n            case 'Short':\n                stored_barriers_data = short_barriers;\n                break;\n            case 'Long':\n                stored_barriers_data = long_barriers;\n                break;\n            case 'Call':\n            case 'Put':\n                stored_barriers_data = strike_price_choices;\n                break;\n            default:\n                stored_barriers_data = {};\n        }\n\n        const form_components = getComponents(contract_type);\n        const obj_basis = getBasis(contract_type, basis);\n        const obj_trade_types = getTradeTypes(contract_type);\n        const obj_start_dates = getStartDates(contract_type, start_date);\n        const obj_start_type = getStartType(obj_start_dates.start_date);\n        const obj_barrier = getBarriers(contract_type, contract_expiry_type, stored_barriers_data?.barrier);\n        const obj_duration_unit = getDurationUnit(duration_unit, contract_type, obj_start_type.contract_start_type);\n\n        const obj_duration_units_list = getDurationUnitsList(contract_type, obj_start_type.contract_start_type);\n        const obj_duration_units_min_max = getDurationMinMax(contract_type, obj_start_type.contract_start_type);\n        const obj_accumulator_range_list = getAccumulatorRange(contract_type);\n        const obj_barrier_choices = getBarrierChoices(contract_type, stored_barriers_data?.barrier_choices);\n        const obj_multiplier_range_list = getMultiplierRange(contract_type, multiplier);\n        const obj_cancellation = getCancellation(contract_type, cancellation_duration, symbol);\n        const obj_expiry_type = getExpiryType(obj_duration_units_list.duration_units_list, expiry_type);\n        const obj_equal = getEqualProps(contract_type);\n\n        return {\n            ...form_components,\n            ...obj_basis,\n            ...obj_trade_types,\n            ...obj_start_dates,\n            ...obj_start_type,\n            ...obj_barrier,\n            ...obj_duration_unit,\n            ...obj_duration_units_list,\n            ...obj_duration_units_min_max,\n            ...obj_expiry_type,\n            ...obj_accumulator_range_list,\n            ...obj_barrier_choices,\n            ...obj_multiplier_range_list,\n            ...obj_cancellation,\n            ...obj_equal,\n        };\n    };\n\n    const getContractType = (list: TAvailableCategories, contract_type: string) => {\n        const arr_list: string[] = Object.keys(list || {})\n            .reduce<string[]>((k, l) => [...k, ...(list[l].categories as TTextValueStrings[]).map(ct => ct.value)], [])\n            .filter(type => unsupported_contract_types_list.indexOf(type) === -1)\n            .sort((a, b) => (a === 'multiplier' || b === 'multiplier' ? -1 : 0));\n\n        return {\n            contract_type: getArrayDefaultValue(arr_list, contract_type),\n        };\n    };\n\n    const getComponents = (c_type: string) => {\n        const check = ['duration', 'amount', ...contract_types[c_type].components].filter(\n            component =>\n                !(\n                    component === 'duration' &&\n                    contract_types[c_type].config &&\n                    contract_types[c_type].config?.hide_duration\n                )\n        );\n        return (\n            contract_types && {\n                form_components: check,\n            }\n        );\n    };\n\n    const getDurationUnitsList = (contract_type: string, contract_start_type: string) => {\n        return {\n            duration_units_list:\n                (getPropertyValue(available_contract_types, [\n                    contract_type,\n                    'config',\n                    'durations',\n                    'units_display',\n                    contract_start_type,\n                ]) as TTextValueStrings[]) || [],\n        };\n    };\n\n    const getDurationUnit = (duration_unit: string, contract_type: string, contract_start_type: string) => {\n        const duration_units =\n            (getPropertyValue(available_contract_types, [\n                contract_type,\n                'config',\n                'durations',\n                'units_display',\n                contract_start_type,\n            ]) as TTextValueStrings[]) || [];\n        const arr_units: string[] = [];\n        duration_units.forEach(obj => {\n            arr_units.push(obj.value);\n        });\n\n        return {\n            duration_unit: getArrayDefaultValue(arr_units, duration_unit),\n        };\n    };\n\n    const getDurationMinMax = (contract_type: string, contract_start_type: string, contract_expiry_type?: string) => {\n        let duration_min_max: TTradeStore['duration_min_max'] =\n            getPropertyValue(available_contract_types, [\n                contract_type,\n                'config',\n                'durations',\n                'min_max',\n                contract_start_type,\n            ]) || {};\n\n        if (contract_expiry_type) {\n            duration_min_max =\n                'contract_expiry_type' in duration_min_max\n                    ? (duration_min_max as unknown as { [key: string]: TTradeStore['duration_min_max'] })[\n                          contract_expiry_type\n                      ]\n                    : {};\n        }\n\n        return { duration_min_max };\n    };\n\n    const getFullContractTypes = () => available_contract_types;\n\n    const getStartType = (start_date: number) => ({\n        // Number(0) refers to 'now'\n        contract_start_type: start_date === Number(0) ? 'spot' : 'forward',\n    });\n\n    const getStartDates = (contract_type: string, current_start_date: number) => {\n        const config: TConfig = getPropertyValue(available_contract_types, [contract_type, 'config']);\n        const start_dates_list = [];\n\n        if (config?.has_spot) {\n            // Number(0) refers to 'now'\n            start_dates_list.push({ text: localize('Now'), value: Number(0) });\n        }\n        if (config?.forward_starting_dates) {\n            start_dates_list.push(...config.forward_starting_dates);\n        }\n\n        const start_date = start_dates_list.find(item => item.value === current_start_date)\n            ? current_start_date\n            : start_dates_list[0]?.value;\n\n        return { start_date, start_dates_list };\n    };\n\n    const getSessions = (contract_type: string, start_date: number) => {\n        const config: TConfig = getPropertyValue(available_contract_types, [contract_type, 'config']) || {};\n        const sessions = config.forward_starting_dates?.find(option => option.value === start_date)?.sessions;\n        return { sessions };\n    };\n\n    const hours = [...Array(24).keys()].map(a => `0${a}`.slice(-2));\n    const minutes = [...Array(12).keys()].map(a => `0${a * 5}`.slice(-2));\n\n    const getValidTime = (\n        sessions: ReturnType<typeof getSessions>['sessions'],\n        compare_moment: moment.Moment,\n        start_moment?: moment.Moment\n    ) => {\n        if (sessions && !isSessionAvailable(sessions, compare_moment)) {\n            // first see if changing the minute brings it to the right session\n            compare_moment.minute(\n                Number(\n                    minutes.find(m => isSessionAvailable(sessions, compare_moment.minute(+m))) ||\n                        compare_moment.format('mm')\n                )\n            );\n            // if not, also change the hour\n            if (!isSessionAvailable(sessions, compare_moment)) {\n                compare_moment.minute(0);\n                compare_moment.hour(\n                    Number(\n                        hours.find(h => isSessionAvailable(sessions, compare_moment.hour(+h), start_moment, true)) ||\n                            compare_moment.format('HH')\n                    )\n                );\n                compare_moment.minute(\n                    Number(\n                        minutes.find(m => isSessionAvailable(sessions, compare_moment.minute(+m))) ||\n                            compare_moment.format('mm')\n                    )\n                );\n            }\n        }\n        return compare_moment.format('HH:mm');\n    };\n\n    const buildMoment = (date: string | number | null, time?: string | null) => {\n        const [hour, minute] = isTimeValid(time ?? '') ? time?.split(':') ?? [] : [0, 0];\n        return toMoment(date || ServerTime.get())\n            .hour(+hour)\n            .minute(+minute);\n    };\n\n    const getStartTime = (\n        sessions: ReturnType<typeof getSessions>['sessions'],\n        start_date: number,\n        start_time?: string | null\n    ) => ({\n        start_time: start_date ? getValidTime(sessions, buildMoment(start_date, start_time)) : null,\n    });\n\n    const getTradingEvents = async (date: string, underlying: string | null = null) => {\n        if (!date) {\n            return [];\n        }\n        if (!(date in trading_events)) {\n            const trading_times_response: TradingTimesResponse = await WS.tradingTimes(date);\n            const trading_times_data = trading_times_response.trading_times as TradingTimes;\n            if (getPropertyValue(trading_times_response, ['trading_times', 'markets'])) {\n                for (let i = 0; i < trading_times_data.markets.length; i++) {\n                    const submarkets = trading_times_data.markets[i].submarkets;\n                    if (submarkets) {\n                        for (let j = 0; j < submarkets.length; j++) {\n                            const symbols = submarkets[j].symbols;\n                            if (symbols) {\n                                for (let k = 0; k < symbols.length; k++) {\n                                    const symbol = symbols[k];\n                                    if (!trading_events[trading_times_response.echo_req.trading_times as string]) {\n                                        trading_events[trading_times_response.echo_req.trading_times as string] = {};\n                                    }\n                                    trading_events[trading_times_response.echo_req.trading_times as string][\n                                        symbol.symbol\n                                    ] = symbol.events as TEvents;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return trading_events[date][underlying as string];\n    };\n\n    const getTradingTimes = async (\n        date: string | null,\n        underlying: string | null = null\n    ): Promise<Record<string, never> | TTimes | Record<string, TTimes>> => {\n        if (!date) {\n            return {};\n        }\n\n        if (!(date in trading_times)) {\n            const trading_times_response: TradingTimesResponse = await WS.tradingTimes(date);\n            const trading_times_data = trading_times_response.trading_times as TradingTimes;\n            if (getPropertyValue(trading_times_response, ['trading_times', 'markets'])) {\n                for (let i = 0; i < trading_times_data.markets.length; i++) {\n                    const submarkets = trading_times_data.markets[i].submarkets;\n                    if (submarkets) {\n                        for (let j = 0; j < submarkets.length; j++) {\n                            const symbols = submarkets[j].symbols;\n                            if (symbols) {\n                                for (let k = 0; k < symbols.length; k++) {\n                                    const symbol = symbols[k];\n                                    if (!trading_times[trading_times_response.echo_req.trading_times as string]) {\n                                        trading_times[trading_times_response.echo_req.trading_times as string] = {};\n                                    }\n                                    trading_times[trading_times_response.echo_req.trading_times as string][\n                                        symbol.symbol\n                                    ] = {\n                                        open: (symbol.times as TTimes).open,\n                                        close: (symbol.times as TTimes).close,\n                                    };\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return underlying ? trading_times[date][underlying] : trading_times[date];\n    };\n\n    const getExpiryType = (\n        duration_units_list: ReturnType<typeof getDurationUnitsList>['duration_units_list'],\n        expiry_type: string | null\n    ) => {\n        if (duration_units_list) {\n            if (\n                (!expiry_type && duration_units_list.length > 0) ||\n                (duration_units_list.length === 1 && duration_units_list[0].value === 't')\n            ) {\n                return { expiry_type: 'duration' };\n            }\n            if (duration_units_list.length === 0) {\n                return {\n                    expiry_type: null,\n                };\n            }\n        }\n\n        return { expiry_type };\n    };\n\n    const getExpiryDate = (\n        duration_units_list: ReturnType<typeof getDurationUnitsList>['duration_units_list'],\n        expiry_date: string | null,\n        expiry_type: string | null,\n        start_date: number\n    ) => {\n        let proper_expiry_date = null;\n\n        if (expiry_type === 'endtime') {\n            const moment_start = toMoment(start_date);\n            const moment_expiry = toMoment(expiry_date);\n\n            if (!hasIntradayDurationUnit(duration_units_list)) {\n                const is_invalid = moment_expiry.isSameOrBefore(moment_start, 'day');\n                proper_expiry_date = (is_invalid ? moment_start.clone().add(1, 'day') : moment_expiry).format(\n                    'YYYY-MM-DD'\n                );\n            } else {\n                // forward starting contracts should only show today and tomorrow as expiry date\n                const is_invalid =\n                    moment_expiry.isBefore(moment_start, 'day') ||\n                    (start_date && moment_expiry.isAfter(moment_start.clone().add(1, 'day')));\n                proper_expiry_date = (is_invalid ? moment_start : moment_expiry).format('YYYY-MM-DD');\n            }\n        }\n\n        return { expiry_date: proper_expiry_date };\n    };\n\n    // It has to follow the correct order of checks:\n    // first check if end time is within available sessions\n    // then confirm that end time is at least 5 minute after start time\n    const getExpiryTime = (\n        expiry_date: string | null,\n        expiry_time: string | null,\n        expiry_type: string | null,\n        market_close_times: string[] | undefined | TTimes,\n        sessions: TTradeStore['sessions'],\n        start_date: number,\n        start_time?: string | null\n    ) => {\n        let end_time: moment.Moment | string | null = null;\n\n        if (expiry_type === 'endtime') {\n            let market_close_time = '23:59:59';\n\n            if (Array.isArray(market_close_times) && market_close_times?.length && market_close_times[0] !== '--') {\n                // Some of underlyings (e.g. Australian Index) have two close time during a day so we always select the further one as the end time of the contract.\n                market_close_time = market_close_times.slice(-1)[0];\n            }\n\n            // For contracts with a duration of more that 24 hours must set the expiry_time to the market's close time on the expiry date.\n            if (!start_date && ServerTime.get().isBefore(buildMoment(expiry_date), 'day')) {\n                end_time = market_close_time;\n            } else {\n                const start_moment = start_date ? buildMoment(start_date, start_time) : ServerTime.get();\n                const end_moment = buildMoment(expiry_date, expiry_time);\n\n                end_time = end_moment.format('HH:mm');\n                // When the contract is forwarding, and the duration is endtime, users can purchase the contract within 24 hours.\n                const expiry_sessions = [\n                    {\n                        open: start_moment.clone().add(5, 'minute'), // expiry time should be at least 5 minute after start_time\n                        close: minDate(\n                            start_moment.clone().add(24, 'hour'),\n                            buildMoment(expiry_date, market_close_time)\n                        ),\n                    },\n                ];\n\n                if (!isSessionAvailable(expiry_sessions, end_moment)) {\n                    end_time = getValidTime(expiry_sessions, end_moment.clone(), start_moment.clone());\n                }\n                if (end_moment.isSameOrBefore(start_moment) || end_moment.diff(start_moment, 'minute') < 5) {\n                    const is_end_of_day = start_moment.get('hours') === 23 && start_moment.get('minute') >= 55;\n                    const is_end_of_session =\n                        sessions && !isSessionAvailable(sessions, start_moment.clone().add(5, 'minutes'));\n                    end_time = start_moment.clone().add(is_end_of_day || is_end_of_session ? 0 : 5, 'minutes');\n                    // Set the end_time to be multiple of 5 to be equal as the SELECTED_TIME that shown to the client.\n                    end_time = setMinuteMultipleByFive(end_time as moment.Moment).format('HH:mm');\n                }\n                // Set the expiry_time to 5 minute less than start_time for forwading contracts when the expiry_time is null and the expiry_date is tomorrow.\n                if (end_time === '00:00' && start_moment.isBefore(end_moment, 'day')) {\n                    end_time = start_moment.clone().subtract(5, 'minute').format('HH:mm');\n                }\n            }\n        }\n        return { expiry_time: end_time };\n    };\n\n    const setMinuteMultipleByFive = (moment_obj: moment.Moment) =>\n        moment_obj.minute(Math.ceil(moment_obj.minute() / 5) * 5);\n\n    const getTradeTypes = (contract_type: string) => ({\n        trade_types: getPropertyValue(available_contract_types, [contract_type, 'config', 'trade_types']),\n    });\n\n    const getBarriers = (contract_type: string, expiry_type: string, stored_barrier_value?: string) => {\n        const barriers =\n            (getPropertyValue(available_contract_types, [contract_type, 'config', 'barriers']) as TBarriers) || {};\n        const barrier_values = barriers[expiry_type] || {};\n        const barrier_1 = barrier_values.barrier || barrier_values.high_barrier || '';\n        const barrier_2 = barrier_values.low_barrier || '';\n        return {\n            barrier_count: barriers.count || 0,\n            barrier_1: stored_barrier_value || barrier_1.toString(),\n            barrier_2: barrier_2.toString(),\n        };\n    };\n\n    const getBasis = (contract_type: string, basis: string) => {\n        const arr_basis: string[] = getPropertyValue(available_contract_types, [contract_type, 'basis']) || [];\n        const localized_basis = getLocalizedBasis();\n        const basis_list = arr_basis.reduce<TTextValueStrings[]>(\n            (cur, bas) => [...cur, { text: localized_basis[bas as keyof typeof localized_basis], value: bas }],\n            []\n        );\n\n        return {\n            basis_list,\n            basis: getArrayDefaultValue(arr_basis, basis),\n        };\n    };\n\n    const getAccumulatorRange = (contract_type: string) => ({\n        accumulator_range_list:\n            (getPropertyValue(available_contract_types, [contract_type, 'config', 'growth_rate_range']) as number[]) ||\n            [],\n    });\n\n    const getBarrierChoices = (contract_type: string, stored_barrier_choices = [] as string[]) => ({\n        barrier_choices: stored_barrier_choices.length\n            ? stored_barrier_choices\n            : getPropertyValue(available_contract_types, [contract_type, 'config', 'barrier_choices']) || [],\n    });\n\n    const getMultiplierRange = (contract_type: string, multiplier: number) => {\n        const arr_multiplier: number[] =\n            getPropertyValue(available_contract_types, [contract_type, 'config', 'multiplier_range']) || [];\n\n        return {\n            multiplier_range_list: arr_multiplier.map(m => ({ text: `x${m}`, value: m })),\n            multiplier: getArrayDefaultValue(arr_multiplier, multiplier),\n        };\n    };\n\n    const getCancellation = (contract_type: string, cancellation_duration: string, symbol: string) => {\n        const arr_cancellation_range: string[] =\n            getPropertyValue(available_contract_types, [contract_type, 'config', 'cancellation_range']) || [];\n\n        const regex = /(^(?:\\d){1,})|((?:[a-zA-Z]){1,}$)/g;\n        const getText = (str: string) => {\n            const [duration, unit] = str.match(regex) ?? [];\n            const unit_map = getUnitMap();\n            const unit_names = unit_map[unit as keyof typeof unit_map];\n            const name = 'name_plural' in unit_names ? unit_names.name_plural : unit_names.name;\n            return `${duration} ${name}`;\n        };\n\n        const should_show_cancellation = shouldShowCancellation(symbol);\n\n        return {\n            cancellation_duration: getArrayDefaultValue(arr_cancellation_range, cancellation_duration),\n            cancellation_range_list: arr_cancellation_range.map(d => ({ text: `${getText(d)}`, value: d })),\n            ...(should_show_cancellation ? {} : { has_cancellation: false }),\n        };\n    };\n\n    const getEqualProps = (contract_type: string) => {\n        const base_contract_type = /^(.*)_equal$/.exec(contract_type)?.[1];\n\n        if (base_contract_type && !available_contract_types[base_contract_type]) {\n            return {\n                is_equal: 1,\n                has_equals_only: true,\n            };\n        }\n        return {};\n    };\n\n    return {\n        buildContractTypesConfig,\n        getBarriers,\n        getContractType,\n        getContractValues,\n        getDurationMinMax,\n        getDurationUnit,\n        getDurationUnitsList,\n        getFullContractTypes,\n        getExpiryDate,\n        getExpiryTime,\n        getExpiryType,\n        getSessions,\n        getStartTime,\n        getStartType,\n        getTradingEvents,\n        getTradingTimes,\n        getContractCategories: () => ({\n            contract_types_list: available_categories,\n            has_only_forward_starting_contracts,\n        }),\n    };\n})();\n","import { PriceProposalResponse, Proposal } from '@deriv/api-types';\nimport {\n    convertToUnix,\n    getDecimalPlaces,\n    getLocalizedBasis,\n    getPropertyValue,\n    isAccumulatorContract,\n    isTurbosContract,\n    toMoment,\n} from '@deriv/shared';\nimport { TError, TTradeStore } from 'Types';\n\ntype TObjContractBasis = {\n    text: string;\n    value: string;\n};\n\ntype TObjMultiplier = {\n    cancellation?: string;\n    limit_order?: {\n        take_profit?: number;\n        stop_loss?: number;\n    };\n    multiplier?: number;\n};\n\ntype TObjAccum = {\n    growth_rate?: number;\n    limit_order?: {\n        take_profit?: number;\n    };\n};\n\ntype TObjExpiry = {\n    date_expiry?: number;\n};\n\nconst isVisible = (elem: HTMLElement) => !(!elem || (elem.offsetWidth === 0 && elem.offsetHeight === 0));\n\nconst map_error_field: { [key: string]: string } = {\n    barrier: 'barrier_1',\n    barrier2: 'barrier_2',\n    date_expiry: 'expiry_date',\n};\n\nexport const getProposalErrorField = (response: PriceProposalResponse) => {\n    const error_field: string = getPropertyValue(response, ['error', 'details', 'field']);\n    if (!error_field) {\n        return null;\n    }\n    const error_id = map_error_field[error_field] || error_field;\n    const el_error = document.getElementsByName(error_id)[0];\n    return el_error && isVisible(el_error) ? error_id : null;\n};\n\nexport const getProposalInfo = (\n    store: TTradeStore,\n    response: PriceProposalResponse & TError,\n    obj_prev_contract_basis: TObjContractBasis\n) => {\n    const proposal = response.proposal || ({} as Proposal);\n    const profit = (proposal.payout || 0) - (proposal.ask_price || 0);\n    const returns = (profit * 100) / (proposal.ask_price || 1);\n    const stake = proposal.display_value;\n    const basis_list = store.basis_list;\n\n    const contract_basis: TObjContractBasis | undefined =\n        store.is_vanilla || store.is_turbos\n            ? { text: getLocalizedBasis().payout_per_point, value: 'display_number_of_contracts' }\n            : basis_list.find(o => o.value !== store.basis) || ({} as TObjContractBasis);\n\n    const is_stake = contract_basis?.value === 'stake';\n\n    const price = is_stake ? stake : (proposal[contract_basis?.value as keyof Proposal] as string | number);\n    let has_increased = false;\n\n    if (price !== undefined && price !== null) {\n        has_increased = price > obj_prev_contract_basis.value;\n    }\n\n    if (!obj_prev_contract_basis.value || price === obj_prev_contract_basis.value) {\n        has_increased = !!null;\n    }\n\n    const obj_contract_basis = {\n        text: contract_basis?.text || '',\n        value: price || '',\n    };\n\n    const commission = proposal.commission;\n    const cancellation = proposal.cancellation;\n    const accumulators_details = {\n        ...proposal.contract_details,\n        growth_rate: store.growth_rate,\n        spot_time: proposal.spot_time,\n    };\n\n    return {\n        commission,\n        cancellation,\n        id: proposal.id || '',\n        has_error: !!response.error,\n        has_error_details: !!getProposalErrorField(response),\n        error_code: response?.error?.code,\n        error_field: response?.error?.details?.field,\n        has_increased,\n        limit_order: proposal.limit_order,\n        message: proposal.longcode || response?.error?.message,\n        obj_contract_basis,\n        payout: proposal.payout,\n        profit: profit.toFixed(getDecimalPlaces(store.currency)),\n        returns: `${returns.toFixed(2)}%`,\n        stake,\n        spot: proposal.spot,\n        ...accumulators_details,\n    };\n};\n\nexport const createProposalRequests = (store: TTradeStore) => {\n    const requests = {} as Record<string, ReturnType<typeof createProposalRequestForContract>>;\n\n    Object.keys(store.trade_types).forEach(type => {\n        const new_req = createProposalRequestForContract(store, type);\n        requests[type] = new_req;\n    });\n\n    return requests;\n};\n\nconst setProposalMultiplier = (store: TTradeStore, obj_multiplier: TObjMultiplier) => {\n    obj_multiplier.multiplier = store.multiplier;\n    obj_multiplier.cancellation = store.has_cancellation ? store.cancellation_duration : undefined;\n\n    obj_multiplier.limit_order = store.has_take_profit || store.has_stop_loss ? {} : undefined;\n\n    if (store.has_take_profit && store.take_profit && obj_multiplier.limit_order) {\n        obj_multiplier.limit_order.take_profit = +store.take_profit || 0; // send positive take_profit to API\n    }\n\n    if (store.has_stop_loss && store.stop_loss && obj_multiplier.limit_order) {\n        obj_multiplier.limit_order.stop_loss = +store.stop_loss || 0; // send positive stop_loss to API\n    }\n};\n\nconst setProposalAccumulator = (store: TTradeStore, obj_accumulator: TObjAccum) => {\n    obj_accumulator.growth_rate = store.growth_rate;\n\n    obj_accumulator.limit_order = store.has_take_profit ? {} : undefined;\n\n    if (store.has_take_profit && store.take_profit && obj_accumulator.limit_order) {\n        obj_accumulator.limit_order.take_profit = +store.take_profit || 0; // send positive take_profit to API\n    }\n};\n\nconst createProposalRequestForContract = (store: TTradeStore, type_of_contract: string) => {\n    const obj_accumulator: TObjAccum = {};\n    const obj_expiry: TObjExpiry = {};\n    const obj_multiplier: TObjMultiplier = {};\n    let limit_order;\n\n    if (store.expiry_type === 'endtime' && store.expiry_time) {\n        const expiry_date = toMoment(store.expiry_date);\n        obj_expiry.date_expiry = convertToUnix(expiry_date.unix(), store.expiry_time);\n    }\n\n    if (store.contract_type === 'multiplier') {\n        setProposalMultiplier(store, obj_multiplier);\n    }\n\n    if (store.contract_type === 'accumulator') {\n        setProposalAccumulator(store, obj_accumulator);\n    }\n\n    if (isTurbosContract(store.contract_type) && store.has_take_profit && store.take_profit) {\n        limit_order = { take_profit: +store.take_profit || 0 };\n    }\n\n    return {\n        proposal: 1,\n        subscribe: 1,\n        amount: parseFloat(store.amount.toString()) || 0,\n        basis: store.basis,\n        contract_type: type_of_contract,\n        currency: store.currency,\n        symbol: store.symbol,\n        ...(store.start_date && store.start_time && { date_start: convertToUnix(store.start_date, store.start_time) }),\n        ...(store.expiry_type === 'duration'\n            ? {\n                  duration: parseInt(store.duration.toString()),\n                  duration_unit: store.duration_unit,\n              }\n            : obj_expiry),\n        ...((store.barrier_count > 0 || store.form_components.indexOf('last_digit') !== -1) &&\n            !isAccumulatorContract(type_of_contract) && {\n                barrier: store.barrier_1 || store.last_digit,\n            }),\n        ...(store.barrier_count === 2 && !isAccumulatorContract(type_of_contract) && { barrier2: store.barrier_2 }),\n        limit_order,\n        ...obj_accumulator,\n        ...obj_multiplier,\n    };\n};\n","import ServerTime from '_common/base/server_time';\nimport { toMoment } from '@deriv/shared';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst isBeforeDate = (compare_moment: moment.Moment, start_moment: moment.Moment, should_only_check_hour: boolean) => {\n    const now_moment = toMoment(start_moment);\n    if (should_only_check_hour) {\n        now_moment.minute(0).second(0);\n    }\n    return compare_moment.isBefore(now_moment) && now_moment.unix() !== compare_moment.unix();\n};\n\nexport const isSessionAvailable = (\n    sessions: ReturnType<typeof useTraderStore>['sessions'] = [],\n    compare_moment: moment.Moment = toMoment(ServerTime.get()),\n    start_moment: moment.Moment = toMoment(ServerTime.get()),\n    should_only_check_hour = false\n) =>\n    !isBeforeDate(compare_moment, ServerTime.get(), should_only_check_hour) &&\n    !isBeforeDate(compare_moment, start_moment, should_only_check_hour) &&\n    (!sessions.length ||\n        !!sessions.find(session =>\n            compare_moment.isBetween(session.open, session.close, should_only_check_hour ? 'hour' : null, '[]')\n        ));\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport TradeStore from './Modules/Trading/trade-store';\n\nconst TraderStoreContext = React.createContext<TradeStore | null>(null);\n\nexport const TraderStoreProvider = ({ children }: React.PropsWithChildren<unknown>) => {\n    const { modules } = useStore();\n    // const memoizedValue = useMemo(() => new TraderStore(), []);\n\n    return <TraderStoreContext.Provider value={modules?.trade}>{children}</TraderStoreContext.Provider>;\n};\n\nexport const useTraderStore = () => {\n    const store = React.useContext(TraderStoreContext);\n\n    if (!store) {\n        throw new Error('useTraderStore must be used within TraderStoreProvider');\n    }\n\n    return store;\n};\n","import { getContractConfig, getMarketNamesMap } from '@deriv/shared';\n\ntype TMarketInfo = {\n    category: string;\n    underlying: string;\n};\n\ntype TTradeConfig = {\n    name: JSX.Element;\n    position: string;\n};\n\n/**\n * Fetch market information from shortcode\n * @param shortcode: string\n * @returns {{underlying: string, category: string}}\n */\n\n// TODO: Combine with  extractInfoFromShortcode function in shared, both are currently used\nexport const getMarketInformation = (shortcode: string): TMarketInfo => {\n    const market_info: TMarketInfo = {\n        category: '',\n        underlying: '',\n    };\n\n    const pattern = new RegExp(\n        '^([A-Z]+)_((1HZ[0-9-V]+)|((CRASH|BOOM)[0-9\\\\d]+[A-Z]?)|(OTC_[A-Z0-9]+)|R_[\\\\d]{2,3}|[A-Z]+)'\n    );\n    const extracted = pattern.exec(shortcode);\n    if (extracted !== null) {\n        market_info.category = extracted[1].toLowerCase();\n        market_info.underlying = extracted[2];\n    }\n\n    return market_info;\n};\n\nexport const getMarketName = (underlying: string) =>\n    underlying ? getMarketNamesMap()[underlying.toUpperCase() as keyof typeof getMarketNamesMap] : null;\n\nexport const getTradeTypeName = (category: string) =>\n    category\n        ? (getContractConfig()[category.toUpperCase() as keyof typeof getContractConfig] as TTradeConfig)?.name\n        : null;\n","const PromiseClass = require('../utility').PromiseClass;\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = new PromiseClass();\n    let common_store;\n\n    const init = store => {\n        if (!clock_started) {\n            common_store = store;\n            pending.resolve(common_store.server_time);\n            clock_started = true;\n        }\n    };\n\n    const get = () => (clock_started && common_store.server_time ? common_store.server_time.clone() : undefined);\n\n    return {\n        init,\n        get,\n        timePromise: () => (clock_started ? Promise.resolve(common_store.server_time) : pending.promise),\n    };\n})();\n\nmodule.exports = ServerTime;\n","/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach(attr => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash =\n        static_hash || (document.querySelector('script[src*=\"main\"]').getAttribute('src') || '').split('.')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nmodule.exports = {\n    createElement,\n    getStaticHash,\n    PromiseClass,\n};\n"],"names":["createContext","api","useContext","APIContext","send","useCallback","name","payload","response","error","subscribe","queryClient","window","ReactQueryClient","QueryClient","endpoint","app_id","wss","children","standalone","WS","useWS","active_connection","getSocketURL","getAppId","DerivAPI","DerivAPIBasic","connection","WebSocket","value","QueryClientProvider","client","useState","isLoading","setIsLoading","isSubscribed","setSubscribed","setError","data","setData","subscriber","useRef","_subscribe","useAPI","props","prop","undefined","current","e","unsubscribe","useEffect","store","StoreContext","Error","observer","useSubscription","update","useStore","exchange_rates","base_currency","prev","merge","BaseStore","onHydrationDone","makeObservable","this","observable","action","unmount","makePersistable","properties","storage","localStorage","then","Function","stopPersisting","ExchangeRatesStore","FLAGS","wallet","next_wallet","FeatureFlagsStore","Object","keys","length","old","forEach","flag","memoizedValue","useMemo","is_mock","feature_flags","values","BounceUp","animate","y","opacity","initial","transition","type","stiffness","damping","duration","Bounce","className","is_visible","keyname","motion","key","propTypes","PropTypes","SlideInFromTop","SlideInFromBottom","SlideIn","PositionsCardLoader","speed","height","width","backgroundColor","foregroundColor","x","rx","ry","TradeParamsLoader","MobileWrapper","viewBox","DesktopWrapper","addCommaToNumber","num","decimal_places","isNaN","n","String","toFixed","p","indexOf","replace","m","i","getBarrierLabel","contract_info","isDigitType","contract_type","localize","isVanillaContract","getBarrierValue","digitTypeMap","barrier","test","toLowerCase","DIGITDIFF","DIGITEVEN","DIGITMATCH","DIGITODD","DIGITOVER","DIGITUNDER","filterByContractType","trade_contract_type","shortcode","is_call_put","isCallPut","is_high_low","isHighLow","is_vanilla","trade_types","getContractTypesConfig","match","includes","data_testid","is_invisible","theme","id","classNames","invisible","Array","from","map","_x","inx","is_dark","findRouteByPath","path","routes_config","result","some","route_info","match_path","matchPath","message","routes","Text","color","size","Icon","icon","align","PositionsDrawerCardItem","portfolio_position","row","measure","onHoverPosition","symbol","is_new_row","in_prop","useNewRowTransition","React","is_sold","CSSTransition","in","timeout","appear","enter","enterDone","exit","onEntered","unmountOnExit","PositionsDrawerCard","onMouseEnter","onMouseLeave","onFooterEntered","should_show_transition","PositionsDrawer","useTraderStore","common","contract_trade","portfolio","ui","currency","server_time","getContractById","all_positions","onMount","onClickCancel","onClickSell","onClickRemove","removePositionById","is_mobile","is_positions_drawer_on","toggleDrawer","togglePositionsDrawer","addToast","current_focus","removeToast","setCurrentFocus","should_show_cancellation_warning","toggleCancellationWarning","toggleUnsupportedContractModal","drawer_ref","list_ref","scrollbar_ref","scrollTo","scrollToTop","positions","filter","underlying","isTurbosContract","TURBOS","VANILLALONG","body_content","DataList","data_source","rowRenderer","args","keyMapper","row_gap","weight","onClick","ref","NavLink","to","onChangeContractUpdate","onClickContractUpdate","getTradingTimes","target_time","api_initial_load_error","getSymbol","target_symbol","trading_times","markets","submarkets","j","symbols","find","item","calculateTimeLeft","remaining_time_to_open","difference","Date","now","days","Math","floor","hours","minutes","seconds","is_main_page","setIsTimerLoading","onMarketOpen","active_symbols","isMounted","useIsMounted","when_market_opens","setWhenMarketOpens","time_left","setTimeLeft","is_loading","setLoading","isMarketClosed","whenMarketOpens","days_offset","target_date","moment","add","format","api_response","returned_symbol","open","times","close","date_str","toISOString","substring","getUTCDate","hour","opening_time","timer","setTimeout","clearTimeout","timer_components","Number","toString","padStart","opening_time_banner","formatted_opening_time","convertTimeFormat","opening_date","opening_day","as","line_height","Localize","i18n_default_text","components","is_eu","is_synthetics_trading_market_available","is_timer_loading","btn_lbl","Button","text","primary","styles","container","fontSize","lineHeight","position","zIndex","background","padding","marginTop","display","overflowY","prop_name","tabs","textAlign","marginBottom","tab","border","Test","stores","trade_store","test_stores","trade","entries","setIsVisible","setStore","document","addEventListener","stateVisibility","removeEventListener","ctrlKey","keyCode","style","fontWeight","sort","k","v","JSON","stringify","toJS","symbolChange","onSymbolChange","target","DigitsWidget","digits","tick","onDigitChange","onChange","trade_type","selected_digit","last_digit","last_contract","digits_info","display_status","is_digit_contract","is_ended","Digits","digits_array","is_trade_page","ChartTopWidgets","yAxiswidth","charts_ref","open_market","is_digits_widget_active","is_dark_mode_on","chart","isMobile","y_axis_width","ChartBottomWidgets","show_accumulators_stats","Widget","AccumulatorsStats","Screen","Loadable","loader","loading","render","loaded","Component","FormLayout","is_market_closed","is_trade_enabled","current_language","ACTIONS","AccumulatorsProfitLossText","current_spot","current_spot_time","profit","is_fading_in","setIsFadingIn","is_sliding","setIsSliding","formatted_profit","formatMoney","prev_profit_tenth","split","current_profit_tenth","setCurrentProfitTenth","profit_tenth_ref","interval_id_ref","fading_in_timeout_id","sliding_timeout_id","profit_portions_array","profit_whole_number","profit_tenth","profit_hundredths","slice","won","sign","runThroughTenthDigit","interval_ms","start","end","clearInterval","interval_id","setInterval","abs","delta","markerRef","setPosition","epoch","price","overlap_y_axis","getCurrencyDisplayCode","AccumulatorsProfitLossTooltip","alignment","exit_tick","exit_tick_time","high_barrier","should_show_profit_text","is_tooltip_open","setIsTooltipOpen","tooltip_timeout","onCloseDelayed","onHoverOrTapHandler","opposite_arrow_position","horizontal","el","onTouchStart","onTouchEnd","Money","amount","has_sign","show_currency","AccumulatorsChartElements","has_crossed_accu_barriers","accumulators_positions","contract_id","marker_config","ContentComponent","marker_content_props","ToolbarWidgets","updateChartType","updateGranularity","portalNodeId","onChartType","onGranularity","isDesktop","searchInputClassName","BottomWidgetsMobile","setTick","setDigits","Trade","form_components","getFirstOpenMarket","should_show_active_symbols_loading","is_chart_loading","onUnmount","prepareTradeStore","setContractTypes","setMobileDigitView","setIsDigitsWidgetActive","show_digits_stats","is_accumulator","is_synthetics_available","is_turbos","NotificationMessages","notification_messages_ui","is_market_unavailable_visible","has_only_forward_starting_contracts","should_show_multipliers_onboarding","is_dark_theme","network_status","try_synthetic_indices","setTrySyntheticIndices","try_open_markets","setTryOpenMarkets","category","setCategory","subcategory","setSubcategory","swipe_index","setSwipeIndex","setMarket","markets_to_search","market_cat","market_subcat","selectMultipliers","bottomWidgets","d","t","onTryOtherMarkets","topWidgets","params","form_wrapper_class","chart_height_offset","Div100vhContainer","is_disabled","height_offset","fallback","ChartTrade","SwipeableWrapper","index","is_swipe_disabled","SmartChartWithRef","SmartChart","innerRef","end_epoch","accumulator_barriers_data","accumulator_contract_barriers_data","chart_type","granularity","markers_array","is_chart_layout_default","is_chart_countdown_visible","is_socket_opened","should_show_eu_content","chartStateChange","main_barrier","main_barrier_flattened","extra_barriers","barriers_flattened","exportLayout","setChartStatus","chart_layout","wsForget","wsForgetStream","wsSendRequest","wsSubscribe","has_alternative_source","settings","assetInformation","countdown","isHighestLowestMarkerEnabled","language","whitespace","minimumLeftBars","barriers","max_ticks","crosshair","crosshairTooltipLeftAllow","showLastDigitStats","chartControlsWidgets","chartStatusListener","chartType","initialData","activeSymbols","parse","chartData","feedCall","enabledNavigationWidget","enabledChartFooter","maxTick","requestAPI","requestForget","requestForgetStream","requestSubscribe","allowTickChartTypeOnly","stateChangeListener","isConnectionOpened","clearChart","toolbarWidget","importedLayout","onExportLayout","shouldFetchTradingTimes","hasAlternativeSource","getMarketsOrder","synthetic_index","has_synthetic_index","s","market","a","b","display_name","reduce","arr","push","should_zoom_out_on_yaxis","yAxisMargin","top","isLive","leftMargin","accumulators_high_barrier","getDecimalPlaces","routesConfig","ContractDetails","moduleLoader","route_default","component","getTitle","is_authenticated","exact","BinaryLink","active_class","normalizePath","route","getRoutesConfig","activeClassName","Route","pathname","removeBranchName","location","is_valid_route","lastIndexOf","r","validateRoute","Redirect","is_logging_in","is_logged_in","redirectToLogin","getLanguage","default_subroute","has_default_subroute","isEmptyObject","title","default_title","alternateLinkTagChange","canonicalLinkTagChange","Switch","idx","checkRoutingMatch","route_list","tradePageMountingMiddleware","path_from","path_to","match_patterns","callback","pattern","UILoader","Routes","history","passthrough","setTradeMountingPolicy","setSkipPrePostLifecycle","has_error","onUnmountPortfolio","setPromptHandler","route_to","flatMap","subroute","has_match","withRouter","ResultMobile","is_contract_won","PositionsModalCard","contract_update","current_tick","indicative","is_sell_requested","is_unsupported","profit_loss","sell_price","status","togglePositions","loader_el","is_multiplier","isMultiplierContract","isAccumulatorContract","is_crypto","isCryptoContract","has_progress_slider","has_ended","getEndTime","fallback_result","total_profit","getTotalProfit","should_show_sell","hasContractEntered","isOpen","getSymbolDisplayName","getMarketInformation","contract_options_el","ContractCard","getContractTypeDisplay","multiplier","getCardLabels","CurrencyBadge","isCryptocurrency","buy_price","payout","ProgressSliderMobile","start_time","date_start","expiry_time","date_expiry","ticks_count","tick_count","contract_vanilla_el","bid_price","entry_spot","TOTAL_PROFIT_LOSS","custom_card_header","custom_card_body","is_positions","custom_card_footer","custom_contract_el","should_show_result_overlay","contract_el","getContractPath","duration_unit","exit_spot","is_valid_to_sell","sell_time","positions_count","is_open","positions_toggle_class","active_positions_count","filtered_positions","is_empty","hidden_positions_ids","setHiddenPositionsIds","displayed_positions","every","hidden_position_id","closed_positions_ids","closeModal","Set","TransitionGroup","Modal","toggleModal","is_vertical_top","has_close_icon","positions_currency","positions_error","onPositionsSell","onPositionsCancel","modules","populateHeaderExtensions","onMountPositions","is_populating_account_list","cashier","general_store","onMountCashier","onMountCommon","setAccountSwitchListener","show_positions_toggle","show_component","populateHeaderfunction","header_items","waitForLogin","when","TradeFooterExtensions","populateFooterExtensions","populateFooter","TogglePositionsIcon","ChartSettingContainer","populateSettingsExtensions","populateSettings","menu_items","label","renderItemValue","onChangeSymbolAsync","ContractType","getValidationRules","rules","min","barrier_1","condition","barrier_count","func","options","inputs","barrier_2","input","trigger","start_date","expiry_date","contract_start_type","isTimeValid","isHourValid","isMinuteValid","start_moment","toMoment","start_moment_clone","clone","h","isSessionAvailable","sessions","minute","getMultiplierValidationRules","stop_loss","has_stop_loss","take_profit","has_take_profit","processPurchase","proposal_id","onChangeContractTypeList","contract_types_list","onChangeContractType","onChangeExpiry","contract_expiry_type","getExpiryType","duration_min_max","assertDuration","getDurationMinMaxValues","max","onChangeStartDate","root_store","expiry_type","obj_contract_start_type","obj_sessions","obj_start_time","obj_duration_units_list","duration_units_list","obj_duration_unit","obj_expiry_type","obj_expiry_date","obj_duration_min_max","obj_market_open_times","market_open_times","obj_market_close_times","market_close_times","obj_expiry_time","processInSequence","functions","snapshot","getSnapshot","assign","updateStore","processTradeParams","new_state","getMethodsList","duration_functions","getExpiryMethodsList","filtered_keys","ContractTypeHelper","StartDate","Duration","getHoveredColor","BARRIER_COLORS","errors","error_count","Errors","rule","is_rule_string","rule_object_name","rule_object_options","validator","getPreBuildDVRs","attribute","error_message","template","name1","name2","prototype","hasOwnProperty","call","ruleObject","Validator","getRuleObject","is_valid","is_ok","addFailure","check","clientInitDisposer","client_init_listener","logoutDisposer","logout_listener","local_storage_properties","networkStatusChangeDisposer","network_status_change_listener","partial_fetch_time","preSwitchAccountDisposer","pre_switch_account_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","session_storage_properties","store_name","switchAccountDisposer","switch_account_listener","themeChangeDisposer","theme_change_listener","validation_errors","validation_rules","retrieveFromStorage","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","assertHasValidCache","defineProperty","enumerable","writable","setupReactionForLocalStorage","setupReactionForSessionStorage","reaction","saveToStorage","STORAGES","LOCAL_STORAGE","SESSION_STORAGE","Symbol","setItem","sessionStorage","local_storage_snapshot","getItem","session_storage_snapshot","propertyName","messages","concat","property","intercept","change","newValue","validation_rules_for_property","validation_rules_for_trigger","isPassed","get","listener","switch_broadcast","switchEndSignal","isProduction","console","pre_switch_broadcast","setPreSwitchAccount","has_logged_out","setLogout","initialized_broadcast","setInitialized","is_network_online","is_online","has_real_account_signup_ended","setRealAccountSignupEnd","loginid","reactions","act","freeze","removeBarrier","findIndex","splice","ChartBarrierStore","low_barrier","onChartBarrierChange","line_style","not_draggable","lineStyle","shade","shadeColor","high","low","relative","draggable","hidePriceLines","hideBarrierLine","hideOffscreenLine","updateBarriers","updateBarrierShade","onBarrierChange","updateBarrierColor","computed","default_shade","BARRIER_LINE_STYLES","bind","has_barrier","should_display","CONTRACT_SHADES","is_relative","barriers_list","barriersToString","is_dark_mode","DEFAULT_SHADES","LIMIT_ORDER_TYPES","STOP_OUT","TAKE_PROFIT","STOP_LOSS","setLimitOrderBarriers","is_over","limit_order","isLimitOrderBarrierSupported","limit_orders","obj_limit_order","obj_barrier","showOffscreenArrows","isSingleBarrier","opacityOnOverlap","l","ACTION","STATE_TYPES","SUBFORM_NAME","getChartAnalyticsData","state","option","indicator_type_form_events","market_type_form_events","chart_type_name","time_interval_name","event_type","open_close_action","getChartTypeFormAnalyticsData","indicator_type_name","indicators_category_name","is_info_open","search_string","indicators_subform","info_open_close_action","subform_name","getIndicatorTypeFormAnalyticsData","is_favorite","symbol_category","tab_market_name","market_type_name","favorites_action","getMarketTypeFormAnalyticsData","g_subscribers_map","TradeStore","is_trade_component_mounted","is_purchase_enabled","is_equal","has_equals_only","previous_symbol","basis","basis_list","stake_boundary","expiry_epoch","hovered_barrier","barrier_choices","start_dates_list","is_mobile_digit_view_selected","proposal_info","purchase_info","accumulator_range_list","growth_rate","maximum_payout","maximum_ticks","ticks_history_stats","tick_size_barrier","multiplier_range_list","has_cancellation","commission","cancellation_price","stop_out","expiration","hovered_contract_type","cancellation_duration","cancellation_range_list","long_barriers","short_barriers","strike_price_choices","is_trade_params_expanded","contract_purchase_toast_box","debouncedProposal","debounce","requestProposal","proposal_requests","is_purchasing_contract","initial_barriers","is_initial_barrier_applied","should_skip_prepost_lifecycle","clearContracts","contracts","setMainBarrier","barrier2","isBarrierSupported","onPurchase","disablePurchaseButtons","el_purchase_value","getElementsByClassName","el_purchase_buttons","classList","prev_chart_layout","req","current_spot_data","quote","prices","echo_req","ticks_history","updateAccumulatorBarriersData","stream_id","ServerTime","msg_type","time","unix","has_open_accu_contract","setHoveredBarrier","setDefaultGrowthRate","accountSwitcherListener","barrier_pipsize","changeDurationValidationRules","clearContractPurchaseToastBox","clearLimitOrderBarriers","clearPurchaseInfo","clientInitListener","enablePurchase","forgetAllProposal","initAccountCurrency","is_symbol_in_active_symbols","loadActiveSymbols","logoutListener","networkStatusChangeListener","onAllowEqualsChange","onChangeMultiple","onHoverPurchase","onProposalResponse","override","preSwitchAccountListener","pushPurchaseDataToGtm","refresh","resetAccumulatorData","resetErrorServices","resetPreviousSymbol","setActiveSymbols","setBarrierChoices","setContractPurchaseToastbox","setDefaultSymbol","setIsTradeParamsExpanded","setMarketStatus","setPreviousSymbol","setStakeBoundary","setTradeStatus","themeChangeListener","updateSymbol","date","resetEndTimeOnVolatilityIndices","setContractType","symbol_info","exchange_is_open","open_accu_contract","active_positions","clearAccumulatorBarriersData","should_skip","should_set_default_symbol","should_show_loading","code","pickDefaultSymbol","symbol_to_update","processNewValuesAsync","runInAction","is_on_mf_account","landing_company_shortcode","clients_country","showError","showUnavailableLocationError","showDigitalOptionsUnavailableError","platform_name_trader","getPlatformSettings","link","platform_name_mt5","contract_categories","setSelectedContractType","default_currency","selectCurrency","hovered_value","getBarrierPipSize","isDigitTradeType","is_tick_contract","setServicesError","services_error","buy","contract_data","longcode","extractInfoFromShortcode","isDigitContractType","toUpperCase","addContract","onBuyResponse","openPositionsDrawer","is_unwelcome","cloneObject","parseInt","is_changed_by_user","obj_old_values","should_forget_first","obj_new_values","prev_chart_type","prev_granularity","savePreviousChartMode","prev_currency","has_currency_changed","should_reset_stake","getMinPayout","setHasOnlyForwardingContracts","is_advanced_duration","bool","event","bom_ui","contract","barrier1","positions_drawer","toolbar_position","chart_asset_info","is_chart_asset_info_visible","gtm","pushDataLayer","requests","createProposalRequests","resetPurchaseStates","prev_proposal_info","getPropertyValue","obj_prev_contract_basis","proposal","is_crypto_multiplier","getProposalInfo","MULTUP","cancellation","ask_price","order_amount","ACCU","barrier_spot_distance","ticks_stayed_in","last_tick_epoch","spot_time","previous_ticks_history_stats","new_ticks_history_stats","previous_history","previous_epoch","reverse","getUpdatedTicksHistoryStats","accumulators_low_barrier","error_id","getProposalErrorField","details","commission_match","field","max_stake","min_stake","limits","duration_options","convertDurationLimit","is_language_changing","Promise","resolve","toggleServicesErrorModal","notifications","setShouldShowPopups","new_currency","is_notifications_visible","toggleNotificationsModal","is_used","layout","startsWith","previousMaxTicks","isDone","isClosed","RudderStack","device_type","form_name","list","getAvailableContractTypes","unsupported_contract_types_list","findFirstOpenMarket","stored_barriers_data","getContractSubtype","is_active","ModulesStore","core_store","RootStore","pushwoosh","contract_replay","chart_barrier_store","configure","enforceActions","websocket","setWebsocket","TradeModals","initStore","TicksHistoryCounter","has_progress_dots","progress_dots_testid","should_emphasize_last_counter","ticks_history_counter_testid","should_highlight_last_counter","dot","ExpandedTicksHistory","history_text_size","rows","counter","AccumulatorsStatsManualModal","icon_classname","is_manual_open","toggleManual","getVideoSource","extension","getUrlBase","mp4_src","webm_src","should_header_stick_body","Loading","is_fullscreen","autoPlay","loop","onLoadedData","playsInline","preload","src","ROW_SIZES","is_expandable","is_collapsed","setIsCollapsed","setIsManualOpen","widget_title","acc","_el","desktop_row_size","mobile_row_size","row_size","MobileDialog","onClose","portal_element_id","visible","wrapper_classname","is_latest","is_lost","is_selected","is_won","percentage","display_percentage","parseFloat","is_selected_winning","is_max","is_min","w","cx","cy","fill","stroke","strokeWidth","strokeOpacity","strokeDasharray","join","strokeDashoffset","has_entry_spot","onSelect","latest_digit","stats","onLastDigitSpot","digit","spot","is_digit_selectable","is_digit_selected","transform","left","custom_color","display_array","dimension","digit_offset","digit_offset_mobile","handleSelect","digit_value","isSelectableDigitType","getOffset","last_contract_digit","latest_tick_pip_size","pip_size","latest_tick_ask_price","ask","latest_tick_digit","pop","barrier_map","val","Boolean","DigitsWrapper","onChangeStatus","has_contract","is_tick_ready","is_contract_elapsed","isContractElapsed","tick_stream","bid","tick_display_value","entry_tick","underlying_name","setStatus","setCurrentTick","setSpot","setIsSelectedWinning","setIsWon","setIsLost","Popover","classNameBubble","margin","getMarketNamesMap","displayName","PageError","header","error_code","redirect_urls","redirect_labels","classNameImage","image_url","ChartMarker","marker_props","div","BottomWidgets","portal","getElementById","active_trade_type","trade_type_name","findContractCategory","contract_types","ReactDOM","Toast","shouldUnescape","RecentTradeInfo","filtered_contracts","latest_tick_contract","isEnded","isDigitContract","TopWidgets","InfoBox","is_title_enabled","ChartTitleLocal","enabled","isNestedList","Module","setSmartChartsPublicPath","load","component_name","module","default","ChartTitle","ChartMode","DrawTools","Share","StudyLegend","Views","ToolbarWidget","FastMarker","ToastPopup","portal_id","new_portal_id","NetworkStatusToastError","setIsOpen","NetworkStatusToastErrorPopup","tooltip","contract_category_icon","getContractTypeCategoryIcons","All","Accumulators","Options","Multipliers","Turbos","unsupported_list","categories","contract_name","available_contract_types","list_item","getContractCategoryKey","getContractTypes","digitCategoriesMap","digitTypesMap","available_categories","trading_events","buildTradeTypesConfig","getArrayDefaultValue","getComponents","getDurationUnitsList","getDurationUnit","getDurationMinMax","getStartType","getStartDates","getValidTime","buildMoment","setMinuteMultipleByFive","getTradeTypes","getBarriers","getBasis","getAccumulatorRange","getBarrierChoices","getMultiplierRange","getCancellation","getEqualProps","contract_display","arr_new_values","c_type","config","hide_duration","duration_units","arr_units","obj","current_start_date","has_spot","forward_starting_dates","compare_moment","moment_obj","ceil","arr_basis","localized_basis","getLocalizedBasis","cur","bas","stored_barrier_choices","arr_multiplier","arr_cancellation_range","regex","should_show_cancellation","shouldShowCancellation","str","unit","unit_names","getUnitMap","name_plural","base_contract_type","exec","buildContractTypesConfig","has_contracts","contracts_for","available","start_type","getContractCategoriesConfig","sub_cats","durations","buildDurationConfig","buildBarriersConfig","buildForwardStartingConfig","growth_rate_range","multiplier_range","cancellation_range","stored_barrier_value","barrier_values","count","getContractType","arr_list","ct","getContractValues","obj_basis","obj_trade_types","obj_start_dates","obj_start_type","obj_duration_units_min_max","obj_accumulator_range_list","obj_barrier_choices","obj_multiplier_range_list","obj_cancellation","obj_equal","getFullContractTypes","getExpiryDate","proper_expiry_date","moment_start","moment_expiry","hasIntradayDurationUnit","isBefore","isAfter","isSameOrBefore","getExpiryTime","end_time","market_close_time","isArray","end_moment","expiry_sessions","minDate","diff","is_end_of_day","is_end_of_session","subtract","getSessions","getStartTime","getTradingEvents","trading_times_response","trading_times_data","events","getContractCategories","map_error_field","error_field","elem","el_error","getElementsByName","offsetWidth","offsetHeight","returns","stake","display_value","contract_basis","payout_per_point","o","has_increased","obj_contract_basis","accumulators_details","contract_details","has_error_details","new_req","createProposalRequestForContract","type_of_contract","obj_accumulator","obj_expiry","obj_multiplier","convertToUnix","setProposalMultiplier","setProposalAccumulator","isBeforeDate","should_only_check_hour","now_moment","second","session","isBetween","TraderStoreContext","TraderStoreProvider","Provider","market_info","extracted","RegExp","common_store","clock_started","pending","PromiseClass","require","init","timePromise","promise","exports","static_hash","reject","createElement","tag_name","attributes","attr","textContent","html","setAttribute","getStaticHash","querySelector","getAttribute"],"sourceRoot":""}